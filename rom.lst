              	; --------------------------------------
              	; zasm: assemble "rom.asm"
              	; date: 2020-05-01 08:31:43
              	; --------------------------------------


              	; 
              	; ------------------------------------------------------------------------------
              	; LM80C - BOOTLOADER - R3.8
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. Code and computer schematics are released under
              	; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
              	; kind of warranty: you can use them at your own risk.
              	; You are free to use them for any non-commercial use: you are only asked to
              	; maintain the copyright notices, include this advice and the note to the 
              	; attribution of the original version to Leonardo Miliani, if you intend to
              	; redistribuite them.
              	; https://www.leonardomiliani.com
              	; 
              	; Please support me by visiting the following links:
              	; Main project page: https://www.leonardomiliani.com
              	; Schematics and code: https://github.com/leomil72/LM80C
              	; Videos about the computer: https://www.youtube.com/user/leomil72/videos
              	; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
              	; ------------------------------------------------------------------------------
              	
              	; ADDRESS DECODING (bits A6/A5/A4)
              	; 0000xxxx : PIO
              	; 0001xxxx : CTC
              	; 0010xxxx : SIO
              	; 0011xxxx : VDP
              	; 0100xxxx : PSG
              	
              	; label defining for PIO (Parallel Input/Output)
0000:         	PIO_DA          equ %00000000
0001:         	PIO_DB          equ %00000001
0002:         	PIO_CA          equ %00000010
0003:         	PIO_CB          equ %00000011
              	
              	; label defining for CTC (Counter Timer Circuit)
0010:         	CTC_CH0         equ %00010000
0011:         	CTC_CH1         equ %00010001
0012:         	CTC_CH2         equ %00010010
0013:         	CTC_CH3         equ %00010011
              	
              	;label defining for SIO (Serial Input/Output)
0022:         	SIO_CA          equ %00100010
0023:         	SIO_CB          equ %00100011
0020:         	SIO_DA          equ %00100000
0021:         	SIO_DB          equ %00100001
              	
              	;label defining for VDP (Video Display Processor)
0030:         	VDP_DAT         equ %00110000
0032:         	VDP_SET         equ %00110010
              	
              	; label defining for PSG (Programmable Sound Generator)
0040:         	PSG_REG         equ %01000000
0041:         	PSG_DAT         equ %01000001
              	
              	; Interrupt-driven serial I/O interface lead by the Z80 SIO to run modified
              	; NASCOM Basic 4.7 - Full input buffering with incoming data hardware handshaking
              	; Handshake shows full before the buffer is totally filled to allow run-on from the sender
              	
0058:         	SER_BUFSIZE     equ     $58
0050:         	SER_FULLSIZE    equ     $50
0005:         	SER_EMPTYSIZE   equ     $05
              	
8000:         	SERBUF_START    equ     $8000           ; RAM starts here
8058:         	serInPtr        equ     SERBUF_START + SER_BUFSIZE
805A:         	serRdPtr        equ     serInPtr+2
805C:         	serBufUsed      equ     serRdPtr+2
805D:         	basicStarted    equ     serBufUsed+1
0058:         	bufWrap         equ     (SERBUF_START + SER_BUFSIZE) & $FF
818D:         	TEMPSTACK       equ     CURPOS - 3      ; top of BASIC line input buffer so is "free ram" when BASIC resets
              	
              	;------------------------------------------------------------------------------
              	; BASE MEMORY - RESET LOCATION - $0000
              	; the CPU jumps to 0000h after a reset
0000:         	                org     $0000
0000: F3      	RST00:          di                      ; be sure that INTs are disabled
0001: C35102  	                jp      INIT_HW         ; jump to system initialization
              	
              	;------------------------------------------------------------------------------
              	; send a character over serial
0004: FFFFFFFF	                org     $0008
0008: C3F201  	RST08:          jp      TXA
              	
              	;------------------------------------------------------------------------------
              	; interrupt vector when SIO has a char available in its buffer
000B: FF      	                org     $000C
000C: 0001    	                defw    RX_CHA_AVAIL
              	
              	;------------------------------------------------------------------------------
              	; interrupt vector for SIO special conditions (i.e. buf overrun)
              	                org     $000E
000E: 9601    	                defw    SPEC_RX_CONDITON
              	
              	;------------------------------------------------------------------------------
              	; receive a character over serial
              	                org     $0010
0010: C3C801  	RST10:          jp      RXA
              	
              	;------------------------------------------------------------------------------
              	; interrupt vector for CH3 Timer - used for 100ths/s counter
0013: FFFFFF  	                org     $0016
0016: 3202    	                defw    CH3_TIMER
              	
              	;------------------------------------------------------------------------------
              	; check serial status
              	
              	                org     $0018
0018: C31F02  	RST18:          jp      CKINCHAR
              	
              	;------------------------------------------------------------------------------
              	; interrupt routine for NMI
001B: FFFFFFFF	                org     $0066
001F: FF...   	
0066: C36180  	                jp      NMIUSR              ; jump to execute NMI service routine
              	
              	;------------------------------------------------------------------------------
              	
0069: FFFFFFFF	                org     $00A0
006D: FF...   	
00A0: 4C4D3830	                defb    $4C,$4D,$38,$30,$43,$20,$43,$4F
00A4: 4320434F	
00A8: 4C4F5200	                defb    $4C,$4F,$52,$00,$00,$00,$00,$00
00AC: 00000000	
00B0: 434F4D50	                defb    $43,$4F,$4D,$50,$55,$54,$45,$52
00B4: 55544552	
00B8: 20283230	                defb    $20,$28,$32,$30,$32,$30,$29,$00
00BC: 32302900	
00C0: 44657369	                defb    $44,$65,$73,$69,$67,$6E,$65,$64
00C4: 676E6564	
00C8: 20627900	                defb    $20,$62,$79,$00,$00,$00,$00,$00
00CC: 00000000	
00D0: 4C656F6E	                defb    $4C,$65,$6F,$6E,$61,$72,$64,$6F
00D4: 6172646F	
00D8: 204D696C	                defb    $20,$4D,$69,$6C,$69,$61,$6E,$69
00DC: 69616E69	
00E0: 46572033	FWVER:          defm    'FW 3.8',$20,__date__,$20,__time__,$00
00E4: 2E382032	
00E8: 3032302D	
00EC: 30352D30	
00F0: 31203038	
00F4: 3A33313A	
00F8: 343300  	
              	;------------------------------------------------------------------------------
              	; interrupt driven routine to get chars from Z80 SIO
00FB: FFFFFFFF	                org     $0100
00FF: FF      	
0100: F5      	RX_CHA_AVAIL:   push    AF              ; store A
0101: E5      	                push    HL              ; and HL
0102: CD6001  	                call    A_RTS_OFF       ; disable RTS line
0105: DB20    	                in      A,(SIO_DA)      ; read char from RX buffer into A
0107: 321F82  	                ld      (TMPKEYBFR),A   ; store it into the temp key buffer
010A: CD3301  	                call    CHARINTOBFR     ; sub-routine to put the char into the input buffer
010D: 3A1F82  	                ld      A,(TMPKEYBFR)   ; retrieve char
0110: 32E081  	                ld      (CHR4VID),A     ; write into buffer for video printing
0113: FE0D    	                cp      CR              ; is it RETURN?
0115: CA1D01  	                jp      Z,CNTRXCHA      ; yes, continue
0118: FE20    	                cp      $20             ; is it another control char (code < 32)?
011A: DA2E01  	                jp      C,LVRXCHA       ; yes, leave w/o printing it on video nor sending back to serial
011D: F5      	CNTRXCHA:       push    AF              ; store char
011E: AF      	                xor     A
011F: 321D82  	                ld      (KBDNPT),A      ; a char from serial is like a char printed by BASIC
0122: 3ADF81  	                ld      A,(PRNTVIDEO)   ; load status of print-on-video
0125: FE01    	                cp      $01             ; is the print on video on?
0127: CC8B06  	                call    Z,CHAR2VID      ; yes, print on screen
012A: F1      	                pop     AF              ; retrieve char
012B: CDF201  	                call    TXA             ; send back to serial
012E: E1      	LVRXCHA:        pop     HL              ; retrieve HL
012F: F1      	                pop     AF              ; and A
0130: FB      	                ei                      ; re-enable interrupts
0131: ED4D    	                reti                    ; and exit
              	
              	; put a char into the input buffer, char is into A
              	; this sub is called both from the ISR "RX_CHA_AVAIL" and when
              	; the RETURN key is pressed on the keyboard
0133: F5      	CHARINTOBFR:    push    AF              ; store it
0134: 3A5C80  	                ld      A,(serBufUsed)  ; load buffer size
0137: FE58    	                cp      SER_BUFSIZE     ; if buffer is not full
0139: 2002    	                jr      NZ,NOTFULL      ; then store the char
013B: F1      	                pop     AF              ; else drop it
013C: C9      	                ret                     ; and exit
013D: 2A5880  	NOTFULL:        ld      HL,(serInPtr)   ; buffer is not full, can store the char
0140: 23      	                inc     HL              ; load pointer to find first free cell
0141: 7D      	                ld      A,L             ; only check low byte because buffer<256
0142: FE58    	                cp      bufWrap         ; check if the pointer is at the last cell
0144: 2003    	                jr      NZ,NOTWRAP      ; if not then continue
0146: 210080  	                ld      HL,SERBUF_START ; else load the address of the first cell
0149: 225880  	NOTWRAP:        ld      (serInPtr),HL   ; store the new pointer
014C: F1      	                pop     AF              ; then recover the char
014D: 77      	                ld      (HL),A          ; and store it in the appropriate cell
014E: 3A5C80  	                ld      A,(serBufUsed)  ; load the size of the input buffer
0151: 3C      	                inc     A               ; increment it
0152: 325C80  	                ld      (serBufUsed),A  ; and store the new size
0155: FE50    	                cp      SER_FULLSIZE    ; check if input buffer is full
0157: D8      	                ret     C               ; exit if buffer is not full
0158: 3A2282  	                ld      A,(SERIALS_EN)  ; check if serial 1 is open
015B: 1F      	                rra                     ; bit 0 into Carry: if Carry is 1 then serial 0 is open and...
015C: DC6001  	                call    C,A_RTS_OFF     ; ...stop receiving further chars
015F: C9      	                ret
              	
              	;-------------------------------------------------------------------------------
              	; Z80 SIO MANAGEMENT
              	;-------------------------------------------------------------------------------
              	; disable RTS:
              	; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
0160: F5      	A_RTS_OFF:      push    AF              ; store A
0161: 3E05    	                ld      A,%00000101     ; write into WR0: select WR5
0163: D322    	                out     (SIO_CA),A
0165: 3A2382  	                ld      A,(SERABITS)    ; load data bits
0168: F628    	                or      %00101000       ; TX enable; RTS disable
016A: D322    	                out     (SIO_CA),A      ; send setting
016C: F1      	                pop     AF              ; retrieve A
016D: C9      	                ret                     ; exit
              	
              	; enable RTS
              	; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
016E: F5      	A_RTS_ON:       push    AF              ; store A
016F: 3E05    	                ld      A,%00000101     ; write into WR0: select WR5
0171: D322    	                out     (SIO_CA),A
0173: 3A2382  	                ld      A,(SERABITS)    ; load data bits
0176: F62A    	                or      %00101010       ; TX enable; RTS enable
0178: D322    	                out     (SIO_CA),A      ; send setting
017A: F1      	                pop     AF              ; retrieve A
017B: C9      	                ret                     ; return
              	
              	; disable SIO RX channel A
017C: F5      	SIO_A_DI:       push    AF              ; store A
017D: 3E03    	                ld      A,%00000011     ; write into WR0: select WR3
017F: D322    	                out     (SIO_CA),A
0181: 3A2382  	                ld      A,(SERABITS)    ; load the serial bits; RX disabled; auto enable is OFF
0184: D322    	                out     (SIO_CA),A
0186: F1      	                pop     AF              ; retrieve A
0187: C9      	                ret                     ; return
              	
              	; enable SIO RX channel A
0188: F5      	SIO_A_EI:       push    AF              ; store A
0189: 3E03    	                ld      A,%00000011     ; write into WR0: select WR3
018B: D322    	                out     (SIO_CA),A      ; select register
018D: 3A2382  	                ld      A,(SERABITS)    ; load the serial data bits
0190: CBC7    	                set     0,A             ; set RX enabled; auto enable is OFF
0192: D322    	                out     (SIO_CA),A      ; send setting to SIO
0194: F1      	                pop     AF              ; retrieve A
0195: C9      	                ret
              	
              	
              	; special SIO condition (i.e., buffer overrun)
              	; if buffer overruns then show an error, empty the RX buffer and send
              	; a break char
0196:         	SPEC_RX_CONDITON:
0196: F5      	                push    AF
0197: E5      	                push    HL
0198: CD6001  	                call    A_RTS_OFF       ; disable RTS
019B: CD7C01  	                call    SIO_A_DI        ; disable RX on ch. A
019E: 3A2282  	                ld      A,(SERIALS_EN)  ; load serial status
01A1: CB97    	                res     2,A             ; disable RX on port 1
01A3: 322282  	                ld      (SERIALS_EN),A  ; store new serial status 
01A6: DB01    	                in      A,(PIO_DB)      ; read status LEDs
01A8: CBE7    	                set     4,A             ; set 5th pin ON
01AA: D301    	                out     (PIO_DB),A      ; send new setting
01AC: 3E30    	                ld      A,%00110000     ; write into WR0: error reset, select WR0
01AE: D322    	                out     (SIO_CA),A      ; send command to SIO
01B0: 3E03    	                ld      A,CTRLC
01B2: CD3301  	                call    CHARINTOBFR     ; send CTRL-C to BASIC
01B5: AF      	EMPTYCHABFR:    xor     A
01B6: D322    	                out     (SIO_CA),A      ; write to WR0, select RR0
01B8: DB22    	                in      A,(SIO_CA)      ; read RR0 register
01BA: E601    	                and     $01             ; check if input buffer if empty
01BC: CAC301  	                jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then leave
01BF: DB20    	                in      A,(SIO_DA)      ; read chars
01C1: 18F2    	                jr      EMPTYCHABFR     ; repeat
01C3: E1      	CHABFREMPTY:    pop     HL
01C4: F1      	                pop     AF
01C5: FB      	                ei                      ; re-enable interrupts
01C6: ED4D    	                reti                    ; return from interrupt
              	
              	;------------------------------------------------------------------------------
              	; retrieve a char from the input buffer
01C8: 3A5C80  	RXA:            ld      A,(serBufUsed)  ; load the buffer size
01CB: A7      	                and     A               ; check if it's 0 (empty)
01CC: CAC801  	                jp      Z,RXA           ; if it's empty, wait for a char
01CF: F3      	                di                      ; disable interrupts
01D0: E5      	                push    HL              ; store HL
01D1: 2A5A80  	                ld      HL,(serRdPtr)   ; load pointer to first available char
01D4: 23      	                inc     HL              ; increment it (go to the next char)
01D5: 7D      	                ld      A,L             ; check if the end of the buffer has been reached
01D6: FE58    	                cp      bufWrap         ; (only check low byte because buffer<256)
01D8: 2003    	                jr      NZ,NOTRDWRAP    ; if not, jump straight
01DA: 210080  	                ld      HL,SERBUF_START ; else reload the starting address of the buffer
01DD: 225A80  	NOTRDWRAP:      ld      (serRdPtr),HL   ; store new pointer to the next char to read
01E0: 3A5C80  	                ld      A,(serBufUsed)  ; load buffer size
01E3: 3D      	                dec     A               ; decrement it
01E4: 325C80  	                ld      (serBufUsed),A  ; and store the new size
01E7: FE05    	                cp      SER_EMPTYSIZE   ; check if input buffer can be considered empty
01E9: 3003    	                jr      NC,RXA_EXIT     ; if not empty yet, then exit
01EB: CD6E01  	                call    A_RTS_ON        ; else re-enable receiving chars
01EE: 7E      	RXA_EXIT:       ld      A,(HL)          ; recover the char and return it into A
01EF: E1      	                pop     HL              ; retrieve HL
01F0: FB      	                ei                      ; re-enable interrupts
01F1: C9      	                ret                     ; return
              	
              	;------------------------------------------------------------------------------
              	; sends a char over the serial (trick for INTs from WikiTI)
              	; char is into A
01F2: F5      	TXA:            push    AF              ; store AF
01F3: C5      	                push    BC              ; store BC
01F4: 47      	                ld      B,A             ; store char
01F5: ED57    	                ld      A,I             ; when loading I into A, P/V is set to the value of IFF (P/V is set if INTs enabled)
01F7: EAFC01  	                jp      PE,CNTTXA       ; if set, jump over
01FA: ED57    	                ld      A,I             ; if not set, test again to fix "false negative" from interrupt occurring at first test
01FC: F5      	CNTTXA:         push    AF              ; store current P/V flag
01FD: F3      	                di                      ; disable INTs
01FE: 3A2282  	                ld      A,(SERIALS_EN)  ; load serial status
0201: FE05    	                cp      %00000101       ; check if serial 1 is open and RX/TX is enabled 
0203: 2006    	                jr      NZ,TXA_EXIT     ; no, jump over
0205: 78      	                ld      A,B             ; retrieve char
0206: D320    	                out     (SIO_DA),A      ; send char to the SIO
0208: CD1302  	                call    TX_EMP          ; wait for outgoing char to be sent
020B: F1      	TXA_EXIT:       pop     AF              ; retrieve P/V flag
020C: E21002  	                jp      PO,EXTXA        ; if P is reset, INTs were disabled so we can leave right now
020F: FB      	                ei                      ; INTs were enabled, so re-enable interrupts
0210: C1      	EXTXA:          pop     BC              ; retrieve BC
0211: F1      	                pop     AF              ; retrieve AF
0212: C9      	                ret                     ; return
              	
              	;------------------------------------------------------------------------------
              	; wait until outgoing serial has been sent
0213: 97      	TX_EMP:         sub     A               ; set A to 0
0214: 3C      	                inc     A               ; set A to 1
0215: D322    	                out     (SIO_CA),A      ; write to WR0, select RR1
0217: DB22    	                in      A,(SIO_CA)      ; read RR1 register
0219: CB47    	                bit     0,A             ; check if all chars have been sent
021B: CA1302  	                jp      Z,TX_EMP        ; if not (bit 0 = 0) then retrieve
021E: C9      	                ret                     ; else exit
              	
              	
              	;------------------------------------------------------------------------------
              	; check if there is some chars into the buffer
021F: 3A5C80  	CKINCHAR        ld      A,(serBufUsed)  ; load char in buffer
0222: A7      	                and     A               ; compare to 0
0223: C9      	                ret                     ; return
              	
              	;------------------------------------------------------------------------------
              	; print a text from memory, and terminate when $00 is found
0224: 7E      	RAWPRINT:       ld      A,(HL)          ; load character from memory cell pointed by HL
0225: B7      	                or      A               ; is it $00 (end string)?
0226: C8      	                ret     Z               ; Yes, then return
0227: 32E081  	                ld      (CHR4VID),A     ; store char
022A: F3      	                di
022B: CD8B06  	                call    CHAR2VID        ; and send it to screen
022E: FB      	                ei
022F: 23      	                inc     HL              ; and select the next one
0230: 18F2    	                jr      RAWPRINT        ; repeat
              	
              	;-------------------------------------------------
              	; Interrupt service routine (ISR) for CH3 timer
              	; this is used to increment the 100ths of a second counter and for cursor flashing
0232: F5      	CH3_TIMER:      push    AF              ; save regs. A,
0233: C5      	                push    BC              ; BC,
0234: D5      	                push    DE              ; DE,
0235: E5      	                push    HL              ; HL
0236: 21CE81  	                ld      HL,TMRCNT       ; load starting address of the timer
0239: 0604    	                ld      B,$04           ; 4 bytes to check
023B: 34      	INCTMR3:        inc     (HL)            ; increment timer
023C: 2003    	                jr      NZ,CHKCRSR      ; if not zero then exit (finished increment)
023E: 23      	                inc     HL              ; if yes, there was an overflow, so increment next byte
023F: 10FA    	                djnz    INCTMR3         ; repeat for 4 bytes
0241: CD2407  	CHKCRSR:        call    FLASHCURSOR     ; call the flashing cursor routine
0244: CDDE0B  	                call    MNGSNDS         ; call the tone managemenet
0247: CD3F0C  	                call    KEYBOARD        ; read the keyboard inputs
024A: E1      	                pop     HL              ; retrieve HL,
024B: D1      	                pop     DE              ; DE,
024C: C1      	                pop     BC              ; BC,
024D: F1      	                pop     AF              ; and A
024E: FB      	                ei                      ; re-enable interrupts
024F: ED4D    	                reti                    ; exit from ISR
              	
              	;------------------------------------------------------------------------------
              	;------------------------------------------------------------------------------
              	; HARDWARE INITIALISATION
              	; first run - setup HW & SW
              	;
0251: 218D81  	INIT_HW:        ld      HL,TEMPSTACK    ; load temp stack pointer
0254: F9      	                ld      SP,HL           ; set stack to temp stack pointer
0255: 210080  	                ld      HL,SERBUF_START ; set beginning of input buffer
0258: 225880  	                ld      (serInPtr),HL   ; for incoming chars to store into buffer
025B: 225A80  	                ld      (serRdPtr),HL   ; and for chars to be read from buffer
025E: AF      	                xor     A               ; reset A
025F: 325C80  	                ld      (serBufUsed),A  ; actual buffer size is 0
0262: 322282  	                ld      (SERIALS_EN),A  ; set serial ports status to OFF
0265: CDD602  	                call    HELLOWRLD       ; little serial blink with LEDs
0268: CDFB02  	                call    initCTC         ; configure CTC, then...
026B: CD7C0B  	                call    initPSG         ; ...configure PSG
026E: CD7104  	                call    SHOW_LOGO       ; show computer logo
0271: 1E01    	                ld      E,$01           ; E chooses the video mode: 1:graphics 1
0273: CD5D03  	                call    initVDP         ; set video display
0276: AF      	                xor     A
0277: ED47    	                ld      I,A             ; set high byte of interrupt vectors to point to page 0
0279: ED5E    	                im      2               ; interrupt mode 2
027B: FB      	                ei                      ; enable interrupts
              	                ; print system messages
027C: AF      	                xor     A               ; A=0 so...
027D: 321D82  	                ld      (KBDNPT),A      ; ...inputs don't come from keyboard
0280: 3C      	                inc     A               ; A=1...
0281: 32DF81  	                ld      (PRNTVIDEO),A   ; ...to activate the print-on-video
0284: 211A03  	                ld      HL,MSGTXT1      ; sign-on message
0287: CD2402  	                call    RAWPRINT        ; print message
028A: CD1508  	                call    CURSOR_ON       ; enable cursor
028D: 3A5D80  	                ld      A,(basicStarted); check if BASIC is already started
0290: FE59    	                cp      'Y'             ; to see if this is a power-up
0292: 2016    	                jr      NZ,COLDSTART    ; if not, then do a COLD start
0294: 214303  	                ld      HL,MSGTXT2      ; message to choose kind of start
0297: CD2402  	                call    RAWPRINT        ; print message
029A: AF      	                xor     A
029B: 32DF81  	                ld      (PRNTVIDEO),A   ; disable print-on-video
029E: CDC801  	CORW:           call    RXA             ; look for a pressed key
02A1: E6DF    	                and     %11011111       ; only UPPERCASE char
02A3: FE43    	                cp      'C'             ; cold start?
02A5: 200B    	                jr      NZ,CHECKWARM    ; no, let's check for warm start
02A7: CDBC02  	                call    ECHO_CHAR       ; echoes the char
02AA: 3E59    	COLDSTART:      ld      A,'Y'           ; yes, set the "BASIC started" flag
02AC: 325D80  	                ld      (basicStarted),A
02AF: C3A70E  	                jp      COLD            ; start BASIC COLD
02B2: FE57    	CHECKWARM:      cp      'W'
02B4: 20E8    	                jr      NZ,CORW         ; char not recognized, wait again
02B6: CDBC02  	                call    ECHO_CHAR       ; echoes the char
02B9: C3AA0E  	                jp      WARM            ; start BASIC WARM
              	
              	;-------------------------------------------------------------------------------
02BC: 32E081  	ECHO_CHAR:      ld      (CHR4VID),A     ; set char for video printing
02BF: AF      	                xor     A
02C0: 321D82  	                ld      (KBDNPT),A      ; input is not from keyboard
02C3: F3      	                di                      ; disable INTs
02C4: CD8B06  	                call    CHAR2VID        ; echoes back the pressed key,
02C7: 3E0D    	                ld      A,CR            ; then set a CR
02C9: 32E081  	                ld      (CHR4VID),A     ; set char for video printing
02CC: CD8B06  	                call    CHAR2VID        ; and send it to screen
02CF: FB      	                ei                      ; re-enable INTs
02D0: 3E01    	                ld      A,$01
02D2: 32DF81  	                ld      (PRNTVIDEO),A   ; re-enable video printing
02D5: C9      	                ret                     ; return to caller
              	                
              	;-------------------------------------------------------------------------------
              	; little serial blink with LEDs
02D6: 0E09    	HELLOWRLD:      ld      C,$09           ; 8 LEDs to be turned off + 1 more step to turn off the last LED
02D8: 3ECF    	                ld      A,%11001111     ; set mode 3 (mode control)
02DA: D303    	                out     (PIO_CB),A      ; for PIO port B
02DC: AF      	                xor     A               ; set pins to OUTPUT
02DD: D303    	                out     (PIO_CB),A      ; for port B
02DF: 3C      	                inc     A               ; LSB on
02E0: D301    	LEDLIGHT:       out     (PIO_DB),A      ; turn LEDs on/off for a "Supercar" sequence
02E2: 1E20    	                ld      E,$20           ; little delay
02E4: 0600    	DEC_E:          ld      B,$00           ; count to 256
02E6: 10FE    	COUNTER:        djnz    COUNTER         ; decrement inner counter
02E8: 1D      	                dec     E               ; decrement outer counter
02E9: 20F9    	                jr      NZ,DEC_E        ; finish delay
02EB: CB27    	                sla     A               ; shift reg.A to left 1 bit
02ED: 0D      	                dec     C               ; next LED
02EE: 20F0    	                jr      NZ,LEDLIGHT     ; all LEDs done? no, repeat
02F0: C9      	                ret                     ; return to caller
              	
              	;-------------------------------------------------------------------------------
              	; Z80 SIO default settings for channel A
02F1: 30      	SIO_A_SETS:     defb    %00110000       ; write into WR0: error reset, select WR0
02F2: 18      	                defb    %00011000       ; write into WR0: channel reset
02F3: 04      	                defb    %00000100       ; write into WR0: select WR4
02F4: 44      	                defb    %01000100       ; write into WR4: presc. 16x, 1 stop bit, no parity
02F5: 05      	                defb    %00000101       ; write into WR0: select WR5
02F6: E8      	                defb    %11101000       ; write into WR5: DTR on, TX 8 bits, BREAK off, TX on, RTS off
02F7: 01      	SIO_B_SETS:     defb    %00000001       ; write into WR0: select WR1
02F8: 04      	                defb    %00000100       ; write into WR1: status affects interrupt vectors
02F9: 02      	                defb    %00000010       ; write into WR0: select WR2
02FA: 00      	                defb    %00000000       ; write into WR2: set interrupt vector, but bits D3/D2/D1 of this vector
              	                                        ; will be affected by the channel & condition that raised the interrupt
              	                                        ; (see datasheet): in our example, 0x0C for Ch.A receiving A char, 0x0E
              	                                        ; for special conditions
              	;------------------------------------------------------------------------------
              	; Z80 CTC setting up
02FB:         	initCTC:
              	;CH0, CH1, & CH2 disabled
02FB: 3E03    	                ld      A,%00000011     ; interrupt off, timer mode, prescaler=16, don't care ext. TRG edge,
              	                                        ; start timer on loading constant, no time constant follows, software reset, command word
02FD: D310    	                out     (CTC_CH0),A     ; set CH0
02FF: D311    	                out     (CTC_CH1),A     ; set CH1
0301: D312    	                out     (CTC_CH2),A     ; set CH2
              	
              	;init CH3
              	;CH3 divides CPU CLK by 144*256 providing an interrupt signal at 100 Hz (1/100 sec).
              	;f = CPU_CLK/(144*256) => 3,686,400 / ( 36,864 ) => 100Hz
0303: 3EA7    	                ld      A,%10100111     ; interrupt on; timer mode; prescaler=256; don't care ext; automatic trigger;
              	                                        ; time constant follows; cont. operation; command word
0305: D313    	                out     (CTC_CH3),A     ; send to CH3
0307: 3E90    	                ld      A,$90           ; time constant - 90$ (144d)
0309: D313    	                out     (CTC_CH3),A     ; send to CH3
030B: 3E10    	                ld      A,%00010000     ; D7..D3 provide the first part of the int vector (in our case, $10), followed by
              	                                        ; D2..D1, provided by the CTC (they point to the channel), d0=interrupt word
              	                                        ; so int vector is 00010xx00
030D: D310    	                out     (CTC_CH0),A     ; send to CTC
              	                ; reset cells of 100ths of a second counter
030F: AF      	                xor     A               ; reset A
0310: 21CE81  	                ld      HL,TMRCNT       ; load TMR pointer
0313: 0604    	                ld      B,$04           ; 4 memory cells
0315: 77      	RESTMR:         ld      (HL),A          ; reset n-cell of TMR
0316: 23      	                inc     HL              ; next cell
0317: 10FC    	                djnz    RESTMR          ; repeat for 4 cells
0319: C9      	                ret
              	
              	;------------------------------------------------------------------------------
031A: 4C4D3830	MSGTXT1:        defm    "LM80C by Leonardo Miliani",CR
031E: 43206279	
0322: 204C656F	
0326: 6E617264	
032A: 6F204D69	
032E: 6C69616E	
0332: 690D    	
0334: 4669726D	                defm    "Firmware R3.8",CR,0
0338: 77617265	
033C: 2052332E	
0340: 380D00  	
0343: 0D      	MSGTXT2:        defb    CR
0344: 3C433E6F	                defm    "<C>old or <W>arm start? ",0
0348: 6C64206F	
034C: 72203C57	
0350: 3E61726D	
0354: 20737461	
0358: 72743F20	
035C: 00      	
              	; ------------------------------------------------------------------------------
              	; LM80C - VDP ROUTINES - R3.8
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. Code and computer schematics are released under
              	; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
              	; kind of warranty: you can use them at your own risk.
              	; You are free to use them for any non-commercial use: you are only asked to
              	; maintain the copyright notices, include this advice and the note to the 
              	; attribution of the original version to Leonardo Miliani, if you intend to
              	; redistribuite them.
              	; https://www.leonardomiliani.com
              	; 
              	; Please support me by visiting the following links:
              	; Main project page: https://www.leonardomiliani.com
              	; Schematics and code: https://github.com/leomil72/LM80C
              	; Videos about the computer: https://www.youtube.com/user/leomil72/videos
              	; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
              	; ------------------------------------------------------------------------------
              	;
              	;------------------------------------------------------------------------------
              	; VDP INITIALISATION
              	; initialize VDP for a specific graphics mode
              	; INPUT: E -> contains the graphics mode:
              	; 0=text; 1=graphics 1; 2=graphics 2; 3=multicolor; 4=extended graphics 2
035D: D5      	initVDP:        push    DE              ; store E
035E: CDB809  	                call    EMPTY_VRAM      ; reset VRAM
0361: CDD709  	                call    SET_GFX_MODE    ; load register settings
0364: CDCC09  	                call    EMPTY_RAM       ; reset RAM registers
0367: D1      	                pop     DE              ; restore reg. E
0368: AF      	                xor     A               ; reset A
0369: 47      	                ld      B,A             ; reset B (will be used later)
036A: 7B      	                ld      A,E             ; move E into A
036B: 32D481  	                ld      (SCR_MODE),A    ; store screen mode
036E: FE01    	                cp      $01             ; is it graphics 1 (A=1)?
0370: CAA703  	                jp      Z,G1MD          ; yes, jump over
0373: FE02    	                cp      $02             ; is it graphics 2 (A=2)?
0375: CAE303  	                jp      Z,G2MD          ; yes, jump over
0378: FE03    	                cp      $03             ; is it multicolor (A=3)?
037A: CA0504  	                jp      Z,MCMD          ; yes, jump over
037D: FE04    	                cp      $04             ; is it extended graphics 2 (A=4)?
037F: CA2804  	                jp      Z,EXG2MD        ; yes, jump over; otherwise, it must be $00 so we assume that it's text mode
              	
              	                ; LOAD VDP SETTINGS FOR SELECTED VIDEO MODE:
              	                ; TEXT MODE (G0)
0382:         	TXTMD:          ; load charset
0382: 60      	                ld      H,B
0383: 68      	                ld      L,B             ; HL=first pattern cell $0000
0384: CDF309  	                call    LOADCHARSET     ; load patterns into VRAM
              	                ; set cursor & video overlay
0387: AF      	                xor     A               ; reset A
0388: 32D881  	                ld      (SCR_CURS_X),A  ; set cursor position at X=0
038B: 32D981  	                ld      (SCR_CURS_Y),A  ; and Y=0
038E: 3E05    	                ld      A,$05           ; light blue
0390: 32E281  	                ld      (BKGNDCLR),A    ; set background/border color
0393: 3E28    	                ld      A,$28
0395: 32D281  	                ld      (SCR_SIZE_W),A  ; screen width = 40 cols
0398: 3E18    	                ld      A,$18
039A: 32D381  	                ld      (SCR_SIZE_H),A  ; screen height = 24 rows
039D: 110008  	                ld      DE,$0800
03A0: ED53D681	                ld      (SCR_NAM_TB),DE ; set name table address
03A4: C36604  	                jp      ENDVDPSET       ; execute the rest of the video setting
              	
              	                ; GRAPHICS 1 MODE (G1)
03A7:         	G1MD:           ; load pattern table
03A7: 68      	                ld      L,B
03A8: 60      	                ld      H,B             ; HL=first pattern cell $0000
03A9: CDF309  	                call    LOADCHARSET     ; load patterns into VRAM
              	                ; set cursor & video overlay
03AC: AF      	                xor     A               ; position cursor
03AD: 32D881  	                ld      (SCR_CURS_X),A  ; at X=0
03B0: 32D981  	                ld      (SCR_CURS_Y),A  ; and Y=0
03B3: 3E20    	                ld      A,$20
03B5: 32D281  	                ld      (SCR_SIZE_W),A  ; screen width = 32 cols
03B8: 3E18    	                ld      A,$18
03BA: 32D381  	                ld      (SCR_SIZE_H),A  ; screen height = 24 rows
03BD: 110018  	                ld      DE,$1800
03C0: ED53D681	                ld      (SCR_NAM_TB),DE ; set name table address
              	                ; load color table
03C4: 210020  	                ld      HL,$2000        ; color table start: $2000
03C7: CDC905  	                call    SETVDPADRS
03CA: 3E01    	                ld      A,$01           ; foreground color...
03CC: 32E181  	                ld      (FRGNDCLR),A    ; ...set to black
03CF: 3E0F    	                ld      A,$0F           ; background color...
03D1: 32E281  	                ld      (BKGNDCLR),A    ; ...set to white
03D4: 3E1F    	                ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
03D6: 0620    	                ld      B,$20           ; 32 bytes of colors
03D8: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
03DA: ED79    	LDCLRTBMD1:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
03DC: 00      	                nop
03DD: 00      	                nop
03DE: 10FA    	                djnz    LDCLRTBMD1      ; repeat for 32 bytes
03E0: C36604  	                jp      ENDVDPSET       ; execute the rest of the video setting
              	
              	                ; GRAPHICS 2 MODE (G2)
03E3: AF      	G2MD:           xor     A               ; position cursor
03E4: 32D881  	                ld      (SCR_CURS_X),A  ; at X=0
03E7: 32D981  	                ld      (SCR_CURS_Y),A  ; and Y=0
03EA: 32D281  	                ld      (SCR_SIZE_W),A  ; screen width = 256 pixels (0=256)
03ED: 3C      	                inc     A               ; black on...
03EE: 32E181  	                ld      (FRGNDCLR),A    ; ...foreground
03F1: 3E0F    	                ld      A,$0F           ; white on...
03F3: 32E281  	                ld      (BKGNDCLR),A    ; ...background
03F6: 3EC0    	                ld      A,$C0
03F8: 32D381  	                ld      (SCR_SIZE_H),A  ; screen height = 192 pixels
03FB: 110018  	                ld      DE,$1800
03FE: ED53D681	                ld      (SCR_NAM_TB),DE ; set name table address
0402: C36604  	                jp      ENDVDPSET       ; execute the rest of the video setting
              	
              	                ; MULTICOLOR MODE (G3)
0405: AF      	MCMD:           xor     A               ; position cursor
0406: 32D881  	                ld      (SCR_CURS_X),A  ; at X=0
0409: 32D981  	                ld      (SCR_CURS_Y),A  ; and Y=0
040C: 3E0F    	                ld      A,$0F           ; white color for...
040E: 32E281  	                ld      (BKGNDCLR),A    ; ...background and...
0411: 32E181  	                ld      (FRGNDCLR),A    ; ...foreground (even this is not used in MC)
0414: 3E40    	                ld      A,$40
0416: 32D281  	                ld      (SCR_SIZE_W),A  ; screen width = 64 blocks
0419: 3E30    	                ld      A,$30
041B: 32D381  	                ld      (SCR_SIZE_H),A  ; screen height = 48 blocks
041E: 110008  	                ld      DE,$0800
0421: ED53D681	                ld      (SCR_NAM_TB),DE ; set name table address
0425: C36604  	                jp      ENDVDPSET       ; execute the rest of the video setting
              	
              	                ; EXTENDED GRAPHICS 2 (G4)
0428:         	EXG2MD:         ; load pattern table
0428: 60      	                ld      H,B
0429: 68      	                ld      L,B             ; HL=first pattern cell $0000
042A: CDF309  	                call    LOADCHARSET     ; load patterns into VRAM
              	                ; set cursor & video overlay
042D: AF      	                xor     A               ; position cursor
042E: 32D881  	                ld      (SCR_CURS_X),A  ; at X=0
0431: 32D981  	                ld      (SCR_CURS_Y),A  ; and Y=0
0434: 3E20    	                ld      A,$20
0436: 32D281  	                ld      (SCR_SIZE_W),A  ; screen width = 32 cols
0439: 3E18    	                ld      A,$18
043B: 32D381  	                ld      (SCR_SIZE_H),A  ; screen height = 24 rows
043E: 110038  	                ld      DE,$3800
0441: ED53D681	                ld      (SCR_NAM_TB),DE ; set name table address
              	                 ; load color table
0445: 210020  	                ld      HL,$2000        ; color table start: $2000
0448: CDC905  	                call    SETVDPADRS
044B: 3E01    	                ld      A,$01           ; foreground color is...
044D: 32E181  	                ld      (FRGNDCLR),A    ; ...set to black
0450: 3E0F    	                ld      A,$0F           ; whitefor...
0452: 32E281  	                ld      (BKGNDCLR),A    ; ...background
0455: 3E1F    	                ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
0457: 1608    	                ld      D,$08           ; 8 pages of 
0459: 0600    	                ld      B,$00           ; 256 bytes of colors (total of 2,048 cells)
045B: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
045D: ED79    	LDCLRTBEX2:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
045F: 00      	                nop
0460: 00      	                nop
0461: 10FA    	                djnz    LDCLRTBEX2      ; repeat for 256 bytes
0463: 15      	                dec     D               ; did we fill up all the cells?
0464: 20F7    	                jr      NZ,LDCLRTBEX2   ; no, repeat
              	                ; LAST VDP SETTINGS
0466: CD2B08  	ENDVDPSET:      call    CURSOR_OFF      ; disable cursor
0469: CD3705  	                call    EMPTYVIDBUF     ; empty video buffer
046C: AF      	                xor     A
046D: 32DC81  	                ld      (SCR_ORG_CHR),A ; store byte used tochar used to empty the video buffer
0470: C9      	                ret                     ; return to caller
              	
              	
              	; show initial logo
0471: CDB809  	SHOW_LOGO:      call    EMPTY_VRAM      ; reset VRAM
              	                ; set VDP for G2 mode
0474: 0607    	                ld      B,$07           ; set only the first 7 registers
0476: 111000  	                ld      DE,$0010        ; load settings for G2 mode
0479: CDDF09  	                call    SET_GFX_MODE2   ; load register settings
047C: 1601    	                ld      D,$01           ; backdrop color set to black
047E: ED51    	                out     (C),D           ; send data to VDP
0480: ED79    	                out     (C),A           ; indicate the register to send data to
              	                ; set name table 
0482: 210018  	                ld      HL,$1800        ; name table address
0485: CDB605  	                call    SETNAMETABLE    ; set name table (load names into table)
0488: CDE504  	                call    ERASECLRTBL     ; erase color table (set foreground & background to black)
              	                ; set colors for logo
048B: 210028  	                ld      HL,$2800        ; 2nd page of color table
048E: CDC905  	                call    SETVDPADRS
0491: 0605    	                ld      B,5             ; 5 bands
0493: 213205  	                ld      HL,CLRTABLE
0496: 0E30    	                ld      C,VDP_DAT
0498: 1E08    	                ld      E,$08           ; 8 pixels each pattern        
049A: 1640    	RPT101:         ld      D,$40           ; 64 chars each band
049C: 7E      	                ld      A,(HL)
049D: ED79    	RPT102:         out     (C),A
049F: 00      	                nop
04A0: 1D      	                dec     E
04A1: 20FA    	                jr      NZ,RPT102
04A3: 1E08    	                ld      E,$08
04A5: 15      	                dec     D
04A6: 20F5    	                jr      NZ,RPT102
04A8: 23      	                inc     HL
04A9: 10EF    	                djnz    RPT101
              	                ; set pattern table
04AB: 210008  	                ld      HL,$0800        ; address of first cell of 2nd area of pattern table
04AE: 113C0A  	                ld      DE,LM80CLOGO    ; pointer to logo pattern
04B1: 0600    	                ld      B,$00           ; 256 bytes, 8 rows
04B3: CD1105  	RPT103:         call    LOADLOGOCHRS
04B6: 13      	                inc     DE              ; next logo pattern
04B7: 10FA    	                djnz    RPT103
04B9: 0620    	                ld      B,$20           ; repeat for another 2 rows
04BB: CD1105  	RPT104:         call    LOADLOGOCHRS
04BE: 13      	                inc     DE              ; next logo pattern
04BF: 10FA    	                djnz    RPT104
              	                ; show logo/message, play a beep and wait a while
04C1: 0602    	                ld      B,$02
04C3: AF      	                xor     A
04C4: 57      	                ld      D,A             ; 256 times
04C5: 5F      	                ld      E,A             ; x 256 times
04C6: 32E381  	                ld      (TMPBFR1),A     ; sound flag set to 0
04C9: 00      	DEC_D:          nop                     ; does nothing...
04CA: 00      	                nop
04CB: 00      	                nop
04CC: 00      	                nop
04CD: 00      	                nop
04CE: 00      	                nop
04CF: 1D      	                dec     E               ; decrement E
04D0: 20F7    	                jr      NZ,DEC_D        ; repeat until $00
04D2: 7A      	                ld      A,D
04D3: FE40    	                cp      $40             ; ...equal to 64
04D5: CCFD04  	                call    Z,SETBEEP       ; if yes, start sound
04D8: 15      	                dec     D
04D9: 20EE    	                jr      NZ,DEC_D        ; repeat
04DB: 3AE381  	                ld      A,(TMPBFR1)
04DE: FE02    	                cp      $02
04E0: C40905  	                call    NZ,BEEPOFF
04E3: 10E4    	                djnz    DEC_D
04E5:         	ERASECLRTBL:    ; erase color table
04E5: 3E11    	                ld      A,$11           ; foreground and background set to black
04E7: 160A    	                ld      D,$0A           ; 10 pages
04E9: 0600    	                ld      B,$00           ; 256 color cells per page
04EB: 210028  	                ld      HL,$2800        ; first cell of 2nd color table
04EE: CDC905  	                call    SETVDPADRS      ; send address
04F1: 0E30    	                ld      C,VDP_DAT       ; VDP address for passing data
04F3: ED79    	RPT100:         out     (C),A           ; send data
04F5: 00      	                nop
04F6: 00      	                nop                     ; little delay
04F7: 10FA    	                djnz    RPT100          ; repeat for entire page
04F9: 15      	                dec     D
04FA: 20F7    	                jr      NZ,RPT100       ; repeat for all the pages ($0A00 cells)
04FC: C9      	                ret                     ; return to caller
              	
              	; play a beep
04FD: 3AE381  	SETBEEP:        ld      A,(TMPBFR1)     ; check the already-beeped flag?
0500: B7      	                or      A               ; is it 0?
0501: C0      	                ret     NZ              ; no, exit
0502: 3C      	                inc     A               ; flag to 1
0503: 32E381  	                ld      (TMPBFR1),A     ; set sound
0506: C3AA0B  	                jp      WLCMBEEP        ; play a beep & return
              	
              	; beep off
0509: 3E02    	BEEPOFF:        ld      A,$02           ; flag for sound off
050B: 32E381  	                ld      (TMPBFR1),A     ; set flag
050E: C3B00B  	                jp      NOBEEP          ; stop beep and return
              	
              	
              	; used to load the chars that will compose the logo of the splash screen
0511: 1A      	LOADLOGOCHRS:   ld      A,(DE)          ; load a pattern char of the logo
0512: 87      	                add     A,A
0513: 87      	                add     A,A
0514: 87      	                add     A,A             ; multiply times 8 to get the offset
0515: C5      	                push    BC
0516: D5      	                push    DE              ; store BC and DE
0517: E5      	                push    HL              ; store VRAM address to write to
0518: 21FE49  	                ld      HL,LOGOFONT     ; start of logo font data
051B: 5F      	                ld      E,A
051C: 1600    	                ld      D,$00           ; put offset (A) into DE
051E: 19      	                add     HL,DE           ; get address of pattern data
051F: EB      	                ex      DE,HL           ; move address into DE
0520: E1      	                pop     HL              ; retrieve VRAM address
0521: 0608    	                ld      B,$08           ; 8 bytes per pattern
0523: CDC905  	                call    SETVDPADRS      ; set VDP address
0526: 0E30    	                ld      C,VDP_DAT
0528: 1A      	SNDLOGPT:       ld      A,(DE)          ; load data from RAM
0529: ED79    	                out     (C),A           ; and send to VRAM
052B: 13      	                inc     DE              ; next byte into RAM
052C: 23      	                inc     HL              ; next byte into VRAM (used in future iterations)
052D: 10F9    	                djnz    SNDLOGPT        ; repeat 8 times
052F: D1      	                pop     DE
0530: C1      	                pop     BC              ; retrieve BC & DE
0531: C9      	                ret                     ; return to caller
              	
0532:         	CLRTABLE:       equ $
0532: 181B1314	                defb    $18,$1B,$13,$14,$1D ; colors of background bands of the logo
0536: 1D      	
              	                
              	; empty video buffer
0537: 3AD481  	EMPTYVIDBUF:    ld      A,(SCR_MODE)    ; check screen mode
053A: FE02    	                cp      $02             ; is it G2 mode?
053C: CA6005  	                jp      Z,EMPTYG2       ; yes, jump over
053F: FE03    	                cp      $03             ; is it MC mode?
0541: CA9105  	                jp      Z,EMPTYMC       ; yes, jump over
0544: 3AD381  	                ld      A,(SCR_SIZE_H)  ; load height of screen
0547: 47      	                ld      B,A             ; move rows into B
0548: AF      	                xor     A               ; filling char is $00
0549: 2AD681  	                ld      HL,(SCR_NAM_TB) ; load the name table address
054C: CDC905  	                call    SETVDPADRS      ; send address to VDP
054F: 0E30    	                ld      C,VDP_DAT       ; VDP address for passing data
0551: 5F      	LDCOLSTOEMPTY:  ld      E,A             ; store filling char into E
0552: 3AD281  	                ld      A,(SCR_SIZE_W)  ; load # of cols to empty into A
0555: 57      	                ld      D,A             ; move A into D
0556: 7B      	                ld      A,E             ; recover filling char
0557: ED79    	RPTEMPTYBUF:    out     (C),A           ; write empty byte into VRAM
0559: 00      	                nop
055A: 15      	                dec     D               ; decr. D
055B: 20FA    	                jr      NZ,RPTEMPTYBUF  ; repeat for the # of cols
055D: 10F2    	                djnz    LDCOLSTOEMPTY   ; repeat for the # of rows
055F: C9      	                ret                     ; return to caller
0560: 2AD681  	EMPTYG2:        ld      HL,(SCR_NAM_TB) ; yes, additional setup for G2 - load G2 name table address (usually $1800)
0563: CDB605  	                call    SETNAMETABLE    ; set name table
0566: 210000  	                ld      HL,$0000        ; set pattern table
0569: CDC905  	                call    SETVDPADRS      ; send address to VDP
056C: AF      	                xor     A               ; empty pattern
056D: 1618    	                ld      D,$18           ; 6144 ($1800) cell to clean, 24 pages ($18)
056F: 47      	                ld      B,A             ; 256 bytes for page
0570: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
0572: ED79    	CLRG2PTNTBL:    out     (C),A           ; clear pattern
0574: 00      	                nop                     ; little delay
0575: 00      	                nop
0576: 10FA    	                djnz    CLRG2PTNTBL     ; repeat for 1 page
0578: 15      	                dec     D               ; next page
0579: 20F7    	                jr      NZ,CLRG2PTNTBL  ; repeat
057B: 210020  	                ld      HL,$2000        ; load the color table address
057E: CDC905  	                call    SETVDPADRS      ; send address to VDP
0581: 3AE181  	                ld      A,(FRGNDCLR)    ; load foreground
0584: 87      	                add     A,A
0585: 87      	                add     A,A
0586: 87      	                add     A,A
0587: 87      	                add     A,A             ; move to high nibble
0588: 57      	                ld      D,A             ; store into D
0589: 3AE281  	                ld      A,(BKGNDCLR)    ; load background color
058C: B2      	                or      D               ; combine with background color
058D: 1618    	                ld      D,$18           ; 6144 ($1800) cells to fill, so 24 pages ($18)
058F: 1817    	                jr      STARTEMPTY
0591: 210008  	EMPTYMC:        ld      HL,$0800        ; MC name table
0594: CDB605  	                call    SETNAMETABLE    ; set name table
0597: 210000  	                ld      HL,$0000        ; color table address
059A: CDC905  	                call    SETVDPADRS      ; send address to VDP
059D: 3AE281  	                ld      A,(BKGNDCLR)    ; load background
05A0: 57      	                ld      D,A             ; store into D
05A1: 87      	                add     A,A
05A2: 87      	                add     A,A
05A3: 87      	                add     A,A
05A4: 87      	                add     A,A             ; move to high nibble
05A5: B2      	                or      D               ; set background color for high and low nibble
05A6: 1608    	                ld      D,$08           ; 2048 ($0800) cells to fill, so 8 pages ($08)
05A8: 0E30    	STARTEMPTY:     ld      C,VDP_DAT       ; VDP address for passing data
05AA: 0600    	                ld      B,$00           ; 256 bytes each page ($00=256)
05AC: ED79    	SNDCLRSET:      out     (C),A           ; send color setting
05AE: 00      	                nop                     ; wait a while
05AF: 00      	                nop
05B0: 10FA    	                djnz    SNDCLRSET       ; repeat for 1 page
05B2: 15      	                dec     D               ; have we filled all the pages?
05B3: 20F7    	                jr      NZ,SNDCLRSET    ; no, repeat
05B5: C9      	                ret                     ; return to caller
              	
              	; set name table for G2 mode (patterns from $00 to $FF for each of the 3 areas of the screen)
05B6: CDC905  	SETNAMETABLE:   call    SETVDPADRS      ; send address to VDP
05B9: 0E30    	                ld      C,VDP_DAT       ; VDP address for passing data
05BB: 1603    	                ld      D,$03           ; 3 pages to fill into VRAM (768 cells)
05BD: AF      	                xor     A               ; starting char name #0 (chars go from 0 to 255)
05BE: 47      	                ld      B,A             ; reset B
05BF: ED79    	RPTFLL1:        out     (C),A           ; send name to VRAM
05C1: 00      	                nop
05C2: 3C      	                inc     A               ; increment # of name
05C3: 10FA    	                djnz    RPTFLL1         ; repeat for 256 cells (1 page)
05C5: 15      	                dec     D               ; did we fill all the pages?
05C6: 20F7    	                jr      NZ,RPTFLL1      ; no, continue
05C8: C9      	                ret                     ; return to caller
              	
              	; set an address into VRAM: address is in HL
05C9: 0E32    	SETVDPADRS:     ld      C,VDP_SET       ; VDP address mode
05CB: CBF4    	                set     6,H             ; set bit #6 of address, to write to VRAM
05CD: ED69    	                out     (C),L           ; send low and...
05CF: ED61    	                out     (C),H           ; ...high byte of the first cell
05D1: C9      	                ret                     ; return to caller
              	
              	; clear the video buffer and position the cursor at 0,0
05D2: CD3705  	CLEARVIDBUF:    call    EMPTYVIDBUF     ; clear video buffer
05D5: AF      	                xor     A               ; reset A
05D6: 32D881  	                ld      (SCR_CURS_X),A  ; cursor X to 0
05D9: 32D981  	                ld      (SCR_CURS_Y),A  ; cursor Y to 0
05DC: C32506  	                jp      POS_CURSOR      ; position cursor & return to caller
              	
              	; HOME: position the cursor at coords. 0,0 
05DF: AF      	ATHOME:         xor     A               ; position cursor at 0,0 by storing...
05E0: 32DB81  	                ld      (SCR_CUR_NY),A  ; ...new Y...
05E3: 32DA81  	                ld      (SCR_CUR_NX),A  ; ...and new X
05E6: C32F06  	                jp      MOVCRS          ; move cursor to new location & return to caller
              	
              	; load the char or byte at the VRAM position set by HL
              	; value is returned into A
05E9: C5      	READ_VIDEO_LOC: push    BC              ; store BC
05EA: 0E32    	                ld      C,VDP_SET       ; VDP setting mode
05EC: 44      	                ld      B,H
05ED: CBB8    	                res     7,B
05EF: CBB0    	                res     6,B
05F1: ED69    	                out     (C),L           ; low byte then...
05F3: ED41    	                out     (C),B           ; high byte
05F5: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
05F7: 00      	                nop                     ; wait...
05F8: 00      	                nop                     ; ...a while
05F9: 00      	                nop
05FA: ED78    	                in      A,(C)           ; read byte at current VRAM location
05FC: C1      	                pop     BC              ; restore BC
05FD: C9      	                ret                     ; return to caller
              	
              	; write a byte at the VRAM position pointed by HL
              	; value is in A
05FE: C5      	WRITE_VIDEO_LOC:push    BC              ; store BC
05FF: 0E32    	                ld      C,VDP_SET       ; VDP setting mode
0601: 44      	                ld      B,H             ; copy H into B
0602: CBB8    	                res     7,B
0604: CBF0    	                set     6,B             ; write to VRAM
0606: ED69    	                out     (C),L           ; low byte then...
0608: ED41    	                out     (C),B           ; high byte of VRAM address
060A: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
060C: 00      	                nop                     ; wait...
060D: 00      	                nop                     ; ...a while
060E: 00      	                nop
060F: ED79    	                out     (C),A           ; write byte into VRAM
0611: C1      	                pop     BC              ; restore BC
0612: C9      	                ret                     ; return to caller
              	
              	; write a value into a specific VDP register
              	; value is in E, register is in A
0613: C5      	WRITE_VREG:     push    BC              ; store BC
0614: C680    	                add     A,$80           ; set VDP to write to registers
0616: 0E32    	                ld      C,VDP_SET       ; VDP setting mode
0618: ED59    	                out     (C),E           ; send data to VDP
061A: ED79    	                out     (C),A           ; select the destination register
061C: C1      	                pop     BC              ; restore BC
061D: C9      	                ret                     ; return to caller
              	
              	; read VDP status register and return value into A
061E: C5      	READ_VSTAT:     push    BC              ; store BC
061F: 0E32    	                ld      C,VDP_SET       ; VDP register access
0621: ED78    	                in      A,(C)           ; read status register
0623: C1      	                pop     BC              ; restore BC
0624: C9      	                ret                     ; return to caller
              	
              	; position the cursor at the current coordinates, preserving underlying char
0625: CD5606  	POS_CURSOR:     call    LOAD_CRSR_POS   ; load the VRAM address of cursor into HL
0628: CDE905  	                call    READ_VIDEO_LOC  ; load the current char at the cursor position (return in A)
062B: 32DC81  	                ld      (SCR_ORG_CHR),A ; store the current char
062E: C9      	                ret
              	
              	; move cursor to new X,Y coordinates
062F: CD4D06  	MOVCRS:         call    RSTCHRCRS       ; restore the char in the current cursor position
0632: CD3806  	                call    NEWCRSRCOORD    ; set new cursor's coordinates
0635: C32506  	                jp      POS_CURSOR      ; position cursor into new location & return to caller
              	
              	
              	; set new cursor's coordinates:
0638: 3ADA81  	NEWCRSRCOORD:   ld      A,(SCR_CUR_NX)  ; load new X
063B: 32D881  	                ld      (SCR_CURS_X),A  ; write new X
063E: 3ADB81  	                ld      A,(SCR_CUR_NY)  ; load new Y
0641: 32D981  	                ld      (SCR_CURS_Y),A  ; write new Y
0644: 3EFF    	                ld      A,$FF           ; delete new values
0646: 32DA81  	                ld      (SCR_CUR_NX),A  ; of X
0649: 32DB81  	                ld      (SCR_CUR_NY),A  ; and Y
064C: C9      	                ret
              	
              	; recover char under the cursor and prints it onto the screen
064D: CD5606  	RSTCHRCRS:      call    LOAD_CRSR_POS   ; recover old cursor position
0650: 3ADC81  	                ld      A,(SCR_ORG_CHR) ; recover old char
0653: C3FE05  	                jp      WRITE_VIDEO_LOC ; write char into VRAM & return
              	
              	; retrieve cursor position from either current coordinates or next place
              	; return address position into HL
0656: 3AD981  	LOAD_CRSR_POS:  ld      A,(SCR_CURS_Y)  ; load cursor Y
0659: 6F      	                ld      L,A             ; move it into reg.L
065A: AF      	                xor     A               ; reset A
065B: 67      	                ld      H,A             ; reset H
065C: 47      	                ld      B,A             ; reset B
065D: 29      	                add     HL,HL           ; create offset (each address is 2-bytes long so we need to double HL)
065E: 118809  	                ld      DE,POS_TB_CRS_40; load position table address of cursor for 40 cols
0661: 3AD281  	                ld      A,(SCR_SIZE_W)  ; load screen width
0664: FE28    	                cp      $28             ; is it 40 cols?
0666: 2803    	                jr      Z,CONT_POS_CURS ; yes, jump over
0668: 115809  	                ld      DE,POS_TB_CRS_32; no, load position table address of cursor for 32 cols
066B: 19      	CONT_POS_CURS:  add     HL,DE           ; the correct starting address of the required row is now into HL
066C: 5E23562B	                ld      DE,(HL)         ; load starting address of the required row into DE
0670: 2AD681  	                ld      HL,(SCR_NAM_TB) ; load starting address of name table
0673: 19      	                add     HL,DE           ; starting address of the current row into name table
0674: 3AD881  	                ld      A,(SCR_CURS_X)  ; load cursor X
0677: 4F      	                ld      C,A             ; transfer A into C
0678: 09      	                add     HL,BC           ; add X offset: now HL contains the address of the current cursor position
0679: C9      	                ret
              	
              	; find X,Y coordinates of a screen address pointed in VRAM by HL
              	; return them into L & A for X,Y
067A: D5      	HL2XY:          push    DE              ; store DE
067B: ED5BD681	                ld      DE,(SCR_NAM_TB) ; load starting address of name table into DE
067F: AF      	                xor     A               ; clear Carry
0680: ED52    	                sbc     HL,DE           ; find position relative to screen (from 0,0)
0682: D1      	                pop     DE
0683: 3AD281  	                ld      A,(SCR_SIZE_W)  ; load screen width
0686: 4F      	                ld      C,A             ; move it into C
0687: CDEF39  	                call    DIV_16_8        ; divide position by C: return Y into L and X into A
068A: C9      	                ret                     ; return to caller
              	
              	;-------------------------------------------------------------------------------
              	; send current char to video buffer
068B: F5      	CHAR2VID:       push    AF              ; store AF
068C: C5      	                push    BC              ; store BC
068D: D5      	                push    DE              ; store DE
068E: E5      	                push    HL              ; store HL
068F: 3ADD81  	                ld      A,(CRSR_STATE)  ; store cursor state...
0692: F5      	                push    AF              ; into stack
0693: CD2B08  	                call    CURSOR_OFF      ; cursor off
0696: 3AE081  	                ld      A,(CHR4VID)     ; recover char
0699: FE19    	                cp      HOME            ; is it HOME char ($19?)
069B: 2006    	                jr      NZ,CHKCS        ; no, check over
069D: CDDF05  	                call    ATHOME          ; yes, move the cursor to 0,0
06A0: C31607  	                jp      EXITCHAR2VID    ; exit
06A3: FE0C    	CHKCS:          cp      CS              ; is it the CLEAR char ($0C)?
06A5: 2005    	                jr      NZ,CHKCR        ; no, check over
06A7: CDD205  	                call    CLEARVIDBUF     ; yes, clear video buffer and position cursor at 0,0
06AA: 186A    	                jr      EXITCHAR2VID    ; exit
06AC: FE0D    	CHKCR:          cp      CR              ; is it a carriage return ($0D)?
06AE: 2005    	                jr      NZ,CHKBKSP      ; no, jump over
06B0: CDAD08  	                call    CRGRETURN       ; yes, go to the beginning of the next line
06B3: 1861    	                jr      EXITCHAR2VID    ; exit
06B5: FE08    	CHKBKSP:        cp      BKSP            ; is it the backspace ($08)?
06B7: 2005    	                jr      NZ,CHKCRSLFT    ; no, jump over
06B9: CD4807  	                call    BACKSPACE       ; move cursor left 1 position
06BC: 1858    	                jr      EXITCHAR2VID    ; exit
06BE: FE1C    	CHKCRSLFT:      cp      CRSLFT          ; is it cursor left?
06C0: 2005    	                jr      NZ,CHKCRSUP     ; no, jump over
06C2: CD5B07  	                call    CURSORLEFT      ; move cursor left...
06C5: 184F    	                jr      EXITCHAR2VID    ; ...and exit
06C7: FE1E    	CHKCRSUP:       cp      CRSUP           ; is it cursor up?
06C9: 2005    	                jr      NZ,CHKCRSRGT    ; no, jump over
06CB: CDA707  	                call    CURSORUP        ; move cursor up...
06CE: 1846    	                jr      EXITCHAR2VID    ; ...and exit
06D0: FE1D    	CHKCRSRGT:      cp      CRSRGT          ; is it cursor right?
06D2: 2005    	                jr      NZ,CHKCRSDWN    ; no, jump over
06D4: CDC007  	                call    CURSORRIGHT     ; move cursor right...
06D7: 183D    	                jr      EXITCHAR2VID    ; ...and exit
06D9: FE1F    	CHKCRSDWN:      cp      CRSDN           ; is it cursor down?
06DB: 2005    	                jr      NZ,CHKLF        ; no, jump over
06DD: CDF507  	                call    CURSORDOWN      ; move cursor up...
06E0: 1834    	                jr      EXITCHAR2VID    ; ...and exit
06E2: FE0A    	CHKLF:          cp      LF              ; is it a line feed ($0A)?
06E4: 2830    	                jr      Z,EXITCHAR2VID  ; CURRENTLY WE DON'T PRINT LF, WE JUST USE CR TO SUBSTITUTE CR+LF COMBINATION
06E6: CD5606  	                call    LOAD_CRSR_POS   ; recover position of cursor
06E9: 3AE081  	                ld      A,(CHR4VID)     ; recover char to print
06EC: CDFE05  	                call    WRITE_VIDEO_LOC ; write A into VRAM at (HL)
06EF: 3AD981  	                ld      A,(SCR_CURS_Y)  ; load cursor Y into A
06F2: 5F      	                ld      E,A             ; store cursor Y into E
06F3: 3AD881  	                ld      A,(SCR_CURS_X)  ; load cursor X
06F6: 3C      	                inc     A               ; move 1 step to right
06F7: 21D281  	                ld      HL,SCR_SIZE_W   ; cell that keeps the width of screen
06FA: BE      	                cp      (HL)            ; have we reached the most right position?
06FB: 200F    	                jr      NZ,SETCSRCOORDS ; no, go over
06FD: 1C      	                inc     E               ; yes, increment cursor Y (go to next line)
06FE: 7B      	                ld      A,E             ; move cursor Y into A
06FF: 21D381  	                ld      HL,SCR_SIZE_H   ; cell that keeps the height of screen
0702: BE      	                cp      (HL)            ; have we reached the bottom of the screen?
0703: 2006    	                jr      NZ,SETCRSRY     ; no, jump over
0705: D5      	                push    DE
0706: CD3208  	                call    SCROLLUP        ; scroll screen up
0709: D1      	                pop     DE
070A: 1D      	                dec     E               ; decrement 1 row, to set cursor Y on the last line
070B: AF      	SETCRSRY:       xor     A               ; then set cursor X to 0 (go to beginning of line)
070C: 32D881  	SETCSRCOORDS:   ld      (SCR_CURS_X),A  ; store current cursor X
070F: 7B      	                ld      A,E             ; recover Y
0710: 32D981  	                ld      (SCR_CURS_Y),A  ; store current cursor Y
0713: CD2506  	                call    POS_CURSOR      ; position cursor to new location
0716: AF      	EXITCHAR2VID:   xor     A               ; reset char
0717: 32E081  	                ld      (CHR4VID),A     ; to be sent to screen
071A: F1      	                pop     AF              ; recover cursor state
071B: A7      	                and     A               ; was it off (A=0)?
071C: C41508  	                call    NZ,CURSOR_ON    ; no, set cursor on
071F: E1      	                pop     HL              ; restore HL
0720: D1      	                pop     DE              ; restore DE
0721: C1      	                pop     BC              ; restore BC
0722: F1      	                pop     AF              ; restore AF
0723: C9      	                ret                     ; return to caller
              	
              	; flash the cursor at the current position
              	; (this sub-routine is called by CH3 timer ISR)
0724: 3ADD81  	FLASHCURSOR:    ld      A,(CRSR_STATE)  ; now, check the cursor
0727: A7      	                and     A               ; cursor off (A=0)?
0728: C8      	                ret     Z               ; yes, return
0729: 3ACE81  	                ld      A,(TMRCNT)      ; no, load the first byte of the 100ths of A second's counter
072C: E620    	                and     $20             ; check if it's time to flash the cursor (check bit #6)
072E: 21DE81  	                ld      HL,LSTCSRSTA    ; load address of cell that stores the last cursor state
0731: 46      	                ld      B,(HL)          ; load last state
0732: B8      	                cp      B               ; compare current state with last state
0733: C8      	                ret     Z               ; same state, no change required - exit
0734: 77      	                ld      (HL),A          ; save new state
0735: F5      	                push    AF              ; store A (keep state for later use)
0736: CD5606  	                call    LOAD_CRSR_POS   ; load current cursor position into HL
0739: F1      	                pop     AF              ; recover current state
073A: 06FF    	                ld      B,$FF           ; cursor char
073C: FE20    	                cp      $20             ; is the cursor on video (A == $20)?
073E: 2804    	                jr      Z,PUTCRSCHR     ; yes, jump over
0740: 3ADC81  	                ld      A,(SCR_ORG_CHR) ; no, load the original char
0743: 47      	                ld      B,A             ; move char into B
0744: 78      	PUTCRSCHR:      ld      A,B             ; recover char from B
0745: C3FE05  	                jp      WRITE_VIDEO_LOC ; print cursor/char at the current position & return
              	
              	
              	; delete the char at the left of the cursor
0748: CD8407  	BACKSPACE:      call    MVCRS2LFT       ; prepare to move cursor to left
074B: CD4D06  	                call    RSTCHRCRS       ; restore char under the cursor
074E: CD3806  	                call    NEWCRSRCOORD    ; set new cursor's coordinates
0751: CD5606  	                call    LOAD_CRSR_POS   ; find address of new video cell
0754: AF      	                xor     A               ; null char
0755: CDFE05  	                call    WRITE_VIDEO_LOC ; write into video cell
0758: C32506  	                jp      POS_CURSOR      ; position cursor and return
              	
              	
              	; move cursor to left
075B: F5      	CURSORLEFT:     push    AF              ; store A
075C: 3AD881  	                ld      A,(SCR_CURS_X)  ; load cursor X into A
075F: A7      	                and     A               ; is it at the most left of the screen (X=0)?
0760: 280C    	                jr      Z,CHCKYPOS      ; yes, check Y position
0762: 3D      	                dec     A               ; no, decrement X
0763: 32DA81  	                ld      (SCR_CUR_NX),A  ; store new X
0766: 3AD981  	                ld      A,(SCR_CURS_Y)  ; load current cursor Y
0769: 32DB81  	                ld      (SCR_CUR_NY),A  ; no move over Y axis
076C: 1811    	                jr      CONTCRSLFT      ; go on moving cursor
076E: 3AD981  	CHCKYPOS:       ld      A,(SCR_CURS_Y)  ; load cursor Y
0771: A7      	                and     A               ; is it at the most top of the screen (Y=0)?
0772: 280E    	                jr      Z,EXITCURSORLEFT; yes, exit doing nothing
0774: 3D      	                dec     A               ; no, decrement Y
0775: 32DB81  	                ld      (SCR_CUR_NY),A  ; store new Y
0778: 3AD281  	                ld      A,(SCR_SIZE_W)  ; load current screen width
077B: 3D      	                dec     A               ; cursor to the most right position (width-0)
077C: 32DA81  	                ld      (SCR_CUR_NX),A  ; set new cursor X
077F: CD2F06  	CONTCRSLFT:     call    MOVCRS          ; move cursor into new position
0782: F1      	EXITCURSORLEFT: pop     AF              ; restore A
0783: C9      	                ret                     ; return to caller
              	
              	; move cursor 1 position to the left
0784: 3AD881  	MVCRS2LFT:      ld      A,(SCR_CURS_X)  ; load cursor X into A
0787: A7      	                and     A               ; is it at the most left of the screen (X=0)?
0788: 280B    	                jr      Z,CHKYPOS       ; yes, check Y position
078A: 3D      	                dec     A               ; no, decrement X
078B: 32DA81  	                ld      (SCR_CUR_NX),A  ; store new X
078E: 3AD981  	                ld      A,(SCR_CURS_Y)  ; load current cursor Y
0791: 32DB81  	                ld      (SCR_CUR_NY),A  ; no move over Y axis
0794: C9      	                ret                     ; go on moving cursor
0795: 3AD981  	CHKYPOS:        ld      A,(SCR_CURS_Y)  ; load cursor Y
0798: A7      	                and     A               ; is it at the most top of the screen (Y=0)?
0799: 28E7    	                jr      Z,EXITCURSORLEFT; yes, exit doing nothing
079B: 3D      	                dec     A               ; no, decrement Y
079C: 32DB81  	                ld      (SCR_CUR_NY),A  ; store new Y
079F: 3AD281  	                ld      A,(SCR_SIZE_W)  ; load current screen width
07A2: 3D      	                dec     A               ; cursor to the most right position (width-1)
07A3: 32DA81  	                ld      (SCR_CUR_NX),A  ; set new cursor X
07A6: C9      	                ret                     ; return to caller
              	
              	; move cursor up
07A7: F5      	CURSORUP:       push    AF              ; store A
07A8: 3AD981  	                ld      A,(SCR_CURS_Y)  ; load cursor Y into A
07AB: A7      	                and     A               ; is it at the most top of the screen (Y=0)?
07AC: 2810    	                jr      Z,EXITCURSORUP  ; yes, exit doing nothing
07AE: 3D      	                dec     A               ; no, decrement Y
07AF: 32DB81  	                ld      (SCR_CUR_NY),A  ; store new Y
07B2: 3AD881  	                ld      A,(SCR_CURS_X)  ; load current cursor X
07B5: 32DA81  	                ld      (SCR_CUR_NX),A  ; set new cursor X
07B8: CD4D06  	                call    RSTCHRCRS       ; restore char under the cursor and print it
07BB: CD2F06  	                call    MOVCRS          ; move cursor into new position
07BE: F1      	EXITCURSORUP:   pop     AF              ; restore A
07BF: C9      	                ret                     ; return to caller
              	
              	
              	; move cursor to right
07C0: F5      	CURSORRIGHT:    push    AF              ; store A
07C1: C5      	                push    BC              ; store B
07C2: 3AD281  	                ld      A,(SCR_SIZE_W)  ; load current screen width (in text modes it's 32 or 40)
07C5: 3D      	                dec     A               ; decrement it (most right can only be 31 or 39)
07C6: 47      	                ld      B,A             ; move A into B
07C7: 3AD881  	                ld      A,(SCR_CURS_X)  ; load cursor X into A    
07CA: B8      	                cp      B               ; is cursor at the most right position on the screen?
07CB: 300C    	                jr      NC,CHCKYPOS2    ; yes, so jump to check Y position
07CD: 3C      	                inc     A               ; no, so increment X
07CE: 32DA81  	                ld      (SCR_CUR_NX),A  ; store new X
07D1: 3AD981  	                ld      A,(SCR_CURS_Y)  ; load current cursor Y
07D4: 32DB81  	                ld      (SCR_CUR_NY),A  ; no move over Y axis
07D7: 1813    	                jr      CONTCRSRGT      ; go on moving cursor
07D9: 3AD381  	CHCKYPOS2:      ld      A,(SCR_SIZE_H)  ; load screen height
07DC: 3D      	                dec     A               ; decrement it (last row can only be 23)
07DD: 47      	                ld      B,A             ; move bottom into B
07DE: 3AD981  	                ld      A,(SCR_CURS_Y)  ; load cursor Y into A
07E1: B8      	                cp      B               ; is the cursor at the bottom of the screen?
07E2: 300E    	                jr      NC,EXITCURSORRGHT; yes, exit doing nothing
07E4: 3C      	                inc     A               ; no, increment Y
07E5: 32DB81  	                ld      (SCR_CUR_NY),A  ; store new Y
07E8: AF      	                xor     A               ; move cursor to top left
07E9: 32DA81  	                ld      (SCR_CUR_NX),A  ; store new X
07EC: CD4D06  	CONTCRSRGT:     call    RSTCHRCRS       ; restore char under the cursor and print it
07EF: CD2F06  	                call    MOVCRS          ; move cursor into new position
07F2: C1      	EXITCURSORRGHT: pop     BC              ; retrieve BC
07F3: F1      	                pop     AF              ; restore A
07F4: C9      	                ret                     ; return to caller
              	
              	
              	; move cursor down
07F5: F5      	CURSORDOWN:     push    AF              ; store A
07F6: C5      	                push    BC              ; store B
07F7: 3AD381  	                ld      A,(SCR_SIZE_H)  ; load current screen height (in text modes it's 24)
07FA: 3D      	                dec     A               ; decrement it (positions can only vary between 0 and 23)
07FB: 47      	                ld      B,A             ; move X into B
07FC: 3AD981  	                ld      A,(SCR_CURS_Y)  ; load cursor Y into A             
07FF: B8      	                cp      B               ; is current cursor position < 23?
0800: 3010    	                jr      NC,EXITCURSORDOWN; no, exit doing nothing
0802: 3C      	                inc     A               ; yes, increment Y
0803: 32DB81  	                ld      (SCR_CUR_NY),A  ; store new Y
0806: 3AD881  	                ld      A,(SCR_CURS_X)  ; load current cursor X
0809: 32DA81  	                ld      (SCR_CUR_NX),A  ; set new cursor X
080C: CD4D06  	                call    RSTCHRCRS       ; restore char under the cursor and print it
080F: CD2F06  	                call    MOVCRS          ; move cursor into new position
0812: C1      	EXITCURSORDOWN: pop     BC              ; retrieve BC
0813: F1      	                pop     AF              ; retrieve A
0814: C9      	                ret                     ; return to caller
              	
              	
              	; set cursor on (visible on screen)
0815: F5      	CURSOR_ON:      push    AF              ; store AF
0816: 3ADD81  	                ld      A,(CRSR_STATE)  ; load cursor state
0819: FE01    	                cp      $01             ; is it on?
081B: 280C    	                jr      Z,EXITCURSOR_ON ; yes, so nothing to do
081D: 3AD381  	                ld      A,(SCR_SIZE_H)  ; check the video mode
0820: FE30    	                cp      $30             ; graphics 2 or 3 (if value>=48)?
0822: 3005    	                jr      NC,EXITCURSOR_ON; yes, so exit (no cursor in graphics 2 or 3)
0824: 3E01    	                ld      A,$01           ; cursor state ON
0826: 32DD81  	                ld      (CRSR_STATE),A  ; set state
0829: F1      	EXITCURSOR_ON:  pop     AF              ; restore AF
082A: C9      	                ret                     ; return to caller
              	
              	; set cursor off (invisible on screen)
082B: F5      	CURSOR_OFF:     push    AF              ; store AF
082C: AF      	                xor     A               ; cursor state OFF
082D: 32DD81  	                ld      (CRSR_STATE),A  ; set state
0830: F1      	                pop     AF              ; restore AF
0831: C9      	                ret
              	
              	; scroll the screen 1 row up
0832: AF      	SCROLLUP:       xor     A
0833: 32DF81  	                ld      (PRNTVIDEO),A
0836: 2AD681  	                ld      HL,(SCR_NAM_TB) ; start address of the name table
0839: 221382  	                ld      (VIDTMP1),HL    ; store address of the destination row (1st row of the screen)
083C: 3AD281  	                ld      A,(SCR_SIZE_W)  ; load the screen width
083F: 5F      	                ld      E,A             ; move width into E
0840: 1600    	                ld      D,$00           ; reset D
0842: 19      	                add     HL,DE           ; HL now contains the address of the source row (2nd row of the screen)
0843: 221582  	                ld      (VIDTMP2),HL    ; store address of source row
0846: 3AD381  	                ld      A,(SCR_SIZE_H)  ; load the screen height
0849: 3D      	                dec     A               ; decrement the # of rows: now, A contains the # of rows to be moved
084A: 47      	                ld      B,A             ; move # of rows into B
084B: 3AD281  	SCROLLNXTRW:    ld      A,(SCR_SIZE_W)  ; (re)load the screen width
084E: 5F      	                ld      E,A             ; move width into E
084F: 2A1582  	                ld      HL,(VIDTMP2)    ; load source address
0852: 0E32    	                ld      C,VDP_SET       ; VDP setting mode
0854: ED69    	                out     (C),L           ; low byte of source
0856: ED61    	                out     (C),H           ; high byte of source
0858: 21EB81  	                ld      HL,VIDEOBUFF    ; load address of the first cell of the video buffer
085B: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
085D: ED78    	LOADNEXTCOL:    in      A,(C)           ; load char
085F: 77      	                ld      (HL),A          ; store char
0860: 23      	                inc     HL              ; next cell of the buffer
0861: 1D      	                dec     E               ; count the chars to be read
0862: 20F9    	                jr      NZ,LOADNEXTCOL  ; repeat until we read the entire row
0864: 3AD281  	                ld      A,(SCR_SIZE_W)  ; reload the screen width
0867: 5F      	                ld      E,A             ; move # of rows into E
0868: 1600    	                ld      D,$00           ; reset D
086A: 2A1382  	                ld      HL,(VIDTMP1)    ; load address of destination row
086D: E5      	                push    HL              ; store HL
086E: 2A1582  	                ld      HL,(VIDTMP2)    ; current source will be..
0871: 221382  	                ld      (VIDTMP1),HL    ; ..new destination
0874: 19      	                add     HL,DE           ; address of new
0875: 221582  	                ld      (VIDTMP2),HL    ; source row
0878: E1      	                pop     HL              ; restore address of current destination row
0879: CBF4    	                set     6,H             ; writing mode
087B: 0E32    	                ld      C,VDP_SET       ; VDP setting mode
087D: ED69    	                out     (C),L           ; low byte
087F: ED61    	                out     (C),H           ; high byte of address
0881: 21EB81  	                ld      HL,VIDEOBUFF    ; video buffer address
0884: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
0886: 7E      	WRITEBUF:       ld      A,(HL)          ; load char
0887: ED79    	                out     (C),A           ; send char
0889: 23      	                inc     HL              ; increment buffer index
088A: 1D      	                dec     E               ; next row
088B: 20F9    	                jr      NZ,WRITEBUF     ; repeat until 0
088D: 10BC    	                djnz    SCROLLNXTRW     ; repeat for the entire screen
088F: 3AD281  	                ld      A,(SCR_SIZE_W)  ; reload screen width
0892: 47      	                ld      B,A             ; cells to empty into B
0893: AF      	                xor     A               ; null char
0894: 0E32    	                ld      C,VDP_SET       ; VDP set mode
0896: 2A1382  	                ld      HL,(VIDTMP1)    ; load address of the last row
0899: CBF4    	                set     6,H             ; writing mode
089B: ED69    	                out     (C),L           ; low byte then..
089D: ED61    	                out     (C),H           ; high byte of address
089F: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
08A1: ED79    	RPTEMPTYROW:    out     (C),A           ; empty cell
08A3: 00      	                nop                     ; delay
08A4: 00      	                nop
08A5: 10FA    	                djnz    RPTEMPTYROW     ; repeat until the last row has been cleaned
08A7: 3E01    	                ld      A,$01
08A9: 32DF81  	                ld      (PRNTVIDEO),A   ; set print-on-video on
08AC: C9      	                ret                     ; return to caller
              	
              	; carriage return: first, it looks for char $00 at the beginning of the line (look for the first null char),
              	; then it starts sendind every char it finds on the screen to the terminal buffer of the BASIC interpreter
              	; until another null char is found. Finally, move to the next line and position the cursor at the beginning
              	; of the row (equivalent to CR+LF), then gets back control to the screen editor to let it interpret the line
81E3:         	CUR_POS         equ     TMPBFR1         ; cursor position
81E5:         	SRTTXT          equ     TMPBFR2         ; start of text line
81E7:         	ENDTXT          equ     TMPBFR3         ; end of text line
08AD:         	CRGRETURN:      ; preliminary: disable cursor if on, and retrieve char under it
08AD: 3ADD81  	                ld      A,(CRSR_STATE)  ; recover cursor state
08B0: 32E981  	                ld      (TMPBFR4),A     ; store status
08B3: A7      	                and     A               ; is cursor on?
08B4: C42B08  	                call    NZ,CURSOR_OFF   ; yes, so set cursor off
08B7: CD4D06  	                call    RSTCHRCRS       ; restore char under it
              	                ; first, check if cursor if off, so that we just interpret return as a new line command
08BA: 3A1D82  	                ld      A,(KBDNPT)      ; check if input from keyboad
08BD: A7      	                and     A               ; if 0, input is not from keyboard...
08BE: CA3709  	                jp      Z,PRNTRETURN    ; ...so just print a carriage return; otherwise, interpret the return
              	                ; first part: look for the beginning of the text line on screen
08C1: CD5606  	                call    LOAD_CRSR_POS   ; load cursor position into HL
08C4: 22E381  	                ld      (CUR_POS),HL    ; store it
08C7: ED5BD681	                ld      DE,(SCR_NAM_TB) ; load VRAM address of top-left cell of screen ("home")
08CB: E5      	RPTNLLSRC:      push    HL
08CC: CDB039  	                call    CMP16           ; check if at "home"
08CF: E1      	                pop     HL
08D0: CADB08  	                jp      Z,CNTNULL       ; yes, exit because there is nothing before
08D3: 2B      	                dec     HL              ; go 1 step back
08D4: CDE905  	                call    READ_VIDEO_LOC  ; read char of current position
08D7: A7      	                and     A               ; is it $00 (null char)?
08D8: 20F1    	                jr      NZ,RPTNLLSRC    ; no, continue searching
08DA: 23      	                inc     HL              ; move 1 step forward to go back to the last cell with something in
              	                ; second part: look for the ending of the text on screen
08DB: 22E581  	CNTNULL:        ld      (SRTTXT),HL     ; store beginning of text
08DE: 3AD381  	                ld      A,(SCR_SIZE_H)
08E1: 5F      	                ld      E,A             ; load screen height into DE
08E2: 3AD281  	                ld      A,(SCR_SIZE_W)
08E5: 6F      	                ld      L,A             ; load screen width into HL
08E6: AF      	                xor     A
08E7: 67      	                ld      H,A
08E8: 57      	                ld      D,A
08E9: CDBB39  	                call    MUL16           ; multiply HL times DE to get the screen size
08EC: ED5BD681	                ld      DE,(SCR_NAM_TB) ; load screen name table start address into DE
08F0: 19      	                add     HL,DE           ; get the address...
08F1: 2B      	                dec     HL              ; ...of the "last" video cell
08F2: EB      	                ex      DE,HL           ; store address into DE
08F3: 2AE381  	                ld      HL,(CUR_POS)    ; retrieve original cursor position
08F6: E5      	RPTNLLSRC2:     push    HL
08F7: CDB039  	                call    CMP16           ; check if at last position on screen (bottom right corner)
08FA: E1      	                pop     HL
08FB: CA0509  	                jp      Z,CNTNULL2      ; if yes, exit because these is nothing after
08FE: 23      	                inc     HL              ; 1 more step forward
08FF: CDE905  	                call    READ_VIDEO_LOC  ; read char of current position
0902: A7      	                and     A               ; is it $00 (null char)?
0903: 20F1    	                jr      NZ,RPTNLLSRC2   ; no, continue searching
0905: 22E781  	CNTNULL2:       ld      (ENDTXT),HL     ; store ending of text line
0908: ED5BE581	                ld      DE,(SRTTXT)     ; load beginning of text line
090C: A7      	                and     A               ; clear Carry
090D: ED52    	                sbc     HL,DE           ; how many chars?
090F: 2826    	                jr      Z,PRNTRETURN    ; no chars found (HL-DE=0), so just print return & leave
              	                ;---    central part: send the text on the screen to the interpreter
0911: 2AE581  	                ld      HL,(SRTTXT)     ; load beginning of text line
0914: ED5BE781	                ld      DE,(ENDTXT)     ; load ending of text line
0918: CDE905  	SNDCHRTOBFR:    call    READ_VIDEO_LOC  ; read char
091B: E5      	                push    HL
091C: CD3301  	                call    CHARINTOBFR     ; send char to buffer
091F: E1      	                pop     HL
0920: 23      	                inc     HL              ; go to next char
0921: E5      	                push    HL              ; store HL
0922: CDB039  	                call    CMP16           ; check if DE=HL (finish chars)
0925: E1      	                pop     HL
0926: 20F0    	                jr      NZ,SNDCHRTOBFR  ; no, repeat
0928: 3E0D    	                ld      A,CR            ; yes, so now send carriage return
092A: CD3301  	                call    CHARINTOBFR     ; send to buffer
092D: 2AE781  	                ld      HL,(ENDTXT)     ; recover address of last char of input text
0930: CD7A06  	                call    HL2XY           ; retrieve X,Y from address
0933: 7D      	                ld      A,L             ; move Y into A (we don't need X anymore)
0934: 32D981  	                ld      (SCR_CURS_Y),A  ; store new Y
              	                ;---    final part: go at the beginning of a new line on the screen
0937: AF      	PRNTRETURN:     xor     A               ; move to col 0
0938: 32D881  	                ld      (SCR_CURS_X),A  ; store new X
093B: 3AD981  	                ld      A,(SCR_CURS_Y)  ; load cursor Y into A
093E: 3C      	                inc     A               ; new row
093F: 21D381  	                ld      HL,SCR_SIZE_H   ; load address of cell that keeps screen height
0942: BE      	                cp      (HL)            ; is the cursor over the bottom of the screen?
0943: 3806    	                jr      C,ADDNEWLINE    ; no, jump over
0945: 3D      	                dec     A               ; yes, so come back 1 row, then...
0946: F5      	                push    AF              ; (store A)
0947: CD3208  	                call    SCROLLUP        ; ...scroll the screen before to...
094A: F1      	                pop     AF              ; (retrieve A)
094B: 32D981  	ADDNEWLINE:     ld      (SCR_CURS_Y),A  ; ...store new Y
094E: 3AE981  	                ld      A,(TMPBFR4)     ; retrieve cursor state
0951: A7      	                and     A               ; was it off (A=0)?
0952: C41508  	                call    NZ,CURSOR_ON    ; no, set cursor on
0955: C32506  	                jp      POS_CURSOR      ; position cursor to new location & return to caller
              	
              	; ------------------------------------------------------------------------------
              	                ; this table contains the values of the offsets to be added to
              	                ; the starting address of the name table to find the correct
              	                ; value of the first cell of the corresponding row
              	                ; (by doing so, it's faster than doing a multipication)
              	                ; table for graphics 1 text mode: 32 cols
0958: 00002000	POS_TB_CRS_32   defw    $0000,$0020,$0040,$0060,$0080,$00A0,$00C0,$00E0
095C: 40006000	
0960: 8000A000	
0964: C000E000	
0968: 00012001	                defw    $0100,$0120,$0140,$0160,$0180,$01A0,$01C0,$01E0
096C: 40016001	
0970: 8001A001	
0974: C001E001	
0978: 00022002	                defw    $0200,$0220,$0240,$0260,$0280,$02A0,$02C0,$02E0
097C: 40026002	
0980: 8002A002	
0984: C002E002	
              	                ; table for pure text mode: 40 cols
0988: 00002800	POS_TB_CRS_40   defw    $0000,$0028,$0050,$0078,$00A0,$00C8,$00F0,$0118
098C: 50007800	
0990: A000C800	
0994: F0001801	
0998: 40016801	                defw    $0140,$0168,$0190,$01B8,$01E0,$0208,$0230,$0258
099C: 9001B801	
09A0: E0010802	
09A4: 30025802	
09A8: 8002A802	                defw    $0280,$02A8,$02D0,$02F8,$0320,$0348,$0370,$0398
09AC: D002F802	
09B0: 20034803	
09B4: 70039803	
              	
              	; ------------------------------------------------------------------------------
              	; reset VRAM
09B8: AF      	EMPTY_VRAM:     xor     A               ; reg.A cleared: we fill up VRAM with $00
09B9: 67      	                ld      H,A
09BA: 6F      	                ld      L,A             ; reset HL
09BB: CDC905  	                call    SETVDPADRS      ; set address of first VRAM cell to $0000
09BE: 0640    	                ld      B,$40           ; $40 pages of RAM...
09C0: 57      	                ld      D,A             ; ...each one with $100 cells (tot. $4000 bytes)
09C1: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
09C3: ED79    	EMPTVRM:        out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
09C5: 14      	                inc     D               ; next cell
09C6: 00      	                nop
09C7: 20FA    	                jr      NZ,EMPTVRM      ; repeat until page is fully cleared
09C9: 10F8    	                djnz    EMPTVRM         ; repeat for $40 pages
09CB: C9      	                ret                     ; return to caller
              	
              	; empty video registers in SRAM
09CC: 21D281  	EMPTY_RAM:      ld      HL,SCR_SIZE_W   ; address of first register
09CF: AF      	                xor     A               ; $00 to clean the registers
09D0: 0645    	                ld      B,CHASNDDTN-SCR_SIZE_W; how many bytes to clean (this is calculated dinamically
              	                                        ; since we can add/remove some registers)
09D2: 77      	RSTVDPRAMREG:   ld      (HL),A          ; reset register
09D3: 23      	                inc     HL              ; next register
09D4: 10FC    	                djnz    RSTVDPRAMREG    ; repeat
09D6: C9      	                ret                     ; return to caller
              	
              	; ------------------------------------------------------------------------------
              	; set a specific graphics mode, passed into reg. E
09D7: 0608    	SET_GFX_MODE:   ld      B,$08           ; 8 registers means 8 bytes..
09D9: CB23    	                sla     E               ; multiply E by 8..
09DB: CB23    	                sla     E               ; so that reg. E can point..
09DD: CB23    	                sla     E               ; to the correct settings
09DF: 1600    	SET_GFX_MODE2:  ld      D,$00           ; reset D
09E1: 21140A  	                ld      HL,VDPMODESET   ; pointer to register settings | <= here points the SHOW_LOGO sub-routine
09E4: 19      	                add     HL,DE           ; add offset to get the correct set of values for the required mode
09E5: 3E80    	                ld      A,$80           ; start with REG0 ($80+register number)
09E7: 0E32    	                ld      C,VDP_SET       ; VDP set
09E9: 56      	LDREGVLS:       ld      D,(HL)          ; load register's value
09EA: ED51    	                out     (C),D           ; send data to VDP
09EC: ED79    	                out     (C),A           ; indicate the register to send data to
09EE: 3C      	                inc     A               ; next register
09EF: 23      	                inc     HL              ; next value
09F0: 10F7    	                djnz    LDREGVLS        ; repeat for 8 registers
09F2: C9      	                ret
              	
              	; ------------------------------------------------------------------------------
09F3:         	LOADCHARSET:    ; reg. A contains the video mode
              	                ; reg. HL contains address of pattern table into VRAM
09F3: 0600    	                ld      B,$00           ; 0=256 chars to load (complete charset)
09F5: CBF4    	                set     $06,H           ; add $4000 to address to indicate that we want to write into VRAM
09F7: 0E32    	                ld      C,VDP_SET       ; load VDP address into C
09F9: ED69    	                out     (C),L           ; send low byte of address
09FB: ED61    	                out     (C),H           ; send high byte
09FD: 21FE39  	                ld      HL,CHRST68      ; starting address of 6x8 charset into ROM
0A00: A7      	                and     A               ; is it text mode (A=0)?
0A01: 2803    	                jr      Z,NXTCHAR       ; yes, so jump to load chars into VRAM
0A03: 21FE41  	                ld      HL,CHRST88      ; no, so we change and load the 8x8 charset
0A06: 1608    	NXTCHAR:        ld      D,$08           ; 8 bytes per pattern char
0A08: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
0A0A: 7E      	SENDCHRPTRNS:   ld      A,(HL)          ; load byte to send to VDP
0A0B: ED79    	                out     (C),A           ; write byte into VRAM
0A0D: 23      	                inc     HL              ; inc byte pointer
0A0E: 15      	                dec     D               ; 8 bytes sents (0 char)?
0A0F: 20F9    	                jr      NZ,SENDCHRPTRNS ; no, continue
0A11: 10F3    	                djnz    NXTCHAR         ; yes, decrement chars counter and continue for all the chars
0A13: C9      	                ret                     ; return to caller
              	
              	;------------------------------------------------------------------------------
              	; NAME TABLE:       buffer video - contains the chars to be shown on video
              	; PATTERN TABLE:    charset - contains the chars/tiles to be loaded into the name table
              	; COLOR TABLE:      color settings for chars/tiles
              	
              	                ; VDP register settings for a text display
0A14: 00      	VDPMODESET      defb    %00000000       ; reg.0: external video off
0A15: D0      	                defb    %11010000       ; reg.1: 16K VRAM, video on, int. off, text mode (40x24)
0A16: 02      	                defb    $02             ; reg.2: name table set to $0800 ($02x$400)
0A17: 00      	                defb    $00             ; reg.3: not used in text mode
0A18: 00      	                defb    $00             ; reg.4: pattern table set to $0000
0A19: 00      	                defb    $00             ; reg.5: not used in text mode
0A1A: 00      	                defb    $00             ; reg.6: not used in text mode
0A1B: F5      	                defb    $f5             ; reg.7: white text on light blue background
              	
0A1C:         	VDPMODESET1     ; VDP register settings for a graphics 1 mode
0A1C: 00      	                defb    %00000000       ; reg.0: ext. video off
0A1D: C0      	                defb    %11000000       ; reg.1: 16K Vram; video on, int off, graphics mode 1, sprite size 8x8, sprite magn. 0
0A1E: 06      	                defb    $06             ; reg.2: name table address: $1800
0A1F: 80      	                defb    $80             ; reg.3: color table address: $2000
0A20: 00      	                defb    $00             ; reg.4: pattern table address: $0000
0A21: 36      	                defb    $36             ; reg.5: sprite attr. table address: $1B00
0A22: 07      	                defb    $07             ; reg.6: sprite pattern table addr.: $3800
0A23: 05      	                defb    $05             ; reg.7: backdrop color (light blue)
              	
0A24:         	VDPMODESET2     ; VDP register settings for a graphics 2 mode
0A24: 02      	                defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
0A25: C0      	                defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
0A26: 06      	                defb    $06             ; reg.2: name table addr.: $1800
0A27: FF      	                defb    $FF             ; reg.3: color table addr.: $2000
0A28: 03      	                defb    $03             ; reg.4: pattern table addr.: $0000
0A29: 36      	                defb    $36             ; reg.5: sprite attr. table addr.: $1B00
0A2A: 07      	                defb    $07             ; reg.6: sprite pattern table addr.: $3800
0A2B: 05      	                defb    $05             ; reg.7: backdrop color: light blue
              	
0A2C:         	VDPMODESETMC    ; VDP register settings for a multicolor mode
0A2C: 00      	                defb    %00000000       ; reg.0: ext. video dis.
0A2D: CB      	                defb    %11001011       ; reg.1: 16K VRAM, video on, INT off, multicolor mode, sprite size 8x8, sprite magn. 0
0A2E: 02      	                defb    $02             ; reg.2: name table addr.: $0800
0A2F: 00      	                defb    $00             ; reg.3: don't care
0A30: 00      	                defb    $00             ; reg.4: pattern table addr.: $0000
0A31: 36      	                defb    $36             ; reg.5: sprite attr. table addr.: $1B00
0A32: 07      	                defb    $07             ; reg.6: sprite pattern table addr.: $3800
0A33: 0F      	                defb    $0F             ; reg.7: backdrop color (white)
              	
0A34:         	VDPMODESETEX2   ; VDP register settings for an extended graphics 2 mode
0A34: 02      	                defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
0A35: C0      	                defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
0A36: 0E      	                defb    $0E             ; reg.2: name table addr.: $3800
0A37: 9F      	                defb    $9F             ; reg.3: color table addr.: $2000
0A38: 00      	                defb    $00             ; reg.4: pattern table addr.: $0000
0A39: 76      	                defb    $76             ; reg.5: sprite attr. table addr.: $3B00
0A3A: 03      	                defb    $03             ; reg.6: sprite pattern table addr.: $1800
0A3B: 05      	                defb    $05             ; reg.7: backdrop color: light blue
              	
0A3C:         	LM80CLOGO       ; patterns to compose the splash screen logo
0A3C: 00000000	                defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0A40: 00...   	
0A5C: 00000F0A	                defb    0,0,15,10,11,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0A60: 0B100000	
0A64: 00000000	
0A68: 00...   	
0A7C: 00000D17	                defb    0,0,13,23,0,12,0,0,0,1,0,0,0,20,0,0,6,5,6,21,22,7,6,21,22,7,6,1,1,7,0,0
0A80: 000C0000	
0A84: 00010000	
0A88: 00140000	
0A8C: 06050615	
0A90: 16070615	
0A94: 16070601	
0A98: 01070000	
0A9C: 00000D00	                defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,20,6,1,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
0AA0: 000C0000	
0AA4: 00010000	
0AA8: 00011406	
0AAC: 01050305	
0AB0: 03050305	
0AB4: 03050305	
0AB8: 03050000	
0ABC: 00000D00	                defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,1,1,1,5,9,20,19,8,3,5,19,5,3,5,0,0,0,0
0AC0: 000C0000	
0AC4: 00010000	
0AC8: 00010101	
0ACC: 01050914	
0AD0: 13080305	
0AD4: 13050305	
0AD8: 00000000	
0ADC: 00000D00	                defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,8,3,5,6,21,22,7,3,1,22,5,3,5,0,0,0,0
0AE0: 000C0000	
0AE4: 00010000	
0AE8: 00010008	
0AEC: 03050615	
0AF0: 16070301	
0AF4: 16050305	
0AF8: 00000000	
0AFC: 00000D00	                defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
0B00: 000C0000	
0B04: 00010000	
0B08: 00010000	
0B0C: 03050305	
0B10: 03050305	
0B14: 03050305	
0B18: 03050000	
0B1C: 00000D00	                defb    0,0,13,0,0,12,0,0,0,1,4,4,0,1,0,0,3,5,9,20,19,8,9,20,19,8,9,1,1,8,0,0
0B20: 000C0000	
0B24: 00010404	
0B28: 00010000	
0B2C: 03050914	
0B30: 13080914	
0B34: 13080901	
0B38: 01080000	
0B3C: 00000E12	                defb    0,0,14,18,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0B40: 12110000	
0B44: 00000000	
0B48: 00...   	
0B5C: 00000000	                defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; ------------------------------------------------------------------------------
0B60: 00...   	
              	; LM80C - PSG ROUTINES - R3.8
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. Code and computer schematics are released under
              	; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
              	; kind of warranty: you can use them at your own risk.
              	; You are free to use them for any non-commercial use: you are only asked to
              	; maintain the copyright notices, include this advice and the note to the 
              	; attribution of the original version to Leonardo Miliani, if you intend to
              	; redistribuite them.
              	; https://www.leonardomiliani.com
              	; 
              	; Please support me by visiting the following links:
              	; Main project page: https://www.leonardomiliani.com
              	; Schematics and code: https://github.com/leomil72/LM80C
              	; Videos about the computer: https://www.youtube.com/user/leomil72/videos
              	; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
              	; ------------------------------------------------------------------------------
              	;
              	; ------------------------------------------------------------------------------
              	
              	;------------------------------------------------------------------------------
              	; configure the PSG
0B7C: 211782  	initPSG:        ld      HL,CHASNDDTN    ; starting address of sound & keyboard RAM registers
0B7F: 060A    	                ld      B,$0A           ; # of PSG sound & keyboard registers
0B81: AF      	                xor     A               ; reset A
0B82: 77      	EMPTSNDBFR:     ld      (HL),A          ; reset RAM register
0B83: 23      	                inc     HL              ; next register
0B84: 10FC    	                djnz    EMPTSNDBFR      ; repeat
0B86: 0610    	CLRPSGREGS:     ld      B,$10           ; 16 registers to set
0B88: 219A0B  	                ld      HL,SNDREGCFG    ; starting address of register settings
0B8B: 1600    	                ld      D,$00           ; first register
0B8D: 7A      	RSTPSG:         ld      A,D             ; register value
0B8E: CDD40B  	                call    SETSNDREG       ; select register
0B91: 7E      	                ld      A,(HL)          ; load value
0B92: CDD90B  	                call    WRTSNDREG       ; write to register
0B95: 14      	                inc     D               ; next register
0B96: 23      	                inc     HL              ; next value
0B97: 10F4    	                djnz    RSTPSG          ; repeat for each register
0B99: C9      	                ret                     ; return to caller
              	
0B9A: 00000000	SNDREGCFG:      defb $00,$00,$00,$00,$00,$00,$00,%01111111
0B9E: 0000007F	
0BA2: 00000000	                defb $00,$00,$00,$00,$00,$00,$ff,$ff
0BA6: 0000FFFF	
              	                ; reg. 7: set I/O ch.A to OUTPUT, I/O ch.B to INPUT; set noise to OFF; set audio to OFF
              	
              	
              	; routines to play a welcome beep on channel C (tone 4010) and to shut it off
0BAA: 21C40B  	WLCMBEEP:       ld      HL,WLCBPDAT     ; data address
0BAD: C3B30B  	                jp      SENDSND
0BB0: 21CC0B  	NOBEEP:         ld      HL,NOBPDAT      ; data address
0BB3: C5      	SENDSND:        push    BC
0BB4: 0604    	                ld      B,$04           ; 4 pairs
0BB6: 7E      	RPTWLCMBP:      ld      A,(HL)          ; read register #
0BB7: CDD40B  	                call    SETSNDREG
0BBA: 23      	                inc     HL              ; next cell
0BBB: 7E      	                ld      A,(HL)          ; read value
0BBC: CDD90B  	                call    WRTSNDREG
0BBF: 23      	                inc     HL
0BC0: 10F4    	                djnz    RPTWLCMBP       ; repeat
0BC2: C1      	                pop     BC
0BC3: C9      	                ret                     ; return to caller
              	
0BC4: 077B0456	WLCBPDAT:       defb    $07,%01111011,$04,$56,$05,$00,$0A,$0F
0BC8: 05000A0F	
0BCC: 04000500	NOBPDAT:        defb    $04,$00,$05,$00,$0A,$00,$07,%01111111
0BD0: 0A00077F	
              	
              	
              	; select register on PSG
0BD4: 0E40    	SETSNDREG:      ld      C,PSG_REG       ; PSG register port
0BD6: ED79    	                out     (C),A           ; set register
0BD8: C9      	                ret                     ; return to caller
              	
              	; send data to PSG
0BD9: 0E41    	WRTSNDREG:      ld      C,PSG_DAT       ; PSG data port
0BDB: ED79    	                out     (C),A           ; send data
0BDD: C9      	                ret                     ; return to caller
              	
              	; manage the sounds' duration: each time this subroutine is called, it
              	; decrements the single sound durations (measured in ms) and eventually
              	; shut off the audio channel whose counter has reached 0.
              	; (this sub-routine is called by CH3 timer ISR)
0BDE: DDE5    	MNGSNDS:        push    IX              ; store IX
0BE0: DD211782	                ld      IX,CHASNDDTN    ; starting address of tones duration
0BE4: 0603    	                ld      B,$03           ; 3 channels to check
0BE6: 2601    	                ld      H,$01           ; mixer channels: A=>bit 1, B=>bit 2, C=>bit 3
0BE8: DD5E00  	CHKSNDCH:       ld      E,(IX+0)        ; load LSB into E
0BEB: DD5601  	                ld      D,(IX+1)        ; load MSB into D
0BEE: 7B      	                ld      A,E             ; load E into A
0BEF: B2      	                or      D               ; check that DE=0
0BF0: 282D    	                jr      Z,CNTCHKSND     ; yes, jump over
0BF2: 1B      	                dec     DE              ; no, so decrement DE
0BF3: 7B      	                ld      A,E             ; reload E into A...
0BF4: DD7300  	                ld      (IX+0),E        ; store new...
0BF7: DD7201  	                ld      (IX+1),D        ; ...duration and...
0BFA: B2      	                or      D               ; ...do another check to see if DE=0
0BFB: 2022    	                jr      NZ,CNTCHKSND    ; no, so jump over
              	                                        ; if yes, let's shut down the corresponding channel
              	                                        ; to shut down a tone we set 0 into tone register
              	                                        ; and disable the channel into mixer
0BFD: 3E03    	                ld      A,$03           ; three channels
0BFF: 90      	                sub     B               ; find current channel (0->A, 1->B, 2->C)
0C00: 87      	                add     A,A             ; and find first register (A=>0, B=>2, C=>4)
0C01: 0E40    	                ld      C,PSG_REG       ; PSG register selector port
0C03: ED79    	                out     (C),A           ; select first tone register of channel
0C05: 2E00    	                ld      L,$00           ; value 0 into L
0C07: 0E41    	                ld      C,PSG_DAT       ; PSG data selector port
0C09: ED69    	                out     (C),L           ; write 0 into register
0C0B: 0E40    	                ld      C,PSG_REG       ; PSG register selector port
0C0D: 3C      	                inc     A               ; next tone register
0C0E: ED79    	                out     (C),A           ; select second tone register of channel
0C10: 0E41    	                ld      C,PSG_DAT       ; PSG data selector port
0C12: ED69    	                out     (C),L           ; write 0 into register
0C14: 3E07    	                ld      A,$07           ; mixer register
0C16: 0E40    	                ld      C,PSG_REG       ; PSG register selector port
0C18: ED79    	                out     (C),A           ; set mixer register
0C1A: ED78    	                in      A,(C)           ; load current value
0C1C: B4      	                or      H               ; set off the channel into the mixer (remember that 1=OFF)
0C1D: ED79    	                out     (C),A           ; send new value for the mixer
0C1F: DD23    	CNTCHKSND:      inc     IX              ; set for...
0C21: DD23    	                inc     IX              ; ...next channel...
0C23: CB24    	                sla     H               ; shift left H 1 bit
0C25: 10C1    	                djnz    CHKSNDCH        ; repeat for 3 channels
0C27: DDE1    	                pop     IX              ; restore IX
0C29: C9      	                ret                     ; return to caller
              	
              	; read a specific row of the keyboard matrix, set by A
              	; return read into A
0C2A: C5      	READKBLN:       push    BC
0C2B: 060E    	                ld      B,$0E           ; reg #14
0C2D: 0E40    	                ld      C,PSG_REG       ; PSG register port
0C2F: ED41    	                out     (C),B           ; select reg #14
0C31: 0E41    	                ld      C,PSG_DAT       ; PSG data port
0C33: ED79    	                out     (C),A           ; activate SHIFT row
0C35: 060F    	                ld      B,$0F           ; register #15 (port B)
0C37: 0E40    	                ld      C,PSG_REG       ; PSG register port
0C39: ED41    	                out     (C),B           ; select reg. 15 (port B)
0C3B: ED78    	                in      A,(C)           ; read register #15
0C3D: C1      	                pop     BC
0C3E: C9      	                ret
              	
              	; read the keyboard matrix to look for a key pressure
0C3F: 0E40    	KEYBOARD:       ld      C,PSG_REG       ; PSG register port
0C41: 0607    	                ld      B,$07           ; set register #7...
0C43: ED41    	                out     (C),B           ; ...to work with
0C45: ED78    	                in      A,(C)           ; read register #7
0C47: CBF7    	                set     6,A             ; port A set to output
0C49: CBBF    	                res     7,A             ; port B set to input
0C4B: ED41    	                out     (C),B           ; set register #7
0C4D: 0E41    	                ld      C,PSG_DAT       ; PSG data port
0C4F: ED79    	                out     (C),A           ; set I/O ports w/o altering the rest of the mixer
              	                ; check special keys (SHIFT/ALT/CTRL)
0C51: 3EFD    	                ld      A,%11111101     ; select SHIFT row
0C53: CD2A0C  	                call    READKBLN        ; read row
0C56: CB5F    	                bit     3,A             ; test if SHIFT key is pressed (4th bit is reset)
0C58: 2005    	                jr      NZ,CHECKALT     ; no, so go on
0C5A: 212182  	                ld      HL,CONTROLKEYS  ; control key flags
0C5D: 3601    	                ld      (HL),%00000001  ; set SHIFT flag, reset CTRL & ALT flags (currently multiply control keys are NOT supported)
0C5F: 3EFE    	CHECKALT:       ld      A,%11111110     ; select ALT row
0C61: CD2A0C  	                call    READKBLN        ; read ALT row
0C64: CB6F    	                bit     5,A             ; test if ALT key is pressed (5th bit is reset)
0C66: 2005    	                jr      NZ,CHECKCTRL    ; no, so go on
0C68: 212182  	                ld      HL,CONTROLKEYS  ; control key flags
0C6B: 3604    	                ld      (HL),%00000100  ; set ALT flag, reset SHIFT & CTRL flag (currently multiply control keys are NOT supported)
0C6D: 3EFE    	CHECKCTRL:      ld      A,%11111110     ; select CTRL row
0C6F: CD2A0C  	                call    READKBLN        ; read CTRL row
0C72: CB57    	                bit     2,A             ; test if CTRL key is pressed (3rd bit is reset)
0C74: 2005    	                jr      NZ,CHECKKBD     ; no, so make a normal reading
0C76: 212182  	                ld      HL,CONTROLKEYS  ; control key flags
0C79: 3602    	                ld      (HL),%00000010  ; set CTRL flag, reset SHIFT & ALT flags (currently multiply control keys are NOT supported)
0C7B: 0608    	CHECKKBD:       ld      B,$08           ; 8 lines
0C7D: 3E7F    	                ld      A,%01111111     ; start from the last line of the matrix
0C7F: 160E    	RPTKBDRD:       ld      D,$0E           ; register #14 (port A)
0C81: 0E40    	                ld      C,PSG_REG       ; PSG register port
0C83: ED51    	                out     (C),D           ; select reg. #14
0C85: 0E41    	                ld      C,PSG_DAT       ; PSG data port
0C87: ED79    	                out     (C),A           ; activate 1 line (active line is grounded, i.e. with a LOW signal)
0C89: 5F      	                ld      E,A             ; save current line into E
0C8A: 160F    	                ld      D,$0F           ; register #15 (port B)
0C8C: 0E40    	                ld      C,PSG_REG       ; PSG register port
0C8E: ED51    	                out     (C),D           ; select reg. 15 (port B)
0C90: 00      	                nop
0C91: ED78    	                in      A,(C)           ; read register #15
0C93: FEFF    	                cp      $FF             ; is there any line set to 0?
0C95: 282E    	                jr      Z,NOKEYPRSD     ; no, go to the next row
              	                ; check control keys
0C97: 321E82  	                ld      (KBTMP),A       ; yes, check if a control key was pressed. First, store current row
0C9A: 78      	                ld      A,B             ; copy current row (B) into A
0C9B: FE02    	                cp      $02             ; is it the row of the SHIFT?
0C9D: 200F    	                jr      NZ,TESTALT      ; no, continue checking the other control keys
0C9F: 3A1E82  	                ld      A,(KBTMP)       ; yes, retrieve current row data
0CA2: CB5F    	                bit     3,A             ; check SHIFT bit line
0CA4: 202E    	                jr      NZ,FINDKEY      ; no SHIFT, continue checking
0CA6: CBDF    	                set     3,A             ; yes, it's the SHIFT. So remove SHIFT bit
0CA8: FEFF    	                cp      $FF             ; after deleting the SHIFT bit, is there any other bit selected?
0CAA: 2028    	                jr      NZ,FINDKEY      ; yes, go to check which one
0CAC: 1817    	                jr      NOKEYPRSD       ; no, go to next row        
0CAE: FE01    	TESTALT:        cp      $01             ; is it the line of ALT & CTRL?
0CB0: 3A1E82  	                ld      A,(KBTMP)       ; retrieve current row data
0CB3: 201F    	                jr      NZ,FINDKEY      ; no, continue
0CB5: CB6F    	                bit     5,A             ; yes, check ALT bit line
0CB7: 2002    	                jr      NZ,TESTCTRL     ; no ALT, continue checking
0CB9: CBEF    	                set     5,A             ; yes, it's the ALT. So remove ALT bit
0CBB: CB57    	TESTCTRL:       bit     2,A             ; check CTRL bit line
0CBD: 2002    	                jr      NZ,ENDCTRLCK    ; no CTRL, continue checking
0CBF: CBD7    	                set     2,A             ; delete CTRL bit flag
0CC1: FEFF    	ENDCTRLCK:      cp      $FF             ; after deleting the ALT & CTRL bits, is there any other bit selected?
0CC3: 200F    	                jr      NZ,FINDKEY      ; yes, go to check which one
0CC5: 7B      	NOKEYPRSD:      ld      A,E             ; no key pressed, load current output port
0CC6: 0F      	                rrca                    ; rotate right by 1
0CC7: 10B6    	                djnz    RPTKBDRD        ; repeat for 8 lines
0CC9: AF      	                xor     A               ; if exit from here, no key has been pressed...
0CCA: 322082  	                ld      (LASTKEYPRSD),A ; ...so reset the last key cell...
0CCD: 322182  	                ld      (CONTROLKEYS),A ; ...reset contro key flags...
0CD0: 321D82  	                ld      (KBDNPT),A      ; ...no input from keyboard...
0CD3: C9      	                ret                     ; ...and leave
0CD4: 1EFF    	FINDKEY:        ld      E,$FF           ; counter
0CD6: 1C      	CHKLN:          inc     E               ; E goes from 0 to 7
0CD7: CB3F    	                srl     A               ; is the first bit reset? (we're looking for a "0", meaning grounded line)
0CD9: 38FB    	                jr      C,CHKLN         ; no, check next bit
0CDB: 3A2182  	                ld      A,(CONTROLKEYS) ; load control key flags
0CDE: 21A70D  	                ld      HL,KBMAP        ; normal keymap
0CE1: FE01    	                cp      $01             ; SHIFT flag?
0CE3: 2005    	                jr      NZ,CHKCTRL      ; no, jump over
0CE5: 21E70D  	                ld      HL,KBMAP_SFT    ; SHIFT keymap
0CE8: 1810    	                jr      LOADMAP         ; and load it
0CEA: FE02    	CHKCTRL:        cp      $02             ; CTRL flag?
0CEC: 2005    	                jr      NZ,CHKALT       ; no, jump over
0CEE: 21670E  	                ld      HL,KBMAP_CTRL   ; CTRL map
0CF1: 1807    	                jr      LOADMAP         ; and load it
0CF3: FE04    	CHKALT:         cp      $04             ; ALT flag?
0CF5: 2003    	                jr      NZ,LOADMAP      ; no, check over
0CF7: 21270E  	                ld      HL,KBMAP_ALT    ; ALT map
0CFA: 05      	LOADMAP:        dec     B               ; decrement row # (rows go from 0 to 7)
0CFB: 48      	                ld      C,B             ; move B into C and...
0CFC: CB21    	                sla     C               ; ...multiply it...
0CFE: CB21    	                sla     C               ; ...by 8 to find...
0D00: CB21    	                sla     C               ; ...the current row into the matrix
0D02: 0600    	                ld      B,$00           ; reset B
0D04: 09      	                add     HL,BC           ; find the address of the current row
0D05: 50      	                ld      D,B             ; reset D
0D06: 19      	                add     HL,DE           ; find the current column
0D07: 3A2082  	                ld      A,(LASTKEYPRSD) ; load the last key pressed
0D0A: BE      	                cp      (HL)            ; is it the same key?
0D0B: 2847    	                jr      Z,LVKBRDCHK     ; yes, so do nothing
0D0D: 7E      	                ld      A,(HL)          ; no, load it...
0D0E: 322082  	                ld      (LASTKEYPRSD),A ; ...store it...
0D11: 321F82  	                ld      (TMPKEYBFR),A   ; ...insert it into the INKEY buffer...
0D14: 32E081  	                ld      (CHR4VID),A     ; ...and store char for video
0D17: FE03    	                cp      CTRLC           ; is it RUN/STOP?
0D19: 2005    	                jr      NZ,CNTKBCK      ; no, jump over
0D1B: CD3301  	                call    CHARINTOBFR     ; yes, send directly to buffer and...
0D1E: 1830    	                jr      LVKBRDCHK2      ; ...leave
0D20: 010008  	CNTKBCK:        ld      BC,$0800        ; 8 FN keys (B), FN key number (C)
0D23: 219F0D  	                ld      HL,FNKEYSORD    ; FN keys codes
0D26: BE      	CHKFNK:         cp      (HL)            ; is it an FN key?
0D27: CA550D  	                jp      Z,PRNTFNKEY     ; yes, jump over
0D2A: 0C      	                inc     C               ; next FN key
0D2B: 23      	                inc     HL              ; next FN key code
0D2C: 10F8    	                djnz    CHKFNK          ; continue for 8 FN keys
0D2E: 3E01    	SNDKEYTOBFR:    ld      A,$01           ; normal key - set input flag
0D30: 321D82  	                ld      (KBDNPT),A      ; to keyboard
0D33: 3ADF81  	                ld      A,(PRNTVIDEO)   ; load status of print-on-video
0D36: B7      	                or      A               ; is the print-on-video disabled?
0D37: CA400D  	                jp      Z,PUTCHRBUF     ; yes, so send char to input buffer
0D3A: 3ADD81  	                ld      A,(CRSR_STATE)  ; check cursor state
0D3D: B7      	                or      A               ; is it 0 (cursor OFF)?
0D3E: 200D    	                jr      NZ,PNT2VD       ; no, print on screen
0D40: AF      	PUTCHRBUF:      xor     A
0D41: 321D82  	                ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
0D44: 3A1F82  	                ld      A,(TMPKEYBFR)   ; retrieve char
0D47: CD3301  	                call    CHARINTOBFR     ; cursor off, so send char to buffer...
0D4A: C3500D  	                jp      LVKBRDCHK2      ; ...and leave
0D4D: CD8B06  	PNT2VD:         call    CHAR2VID        ; send char to video
0D50: AF      	LVKBRDCHK2:     xor     A
0D51: 322182  	                ld      (CONTROLKEYS),A ; reset control key flags
0D54: C9      	LVKBRDCHK:      ret                     ; return to caller: the current key code is into TMPKEYBFR    
              	                                        ; manage FN keys          
0D55: 57      	PRNTFNKEY:      ld      D,A             ; copy A into D
0D56: 2AAF80  	                ld      HL,(LINEAT)     ; Get current line number
0D59: 23      	                inc     HL              ; -1 means direct statement
0D5A: 7C      	                ld      A,H
0D5B: B5      	                or      L
0D5C: 7A      	                ld      A,D             ; retrieve char
0D5D: 20CF    	                jr      NZ,SNDKEYTOBFR  ; indirect mode - just send FN key code to buffer
0D5F: 79      	                ld      A,C             ; direct mode, so print text - first, get FN key number
0D60: 87      	                add     A,A
0D61: 87      	                add     A,A
0D62: 87      	                add     A,A
0D63: 87      	                add     A,A             ; FN key number * 16
0D64: 4F      	                ld      C,A             ; move it into C
0D65: 0600    	                ld      B,$00           ; reset B, to get offset
0D67: 21B380  	                ld      HL,FNKEYS       ; load address of FN keys texts
0D6A: 09      	                add     HL,BC           ; get correct text address
0D6B: 0610    	                ld      B,$10           ; 16 chars
0D6D: 7E      	LDFNKEYCHR:     ld      A,(HL)          ; load char
0D6E: A7      	                and     A               ; null char?
0D6F: CA500D  	                jp      Z,LVKBRDCHK2    ; yes, so leave
0D72: 57      	                ld      D,A             ; pass char into D
0D73: 3ADF81  	                ld      A,(PRNTVIDEO)   ; load status of print-on-video
0D76: B7      	                or      A               ; is the print-on-video disabled?
0D77: CA870D  	                jp      Z,PUTCHRBUF1    ; yes, so send char to input buffer
0D7A: 3ADD81  	                ld      A,(CRSR_STATE)  ; check cursor state
0D7D: B7      	                or      A               ; is it 0 (cursor OFF)?
0D7E: C4920D  	                call    NZ,PRNTFNK      ; no, print on screen
0D81: 23      	CNTFNK:         inc     HL              ; next char
0D82: 10E9    	                djnz    LDFNKEYCHR      ; repeat for max. 16 chars
0D84: C3500D  	                jp      LVKBRDCHK2      ; leave
0D87: AF      	PUTCHRBUF1:     xor     A
0D88: 321D82  	                ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
0D8B: 7A      	                ld      A,D             ; retrieve char
0D8C: CD3301  	                call    CHARINTOBFR     ; cursor off, so send char to buffer...
0D8F: C3810D  	                jp      CNTFNK          ; jump over
0D92: 7A      	PRNTFNK:        ld      A,D             ; recover char
0D93: 32E081  	                ld      (CHR4VID),A     ; store char for printing
0D96: 3E01    	                ld      A,$01           ; normal key - set input flag
0D98: 321D82  	                ld      (KBDNPT),A      ; to keyboard
0D9B: CD8B06  	                call    CHAR2VID        ; print on screen
0D9E: C9      	                ret                     ; return to caller
              	
              	
              	;-----------------------------------------------------------------------
0D9F: 01020405	FNKEYSORD:      defb 1,2,4,5,6,22,23,24                 ; order of FN Keys
0DA3: 06161718	
              	;-----------------------------------------------------------------------
              	; key codes
0DA7: 31190E03	KBMAP:          defb '1',25,14,3,' ',16,'q','2'         ; 25=HOME  14=CTRL  3=RUN/STOP 16=C=
0DAB: 20107132	
0DAF: 33776114	                defb '3','w','a',20,'z','s','e','4'     ; 20=SHIFT
0DB3: 7A736534	
0DB7: 35726478	                defb '5','r','d','x','c','f','t','6'
0DBB: 63667436	
0DBF: 37796776	                defb '7','y','g','v','b','h','u','8'
0DC3: 62687538	
0DC7: 39696A6E	                defb '9','i','j','n','m','k','o','0'
0DCB: 6D6B6F30	
0DCF: 1F706C2C	                defb 31,'p','l',',','.',':','-',30      ; 31=CURSOR DOWN  30=CURSOR UP
0DD3: 2E3A2D1E	
0DD7: 1C2A3B2F	                defb 28,'*',';','/',27,'=','+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
0DDB: 1B3D2B1D	
0DDF: 080DFC40	                defb 8,13,252,'@',1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=£  1=F1  2=F2  4=F3  24=HELP
0DE3: 01020418	
              	
              	; shifted codes - not all the keys have the shifted version
0DE7: 210C0E03	KBMAP_SFT:      defb '!',12,14,3,' ',16,'Q',34          ; 12=CLEAR  14=CTRL  3=RUN/STOP 16=C=   34="
0DEB: 20105122	
0DEF: 23574114	                defb '#','W','A',20,'Z','S','E','$'     ; 20=SHIFT
0DF3: 5A534524	
0DF7: 25524458	                defb '%','R','D','X','C','F','T','&'
0DFB: 43465426	
0DFF: 27594756	                defb 39,'Y','G','V','B','H','U','('     ; 39='
0E03: 42485528	
0E07: 29494A4E	                defb ')','I','J','N','M','K','O',94     ; 94=^
0E0B: 4D4B4F5E	
0E0F: 1F504C3C	                defb 31,'P','L','<','>','[','_',30      ; 31=CURSOR DOWN  30=CURSOR UP
0E13: 3E5B5F1E	
0E17: 1C2A5D3F	                defb 28,'*',']','?',27,198,'+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
0E1B: 1BC62B1D	
0E1F: 080DD340	                defb 8,13,211,'@',5,6,22,23             ; 211=€  5=F4  6=F5  22=F6  23=F7
0E23: 05061617	
              	
              	; ALT (C=) codes - not all the keys have the alt-ed version
0E27: 310C0E03	KBMAP_ALT:      defb '1',12,14,3,' ',16,222,196         ; 12=CLEAR  14=CTRL  3=RUN/STOP  16=C=  34="
0E2B: 2010DEC4	
0E2F: 33DD8514	                defb '3',221,133,20,131,130,165,'4'     ; 20=SHIFT
0E33: 8382A534	
0E37: 35A2A684	                defb '5',162,166,132,157,163,168,'6'
0E3B: 9DA3A836	
0E3F: 37ABA9A1	                defb '7',171,169,161,158,172,213,'8'    ;
0E43: 9EACD538	
0E47: 39D6D89F	                defb '9',214,216,159,160,215,135,195    ;
0E4B: A0D787C3	
0E4F: 1F888AC1	                defb 31,136,138,193,192,123,144,30      ; 31=CURSOR DOWN  123={  30=CURSOR UP
0E53: C07B901E	
0E57: 1C8F7DFE	                defb 28,143,125,254,27,209,148,29       ; 28=CURSOR LEFT  125=}  27=ESCAPE  29=CURSOR RIGHT
0E5B: 1BD1941D	
0E5F: 080DE089	                defb 8,13,224,137,5,6,22,23             ; 8=DEL(backspace)  13=RETURN  252=£  5=F4  6=F5  22=F6  23=F7
0E63: 05061617	
              	
              	; CTRL codes - not all the keys have the control-ed version
0E67: 31190E03	KBMAP_CTRL:     defb '1',25,14,3,' ',16,154,'2'         ; 25=HOME  14=CTRL  3=RUN/STOP  16=C=
0E6B: 20109A32	
0E6F: 339C9514	                defb '3',156,149,20,152,150,153,'4'     ; 20=SHIFT
0E73: 98969934	
0E77: 359BB097	                defb '5',155,176,151,177,175,165,'6'
0E7B: B1AFA536	
0E7F: 37A6A8B2	                defb '7',166,168,178,179,169,167,'8'
0E83: B3A9A738	
0E87: 39B8AAAC	                defb '9',184,170,172,171,181,164,'0'
0E8B: ABB5A430	
0E8F: 1FA3AD2C	                defb 31,163,173,',','.',':',186,30      ; 31=CURSOR DOWN  30=CURSOR UP
0E93: 2E3ABA1E	
0E97: 1CE13B2F	                defb 28,225,';','/',27,212,185,29       ; 28=CURSOR LEFT  27=ESCAPE  212=π  29=CURSOR RIGHT
0E9B: 1BD4B91D	
0E9F: 080DBDA2	                defb 8,13,189,162,1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=£  1=F1  2=F2  4=F3  24=HELP; ------------------------------------------------------------------------------
0EA3: 01020418	
              	; LM80C - BASIC32K - R3.8
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. Code and computer schematics are released under
              	; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
              	; kind of warranty: you can use them at your own risk.
              	; You are free to use them for any non-commercial use: you are only asked to
              	; maintain the copyright notices, include this advice and the note to the 
              	; attribution of the original version to Leonardo Miliani, if you intend to
              	; redistribuite them.
              	; https://www.leonardomiliani.com
              	; 
              	; Please support me by visiting the following links:
              	; Main project page: https://www.leonardomiliani.com
              	; Schematics and code: https://github.com/leomil72/LM80C
              	; Videos about the computer: https://www.youtube.com/user/leomil72/videos
              	; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
              	; ------------------------------------------------------------------------------
              	; NASCOM BASIC versions:
              	; 4.7  - original version by NASCOM
              	; 4.7b - modified version by Grant Searle (additional commands & functions)
              	; 4.8  - modified by Leonardo Miliani (new commands/functions)
              	
              	
              	;------------------------------------------------------------------------------
              	;  B A S I C
              	;------------------------------------------------------------------------------
              	
              	; GENERAL EQUATES
              	
0000:         	NLLCR           equ     $00             ; null char (used as space/empty char in video prints)
0003:         	CTRLC           equ     $03             ; Control "C"
0007:         	CTRLG           equ     $07             ; Control "G"
0008:         	BKSP            equ     $08             ; Back space
000A:         	LF              equ     $0A             ; Line feed
000C:         	CS              equ     $0C             ; Clear screen
000D:         	CR              equ     $0D             ; Carriage return
000F:         	CTRLO           equ     $0F             ; Control "O"
0011:         	CTRLQ           equ     $11             ; Control "Q"
0012:         	CTRLR           equ     $12             ; Control "R"
0013:         	CTRLS           equ     $13             ; Control "S"
0015:         	CTRLU           equ     $15             ; Control "U"
0019:         	HOME            equ     $19             ; Home (cursor at 0,0)
001B:         	ESC             equ     $1B             ; Escape
0020:         	SPC             equ     $20             ; Space
007F:         	DEL             equ     $7F             ; Delete
              	; cursor ASCII codes
001C:         	CRSLFT          equ     $1C             ; cursor left
001D:         	CRSRGT          equ     $1D             ; cursor right
001E:         	CRSUP           equ     $1E             ; cursor up
001F:         	CRSDN           equ     $1F             ; cursor down
              	
              	
              	; BASIC WORK SPACE LOCATIONS
              	; BY STARTING FROM $8045 THE INTERPRETER ALLOCATES THE FOLLOWING RAM CELLS
              	; TO STORE IMPORTANT VALUES USED FOR SOME SPECIFIC FUNCTIONS:
              	; THEY CAN BE VECTOR (ADDRESSES) FUNCTIONS, SYSTEM DATAS (I.E. VARIABLES)
              	; AND SO ON. THE FIRST CELLS ARE FILLED WITH VALUES STORED INTO ROM AT $(INITAB) ADDRESS
805E:         	WRKSPC          equ     basicStarted+$01; (3) BASIC Work space
8061:         	NMIUSR          equ     WRKSPC+$03      ; (3) NMI exit point routine
8064:         	USR             equ     NMIUSR+$03      ; (3) "USR (x)" jump  <-- in $8049/804A the user can store the address of a specific machine language routine
8067:         	OUTSUB          equ     USR+$03         ; (1) "out p,n"
8068:         	OTPORT          equ     OUTSUB+$01      ; (2) Port (p)
806A:         	DIVSUP          equ     OTPORT+$02      ; (1) Division support routine
806B:         	DIV1            equ     DIVSUP+$01      ; (4) <- Values
806F:         	DIV2            equ     DIV1+$04        ; (4) <-   to
8073:         	DIV3            equ     DIV2+$04        ; (3) <-   be
8076:         	DIV4            equ     DIV3+$03        ; (2) <-inserted
8078:         	SEED            equ     DIV4+$02        ; (35) Random number seed  <-- starting address of a seed table
809B:         	LSTRND          equ     SEED+$23        ; (4) Last random number
809F:         	INPSUB          equ     LSTRND+$04      ; (1) #INP (x)" Routine
80A0:         	INPORT          equ     INPSUB+$01      ; (2) PORT (x)
80A2:         	LWIDTH          equ     INPORT+$02      ; (1) Terminal width
80A3:         	COMMAN          equ     LWIDTH+$01      ; (1) Width for commas
80A4:         	NULFLG          equ     COMMAN+$01      ; (1) Null after input byte flag
80A5:         	CTLOFG          equ     NULFLG+$01      ; (1) Control "O" flag
80A6:         	CHKSUM          equ     CTLOFG+$01      ; (2) Array load/save check sum
80A8:         	NMIFLG          equ     CHKSUM+$02      ; (1) Flag for NMI break routine
80A9:         	BRKFLG          equ     NMIFLG+$01      ; (1) Break flag
80AA:         	RINPUT          equ     BRKFLG+$01      ; (3) Input reflection
80AD:         	STRSPC          equ     RINPUT+$03      ; (2) Bottom of string space
80AF:         	LINEAT          equ     STRSPC+$02      ; (2) Current line number
80B1:         	HLPLN           equ     LINEAT+$02      ; (2) Current line with errors
80B3:         	FNKEYS          equ     HLPLN+$02       ; (128) text of FN keys
8133:         	BASTXT          equ     FNKEYS+$80      ; (3) Pointer to start of program   <-- actually this is the last value pre-filled by the firmware at startup
8136:         	BUFFER          equ     BASTXT+$03      ; (5) Input buffer
813B:         	STACK           equ     BUFFER+$05      ; (85) Initial stack
8190:         	CURPOS          equ     STACK+$55       ; (1) Character position on line
8191:         	LCRFLG          equ     CURPOS+$01      ; (1) Locate/Create flag
8192:         	TYPE            equ     LCRFLG+$01      ; (1) Data type flag
8193:         	DATFLG          equ     TYPE+$01        ; (1) Literal statement flag
8194:         	LSTRAM          equ     DATFLG+$01      ; (2) Last available RAM
8196:         	TMSTPT          equ     LSTRAM+$02      ; (2) Temporary string pointer
8198:         	TMSTPL          equ     TMSTPT+$02      ; (12) Temporary string pool
81A4:         	TMPSTR          equ     TMSTPL+$0C      ; (4) Temporary string
81A8:         	STRBOT          equ     TMPSTR+$04      ; (2) Bottom of string space
81AA:         	CUROPR          equ     STRBOT+$02      ; (2) Current operator in EVAL
81AC:         	LOOPST          equ     CUROPR+$02      ; (2) First statement of loop
81AE:         	DATLIN          equ     LOOPST+$02      ; (2) Line of current DATA item
81B0:         	FORFLG          equ     DATLIN+$02      ; (1) "FOR" loop flag
81B1:         	LSTBIN          equ     FORFLG+$01      ; (1) Last byte entered
81B2:         	READFG          equ     LSTBIN+$01      ; (1) Read/Input flag
81B3:         	BRKLIN          equ     READFG+$01      ; (2) Line of break
81B5:         	NXTOPR          equ     BRKLIN+$02      ; (2) Next operator in EVAL
81B7:         	ERRLIN          equ     NXTOPR+$02      ; (2) Line of error
81B9:         	CONTAD          equ     ERRLIN+$02      ; (2) Where to CONTinue
81BB:         	PROGND          equ     CONTAD+$02      ; (2) End of program
81BD:         	VAREND          equ     PROGND+$02      ; (2) End of variables
81BF:         	ARREND          equ     VAREND+$02      ; (2) End of arrays
81C1:         	NXTDAT          equ     ARREND+$02      ; (2) Next data item
81C3:         	FNRGNM          equ     NXTDAT+$02      ; (2) Name of FN argument
81C5:         	FNARG           equ     FNRGNM+$02      ; (4) FN argument value
81C9:         	FPREG           equ     FNARG+$04       ; (3) Floating point register
81CC:         	FPEXP           equ     FPREG+$03       ; (1) Floating point exponent
81CD:         	SGNRES          equ     FPEXP+$01       ; (1) Sign of result
81CE:         	TMRCNT          equ     SGNRES+$01      ; (4) TMR counter for 1/100 seconds
              	; - - - - - - - - - - - - - - - - - - -   VIDEO REGISTERS - FROM HERE...
81D2:         	SCR_SIZE_W      equ     TMRCNT+$04      ; (1) screen width (it can be either 40 chars or 32 chars/bytes)
81D3:         	SCR_SIZE_H      equ     SCR_SIZE_W+$01  ; (1) screen height (it can be 24/48/192: 24 for text, 48 for MC, 192 for graphics)
81D4:         	SCR_MODE        equ     SCR_SIZE_H+$01  ; (1) screen mode (0=text, 1=G1, 2=G2, 3=MC, 4=ExG2)
81D6:         	SCR_NAM_TB      equ     SCR_MODE+$02    ; (2) video name table address
81D8:         	SCR_CURS_X      equ     SCR_NAM_TB+$02  ; (1) cursor X
81D9:         	SCR_CURS_Y      equ     SCR_CURS_X+$01  ; (1) cursor Y
81DA:         	SCR_CUR_NX      equ     SCR_CURS_Y+$01  ; (1) new cursor X position
81DB:         	SCR_CUR_NY      equ     SCR_CUR_NX+$01  ; (1) new cursor Y position
81DC:         	SCR_ORG_CHR     equ     SCR_CUR_NY+$01  ; (1) original char positioned under the cursor
81DD:         	CRSR_STATE      equ     SCR_ORG_CHR+$01 ; (1) state of cursor (1=on, 0=off)
81DE:         	LSTCSRSTA       equ     CRSR_STATE+$01  ; (1) last cursor state
81DF:         	PRNTVIDEO       equ     LSTCSRSTA+$01   ; (1) print on video buffer (1=on / 0=off) set to off on graphic only modes
81E0:         	CHR4VID         equ     PRNTVIDEO+$01   ; (1) char for video buffer
81E1:         	FRGNDCLR        equ     CHR4VID+$01     ; (1) foreground color as set by SCREEN or COLOR commands
81E2:         	BKGNDCLR        equ     FRGNDCLR+$01    ; (1) background color as set by SCREEN or COLOR commands
81E3:         	TMPBFR1         equ     BKGNDCLR+$01    ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81E5:         	TMPBFR2         equ     TMPBFR1+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81E7:         	TMPBFR3         equ     TMPBFR2+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81E9:         	TMPBFR4         equ     TMPBFR3+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81EB:         	VIDEOBUFF       equ     TMPBFR4+$02     ; (40) buffer used for video scrolling and other purposes
8213:         	VIDTMP1         equ     VIDEOBUFF+$28   ; (2) temporary video word
8215:         	VIDTMP2         equ     VIDTMP1+$02     ; (2) temporary video word
              	; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO VPD OUT OF THIS RANGE,
              	                                        ; OTHERWISE YOU WILL HAVE TO CHECK THE POINTER IN "EMPTY_RAM" FUNCTION
              	; - - - - - - - - - - - - - - - - - - -   SOUND & KEYBOARD REGISTERS - FROM HERE...
8217:         	CHASNDDTN       equ     VIDTMP2+$02     ; (2) sound Ch.A duration (1/100s)
8219:         	CHBSNDDTN       equ     CHASNDDTN+$02   ; (2) sound Ch.B duration (1/100s)
821B:         	CHCSNDDTN       equ     CHBSNDDTN+$02   ; (2) sound Ch.C duration (1/100s)
821D:         	KBDNPT          equ     CHCSNDDTN+$02   ; (1) temp cell used to flag if input comes from keyboard
821E:         	KBTMP           equ     KBDNPT+$01      ; (1) temp cell used by keyboard scanner
821F:         	TMPKEYBFR       equ     KBTMP+$01       ; (1) temp buffer for last key pressed
8220:         	LASTKEYPRSD     equ     TMPKEYBFR+$01   ; (1) last key code pressed
8221:         	CONTROLKEYS     equ     LASTKEYPRSD+$01 ; (1) flags for control keys (bit#0=SHIFT; bit#1=CTRL; bit#2=C=)
              	; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO PSG OUT OF THIS RANGE,
              	                                        ; OTHERWISE YOU WILL HAVE TO CHANGE THE POINTER IN "INIT_PSG" FUNCTION
8222:         	SERIALS_EN      equ     CONTROLKEYS+$01 ; (1) serial ports status: bit 0 for Port1(A), bit 1 for Port2(B): 0=OFF, 1=ON
8223:         	SERABITS        equ     SERIALS_EN+$01  ; (1) serial port A data bits
8224:         	PBUFF           equ     SERABITS+$01    ; (13) Number print buffer
8231:         	MULVAL          equ     PBUFF+$0D       ; (3) Multiplier
8234:         	PROGST          equ     MULVAL+$03      ; (100) Start of program text area
8298:         	STLOOK          equ     PROGST+$64      ; Start of memory test
              	
              	; BASIC ERROR CODE VALUES
              	; These values act as an offset to point to the error message into the error table
              	; must be incremented by 2 because they point to a word address jump
0000:         	NF              equ     $00             ; NEXT without FOR
0002:         	SN              equ     $02             ; Syntax error
0004:         	RG              equ     $04             ; RETURN without GOSUB
0006:         	OD              equ     $06             ; Out of DATA
0008:         	FC              equ     $08             ; Function call error
000A:         	OV              equ     $0A             ; Overflow
000C:         	OM              equ     $0C             ; Out of memory
000E:         	UL              equ     $0E             ; Undefined line number
0010:         	BS              equ     $10             ; Bad subscript
0012:         	DD              equ     $12             ; Re-Dimensioned array
0014:         	DZ              equ     $14             ; Division by zero (/0)
0016:         	ID              equ     $16             ; Illegal direct
0018:         	TM              equ     $18             ; Type mis-match
001A:         	OS              equ     $1A             ; Out of string space
001C:         	LS              equ     $1C             ; String too long
001E:         	ST              equ     $1E             ; String formula too complex
0020:         	CN              equ     $20             ; Can't continue
0022:         	UF              equ     $22             ; Undefined FN function
0024:         	MO              equ     $24             ; Missing operand
0026:         	HX              equ     $26             ; HEX error
0028:         	BN              equ     $28             ; BIN error
002A:         	GM              equ     $2A             ; No Graphics Mode
002C:         	SC              equ     $2C             ; Serial configuration
002E:         	SA              equ     $2E             ; Serial port already open
0030:         	HP              equ     $30             ; HELP call
              	
0EA7: C3AD0E  	COLD:   jp      STARTB          ; Jump for cold start
0EAA: C3450F  	WARM:   jp      WARMST          ; Jump for warm start
              	
0EAD: C3B40E  	STARTB: jp      CSTART          ; Jump to initialise
0EB0: BA1A    	        defw    DEINT           ; Get integer -32768 to 32767
0EB2: 5A22    	        defw    ABPASS          ; Return integer in AB
0EB4: 215E80  	CSTART: ld      HL,WRKSPC       ; Start of workspace RAM
0EB7: F9      	        ld      SP,HL           ; Set up a temporary stack
0EB8: C39B39  	        jp      INITST          ; Go to initialise
              	
0EBB: 219813  	INIT:   ld      HL,INITAB       ; Initialise workspace
0EBE: 01DA00  	        ld      BC,INITBE-INITAB+3; Bytes to copy
0EC1: 115E80  	        ld      DE,WRKSPC       ; Into workspace RAM
0EC4: EDB0    	        ldir                    ; Copy data
0EC6: EB      	        ex      DE,HL           ; Copy DE into HL
0EC7: F9      	        ld      SP,HL           ; Temporary stack
0EC8: CD4916  	        call    CLREG           ; Clear registers and stack
0ECB: CDBD1C  	        call    PRNTCRLF        ; Output CRLF
0ECE: 328F81  	        ld      (BUFFER+88+1),A ; Mark end of buffer
0ED1: 323482  	        ld      (PROGST),A      ; Initialise program area
0ED4: 1810    	        jr      MNOASK          ; usually, don't ask for memory top (only when there are errors)
0ED6: 218F0F  	MSIZE:  ld      HL,MEMMSG       ; Point to message
0ED9: CD7823  	        call    PRS             ; Output "Memory size"
0EDC: CD6616  	        call    PROMPT          ; Get input with '?'
0EDF: CD041A  	        call    GETCHR          ; Get next character
0EE2: B7      	        or      A               ; Set flags
0EE3: C2FB0E  	        jp      NZ,TSTMEM       ; If number - Test if RAM there
0EE6: 219882  	MNOASK: ld      HL,STLOOK       ; Point to start of RAM
0EE9: 23      	MLOOP:  inc     HL              ; Next byte
0EEA: 7C      	        ld      A,H             ; Above address FFFF ?
0EEB: B5      	        or      L
0EEC: CA0D0F  	        jp      Z,SETTOP        ; Yes - 64K RAM
0EEF: 7E      	        ld      A,(HL)          ; Get contents
0EF0: 47      	        ld      B,A             ; Save it
0EF1: 2F      	        cpl                     ; Flip all bits
0EF2: 77      	        ld      (HL),A          ; Put it back
0EF3: BE      	        cp      (HL)            ; RAM there if same
0EF4: 70      	        ld      (HL),B          ; Restore old contents
0EF5: CAE90E  	        jp      Z,MLOOP         ; If RAM - test next byte
0EF8: C30D0F  	        jp      SETTOP          ; Top of RAM found
              	
0EFB: CDD41A  	TSTMEM: call    ATOH            ; Get high memory into DE
0EFE: B7      	        or      A               ; Set flags on last byte
0EFF: C2FD14  	        jp      NZ,SNERR        ; ?SN Error if bad character
0F02: EB      	        ex      DE,HL           ; Address into HL
0F03: 2B      	        dec     HL              ; Back one byte
0F04: 3ED9    	        ld      A,%11011001     ; Test byte
0F06: 46      	        ld      B,(HL)          ; Get old contents
0F07: 77      	        ld      (HL),A          ; Load test byte
0F08: BE      	        cp      (HL)            ; RAM there if same
0F09: 70      	        ld      (HL),B          ; Restore old contents
0F0A: C2D60E  	        jp      NZ,MSIZE        ; Ask again if no RAM
              	
0F0D: 2B      	SETTOP: dec     HL              ; Back one byte
0F0E: 119782  	        ld      DE,STLOOK-1     ; See if enough RAM
0F11: CDDB17  	        call    CPDEHL          ; Compare DE with HL
0F14: DAD60E  	        jp      C,MSIZE         ; Ask again if not enough RAM
0F17: 119CFF  	        ld      DE,0-100        ; 100 Bytes string space
0F1A: 229481  	        ld      (LSTRAM),HL     ; Save last available RAM
0F1D: 19      	        add     HL,DE           ; Allocate string space
0F1E: 22AD80  	        ld      (STRSPC),HL     ; Save string space
0F21: CD2416  	        call    CLRPTR          ; Clear program area
0F24: 2AAD80  	        ld      HL,(STRSPC)     ; Get end of memory
0F27: 11EFFF  	        ld      DE,0-17         ; Offset for free bytes
0F2A: 19      	        add     HL,DE           ; Adjust HL
0F2B: 113482  	        ld      DE,PROGST       ; Start of program text
0F2E: 7D      	        ld      A,L             ; Get LSB
0F2F: 93      	        sub     E               ; Adjust it
0F30: 6F      	        ld      L,A             ; Re-save
0F31: 7C      	        ld      A,H             ; Get MSB
0F32: 9A      	        sbc     A,D             ; Adjust it
0F33: 67      	        ld      H,A             ; Re-save
0F34: E5      	        push    HL              ; Save bytes free
0F35: 215E0F  	        ld      HL,SIGNON       ; Sign-on message
0F38: CD7823  	        call    PRS             ; Output string
0F3B: E1      	        pop     HL              ; Get bytes free back
0F3C: CDF92C  	        call    PRNTHL          ; Output amount of free memory
0F3F: 21510F  	        ld      HL,BFREE        ; " Bytes free" message
0F42: CD7823  	        call    PRS             ; Output string
              	
0F45: 313B81  	WARMST: ld      SP,STACK        ; Temporary stack
0F48: CD4916  	BRKRET: call    CLREG           ; Clear registers and stack
0F4B: CD1508  	        call    CURSOR_ON       ; enable cursor
0F4E: C35715  	        jp      PRNTOK          ; Go to get command line
              	
0F51: 20427974	BFREE:  defb    " Bytes free",CR,0
0F55: 65732066	
0F59: 7265650D	
0F5D: 00      	
              	
0F5E: 5A383020	SIGNON: defb    "Z80 BASIC Ver 4.8",CR
0F62: 42415349	
0F66: 43205665	
0F6A: 7220342E	
0F6E: 380D    	
0F70: 436F7079	        defb    "Copyright ",251," 1978"
0F74: 72696768	
0F78: 7420FB20	
0F7C: 31393738	
0F80: 20627920	        defb    " by Microsoft",CR,0
0F84: 4D696372	
0F88: 6F736F66	
0F8C: 740D00  	
              	
0F8F: 4D656D6F	MEMMSG: defb    "Memory top",0
0F93: 72792074	
0F97: 6F7000  	
              	
              	; The following list reports all the functions supported by the interpreter.
              	; To add a custom function, the user must first insert the reserved word here,
              	; then into the list of the reserved words below, and finally must increment the
              	; ZSGN token value and all the following ones after ZSGN by 1 for every added
              	; function.
              	
              	; FUNCTION ADDRESS TABLE (this is a sort of offset table)
              	; this list must be coherent with the tokens' functions list. This means that every
              	; entry here must have the corresponding entry in the tokens list.
0F9A: 6E2B    	FNCTAB: defw    SGN
0F9C: 2122    	        defw    TMR      ; added by Leonardo Miliani
0F9E: 322C    	        defw    INT
0FA0: 842B    	        defw    ABS
0FA2: 6480    	        defw    USR
0FA4: 3822    	        defw    FRE
0FA6: BD25    	        defw    INP
0FA8: 6622    	        defw    POS
0FAA: F82D    	        defw    SQR
0FAC: D72E    	        defw    RND
0FAE: C229    	        defw    LOG
0FB0: 462E    	        defw    EXP
0FB2: 4C2F    	        defw    COS
0FB4: 522F    	        defw    SIN
0FB6: B32F    	        defw    TAN
0FB8: C82F    	        defw    ATN
0FBA: 9326    	        defw    PEEK
0FBC: 3330    	        defw    DEEK
0FBE: 9A26    	        defw    VPEEK     ; added by Leonardo Miliani
0FC0: 5728    	        defw    VSTAT     ; added by Leonardo Miliani
0FC2: 6228    	        defw    SSTAT     ; added by Leonardo Miliani
0FC4: 7428    	        defw    INKEY     ; added by Leonardo Miliani
0FC6: EA24    	        defw    LEN
0FC8: 0223    	        defw    STR
0FCA: 8425    	        defw    VAL
0FCC: F924    	        defw    ASC
0FCE: 0A25    	        defw    CHR
0FD0: 9A38    	        defw    HEX      ; added by Grant Searle
0FD2: 2B39    	        defw    BIN      ; added by Grant Searle
0FD4: 1A25    	        defw    LEFT
0FD6: 4A25    	        defw    RIGHT
0FD8: 5425    	        defw    MID
              	
              	; RESERVED WORD LIST
              	; Here are all the reserved words used by the interpreter
              	; To add custom functions/commands, the user must insert the keyword
              	; in this list, following the schematic
0FDA: C54E44  	WORDS:  defb    'E'+$80,"ND"            ; from here the list contains the COMMANDS
0FDD: C64F52  	        defb    'F'+$80,"OR"
0FE0: CE455854	        defb    'N'+$80,"EXT"
0FE4: C4415441	        defb    'D'+$80,"ATA"
0FE8: C94E5055	        defb    'I'+$80,"NPUT"
0FEC: 54      	
0FED: C4494D  	        defb    'D'+$80,"IM"
0FF0: D2454144	        defb    'R'+$80,"EAD"
0FF4: CC4554  	        defb    'L'+$80,"ET"
0FF7: C74F544F	        defb    'G'+$80,"OTO"
0FFB: D2554E  	        defb    'R'+$80,"UN"
0FFE: C946    	        defb    'I'+$80,"F"
1000: D2455354	        defb    'R'+$80,"ESTORE"
1004: 4F5245  	
1007: C74F5355	        defb    'G'+$80,"OSUB"
100B: 42      	
100C: D2455455	        defb    'R'+$80,"ETURN"
1010: 524E    	
1012: D2454D  	        defb    'R'+$80,"EM"
1015: D3544F50	        defb    'S'+$80,"TOP"
1019: CF5554  	        defb    'O'+$80,"UT"
101C: CF4E    	        defb    'O'+$80,"N"
101E: CE554C4C	        defb    'N'+$80,"ULL"
1022: D7414954	        defb    'W'+$80,"AIT"
1026: C44546  	        defb    'D'+$80,"EF"
1029: D04F4B45	        defb    'P'+$80,"OKE"
102D: C44F4B45	        defb    'D'+$80,"OKE"
1031: D6504F4B	        defb    'V'+$80,"POKE"          ; added by Leonardo Miliani
1035: 45      	
1036: D3524547	        defb    'S'+$80,"REG"           ; added by Leonardo Miliani
103A: D6524547	        defb    'V'+$80,"REG"           ; added by Leonardo Miliani
103E: D3435245	        defb    'S'+$80,"CREEN"         ; changed by Leonardo Miliani
1042: 454E    	
1044: CC4F4341	        defb    'L'+$80,"OCATE"         ; added by Leonardo Miliani
1048: 5445    	
104A: D34F554E	        defb    'S'+$80,"OUND"          ; added by Leonardo Miliani
104E: 44      	
104F: D64F4C55	        defb    'V'+$80,"OLUME"         ; added by Leonardo Miliani
1053: 4D45    	
1055: D0415553	        defb    'P'+$80,"AUSE"          ; added by Leonardo Miliani
1059: 45      	
105A: C34F4C4F	        defb    'C'+$80,"OLOR"          ; added by Leonardo Miliani
105E: 52      	
105F: D04C4F54	        defb    'P'+$80,"LOT"           ; added by Leonardo Miliani
1063: C4524157	        defb    'D'+$80,"RAW"           ; added by Leonardo Miliani
1067: C3495243	        defb    'C'+$80,"IRCLE"         ; added by Leonardo Miliani
106B: 4C45    	
106D: D3455249	        defb    'S'+$80,"ERIAL"         ; added by Leonardo Miliani
1071: 414C    	
1073: C8454C50	        defb    'H'+$80,"ELP"           ; changed by Leonardo Miliani - was LINES
1077: C34C53  	        defb    'C'+$80,"LS"            ; restored command
107A: CB4559  	        defb    'K'+$80,"EY"            ; added by Leonardo Miliani
107D: CE4D49  	        defb    'N'+$80,"MI"            ; added by Leonardo Miliani
1080: D7494454	        defb    'W'+$80,"IDTH"
1084: 48      	
1085: D35953  	        defb    'S'+$80,"YS"            ; added by Leonardo Miliani
1088: D2455345	        defb    'R'+$80,"ESET"          ; changed by Leonardo Miliani
108C: 54      	
108D: D052494E	        defb    'P'+$80,"RINT"
1091: 54      	
1092: C34F4E54	        defb    'C'+$80,"ONT"
1096: CC495354	        defb    'L'+$80,"IST"
109A: C34C4541	        defb    'C'+$80,"LEAR"
109E: 52      	
109F: C34C4F41	        defb    'C'+$80,"LOAD"
10A3: 44      	
10A4: C3534156	        defb    'C'+$80,"SAVE"
10A8: 45      	
10A9: CE4557  	        defb    'N'+$80,"EW"
10AC: D4414228	        defb    'T'+$80,"AB("
10B0: D44F    	        defb    'T'+$80,"O"
10B2: C64E    	        defb    'F'+$80,"N"
10B4: D3504328	        defb    'S'+$80,"PC("
10B8: D448454E	        defb    'T'+$80,"HEN"
10BC: CE4F54  	        defb    'N'+$80,"OT"
10BF: D3544550	        defb    'S'+$80,"TEP"
              	        ; from here: operators
10C3: AB      	        defb    '+'+$80
10C4: AD      	        defb    '-'+$80
10C5: AA      	        defb    '*'+$80
10C6: AF      	        defb    '/'+$80
10C7: A5      	        defb    '%'+$80
10C8: A3      	        defb    '#'+$80
10C9: DE      	        defb    '^'+$80
10CA: C14E44  	        defb    'A'+$80,"ND"
10CD: D84F52  	        defb    'X'+$80,"OR"
10D0: CF52    	        defb    'O'+$80,"R"
10D2: BE      	        defb    '>'+$80
10D3: BD      	        defb    '='+$80
10D4: BC      	        defb    '<'+$80
              	
              	        ; from here there are the tokens' FUNCTIONS list
              	        ; this list must be coherent with the functions list above
10D5: D3474E  	        defb    'S'+$80,"GN"
10D8: D44D52  	        defb    'T'+$80,"MR"            ; <-- added by Leonardo Miliani
10DB: C94E54  	        defb    'I'+$80,"NT"
10DE: C14253  	        defb    'A'+$80,"BS"
10E1: D55352  	        defb    'U'+$80,"SR"
10E4: C65245  	        defb    'F'+$80,"RE"
10E7: C94E50  	        defb    'I'+$80,"NP"
10EA: D04F53  	        defb    'P'+$80,"OS"
10ED: D35152  	        defb    'S'+$80,"QR"
10F0: D24E44  	        defb    'R'+$80,"ND"
10F3: CC4F47  	        defb    'L'+$80,"OG"
10F6: C55850  	        defb    'E'+$80,"XP"
10F9: C34F53  	        defb    'C'+$80,"OS"
10FC: D3494E  	        defb    'S'+$80,"IN"
10FF: D4414E  	        defb    'T'+$80,"AN"
1102: C1544E  	        defb    'A'+$80,"TN"
1105: D045454B	        defb    'P'+$80,"EEK"
1109: C445454B	        defb    'D'+$80,"EEK"
110D: D6504545	        defb    'V'+$80,"PEEK"          ; <-- added by Leonardo Miliani
1111: 4B      	
1112: D6535441	        defb    'V'+$80,"STAT"          ; <-- added by Leonardo Miliani
1116: 54      	
1117: D3535441	        defb    'S'+$80,"STAT"          ; <-- added by Leonardo Miliani
111B: 54      	
111C: C94E4B45	        defb    'I'+$80,"NKEY"          ; <-- added by Leonardo Miliani
1120: 59      	
1121: CC454E  	        defb    'L'+$80,"EN"
1124: D3545224	        defb    'S'+$80,"TR$"
1128: D6414C  	        defb    'V'+$80,"AL"
112B: C15343  	        defb    'A'+$80,"SC"
112E: C3485224	        defb    'C'+$80,"HR$"
1132: C8455824	        defb    'H'+$80,"EX$"           ; added by Grant Searle
1136: C2494E24	        defb    'B'+$80,"IN$"           ; added by Grant Searle
113A: CC454654	        defb    'L'+$80,"EFT$"
113E: 24      	
113F: D2494748	        defb    'R'+$80,"IGHT$"
1143: 5424    	
1145: CD494424	        defb    'M'+$80,"ID$"
1149: 80      	        defb    $80                     ; End-of-list marker
              	
              	; KEYWORD ADDRESS TABLE
              	; this list must be coherent with the commands'
              	; tokens list above
114A: 4E1A    	WORDTB: defw    PEND
114C: 4B19    	        defw    FOR
114E: 2E1E    	        defw    NEXT
1150: A71B    	        defw    DATA
1152: 331D    	        defw    INPUT
1154: 7920    	        defw    DIM
1156: 651D    	        defw    READ
1158: BE1B    	        defw    LET
115A: 641B    	        defw    GOTO
115C: 3F1B    	        defw    RUN
115E: 361C    	        defw    IF
1160: 141A    	        defw    RESTOR
1162: 531B    	        defw    GOSUB
1164: 821B    	        defw    RETURN
1166: A91B    	        defw    REM
1168: 4C1A    	        defw    STOP
116A: C925    	        defw    POUT
116C: 181C    	        defw    ON
116E: A91B    	        defw    REM         ; removed - was NULL
1170: CF25    	        defw    WAIT
1172: 6E22    	        defw    DEF
1174: BD26    	        defw    POKE
1176: 3E30    	        defw    DOKE
1178: C226    	        defw    VPOKE       ; added by Leonardo Miliani
117A: FF26    	        defw    SREG        ; added by Leonardo Miliani
117C: 3B28    	        defw    VREG        ; added by Leonardo Miliani
117E: 7430    	        defw    SCREEN      ; mod function: now it sets up a graphics mode (Leonardo Miliani)
1180: CD26    	        defw    LOCATE      ; added by Leonardo Miliani
1182: 5727    	        defw    SOUND       ; added by Leonardo Miliani
1184: 1E27    	        defw    VOLUME      ; added by Leonardo Miliani
1186: 5530    	        defw    PAUSE       ; added by Leonardo Miliani
1188: EF30    	        defw    COLOR       ; added by Leonardo Miliani
118A: A931    	        defw    PLOT        ; added by Leonardo Miliani
118C: 2232    	        defw    DRAW        ; added by Leonardo Miliani
118E: 4933    	        defw    CIRCLE      ; added by Leonardo Miliani
1190: 4E35    	        defw    SERIAL      ; added by Leonardo Miliani
1192: 3337    	        defw    HELP        ; changed by Leonardo Miliani - was LINES
1194: 1730    	        defw    CLS
1196: 4E37    	        defw    KEY         ; added by Leonardo Miliani
1198: 1126    	        defw    NMI         ; added by Leonardo Miliani
119A: 2B30    	        defw    WIDTH
119C: 6B26    	        defw    SYS
119E: 9039    	        defw    RESET       ; new behaviour: now it resets the system
11A0: 5A1C    	        defw    PRINT
11A2: 801A    	        defw    CONT
11A4: 4018    	        defw    LIST
11A6: F91A    	        defw    CLEAR
11A8: A91B    	        defw    REM         ; not implemented (was CLOAD)
11AA: A91B    	        defw    REM         ; not implemented (was CSAVE)
11AC: 2316    	        defw    NEW
              	
              	; RESERVED WORD TOKEN VALUES
              	; if you add a function or command you must increment by 1
              	; the values below. Pay attention that you must increment only the
              	; values AFTER the position where you entered the function/command word
              	; in the "Reserver word list" above. I.E.: VPOKE has been added between
              	; DOKE and SCREEN, and since REM is the reserved work listed below
              	; that is before the point where VPOKE has been entered, every entry
              	; after REM has been incremented.
              	; Another example: when TMR has been added, since it's a function, every
              	; entry after & included ZSGN must be checked (read below)
              	
0080:         	ZEND    equ     $80             ; END        <-- from here, there are the commands
0081:         	ZFOR    equ     $81             ; FOR
0083:         	ZDATA   equ     $83             ; DATA
0088:         	ZGOTO   equ     $88             ; GOTO
008C:         	ZGOSUB  equ     $8C             ; GOSUB
008E:         	ZREM    equ     $8E             ; REM
00AB:         	ZPRINT  equ     $AB             ; PRINT
00B1:         	ZNEW    equ     $B1             ; NEW
              	
00B2:         	ZTAB    equ     $B2             ; TAB
00B3:         	ZTO     equ     $B3             ; TO
00B4:         	ZFN     equ     $B4             ; FN
00B5:         	ZSPC    equ     $B5             ; SPC
00B6:         	ZTHEN   equ     $B6             ; THEN
00B7:         	ZNOT    equ     $B7             ; NOT
00B8:         	ZSTEP   equ     $B8             ; STEP
              	
00B9:         	ZPLUS   equ     $B9             ; +         <-- from here, there are the math operators
00BA:         	ZMINUS  equ     $BA             ; -
00BB:         	ZTIMES  equ     $BB             ; *
00BC:         	ZDIV    equ     $BC             ; /
00BD:         	ZMOD    equ     $BD             ; %
00BE:         	ZDINT   equ     $BE             ; #
00C2:         	ZOR     equ     $C2             ; OR
00C3:         	ZGTR    equ     $C3             ; >
00C4:         	ZEQUAL  equ     $C4             ; M
00C5:         	ZLTH    equ     $C5             ; <
              	
00C6:         	ZSGN    equ     $C6             ; SGN       <-- from here, there are the functions
00E3:         	ZLEFT   equ     $E3             ; LEFT$     <- if the user enters a custom function,
              	                                            ; he/she must increment this pointer by 1
              	
              	; ARITHMETIC PRECEDENCE TABLE
              	; in the formulas below, <last> is a number stored into the stack that must be retrieved
              	; with POP BC, POP DE; FPREG is a f.p. number store into the RAM register FPREG
11AE: 79      	PRITAB: defb    $79             ; Precedence value
11AF: E02C    	        defw    PADD            ; FPREG = <last> + FPREG
              	
11B1: 79      	        defb    $79             ; Precedence value
11B2: C328    	        defw    PSUB            ; FPREG = <last> - FPREG
              	
11B4: 7C      	        defb    $7C             ; Precedence value
11B5: 012A    	        defw    MULT            ; PPREG = <last> * FPREG
              	
11B7: 7C      	        defb    $7C             ; Precedence value
11B8: B32A    	        defw    DIV             ; FPREG = <last> / FPREG
              	
11BA: 7C      	        defb    $7C             ; Precedence value
11BB: 5E2A    	        defw    MOD             ; FPREG = INT(<last>)-(INT(FPREG)*INT(<last>/FPREG))
              	
11BD: 7C      	        defb    $7C             ; precedence value
11BE: 562A    	        defw    DINT            ; FPREG = INT(<last> / FPREG )
              	
11C0: 7F      	        defb    $7F             ; Precedence value
11C1: 012E    	        defw    POWER           ; FPREG = <last> ^ FPREG
              	
11C3: 50      	        defb    $50             ; Precedence value
11C4: C21F    	        defw    PAND            ; FPREG = <last> AND FPREG
              	
11C6: 4A      	        defb    $4A             ; Precedence value
11C7: CA1F    	        defw    PXOR            ; FPREG = <last> XOR FPREG
              	
11C9: 46      	        defb    $46             ; Precedence value
11CA: C51F    	        defw    POR             ; FPREG = <last> OR FPREG
              	
              	; BASIC ERROR CODE LIST
              	
11CC:         	ERRORS  equ $
11CC: 4E455854	NFMSG:  defb    "NEXT Without FOR",0
11D0: 20576974	
11D4: 686F7574	
11D8: 20464F52	
11DC: 00      	
11DD: 53796E74	SNMSG:  defb    "Syntax",0
11E1: 617800  	
11E4: 52455455	RGMSG:  defb    "RETURN without GOSUB",0
11E8: 524E2077	
11EC: 6974686F	
11F0: 75742047	
11F4: 4F535542	
11F8: 00      	
11F9: 4F757420	ODMSG:  defb    "Out of DATA",0
11FD: 6F662044	
1201: 41544100	
1205: 496C6C65	FCMSG:  defb    "Illegal Function Call",0
1209: 67616C20	
120D: 46756E63	
1211: 74696F6E	
1215: 2043616C	
1219: 6C00    	
121B: 4F766572	OVMSG:  defb    "Overflow",0
121F: 666C6F77	
1223: 00      	
1224: 4F757420	OMMSG:  defb    "Out of Memory",0
1228: 6F66204D	
122C: 656D6F72	
1230: 7900    	
1232: 556E6465	ULMSG:  defb    "Undefined Line",0
1236: 66696E65	
123A: 64204C69	
123E: 6E6500  	
1241: 42616420	BSMSG:  defb    "Bad Subscript",0
1245: 53756273	
1249: 63726970	
124D: 7400    	
124F: 52652D44	DDMSG:  defb    "Re-Dimensioned Array",0
1253: 696D656E	
1257: 73696F6E	
125B: 65642041	
125F: 72726179	
1263: 00      	
1264: 44697669	DZMSG:  defb    "Division by Zero",0
1268: 73696F6E	
126C: 20627920	
1270: 5A65726F	
1274: 00      	
1275: 496C6C65	IDMSG:  defb    "Illegal Direct",0
1279: 67616C20	
127D: 44697265	
1281: 637400  	
1284: 54797065	TMMSG:  defb    "Type Mis-match",0
1288: 204D6973	
128C: 2D6D6174	
1290: 636800  	
1293: 4F757420	OSMSG:  defb    "Out of String Space",0
1297: 6F662053	
129B: 7472696E	
129F: 67205370	
12A3: 61636500	
12A7: 53747269	LSMSG:  defb    "String Too Long",0
12AB: 6E672054	
12AF: 6F6F204C	
12B3: 6F6E6700	
12B7: 53747269	STMSG:  defb    "String Formula Too Complex",0
12BB: 6E672046	
12BF: 6F726D75	
12C3: 6C612054	
12C7: 6F6F2043	
12CB: 6F6D706C	
12CF: 657800  	
12D2: 43616E27	CNMSG:  defb    "Can't Continue",0
12D6: 7420436F	
12DA: 6E74696E	
12DE: 756500  	
12E1: 556E6465	UFMSG:  defb    "Undefined FN Function",0
12E5: 66696E65	
12E9: 6420464E	
12ED: 2046756E	
12F1: 6374696F	
12F5: 6E00    	
12F7: 4D697373	MOMSG:  defb    "Missing Operand",0
12FB: 696E6720	
12FF: 4F706572	
1303: 616E6400	
1307: 48455820	HXMSG:  defb    "HEX Format",0
130B: 466F726D	
130F: 617400  	
1312: 42494E20	BNMSG:  defb    "BIN Format",0
1316: 466F726D	
131A: 617400  	
131D: 4E6F2047	GMMSG:  defb    "No Graphics Mode",0
1321: 72617068	
1325: 69637320	
1329: 4D6F6465	
132D: 00      	
132E: 53657269	SCMSG:  defb    "Serial Configuration",0
1332: 616C2043	
1336: 6F6E6669	
133A: 67757261	
133E: 74696F6E	
1342: 00      	
1343: 53657269	SAMSG:  defb    "Serial Port Already Open",0
1347: 616C2050	
134B: 6F727420	
134F: 416C7265	
1353: 61647920	
1357: 4F70656E	
135B: 00      	
135C: 48454C50	HPMSG:  defb    "HELP Call",0
1360: 2043616C	
1364: 6C00    	
              	
1366:         	ERRTBL  equ $
1366: CC11    	NFPTR   defw    NFMSG
1368: DD11    	SNPTR   defw    SNMSG
136A: E411    	RGPTR   defw    RGMSG
136C: F911    	ODPTR   defw    ODMSG
136E: 0512    	FCPTR   defw    FCMSG
1370: 1B12    	OVPTR   defw    OVMSG
1372: 2412    	OMPTR   defw    OMMSG
1374: 3212    	ULPTR   defw    ULMSG
1376: 4112    	BSPTR   defw    BSMSG
1378: 4F12    	DDPTR   defw    DDMSG
137A: 6412    	DZPTR   defw    DZMSG
137C: 7512    	IDPTR   defw    IDMSG
137E: 8412    	TMPTR   defw    TMMSG
1380: 9312    	OSPTR   defw    OSMSG
1382: A712    	LSPTR   defw    LSMSG
1384: B712    	STPTR   defw    STMSG
1386: D212    	CNPTR   defw    CNMSG
1388: E112    	UFPTR   defw    UFMSG
138A: F712    	MOPTR   defw    MOMSG
138C: 0713    	HXPTR   defw    HXMSG
138E: 1213    	BNPTR   defw    BNMSG
1390: 1D13    	GMPRT   defw    GMMSG
1392: 2E13    	SCPTR   defw    SCMSG
1394: 4313    	SAPTR   defw    SAMSG
1396: 5C13    	HPPTR   defw    HPMSG
              	
              	; INITIALISATION TABLE -------------------------------------------------------
              	; these values are copied into RAM at startup
1398: C3450F  	INITAB: jp      WARMST          ; Warm start jump
139B: ED4500  	        defb    $ED,$45,$00     ; RETN + NOP for default NMI service routine
139E: C3CF1A  	        jp      FCERR           ; "USR (X)" jump (Set to Error)
13A1: D300    	        out     (0),A           ; "out p,n" skeleton
13A3: C9      	        ret
13A4: D600    	        sub     $00             ; Division support routine
13A6: 6F      	        ld      L,A
13A7: 7C      	        ld      A,H
13A8: DE00    	        sbc     A,$00
13AA: 67      	        ld      H,A
13AB: 78      	        ld      A,B
13AC: DE00    	        sbc     A,$00
13AE: 47      	        ld      B,A
13AF: 3E00    	        ld      A,$00
13B1: C9      	        ret
13B2: 000000  	        defb    $00,$00,$00         ; Random number seed table used by RND
13B5: 354ACA99	        defb    $35,$4A,$CA,$99     ;-2.65145E+07
13B9: 391C7698	        defb    $39,$1C,$76,$98     ; 1.61291E+07
13BD: 2295B398	        defb    $22,$95,$B3,$98     ;-1.17691E+07
13C1: 0ADD4798	        defb    $0A,$DD,$47,$98     ; 1.30983E+07
13C5: 53D19999	        defb    $53,$D1,$99,$99     ;-2-01612E+07
13C9: 0A1A9F98	        defb    $0A,$1A,$9F,$98     ;-1.04269E+07
13CD: 65BCCD98	        defb    $65,$BC,$CD,$98     ;-1.34831E+07
13D1: D6773E98	        defb    $D6,$77,$3E,$98     ; 1.24825E+07
13D5: 52C74F80	        defb    $52,$C7,$4F,$80     ; Last random number
13D9: DB00    	        in      A,($00)         ; INP (x) skeleton
13DB: C9      	        ret
13DC: FF      	        defb    $FF             ; Terminal width (255 = no auto CRLF)
13DD: 1C      	        defb    $1C             ; Width for commas (3 columns)
13DE: 00      	        defb    $00             ; No nulls after input bytes
13DF: 00      	        defb    $00             ; Output enabled (^O off)
13E0: 0000    	        defw    $00             ; Array load/save check sum
13E2: 00      	        defb    $00             ; Break not by NMI
13E3: 00      	        defb    $00             ; Break flag
13E4: C35F17  	        jp      TTYLIN          ; Input reflection (set to TTY)
13E7: 9882    	        defw    STLOOK          ; Temp string space
13E9: FEFF    	        defw    -2              ; Current line number (cold)
13EB: FFFF    	        defw    -1              ; Current line with errors (no errors)
13ED: 4C495354	DEFFNKS:defm    "LIST",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 1
13F1: 0D000000	
13F5: 00000000	
13F9: 00000000	
13FD: 52554E0D	        defm    "RUN",13,0,0,0,0,0,0,0,0,0,0,0,0    ; KEY 2
1401: 00000000	
1405: 00...   	
140D: 53435245	        defm    "SCREEN 1",13,0,0,0,0,0,0,0         ; KEY 3
1411: 454E2031	
1415: 0D000000	
1419: 00000000	
141D: 434F4C4F	        defm    "COLOR 1,15,5",13,0,0,0             ; KEY 4
1421: 5220312C	
1425: 31352C35	
1429: 0D000000	
142D: 3F465245	        defm    "?FRE(0)",13,0,0,0,0,0,0,0,0        ; KEY 5
1431: 2830290D	
1435: 00000000	
1439: 00000000	
143D: 53435245	        defm    "SCREEN 2",13,0,0,0,0,0,0,0         ; KEY 6
1441: 454E2032	
1445: 0D000000	
1449: 00000000	
144D: 434F4E54	        defm    "CONT",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 7
1451: 0D000000	
1455: 00000000	
1459: 00000000	
145D: 48454C50	        defm    "HELP",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 8 (HELP KEY)
1461: 0D000000	
1465: 00000000	
1469: 00000000	
146D: 3582    	        defw    PROGST+1        ; Start of program text
146F:         	INITBE:
              	
              	; END OF INITIALISATION TABLE ---------------------------------------------------
              	
146F: 20457272	ERRMSG: defb    " Error",0
1473: 6F7200  	
1476: 20696E20	INMSG:  defb    " in ",0
147A: 00      	
147A:         	ZERBYT  equ     $-1             ; A zero byte
147B: 4F6B0D00	OKMSG:  defb    "Ok",CR,0,0
147F: 00      	
1480: 42726561	BRKMSG: defb    "Break",0
1484: 6B00    	
              	
1486: 210400  	BAKSTK: ld      HL,$04          ; Look for "FOR" block with
1489: 39      	        add     HL,SP           ; same index as specified
148A: 7E      	LOKFOR: ld      A,(HL)          ; Get block ID
148B: 23      	        inc     HL              ; Point to index address
148C: FE81    	        cp      ZFOR            ; Is it a "FOR" token
148E: C0      	        ret     NZ              ; No - exit
148F: 4E      	        ld      C,(HL)          ; BC = Address of "FOR" index
1490: 23      	        inc     HL
1491: 46      	        ld      B,(HL)
1492: 23      	        inc     HL              ; Point to sign of STEP
1493: E5      	        push    HL              ; Save pointer to sign
1494: 69      	        ld      L,C             ; HL = address of "FOR" index
1495: 60      	        ld      H,B
1496: 7A      	        ld      A,D             ; See if an index was specified
1497: B3      	        or      E               ; DE = 0 if no index specified
1498: EB      	        ex      DE,HL           ; Specified index into HL
1499: CAA014  	        jp      Z,INDFND        ; Skip if no index given
149C: EB      	        ex      DE,HL           ; Index back into DE
149D: CDDB17  	        call    CPDEHL          ; Compare index with one given
14A0: 010D00  	INDFND: ld      BC,16-3         ; Offset to next block
14A3: E1      	        pop     HL              ; Restore pointer to sign
14A4: C8      	        ret     Z               ; Return if block found
14A5: 09      	        add     HL,BC           ; Point to next block
14A6: C38A14  	        jp      LOKFOR          ; Keep on looking
              	
14A9: CDC314  	MOVUP:  call    ENFMEM          ; See if enough memory
14AC: C5      	MOVSTR: push    BC              ; Save end of source
14AD: E3      	        ex      (SP),HL         ; Swap source and dest" end
14AE: C1      	        pop     BC              ; Get end of destination
14AF: CDDB17  	MOVLP:  call    CPDEHL          ; See if list moved
14B2: 7E      	        ld      A,(HL)          ; Get byte
14B3: 02      	        ld      (BC),A          ; Move it
14B4: C8      	        ret     Z               ; Exit if all done
14B5: 0B      	        dec     BC              ; Next byte to move to
14B6: 2B      	        dec     HL              ; Next byte to move
14B7: C3AF14  	        jp      MOVLP           ; Loop until all bytes moved
              	
14BA: E5      	CHKSTK: push    HL              ; Save code string address
14BB: 2ABF81  	        ld      HL,(ARREND)     ; Lowest free memory
14BE: 0600    	        ld      B,$00           ; BC = Number of levels to test
14C0: 09      	        add     HL,BC           ; 2 Bytes for each level
14C1: 09      	        add     HL,BC
14C2: 3E      	        defb    $3E             ; Skip "push HL"
14C3: E5      	ENFMEM: push    HL              ; Save code string address
14C4: 3ED0    	        ld      A,$D0           ; LOW -48 ; 48 Bytes minimum RAM
14C6: 95      	        sub     L
14C7: 6F      	        ld      L,A
14C8: 3EFF    	        ld      A,$FF           ; HIGH (-48) ; 48 Bytes minimum RAM
14CA: 9C      	        sbc     A,H
14CB: DAD214  	        jp      C,OMERR         ; Not enough - ?OM Error
14CE: 67      	        ld      H,A
14CF: 39      	        add     HL,SP           ; Test if stack is overflowed
14D0: E1      	        pop     HL              ; Restore code string address
14D1: D8      	        ret     C               ; Return if enough memory
14D2: 1E0C    	OMERR:  ld      E,OM            ; ?OM Error
14D4: C31115  	        jp      ERROR
              	
              	
              	; if in graphics mode, return to text (called by "NOLIN" and "ERROR")
14D7: F5      	EXITGM: push    AF              ; store AF
14D8: 3AD481  	        ld      A,(SCR_MODE)    ; check screen mode
14DB: FE02    	        cp      $02             ; G2?
14DD: CAE414  	        jp      Z,LDG1          ; yes, back to G1
14E0: FE03    	        cp      $03             ; G3?
14E2: 2011    	        jr      NZ,LDG1ND       ; no, so return
14E4: E5      	LDG1:   push    HL              ; store HL
14E5: D5      	        push    DE              ; store DE
14E6: 110100  	        ld      DE,$0001        ; sprites set to defaults, G1 mode
14E9: F3      	        di                      ; disable INTs
14EA: CD5D03  	        call    initVDP         ; initialize VDP with mode pointed by E
14ED: FB      	        ei                      ; re-enable INTs
14EE: 3E01    	        ld      A,$01           ; activate the...
14F0: 32DF81  	        ld      (PRNTVIDEO),A   ; ...video buffer...
14F3: D1      	        pop     DE              ; retrieve DE
14F4: E1      	        pop     HL              ; retrieve HL
14F5: F1      	LDG1ND: pop     AF              ; retrieve AF
14F6: C9      	        ret                     ; return to caller
              	
              	
14F7: 2AAE81  	DATSNR: ld      HL,(DATLIN)     ; Get line of current DATA item
14FA: 22AF80  	        ld      (LINEAT),HL     ; Save as current line
14FD: 1E02    	SNERR:  ld      E,SN            ; ?SN Error
14FF: 01      	        defb    $01             ; Skip "ld E,DZ"
1500: 1E14    	DZERR:  ld      E,DZ            ; ?/0 Error
1502: 01      	        defb    $01             ; Skip "ld E,NF"
1503: 1E00    	NFERR:  ld      E,NF            ; ?NF Error
1505: 01      	        defb    $01             ; Skip "ld E,DD"
1506: 1E12    	DDERR:  ld      E,DD            ; ?DD Error
1508: 01      	        defb    $01             ; Skip "ld E,UF"
1509: 1E22    	UFERR:  ld      E,UF            ; ?UF Error
150B: 01      	        defb    $01             ; Skip "ld E,OV
150C: 1E0A    	OVERR:  ld      E,OV            ; ?OV Error
150E: 01      	        defb    $01             ; Skip "ld E,TM"
150F: 1E18    	TMERR:  ld      E,TM            ; ?TM Error
              	
1511: CD4916  	ERROR:  call    CLREG           ; Clear registers and stack
1514: CDD714  	        call    EXITGM          ; exit from graphic modes
1517: 32A580  	        ld      (CTLOFG),A      ; Enable output (A is 0)
151A: CD1508  	        call    CURSOR_ON       ; enable cursor
151D: CDAB1C  	        call    STTLIN          ; Start new line
1520: 216613  	        ld      HL,ERRTBL       ; Point to error codes
1523: 57      	        ld      D,A             ; D = 0 (A is 0)
1524: 3E3F    	        ld      A,'?'
1526: CDEC17  	        call    OUTC            ; Output '?'
1529: 19      	        add     HL,DE           ; Offset to correct error code
152A: 5E      	        ld      E,(HL)          ; load pointer to error message
152B: 23      	        inc     HL              ; by loading LSB,
152C: 56      	        ld      D,(HL)          ; then MSB
152D: 626B    	        ld      HL,DE           ; load pointer to HL
152F: CD7823  	        call    PRS             ; Output error message
1532: 216F14  	        ld      HL,ERRMSG       ; "Error" message
1535: CD7823  	ERRIN:  call    PRS             ; Output message
1538: 2AAF80  	        ld      HL,(LINEAT)     ; Get line of error
153B: 11FEFF  	        ld      DE,-2           ; Cold start error if -2
153E: CDDB17  	        call    CPDEHL          ; See if cold start error
1541: CAB40E  	        jp      Z,CSTART        ; Cold start error - Restart
1544: 7C      	        ld      A,H             ; Was it a direct error?
1545: A5      	        and     L               ; Line = -1 if direct error
1546: 3C      	        inc     A
1547: CA5215  	        jp      Z,PTLN          ; Yes, jump over
154A: E5      	        push    HL              ; indirect mode - store HL
154B: 2AAF80  	        ld      HL,(LINEAT)     ; copy current line number
154E: 22B180  	        ld      (HLPLN),HL      ; save in HELP line register
1551: E1      	        pop     HL              ; retrieve HL
1552: C4F12C  	PTLN:   call    NZ,LINEIN       ; No - output line of error
              	
1555: 3E      	        defb    $3E             ; Skip "pop BC"
1556: C1      	POPNOK: pop     BC              ; Drop address in input buffer
              	
              	; run into direct mode: print OK and get command
1557: AF      	PRNTOK: xor     A               ; Output "Ok" and get command
1558: 32A580  	        ld      (CTLOFG),A      ; Enable output
155B: CDAB1C  	        call    STTLIN          ; Start new line
155E: 217B14  	        ld      HL,OKMSG        ; "Ok" message
1561: CD7823  	        call    PRS             ; Output "Ok"
1564: CD1508  	GETCMD: call    CURSOR_ON       ; enable cursor
1567: 21FFFF  	        ld      HL,-1           ; Flag direct mode
156A: 22AF80  	        ld      (LINEAT),HL     ; Save as current line
156D: CD5F17  	        call    GETLIN          ; Get an input line
1570: DA6415  	        jp      C,GETCMD        ; Get line again if break
1573: CD041A  	        call    GETCHR          ; Get first character
1576: 17      	        rla                     ; 8th bit is copied into carry and original carry is copied into bit 0)
1577: DAFD14  	        jp      C,SNERR         ; if char >=128 (8th bit set) then raise an error
157A: 1F      	        rra                     ; recover original char and Carry
157B: 3C      	        inc     A               ; Test if end of line
157C: 3D      	        dec     A               ; Without affecting Carry
157D: CA6415  	        jp      Z,GETCMD        ; Nothing entered - Get another
1580: F5      	        push    AF              ; Save Carry status
1581: CD2B08  	        call    CURSOR_OFF      ; cursor disabled
1584: CDD41A  	        call    ATOH            ; Get line number into DE
1587: D5      	        push    DE              ; Save line number
1588: CD7616  	        call    CRUNCH          ; Tokenise rest of line
158B: 47      	        ld      B,A             ; Length of tokenised line
158C: D1      	        pop     DE              ; Restore line number
158D: F1      	        pop     AF              ; Restore Carry
158E: D2E419  	        jp      NC,EXCUTE       ; No line number - Direct mode
1591: D5      	        push    DE              ; Save line number
1592: C5      	        push    BC              ; Save length of tokenised line
1593: AF      	        xor     A
1594: 32B181  	        ld      (LSTBIN),A      ; Clear last byte input
1597: CD041A  	        call    GETCHR          ; Get next character
159A: B7      	        or      A               ; Set flags
159B: F5      	        push    AF              ; And save them
159C: CD0316  	        call    SRCHLN          ; Search for line number in DE
159F: DAA815  	        jp      C,LINFND        ; Jump if line found
15A2: F1      	        pop     AF              ; Get status
15A3: F5      	        push    AF              ; And re-save
15A4: CA7D1B  	        jp      Z,ULERR         ; Nothing after number - Error
15A7: B7      	        or      A               ; Clear Carry
15A8: C5      	LINFND: push    BC              ; Save address of line in prog
15A9: D2BF15  	        jp      NC,INEWLN       ; Line not found - Insert new
15AC: EB      	        ex      DE,HL           ; Next line address in DE
15AD: 2ABB81  	        ld      HL,(PROGND)     ; End of program
15B0: 1A      	SFTPRG: ld      A,(DE)          ; Shift rest of program down
15B1: 02      	        ld      (BC),A
15B2: 03      	        inc     BC              ; Next destination
15B3: 13      	        inc     DE              ; Next source
15B4: CDDB17  	        call    CPDEHL          ; All done?
15B7: C2B015  	        jp      NZ,SFTPRG       ; More to do
15BA: 60      	        ld      H,B             ; HL - New end of program
15BB: 69      	        ld      L,C
15BC: 22BB81  	        ld      (PROGND),HL     ; Update end of program
              	
15BF: D1      	INEWLN: pop     DE              ; Get address of line,
15C0: F1      	        pop     AF              ; Get status
15C1: CAE615  	        jp      Z,SETPTR        ; No text - Set up pointers
15C4: 2ABB81  	        ld      HL,(PROGND)     ; Get end of program
15C7: E3      	        ex      (SP),HL         ; Get length of input line
15C8: C1      	        pop     BC              ; End of program to BC
15C9: 09      	        add     HL,BC           ; Find new end
15CA: E5      	        push    HL              ; Save new end
15CB: CDA914  	        call    MOVUP           ; Make space for line
15CE: E1      	        pop     HL              ; Restore new end
15CF: 22BB81  	        ld      (PROGND),HL     ; Update end of program pointer
15D2: EB      	        ex      DE,HL           ; Get line to move up in HL
15D3: 74      	        ld      (HL),H          ; Save MSB
15D4: D1      	        pop     DE              ; Get new line number
15D5: 23      	        inc     HL              ; Skip pointer
15D6: 23      	        inc     HL
15D7: 73      	        ld      (HL),E          ; Save LSB of line number
15D8: 23      	        inc     HL
15D9: 72      	        ld      (HL),D          ; Save MSB of line number
15DA: 23      	        inc     HL              ; To first byte in line
15DB: 113681  	        ld      DE,BUFFER       ; Copy buffer to program
15DE: 1A      	MOVBUF: ld      A,(DE)          ; Get source
15DF: 77      	        ld      (HL),A          ; Save destinations
15E0: 23      	        inc     HL              ; Next source
15E1: 13      	        inc     DE              ; Next destination
15E2: B7      	        or      A               ; Done?
15E3: C2DE15  	        jp      NZ,MOVBUF       ; No - Repeat
15E6: CD2F16  	SETPTR: call    RUNFST          ; Set line pointers
15E9: 23      	        inc     HL              ; To LSB of pointer
15EA: EB      	        ex      DE,HL           ; Address to DE
15EB: 62      	PTRLP:  ld      H,D             ; Address to HL
15EC: 6B      	        ld      L,E
15ED: 7E      	        ld      A,(HL)          ; Get LSB of pointer
15EE: 23      	        inc     HL              ; To MSB of pointer
15EF: B6      	        or      (HL)            ; Compare with MSB pointer
15F0: CA6415  	        jp      Z,GETCMD        ; Get command line if end
15F3: 23      	        inc     HL              ; To LSB of line number
15F4: 23      	        inc     HL              ; Skip line number
15F5: 23      	        inc     HL              ; Point to first byte in line
15F6: AF      	        xor     A               ; Looking for 00 byte
15F7: BE      	FNDEND: cp      (HL)            ; Found end of line?
15F8: 23      	        inc     HL              ; Move to next byte
15F9: C2F715  	        jp      NZ,FNDEND       ; No - Keep looking
15FC: EB      	        ex      DE,HL           ; Next line address to HL
15FD: 73      	        ld      (HL),E          ; Save LSB of pointer
15FE: 23      	        inc     HL
15FF: 72      	        ld      (HL),D          ; Save MSB of pointer
1600: C3EB15  	        jp      PTRLP           ; Do next line
              	
1603: 2A3381  	SRCHLN: ld      HL,(BASTXT)     ; Start of program text
1606: 44      	SRCHLP: ld      B,H             ; BC = Address to look at
1607: 4D      	        ld      C,L
1608: 7E      	        ld      A,(HL)          ; Get address of next line
1609: 23      	        inc     HL
160A: B6      	        or      (HL)            ; End of program found?
160B: 2B      	        dec     HL
160C: C8      	        ret     Z               ; Yes - Line not found
160D: 23      	        inc     HL
160E: 23      	        inc     HL
160F: 7E      	        ld      A,(HL)          ; Get LSB of line number
1610: 23      	        inc     HL
1611: 66      	        ld      H,(HL)          ; Get MSB of line number
1612: 6F      	        ld      L,A
1613: CDDB17  	        call    CPDEHL          ; Compare with line in DE
1616: 60      	        ld      H,B             ; HL = Start of this line
1617: 69      	        ld      L,C
1618: 7E      	        ld      A,(HL)          ; Get LSB of next line address
1619: 23      	        inc     HL
161A: 66      	        ld      H,(HL)          ; Get MSB of next line address
161B: 6F      	        ld      L,A             ; Next line to HL
161C: 3F      	        ccf
161D: C8      	        ret     Z               ; Lines found - Exit
161E: 3F      	        ccf
161F: D0      	        ret     NC              ; Line not found,at line after
1620: C30616  	        jp      SRCHLP          ; Keep looking
              	
1623: C0      	NEW:    ret     NZ              ; Return if any more on line
1624: 2A3381  	CLRPTR: ld      HL,(BASTXT)     ; Point to start of program
1627: AF      	        xor     A               ; Set program area to empty
1628: 77      	        ld      (HL),A          ; Save LSB = 00
1629: 23      	        inc     HL
162A: 77      	        ld      (HL),A          ; Save MSB = 00
162B: 23      	        inc     HL
162C: 22BB81  	        ld      (PROGND),HL     ; Set program end
              	
162F: 2A3381  	RUNFST: ld      HL,(BASTXT)     ; Clear all variables
1632: 2B      	        dec     HL
              	
1633: 22B381  	INTVAR: ld      (BRKLIN),HL     ; Initialise RUN variables
1636: 2A9481  	        ld      HL,(LSTRAM)     ; Get end of RAM
1639: 22A881  	        ld      (STRBOT),HL     ; Clear string space
163C: AF      	        xor     A
163D: CD141A  	        call    RESTOR          ; Reset DATA pointers
1640: 2ABB81  	        ld      HL,(PROGND)     ; Get end of program
1643: 22BD81  	        ld      (VAREND),HL     ; Clear variables
1646: 22BF81  	        ld      (ARREND),HL     ; Clear arrays
              	
1649: C1      	CLREG:  pop     BC              ; Save return address
164A: 2AAD80  	        ld      HL,(STRSPC)     ; Get end of working RAM
164D: F9      	        ld      SP,HL           ; Set stack
164E: 219881  	        ld      HL,TMSTPL       ; Temporary string pool
1651: 229681  	        ld      (TMSTPT),HL     ; Reset temporary string ptr
1654: AF      	        xor     A               ; A = 00
1655: 6F      	        ld      L,A             ; HL = 0000
1656: 67      	        ld      H,A
1657: 22B981  	        ld      (CONTAD),HL     ; No CONTinue
165A: 32B081  	        ld      (FORFLG),A      ; Clear FOR flag
165D: 22C381  	        ld      (FNRGNM),HL     ; Clear FN argument
1660: E5      	        push    HL              ; HL = 0000
1661: C5      	        push    BC              ; Put back return
1662: 2AB381  	DOAGN:  ld      HL,(BRKLIN)     ; Get address of code to RUN
1665: C9      	        ret                     ; Return to execution driver
              	
1666: 3E3F    	PROMPT: ld      A,'?'           ; '?'
1668: CDEC17  	        call    OUTC            ; Output character
166B: 3E00    	        ld      A,NLLCR         ; null char
166D: CDEC17  	        call    OUTC            ; Output character
1670: CD1508  	        call    CURSOR_ON       ; enable cursor
1673: C3AA80  	        jp      RINPUT          ; Get input line
              	
1676: AF      	CRUNCH: xor     A               ; Tokenise line @ HL to BUFFER
1677: 329381  	        ld      (DATFLG),A      ; Reset literal flag
167A: 0E05    	        ld      C,2+3           ; 2 byte number and 3 nulls
167C: 113681  	        ld      DE,BUFFER       ; Start of input buffer
167F: 7E      	CRNCLP: ld      A,(HL)          ; Get byte
1680: FE20    	        cp      SPC             ; Is it a space?
1682: CAFE16  	        jp      Z,MOVDIR        ; Yes - Copy direct
1685: 47      	        ld      B,A             ; Save character
1686: FE22    	        cp      22H             ; '"'             ; Is it a quote?
1688: CA1E17  	        jp      Z,CPYLIT        ; Yes - Copy literal string
168B: B7      	        or      A               ; Is it end of buffer?
168C: CA2517  	        jp      Z,ENDBUF        ; Yes - End buffer
168F: 3A9381  	        ld      A,(DATFLG)      ; Get data type
1692: B7      	        or      A               ; Literal?
1693: 7E      	        ld      A,(HL)          ; Get byte to copy
1694: C2FE16  	        jp      NZ,MOVDIR       ; Literal - Copy direct
1697: FE3F    	        cp      '?'             ; Is it '?' short for PRINT
1699: 3EAB    	        ld      A,ZPRINT        ; "PRINT" token
169B: CAFE16  	        jp      Z,MOVDIR        ; Yes - replace it
169E: 7E      	        ld      A,(HL)          ; Get byte again
169F: FE30    	        cp      '0'             ; Is it less than '0'
16A1: DAA916  	        jp      C,FNDWRD        ; Yes - Look for reserved words
16A4: FE3C    	        cp      $3C  ;60; ";"+1       ; Is it "0123456789:;" ?
16A6: DAFE16  	        jp      C,MOVDIR        ; Yes - copy it direct
16A9: D5      	FNDWRD: push    DE              ; Look for reserved words
16AA: 11D90F  	        ld      DE,WORDS-1      ; Point to table
16AD: C5      	        push    BC              ; Save count
16AE: 01FA16  	        ld      BC,RETNAD       ; Where to return to
16B1: C5      	        push    BC              ; Save return address
16B2: 067F    	        ld      B,ZEND-1        ; First token value -1
16B4: 7E      	        ld      A,(HL)          ; Get byte
16B5: FE61    	        cp      'a'             ; Less than 'a' ?
16B7: DAC216  	        jp      C,SEARCH        ; Yes - search for words
16BA: FE7B    	        cp      'z'+1           ; Greater than 'z' ?
16BC: D2C216  	        jp      NC,SEARCH       ; Yes - search for words
16BF: E65F    	        and     %01011111       ; Force upper case
16C1: 77      	        ld      (HL),A          ; Replace byte
16C2: 4E      	SEARCH: ld      C,(HL)          ; Search for a word
16C3: EB      	        ex      DE,HL
16C4: 23      	GETNXT: inc     HL              ; Get next reserved word
16C5: B6      	        or      (HL)            ; Start of word?
16C6: F2C416  	        jp      P,GETNXT        ; No - move on
16C9: 04      	        inc     B               ; Increment token value
16CA: 7E      	        ld      A,(HL)          ; Get byte from table
16CB: E67F    	        and     %01111111       ; Strip bit 7
16CD: C8      	        ret     Z               ; Return if end of list
16CE: B9      	        cp      C               ; Same character as in buffer?
16CF: C2C416  	        jp      NZ,GETNXT       ; No - get next word
16D2: EB      	        ex      DE,HL
16D3: E5      	        push    HL              ; Save start of word
              	
16D4: 13      	NXTBYT: inc     DE              ; Look through rest of word
16D5: 1A      	        ld      A,(DE)          ; Get byte from table
16D6: B7      	        or      A               ; End of word ?
16D7: FAF616  	        jp      M,MATCH         ; Yes - Match found
16DA: 4F      	        ld      C,A             ; Save it
16DB: 78      	        ld      A,B             ; Get token value
16DC: FE88    	        cp      ZGOTO           ; Is it "GOTO" token ?
16DE: C2E516  	        jp      NZ,NOSPC        ; No - Don't allow spaces
16E1: CD041A  	        call    GETCHR          ; Get next character
16E4: 2B      	        dec     HL              ; Cancel increment from GETCHR
16E5: 23      	NOSPC:  inc     HL              ; Next byte
16E6: 7E      	        ld      A,(HL)          ; Get byte
16E7: FE61    	        cp      'a'             ; Less than 'a' ?
16E9: DAEE16  	        jp      C,NOCHNG        ; Yes - don't change
16EC: E65F    	        and     %01011111       ; Make upper case
16EE: B9      	NOCHNG: cp      C               ; Same as in buffer ?
16EF: CAD416  	        jp      Z,NXTBYT        ; Yes - keep testing
16F2: E1      	        pop     HL              ; Get back start of word
16F3: C3C216  	        jp      SEARCH          ; Look at next word
              	
16F6: 48      	MATCH:  ld      C,B             ; Word found - Save token value
16F7: F1      	        pop     AF              ; Throw away return
16F8: EB      	        ex      DE,HL
16F9: C9      	        ret                     ; Return to "RETNAD"
16FA: EB      	RETNAD: ex      DE,HL           ; Get address in string
16FB: 79      	        ld      A,C             ; Get token value
16FC: C1      	        pop     BC              ; Restore buffer length
16FD: D1      	        pop     DE              ; Get destination address
16FE: 23      	MOVDIR: inc     HL              ; Next source in buffer
16FF: 12      	        ld      (DE),A          ; Put byte in buffer
1700: 13      	        inc     DE              ; Move up buffer
1701: 0C      	        inc     C               ; Increment length of buffer
1702: D63A    	        sub     ':'             ; End of statement?
1704: CA0C17  	        jp      Z,SETLIT        ; Jump if multi-statement line
1707: FE49    	        cp      ZDATA-$3A       ; Is it DATA statement ?
1709: C20F17  	        jp      NZ,TSTREM       ; No - see if REM
170C: 329381  	SETLIT: ld      (DATFLG),A      ; Set literal flag
170F: D654    	TSTREM: sub     ZREM-$3A        ; Is it REM?
1711: C27F16  	        jp      NZ,CRNCLP       ; No - Leave flag
1714: 47      	        ld      B,A             ; Copy rest of buffer
1715: 7E      	NXTCHR: ld      A,(HL)          ; Get byte
1716: B7      	        or      A               ; End of line ?
1717: CA2517  	        jp      Z,ENDBUF        ; Yes - Terminate buffer
171A: B8      	        cp      B               ; End of statement ?
171B: CAFE16  	        jp      Z,MOVDIR        ; Yes - Get next one
171E: 23      	CPYLIT: inc     HL              ; Move up source string
171F: 12      	        ld      (DE),A          ; Save in destination
1720: 0C      	        inc     C               ; Increment length
1721: 13      	        inc     DE              ; Move up destination
1722: C31517  	        jp      NXTCHR          ; Repeat
              	
1725: 213581  	ENDBUF: ld      HL,BUFFER-1     ; Point to start of buffer
1728: 12      	        ld      (DE),A          ; Mark end of buffer (A = 00)
1729: 13      	        inc     DE
172A: 12      	        ld      (DE),A          ; A = 00
172B: 13      	        inc     DE
172C: 12      	        ld      (DE),A          ; A = 00
172D: C9      	        ret
              	
172E: 3AA480  	DODEL:  ld      A,(NULFLG)      ; Get null flag status
1731: B7      	        or      A               ; Is it zero?
1732: 3E00    	        ld      A,$00           ; Zero A - Leave flags
1734: 32A480  	        ld      (NULFLG),A      ; Zero null flag
1737: C24217  	        jp      NZ,ECHDEL       ; Set - Echo it
173A: 05      	        dec     B               ; Decrement length
173B: CA5F17  	        jp      Z,GETLIN        ; Get line again if empty
173E: CDEC17  	        call    OUTC            ; Output null character
1741: 3E      	        defb    $3E             ; Skip "dec B"
1742: 05      	ECHDEL: dec     B               ; Count bytes in buffer
1743: 2B      	        dec     HL              ; Back space buffer
1744: CA5617  	        jp      Z,OTKLN         ; No buffer - Try again
1747: 7E      	        ld      A,(HL)          ; Get deleted byte
1748: CDEC17  	        call    OUTC            ; Echo it
174B: C36817  	        jp      MORINP          ; Get more input
              	
174E: 05      	DELCHR: dec     B               ; Count bytes in buffer
174F: 2B      	        dec     HL              ; Back space buffer
1750: CDEC17  	        call    OUTC            ; Output character in A
1753: C26817  	        jp      NZ,MORINP       ; Not end - Get more
1756: CDEC17  	OTKLN:  call    OUTC            ; Output character in A
1759: CDBD1C  	KILIN:  call    PRNTCRLF        ; Output CRLF
175C: C35F17  	        jp      TTYLIN          ; Get line again
              	
175F:         	GETLIN:
175F: 213681  	TTYLIN: ld      HL,BUFFER       ; Get a line by character
1762: 0601    	        ld      B,$01           ; Set buffer as empty
1764: AF      	        xor     A
1765: 32A480  	        ld      (NULFLG),A      ; Clear null flag
1768: CD2D18  	MORINP: call    CLOTST          ; Get character and test ^O
176B: 4F      	        ld      C,A             ; Save character in C
176C: FE7F    	        cp      DEL             ; Delete character?
176E: CA2E17  	        jp      Z,DODEL         ; Yes - Process it
1771: 3AA480  	        ld      A,(NULFLG)      ; Get null flag
1774: B7      	        or      A               ; Test null flag status
1775: CA8117  	        jp      Z,PROCES        ; Reset - Process character
1778: 3E00    	        ld      A,$00           ; Set a null
177A: CDEC17  	        call    OUTC            ; Output null
177D: AF      	        xor     A               ; Clear A
177E: 32A480  	        ld      (NULFLG),A      ; Reset null flag
1781: 79      	PROCES: ld      A,C             ; Get character
1782: FE07    	        cp      CTRLG           ; Bell?
1784: CAC117  	        jp      Z,PUTCTL        ; Yes - Save it
1787: FE03    	        cp      CTRLC           ; Is it control "C"?
1789: CCB617  	        call    Z,GMNCR         ; Yes - exit from graphic mode & Output CRLF
178C: 37      	        scf                     ; Flag break
178D: C8      	        ret     Z               ; Return if control "C"
178E: FE0D    	        cp      CR              ; Is it enter?
1790: CAB31C  	        jp      Z,ENDINP        ; Yes - Terminate input
1793: FE15    	        cp      CTRLU           ; Is it control "U"?
1795: CA5917  	        jp      Z,KILIN         ; Yes - Get another line
1798: FE08    	        cp      BKSP            ; Is it backspace?
179A: CA4E17  	        jp      Z,DELCHR        ; Yes - Delete character
179D: FE12    	        cp      CTRLR           ; Is it control "R"?
179F: C2BC17  	        jp      NZ,PUTBUF       ; No - Put in buffer
17A2: C5      	        push    BC              ; Save buffer length
17A3: D5      	        push    DE              ; Save DE
17A4: E5      	        push    HL              ; Save buffer address
17A5: 3600    	        ld      (HL),$00        ; Mark end of buffer
17A7: CDAA39  	        call    OUTNCR          ; Output and do CRLF
17AA: 213681  	        ld      HL,BUFFER       ; Point to buffer start
17AD: CD7823  	        call    PRS             ; Output buffer
17B0: E1      	        pop     HL              ; Restore buffer address
17B1: D1      	        pop     DE              ; Restore DE
17B2: C1      	        pop     BC              ; Restore buffer length
17B3: C36817  	        jp      MORINP          ; Get another character
17B6: CDD714  	GMNCR:  call    EXITGM          ; exit from graphic mode
17B9: C3BD1C  	        jp      PRNTCRLF        ; output CRLF
              	
17BC: FE20    	PUTBUF: cp      SPC             ; Is it a control code?
17BE: DA6817  	        jp      C,MORINP        ; Yes - Ignore
17C1: 78      	PUTCTL: ld      A,B             ; Get number of bytes in buffer
17C2: FE59    	        cp      $58+$01         ; Test for line overflow
17C4: 3E07    	        ld      A,CTRLG         ; Set a bell
17C6: D2D317  	        jp      NC,OUTNBS       ; Ring bell if buffer full
17C9: 79      	        ld      A,C             ; Get character
17CA: 71      	        ld      (HL),C          ; Save in buffer
17CB: 32B181  	        ld      (LSTBIN),A      ; Save last input byte
17CE: 23      	        inc     HL              ; Move up buffer
17CF: 04      	        inc     B               ; Increment length
17D0: C36817  	OUTIT:  jp      MORINP          ; Get another character
              	
17D3: CDEC17  	OUTNBS: call    OUTC            ; Output bell and back over it
17D6: 3E08    	        ld      A,BKSP          ; Set back space
17D8: C3D017  	        jp      OUTIT           ; Output it and get more
              	
17DB: 7C      	CPDEHL: ld      A,H             ; Get H
17DC: 92      	        sub     D               ; Compare with D
17DD: C0      	        ret     NZ              ; Different - Exit
17DE: 7D      	        ld      A,L             ; Get L
17DF: 93      	        sub     E               ; Compare with E
17E0: C9      	        ret                     ; Return status
              	
17E1: 7E      	CHKSYN: ld      A,(HL)          ; Check syntax of character
17E2: E3      	        ex      (SP),HL         ; Address of test byte
17E3: BE      	        cp      (HL)            ; Same as in code string?
17E4: 23      	        inc     HL              ; Return address
17E5: E3      	        ex      (SP),HL         ; Put it back
17E6: CA041A  	        jp      Z,GETCHR        ; Yes - Get next character
17E9: C3FD14  	        jp      SNERR           ; Different - ?SN Error
              	
17EC: F5      	OUTC:   push    AF              ; Save character
17ED: 3AA580  	        ld      A,(CTLOFG)      ; Get control "O" flag
17F0: B7      	        or      A               ; Is it set?
17F1: C2AD23  	        jp      NZ,POPAF        ; Yes - don't output
17F4: F1      	        pop     AF              ; Restore character
17F5: C5      	        push    BC              ; Save buffer length
17F6: F5      	        push    AF              ; Save character
17F7: FE20    	        cp      SPC             ; Is it a control code?
17F9: DA1018  	        jp      C,DINPOS        ; Yes - Don't inc POS(X)
17FC: 3AA280  	        ld      A,(LWIDTH)      ; Get line width
17FF: 47      	        ld      B,A             ; To B
1800: 3A9081  	        ld      A,(CURPOS)      ; Get cursor position
1803: 04      	        inc     B               ; Width 255?
1804: CA0C18  	        jp      Z,INCLEN        ; Yes - No width limit
1807: 05      	        dec     B               ; Restore width
1808: B8      	        cp      B               ; At end of line?
1809: CCBD1C  	        call    Z,PRNTCRLF      ; Yes - output CRLF
180C: 3C      	INCLEN: inc     A               ; Move on one character
180D: 329081  	        ld      (CURPOS),A      ; Save new position
1810: AF      	DINPOS: xor     A
1811: 321D82  	        ld      (KBDNPT),A      ; set flag for no char from keyboard
1814: F1      	        pop     AF              ; Restore character
1815: C1      	        pop     BC              ; Restore buffer length
1816: F5      	        push    AF
1817: CD1F18  	        call    SND2VID         ; send char to video
181A: F1      	        pop     AF
181B: CD8D39  	        call    MONOUT          ; send char to serial if enabled
181E: C9      	        ret
              	
              	; print char to video if cursor is on
181F: 32E081  	SND2VID:ld      (CHR4VID),A     ; store A
1822: 3ADF81  	        ld      A,(PRNTVIDEO)   ; check print-on-video
1825: B7      	        or      A               ; is it off?
1826: C8      	        ret     Z               ; yes, so return
1827: F3      	        di                      ; disable INTs
1828: CD8B06  	        call    CHAR2VID        ; cursor is on, so print char on screen
182B: FB      	        ei                      ; re-enable INTs
182C: C9      	        ret                     ; return to caller
              	
182D: CD1530  	CLOTST: call    GETINP          ; Get input character
1830: FE0F    	        cp      CTRLO           ; Is it control "O"?
1832: C0      	        ret     NZ              ; No don't flip flag
1833: 3AA580  	        ld      A,(CTLOFG)      ; Get flag
1836: 2F      	        cpl                     ; Flip it
1837: 32A580  	        ld      (CTLOFG),A      ; Put it back
183A: A7      	        and     A               ; is output enabled?
183B: CC1508  	        call    Z,CURSOR_ON     ; yes, so cursor on
183E: AF      	        xor     A               ; Null character
183F: C9      	        ret
              	
              	; LIST: list the program stored into memory
1840: C1      	LIST:   pop     BC              ; rubbish - not needed (legacy from original call of LIST)
1841: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
1842: CD041A  	        call    GETCHR          ; Get next character
1845: CA9118  	        jp      Z,LSTALL        ; list all if nothing follows
1848: FEBA    	        cp      ZMINUS          ; is it '-'?
184A: 2020    	        jr      NZ,LST01        ; no, look for a line number
184C: 110000  	        ld      DE,$0000        ; yes, set search from 0
184F: CD2C19  	        call    SRCHLIN         ; find address of line number
1852: ED43E381	        ld      (TMPBFR1),BC    ; store address of starting line
1856: CDE117  	        call    CHKSYN          ; skip '-'
1859: BA      	        defb    ZMINUS
185A: CDD41A  	        call    ATOH            ; now, look for another number (ASCII number to DE)
185D: CD2C19  	        call    SRCHLIN         ; find address of line number
1860: ED43E581	        ld      (TMPBFR2),BC    ; store address of ending line
1864: ED4BE381	        ld      BC,(TMPBFR1)    ; retrieve address of starting line
1868: C5      	        push    BC              ; store address of line for later use
1869: C3C318  	        jp      LISTLP          ; go listing
186C: CDD41A  	LST01:  call    ATOH            ; get a line number (ASCII number to DE)
186F: CD2C19  	LST01H: call    SRCHLIN         ; find address of line number
1872: ED43E381	        ld      (TMPBFR1),BC    ; store address of starting line
1876: ED43E581	        ld      (TMPBFR2),BC    ; same address for ending line (we'll change later if needed)
187A: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
187B: CD041A  	        call    GETCHR          ; Get next character
187E: CA8D18  	        jp      Z,LST06         ; nothing follows, so ending & starting lines are the same
1881: FEBA    	        cp      ZMINUS          ; is it '-'?
1883: CAA918  	        jp      Z,LST03         ; yes, read ending line
1886: CD2C19  	LST04:  call    SRCHLIN         ; find address of line number
1889: ED43E581	        ld      (TMPBFR2),BC    ; set address of ending line
188D: C5      	LST06:  push    BC              ; store address for later use
188E: C3C318  	        jp      LISTLP          ; jump to list
1891: 11F9FF  	LSTALL  ld      DE,65529        ; set ending line to max. allowed line number
1894: CD2C19  	        call    SRCHLIN         ; get address of last line
1897: ED43E581	        ld      (TMPBFR2),BC    ; store it
189B: 110000  	        ld      DE,$0000        ; set start to first line in memory
189E: CD2C19  	        call    SRCHLIN         ; get address of first line
18A1: ED43E381	        ld      (TMPBFR1),BC    ; store it
18A5: C5      	        push    BC              ; store address of starting line for later use
18A6: C3C318  	        jp      LISTLP          ; start printing
18A9: CDE117  	LST03:  call    CHKSYN          ; skip '-'
18AC: BA      	        defb    ZMINUS
18AD: CDD41A  	        call    ATOH            ; look for another number (return into DE)
18B0: 7A      	        ld      A,D
18B1: B3      	        or      E               ; is line=0?
18B2: 2003    	        jr      NZ,LST05        ; no, jump over
18B4: 11F9FF  	        ld      DE,65529        ; yes set last valid line number
18B7: CD2C19  	LST05:  call    SRCHLIN         ; find address of line number
18BA: ED43E581	        ld      (TMPBFR2),BC    ; store address of ending line
18BE: ED4BE381	        ld      BC,(TMPBFR1)    ; retrieve address of starting line
18C2: C5      	        push    BC              ; store it for later use
18C3: E1      	LISTLP: pop     HL              ; Restore address of line
18C4: 4E      	        ld      C,(HL)          ; Get LSB of next line
18C5: 23      	        inc     HL
18C6: 46      	        ld      B,(HL)          ; Get MSB of next line
18C7: 23      	        inc     HL
18C8: 78      	        ld      A,B             ; BC = 0 (End of program)?
18C9: B1      	        or      C
18CA: CA5715  	        jp      Z,PRNTOK        ; Yes - Go to command mode
18CD: CD2F1A  	        call    TSTBRK          ; Test for break key
18D0: CD3219  	        call    TSTSPC          ; test for space
18D3: C5      	        push    BC              ; Save address of next line
18D4: 3AD881  	        ld      A,(SCR_CURS_X)  ; load current X pos of cursor
18D7: A7      	        and     A               ; is it at the beginning of a new line?
18D8: 200B    	        jr      NZ,LST08        ; No, jump over
18DA: 3E0D    	        ld      A,CR            ; yes, so just send a CR
18DC: CD8D39  	        call    MONOUT          ; to serial if it's open
18DF: AF      	        xor     A               ; then, set cursor
18E0: 329081  	        ld      (CURPOS),A      ; to position 0
18E3: 1803    	        jr      LST07           ; and continue
18E5: CDBD1C  	LST08:  call    PRNTCRLF        ; output CRLF
18E8: 5E      	LST07:  ld      E,(HL)          ; Get LSB of line number
18E9: 23      	        inc     HL
18EA: 56      	        ld      D,(HL)          ; Get MSB of line number
18EB: 23      	        inc     HL
18EC: E5      	        push    HL              ; Save address of line start
18ED: EB      	        ex      DE,HL           ; Line number to HL
18EE: CDF92C  	        call    PRNTHL          ; Output line number in decimal
18F1: 3E20    	        ld      A,SPC           ; Space after line number
18F3: E1      	        pop     HL              ; Restore start of line address
18F4: CDEC17  	LSTLP2: call    OUTC            ; Output character in A
18F7: 7E      	LSTLP3: ld      A,(HL)          ; Get next byte in line
18F8: B7      	        or      A               ; End of line?
18F9: 23      	        inc     HL              ; To next byte in line
18FA: CA1E19  	        jp      Z,NXTLN         ; Yes - check next line
18FD: F2F418  	        jp      P,LSTLP2        ; No token - output it
1900: D67F    	        sub     ZEND-1          ; Find and output word
1902: 4F      	        ld      C,A             ; Token offset+1 to C
1903: 11DA0F  	        ld      DE,WORDS        ; Reserved word list
1906: 1A      	FNDTOK: ld      A,(DE)          ; Get character in list
1907: 13      	        inc     DE              ; Move on to next
1908: B7      	        or      A               ; Is it start of word?
1909: F20619  	        jp      P,FNDTOK        ; No - Keep looking for word
190C: 0D      	        dec     C               ; Count words
190D: C20619  	        jp      NZ,FNDTOK       ; Not there - keep looking
1910: E67F    	OUTWRD: and     %01111111       ; Strip bit 7
1912: CDEC17  	        call    OUTC            ; Output character
1915: 1A      	        ld      A,(DE)          ; Get next character
1916: 13      	        inc     DE              ; Move on to next
1917: B7      	        or      A               ; Is it end of word?
1918: F21019  	        jp      P,OUTWRD        ; No - output the rest
191B: C3F718  	        jp      LSTLP3          ; Next byte in line
191E: D1      	NXTLN:  pop     DE              ; recover address of current line
191F: 2AE581  	        ld      HL,(TMPBFR2)    ; address of last line to print
1922: CDB039  	        call    CMP16           ; check if current line is over last printable line
1925: DA5715  	        jp      C,PRNTOK        ; finish - leave & print OK
1928: D5      	        push    DE              ; store address of current line
1929: C3C318  	        jp      LISTLP          ; continue listing
192C: E5      	SRCHLIN:push    HL              ; store HL (this is needed because HL store the pointer to the input buffer)
192D: CD0316  	        call    SRCHLN          ; search for line number in DE
1930: E1      	        pop     HL              ; retrieve HL
1931: C9      	        ret                     ; return to caller
              	
              	; during LISTing, check if PAUSE is pressed, then pause listing and
              	; wait for another pressing of PAUSE to continue or CTRL-C/BREAK to exit
1932: 3A1F82  	TSTSPC: ld      A,(TMPKEYBFR)   ; Get input character
1935: FE20    	        cp      SPC             ; Is it SPACE?
1937: C0      	        ret     NZ              ; No, return
1938: CD1530  	WTSPC   call    GETINP          ; Yes, stop listing and wait for another space or BREAK
193B: FE20    	        cp      SPC             ; is it SPACE?
193D: 2005    	        jr      NZ,CNTWTSP      ; no, continue
193F: AF      	        xor     A
1940: 321F82  	        ld      (TMPKEYBFR),A   ; reset key
1943: C9      	        ret                     ; return to caller
1944: FE03    	CNTWTSP:cp      CTRLC           ; is it CTRL-C/BREAK?
1946: 20F0    	        jr      NZ,WTSPC        ; no, loop
1948: C3480F  	        jp      BRKRET          ; exit and output "Ok"
              	
              	
194B: 3E64    	FOR:    ld      A,$64           ; Flag "FOR" assignment
194D: 32B081  	        ld      (FORFLG),A      ; Save "FOR" flag
1950: CDBE1B  	        call    LET             ; Set up initial index
1953: C1      	        pop     BC              ; Drop RETurn address
1954: E5      	        push    HL              ; Save code string address
1955: CDA71B  	        call    DATA            ; Get next statement address
1958: 22AC81  	        ld      (LOOPST),HL     ; Save it for start of loop
195B: 210200  	        ld      HL,$0002        ; Offset for "FOR" block
195E: 39      	        add     HL,SP           ; Point to it
195F: CD8A14  	FORSLP: call    LOKFOR          ; Look for existing "FOR" block
1962: D1      	        pop     DE              ; Get code string address
1963: C27B19  	        jp      NZ,FORFND       ; No nesting found
1966: 09      	        add     HL,BC           ; Move into "FOR" block
1967: D5      	        push    DE              ; Save code string address
1968: 2B      	        dec     HL
1969: 56      	        ld      D,(HL)          ; Get MSB of loop statement
196A: 2B      	        dec     HL
196B: 5E      	        ld      E,(HL)          ; Get LSB of loop statement
196C: 23      	        inc     HL
196D: 23      	        inc     HL
196E: E5      	        push    HL              ; Save block address
196F: 2AAC81  	        ld      HL,(LOOPST)     ; Get address of loop statement
1972: CDDB17  	        call    CPDEHL          ; Compare the FOR loops
1975: E1      	        pop     HL              ; Restore block address
1976: C25F19  	        jp      NZ,FORSLP       ; Different FORs - Find another
1979: D1      	        pop     DE              ; Restore code string address
197A: F9      	        ld      SP,HL           ; Remove all nested loops
              	
197B: EB      	FORFND: ex      DE,HL           ; Code string address to HL
197C: 0E08    	        ld      C,$08
197E: CDBA14  	        call    CHKSTK          ; Check for 8 levels of stack
1981: E5      	        push    HL              ; Save code string address
1982: 2AAC81  	        ld      HL,(LOOPST)     ; Get first statement of loop
1985: E3      	        ex      (SP),HL         ; Save and restore code string
1986: E5      	        push    HL              ; Re-save code string address
1987: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line number
198A: E3      	        ex      (SP),HL         ; Save and restore code string
198B: CD7C1E  	        call    TSTNUM          ; Make sure it's a number
198E: CDE117  	        call    CHKSYN          ; Make sure "TO" is next
1991: B3      	        defb    ZTO             ; "TO" token
1992: CD791E  	        call    GETNUM          ; Get "TO" expression value
1995: E5      	        push    HL              ; Save code string address
1996: CDAB2B  	        call    BCDEFP          ; Move "TO" value to BCDE
1999: E1      	        pop     HL              ; Restore code string address
199A: C5      	        push    BC              ; Save "TO" value in block
199B: D5      	        push    DE
199C: 010081  	        ld      BC,$8100        ; BCDE - 1 (default STEP)
199F: 51      	        ld      D,C             ; C=0
19A0: 5A      	        ld      E,D             ; D=0
19A1: 7E      	        ld      A,(HL)          ; Get next byte in code string
19A2: FEB8    	        cp      ZSTEP           ; See if "STEP" is stated
19A4: 3E01    	        ld      A,$01           ; Sign of step = 1
19A6: C2B719  	        jp      NZ,SAVSTP       ; No STEP given - Default to 1
19A9: CD041A  	        call    GETCHR          ; Jump over "STEP" token
19AC: CD791E  	        call    GETNUM          ; Get step value
19AF: E5      	        push    HL              ; Save code string address
19B0: CDAB2B  	        call    BCDEFP          ; Move STEP to BCDE
19B3: CD5F2B  	        call    TSTSGN          ; Test sign of FPREG
19B6: E1      	        pop     HL              ; Restore code string address
19B7: C5      	SAVSTP: push    BC              ; Save the STEP value in block
19B8: D5      	        push    DE
19B9: F5      	        push    AF              ; Save sign of STEP
19BA: 33      	        inc     SP              ; Don't save flags
19BB: E5      	        push    HL              ; Save code string address
19BC: 2AB381  	        ld      HL,(BRKLIN)     ; Get address of index variable
19BF: E3      	        ex      (SP),HL         ; Save and restore code string
19C0: 0681    	PUTFID: ld      B,ZFOR          ; "FOR" block marker
19C2: C5      	        push    BC              ; Save it
19C3: 33      	        inc     SP              ; Don't save C
              	
19C4: CD2F1A  	RUNCNT: call    TSTBRK          ; Execution driver - Test break
19C7: 22B381  	        ld      (BRKLIN),HL     ; Save code address for break
19CA: 7E      	        ld      A,(HL)          ; Get next byte in code string
19CB: FE3A    	        cp      ':'             ; Multi statement line?
19CD: CAE419  	        jp      Z,EXCUTE        ; Yes - Execute it
19D0: B7      	        or      A               ; End of line?
19D1: C2FD14  	        jp      NZ,SNERR        ; No - Syntax error
19D4: 23      	        inc     HL              ; Point to address of next line
19D5: 7E      	        ld      A,(HL)          ; Get LSB of line pointer
19D6: 23      	        inc     HL
19D7: B6      	        or      (HL)            ; Is it zero (End of prog)?
19D8: CA561A  	        jp      Z,ENDPRG        ; Yes - Terminate execution
19DB: 23      	        inc     HL              ; Point to line number
19DC: 5E      	        ld      E,(HL)          ; Get LSB of line number
19DD: 23      	        inc     HL
19DE: 56      	        ld      D,(HL)          ; Get MSB of line number
19DF: EB      	        ex      DE,HL           ; Line number to HL
19E0: 22AF80  	        ld      (LINEAT),HL     ; Save as current line number
19E3: EB      	        ex      DE,HL           ; Line number back to DE
19E4: CD041A  	EXCUTE: call    GETCHR          ; Get key word
19E7: 11C419  	        ld      DE,RUNCNT       ; Where to RETurn to
19EA: D5      	        push    DE              ; Save for RETurn
19EB: C8      	IFJMP:  ret     Z               ; Go to RUNCNT if end of STMT
              	
19EC: D680    	ONJMP:  sub     ZEND            ; Is it a token?
19EE: DABE1B  	        jp      C,LET           ; No - try to assign it
19F1: FE32    	        cp      ZNEW+1-ZEND     ; END to NEW ?
19F3: D2FD14  	        jp      NC,SNERR        ; Not a key word - ?SN Error
19F6: 07      	        rlca                    ; Double it
19F7: 4F      	        ld      C,A             ; BC = Offset into table
19F8: 0600    	        ld      B,0
19FA: EB      	        ex      DE,HL           ; Save code string address
19FB: 214A11  	        ld      HL,WORDTB       ; Keyword address table
19FE: 09      	        add     HL,BC           ; Point to routine address
19FF: 4E      	        ld      C,(HL)          ; Get LSB of routine address
1A00: 23      	        inc     HL
1A01: 46      	        ld      B,(HL)          ; Get MSB of routine address
1A02: C5      	        push    BC              ; Save routine address
1A03: EB      	        ex      DE,HL           ; Restore code string address
              	
              	; get a char from input buffer: exit with NC if character found is
              	; not a number; exit with Z if nothing found; char is into A
1A04: 23      	GETCHR: inc     HL              ; Point to next character
1A05: 7E      	        ld      A,(HL)          ; Get next code string byte
1A06: FE3A    	        cp      ':'             ; Z if ':'
1A08: D0      	        ret     NC              ; NC if > "9"
1A09: FE20    	        cp      SPC
1A0B: CA041A  	        jp      Z,GETCHR        ; Skip over spaces
1A0E: FE30    	        cp      '0'
1A10: 3F      	        ccf                     ; NC if < '0'
1A11: 3C      	        inc     A               ; Test for zero - Leave carry
1A12: 3D      	        dec     A               ; Z if Null
1A13: C9      	        ret
              	
1A14: EB      	RESTOR: ex      DE,HL           ; Save code string address
1A15: 2A3381  	        ld      HL,(BASTXT)     ; Point to start of program
1A18: CA291A  	        jp      Z,RESTNL        ; Just RESTORE - reset pointer
1A1B: EB      	        ex      DE,HL           ; Restore code string address
1A1C: CDD41A  	        call    ATOH            ; Get line number to DE
1A1F: E5      	        push    HL              ; Save code string address
1A20: CD0316  	        call    SRCHLN          ; Search for line number in DE
1A23: 60      	        ld      H,B             ; HL = Address of line
1A24: 69      	        ld      L,C
1A25: D1      	        pop     DE              ; Restore code string address
1A26: D27D1B  	        jp      NC,ULERR        ; ?UL Error if not found
1A29: 2B      	RESTNL: dec     HL              ; Byte before DATA statement
1A2A: 22C181  	UPDATA: ld      (NXTDAT),HL     ; Update DATA pointer
1A2D: EB      	        ex      DE,HL           ; Restore code string address
1A2E: C9      	        ret
              	
              	
1A2F: DF      	TSTBRK: rst     $18             ; Check input status
1A30: C8      	        ret     Z               ; No key, go back
1A31: D7      	        rst     $10             ; Get the key into A
1A32: FE1B    	        cp      ESC             ; Escape key?
1A34: 2811    	        jr      Z,BRK           ; Yes, break
1A36: FE03    	        cp      CTRLC           ; <Ctrl-C>
1A38: 280D    	        jr      Z,BRK           ; Yes, break
1A3A: FE13    	        cp      CTRLS           ; Stop scrolling?
1A3C: C0      	        ret     NZ              ; Other key, ignore
              	
              	
1A3D: D7      	STALL:  rst     $10             ; Wait for key
1A3E: FE11    	        cp      CTRLQ           ; Resume scrolling?
1A40: C8      	        ret     Z               ; Release the chokehold
1A41: FE03    	        cp      CTRLC           ; Second break?
1A43: 2807    	        jr      Z,STOP          ; Break during hold exits prog
1A45: 18F6    	        jr      STALL           ; Loop until <Ctrl-Q> or <brk>
              	
1A47: 3EFF    	BRK:    ld      A,$FF           ; Set BRKFLG
1A49: 32A980  	        ld      (BRKFLG),A      ; Store it
              	
1A4C: C0      	STOP:   ret     NZ              ; Exit if anything else
1A4D: F6      	        defb    $F6             ; Flag "STOP"
1A4E: C0      	PEND:   ret     NZ              ; Exit if anything else
1A4F: 22B381  	        ld      (BRKLIN),HL     ; Save point of break
1A52: 21      	        defb    $21             ; Skip "OR 11111111B"
1A53: F6FF    	INPBRK: or      %11111111       ; Flag "Break" wanted
1A55: C1      	        pop     BC              ; Return not needed and more
1A56: 2AAF80  	ENDPRG: ld      HL,(LINEAT)     ; Get current line number
1A59: F5      	        push    AF              ; Save STOP / END status
1A5A: 7D      	        ld      A,L             ; Is it direct break?
1A5B: A4      	        and     H
1A5C: 3C      	        inc     A               ; Line is -1 if direct break
1A5D: CA691A  	        jp      Z,NOLIN         ; Yes - No line number
1A60: 22B781  	        ld      (ERRLIN),HL     ; Save line of break
1A63: 2AB381  	        ld      HL,(BRKLIN)     ; Get point of break
1A66: 22B981  	        ld      (CONTAD),HL     ; Save point to CONTinue
1A69: AF      	NOLIN:  xor     A
1A6A: 32A580  	        ld      (CTLOFG),A      ; Enable output
1A6D: CDAB1C  	        call    STTLIN          ; Start a new line
1A70: F1      	        pop     AF              ; Restore STOP / END status
1A71: 218014  	        ld      HL,BRKMSG       ; "Break" message
1A74: C27A1A  	        jp      NZ,ERRINT       ; "in line" wanted?
1A77: C35715  	        jp      PRNTOK          ; Go to command mode
1A7A: CDD714  	ERRINT: call    EXITGM          ; exit from graphics mode
1A7D: C33515  	        jp      ERRIN           ; print message
              	
              	
1A80: 21FFFF  	CONT:   ld      HL,-1           ; reset...
1A83: 22B180  	        ld      (HLPLN),HL      ; ...HELP line register
1A86: 2AB981  	        ld      HL,(CONTAD)     ; Get CONTinue address
1A89: 7C      	        ld      A,H             ; Is it zero?
1A8A: B5      	        or      L
1A8B: 1E20    	        ld      E,CN            ; ?CN Error
1A8D: CA1115  	        jp      Z,ERROR         ; Yes - output "?CN Error"
1A90: EB      	        ex      DE,HL           ; Save code string address
1A91: 2AB781  	        ld      HL,(ERRLIN)     ; Get line of last break
1A94: 22AF80  	        ld      (LINEAT),HL     ; Set up current line number
1A97: EB      	        ex      DE,HL           ; Restore code string address
1A98: C9      	        ret                     ; CONTinue where left off
              	
1A99: E5      	ACCSUM: push    HL              ; Save address in array
1A9A: 2AA680  	        ld      HL,(CHKSUM)     ; Get check sum
1A9D: 0600    	        ld      B,$00           ; BC - Value of byte
1A9F: 4F      	        ld      C,A
1AA0: 09      	        add     HL,BC           ; Add byte to check sum
1AA1: 22A680  	        ld      (CHKSUM),HL     ; Re-save check sum
1AA4: E1      	        pop     HL              ; Restore address in array
1AA5: C9      	        ret
              	
1AA6: 7E      	CHKLTR: ld      A,(HL)          ; Get byte
1AA7: FE41    	        cp      'A'             ; < 'a' ?
1AA9: D8      	        ret     C               ; Carry set if not letter
1AAA: FE5B    	        cp      'Z'+1           ; > 'z' ?
1AAC: 3F      	        ccf
1AAD: C9      	        ret                     ; Carry set if not letter
              	
1AAE: CD041A  	FPSINT: call    GETCHR          ; Get next character
1AB1: CD791E  	POSINT: call    GETNUM          ; Get integer 0 to 32767
1AB4: CD5F2B  	DEPINT: call    TSTSGN          ; Test sign of FPREG
1AB7: FACF1A  	        jp      M,FCERR         ; Negative - ?FC Error
1ABA: 3ACC81  	DEINT:  ld      A,(FPEXP)       ; Get integer value to DE
1ABD: FE90    	        cp      $80+$10         ; Exponent in range (16 bits)?
1ABF: DA072C  	        jp      C,FPINT         ; Yes - convert it
1AC2: 018090  	        ld      BC,$9080        ; BCDE = -32768
1AC5: 110000  	        ld      DE,$0000
1AC8: E5      	        push    HL              ; Save code string address
1AC9: CDDA2B  	        call    CMPNUM          ; Compare FPREG with BCDE
1ACC: E1      	        pop     HL              ; Restore code string address
1ACD: 51      	        ld      D,C             ; MSB to D
1ACE: C8      	        ret     Z               ; Return if in range
1ACF: 1E08    	FCERR:  ld      E,FC            ; ?FC Error
1AD1: C31115  	        jp      ERROR           ; Output error-
              	
1AD4: 2B      	ATOH:   dec     HL              ; ASCII number to DE binary
1AD5: 110000  	GETLN:  ld      DE,$0000        ; Get number to DE
1AD8: CD041A  	GTLNLP: call    GETCHR          ; Get next character
1ADB: D0      	        ret     NC              ; Exit if not a digit
1ADC: E5      	        push    HL              ; Save code string address
1ADD: F5      	        push    AF              ; Save digit
1ADE: 219819  	        ld      HL,65529/10     ; Largest number 65529
1AE1: CDDB17  	        call    CPDEHL          ; Number in range?
1AE4: DAFD14  	        jp      C,SNERR         ; No - ?SN Error
1AE7: 62      	        ld      H,D             ; HL = Number
1AE8: 6B      	        ld      L,E
1AE9: 19      	        add     HL,DE           ; Times 2
1AEA: 29      	        add     HL,HL           ; Times 4
1AEB: 19      	        add     HL,DE           ; Times 5
1AEC: 29      	        add     HL,HL           ; Times 10
1AED: F1      	        pop     AF              ; Restore digit
1AEE: D630    	        sub     '0'             ; Make it 0 to 9
1AF0: 5F      	        ld      E,A             ; DE = Value of digit
1AF1: 1600    	        ld      D,0
1AF3: 19      	        add     HL,DE           ; Add to number
1AF4: EB      	        ex      DE,HL           ; Number to DE
1AF5: E1      	        pop     HL              ; Restore code string address
1AF6: C3D81A  	        jp      GTLNLP          ; Go to next character
              	
1AF9: CA3316  	CLEAR:  jp      Z,INTVAR        ; Just "CLEAR" Keep parameters
1AFC: CDB11A  	        call    POSINT          ; Get integer 0 to 32767 to DE
1AFF: 2B      	        dec     HL              ; Cancel increment
1B00: CD041A  	        call    GETCHR          ; Get next character
1B03: E5      	        push    HL              ; Save code string address
1B04: 2A9481  	        ld      HL,(LSTRAM)     ; Get end of RAM
1B07: CA1C1B  	        jp      Z,STORED        ; No value given - Use stored
1B0A: E1      	        pop     HL              ; Restore code string address
1B0B: CDE117  	        call    CHKSYN          ; Check for comma
1B0E: 2C      	        defb    ','
1B0F: D5      	        push    DE              ; Save number
1B10: CDB11A  	        call    POSINT          ; Get integer 0 to 32767
1B13: 2B      	        dec     HL              ; Cancel increment
1B14: CD041A  	        call    GETCHR          ; Get next character
1B17: C2FD14  	        jp      NZ,SNERR        ; ?SN Error if more on line
1B1A: E3      	        ex      (SP),HL         ; Save code string address
1B1B: EB      	        ex      DE,HL           ; Number to DE
1B1C: 7D      	STORED: ld      A,L             ; Get LSB of new RAM top
1B1D: 93      	        sub     E               ; Subtract LSB of string space
1B1E: 5F      	        ld      E,A             ; Save LSB
1B1F: 7C      	        ld      A,H             ; Get MSB of new RAM top
1B20: 9A      	        sbc     A,D             ; Subtract MSB of string space
1B21: 57      	        ld      D,A             ; Save MSB
1B22: DAD214  	        jp      C,OMERR         ; ?OM Error if not enough mem
1B25: E5      	        push    HL              ; Save RAM top
1B26: 2ABB81  	        ld      HL,(PROGND)     ; Get program end
1B29: 012800  	        ld      BC,$28          ; 40 Bytes minimum working RAM
1B2C: 09      	        add     HL,BC           ; Get lowest address
1B2D: CDDB17  	        call    CPDEHL          ; Enough memory?
1B30: D2D214  	        jp      NC,OMERR        ; No - ?OM Error
1B33: EB      	        ex      DE,HL           ; RAM top to HL
1B34: 22AD80  	        ld      (STRSPC),HL     ; Set new string space
1B37: E1      	        pop     HL              ; End of memory to use
1B38: 229481  	        ld      (LSTRAM),HL     ; Set new top of RAM
1B3B: E1      	        pop     HL              ; Restore code string address
1B3C: C33316  	        jp      INTVAR          ; Initialise variables
              	
1B3F: E5      	RUN:    push    HL              ; store HL
1B40: 21FFFF  	        ld      HL,-1           ; reset...
1B43: 22B180  	        ld      (HLPLN),HL      ; ...HELP line register
1B46: E1      	        pop     HL              ; retrieve HL
1B47: CA2F16  	        jp      Z,RUNFST        ; RUN from start if just RUN
1B4A: CD3316  	        call    INTVAR          ; Initialise variables
1B4D: 01C419  	        ld      BC,RUNCNT       ; Execution driver loop
1B50: C3631B  	        jp      RUNLIN          ; RUN from line number
              	
1B53: 0E03    	GOSUB:  ld      C,$03           ; 3 Levels of stack needed
1B55: CDBA14  	        call    CHKSTK          ; Check for 3 levels of stack
1B58: C1      	        pop     BC              ; Get return address
1B59: E5      	        push    HL              ; Save code string for RETURN
1B5A: E5      	        push    HL              ; And for GOSUB routine
1B5B: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line
1B5E: E3      	        ex      (SP),HL         ; Into stack - Code string out
1B5F: 3E8C    	        ld      A,ZGOSUB        ; "GOSUB" token
1B61: F5      	        push    AF              ; Save token
1B62: 33      	        inc     SP              ; Don't save flags
              	
1B63: C5      	RUNLIN: push    BC              ; Save return address
1B64: CDD41A  	GOTO:   call    ATOH            ; ASCII number to DE binary
1B67: CDA91B  	        call    REM             ; Get end of line
1B6A: E5      	        push    HL              ; Save end of line
1B6B: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line
1B6E: CDDB17  	        call    CPDEHL          ; Line after current?
1B71: E1      	        pop     HL              ; Restore end of line
1B72: 23      	        inc     HL              ; Start of next line
1B73: DC0616  	        call    C,SRCHLP        ; Line is after current line
1B76: D40316  	        call    NC,SRCHLN       ; Line is before current line
1B79: 60      	        ld      H,B             ; Set up code string address
1B7A: 69      	        ld      L,C
1B7B: 2B      	        dec     HL              ; Incremented after
1B7C: D8      	        ret     C               ; Line found
1B7D: 1E0E    	ULERR:  ld      E,UL            ; ?UL Error
1B7F: C31115  	        jp      ERROR           ; Output error message
              	
1B82: C0      	RETURN: ret     NZ              ; Return if not just RETURN
1B83: 16FF    	        ld      D,-1            ; Flag "GOSUB" search
1B85: CD8614  	        call    BAKSTK          ; Look "GOSUB" block
1B88: F9      	        ld      SP,HL           ; Kill all FORs in subroutine
1B89: FE8C    	        cp      ZGOSUB          ; Test for "GOSUB" token
1B8B: 1E04    	        ld      E,RG            ; ?RG Error
1B8D: C21115  	        jp      NZ,ERROR        ; Error if no "GOSUB" found
1B90: E1      	        pop     HL              ; Get RETURN line number
1B91: 22AF80  	        ld      (LINEAT),HL     ; Save as current
1B94: 23      	        inc     HL              ; Was it from direct statement?
1B95: 7C      	        ld      A,H
1B96: B5      	        or      L               ; Return to line
1B97: C2A11B  	        jp      NZ,RETLIN       ; No - Return to line
1B9A: 3AB181  	        ld      A,(LSTBIN)      ; Any INPUT in subroutine?
1B9D: B7      	        or      A               ; If so buffer is corrupted
1B9E: C25615  	        jp      NZ,POPNOK       ; Yes - Go to command mode
1BA1: 21C419  	RETLIN: ld      HL,RUNCNT       ; Execution driver loop
1BA4: E3      	        ex      (SP),HL         ; Into stack - Code string out
1BA5: 3E      	        defb    $3E             ; Skip "pop HL"
1BA6: E1      	NXTDTA: pop     HL              ; Restore code string address
              	
1BA7: 013A    	DATA:   defb    $01,$3A         ; ':' End of statement
1BA9: 0E00    	REM:    ld      C,$00           ; 00  End of statement
1BAB: 0600    	        ld      B,$00
1BAD: 79      	NXTSTL: ld      A,C             ; Statement and byte
1BAE: 48      	        ld      C,B
1BAF: 47      	        ld      B,A             ; Statement end byte
1BB0: 7E      	NXTSTT: ld      A,(HL)          ; Get byte
1BB1: B7      	        or      A               ; End of line?
1BB2: C8      	        ret     Z               ; Yes - Exit
1BB3: B8      	        cp      B               ; End of statement?
1BB4: C8      	        ret     Z               ; Yes - Exit
1BB5: 23      	        inc     HL              ; Next byte
1BB6: FE22    	        cp      $22             ; '"'             ; Literal string?
1BB8: CAAD1B  	        jp      Z,NXTSTL        ; Yes - Look for another '"'
1BBB: C3B01B  	        jp      NXTSTT          ; Keep looking
              	
1BBE: CD7E20  	LET:    call    GETVAR          ; Get variable name
1BC1: CDE117  	        call    CHKSYN          ; Make sure "=" follows
1BC4: C4      	        defb    ZEQUAL          ; "=" token
1BC5: D5      	        push    DE              ; Save address of variable
1BC6: 3A9281  	        ld      A,(TYPE)        ; Get data type
1BC9: F5      	        push    AF              ; Save type
1BCA: CD8B1E  	        call    EVAL            ; Evaluate expression
1BCD: F1      	        pop     AF              ; Restore type
1BCE: E3      	        ex      (SP),HL         ; Save code - Get var addr
1BCF: 22B381  	        ld      (BRKLIN),HL     ; Save address of variable
1BD2: 1F      	        rra                     ; Adjust type
1BD3: CD7E1E  	        call    CHKTYP          ; Check types are the same
1BD6: CA111C  	        jp      Z,LETNUM        ; Numeric - Move value
1BD9: E5      	LETSTR: push    HL              ; Save address of string var
1BDA: 2AC981  	        ld      HL,(FPREG)      ; Pointer to string entry
1BDD: E5      	        push    HL              ; Save it on stack
1BDE: 23      	        inc     HL              ; Skip over length
1BDF: 23      	        inc     HL
1BE0: 5E      	        ld      E,(HL)          ; LSB of string address
1BE1: 23      	        inc     HL
1BE2: 56      	        ld      D,(HL)          ; MSB of string address
1BE3: 2A3381  	        ld      HL,(BASTXT)     ; Point to start of program
1BE6: CDDB17  	        call    CPDEHL          ; Is string before program?
1BE9: D2001C  	        jp      NC,CRESTR       ; Yes - Create string entry
1BEC: 2AAD80  	        ld      HL,(STRSPC)     ; Point to string space
1BEF: CDDB17  	        call    CPDEHL          ; Is string literal in program?
1BF2: D1      	        pop     DE              ; Restore address of string
1BF3: D2081C  	        jp      NC,MVSTPT       ; Yes - Set up pointer
1BF6: 21A481  	        ld      HL,TMPSTR       ; Temporary string pool
1BF9: CDDB17  	        call    CPDEHL          ; Is string in temporary pool?
1BFC: D2081C  	        jp      NC,MVSTPT       ; No - Set up pointer
1BFF: 3E      	        defb    $3E             ; Skip "pop DE"
1C00: D1      	CRESTR: pop     DE              ; Restore address of string
1C01: CDD924  	        call    BAKTMP          ; Back to last tmp-str entry
1C04: EB      	        ex      DE,HL           ; Address of string entry
1C05: CD1223  	        call    SAVSTR          ; Save string in string area
1C08: CDD924  	MVSTPT: call    BAKTMP          ; Back to last tmp-str entry
1C0B: E1      	        pop     HL              ; Get string pointer
1C0C: CDBA2B  	        call    DETHL4          ; Move string pointer to var
1C0F: E1      	        pop     HL              ; Restore code string address
1C10: C9      	        ret
              	
1C11: E5      	LETNUM: push    HL              ; Save address of variable
1C12: CDB72B  	        call    FPTHL           ; Move value to variable
1C15: D1      	        pop     DE              ; Restore address of variable
1C16: E1      	        pop     HL              ; Restore code string address
1C17: C9      	        ret
              	
1C18: CD0026  	ON:     call    GETINT          ; Get integer 0-255
1C1B: 7E      	        ld      A,(HL)          ; Get "GOTO" or "GOSUB" token
1C1C: 47      	        ld      B,A             ; Save in B
1C1D: FE8C    	        cp      ZGOSUB          ; "GOSUB" token?
1C1F: CA271C  	        jp      Z,ONGO          ; Yes - Find line number
1C22: CDE117  	        call    CHKSYN          ; Make sure it's "GOTO"
1C25: 88      	        defb    ZGOTO           ; "GOTO" token
1C26: 2B      	        dec     HL              ; Cancel increment
1C27: 4B      	ONGO:   ld      C,E             ; Integer of branch value
1C28: 0D      	ONGOLP: dec     C               ; Count branches
1C29: 78      	        ld      A,B             ; Get "GOTO" or "GOSUB" token
1C2A: CAEC19  	        jp      Z,ONJMP         ; Go to that line if right one
1C2D: CDD51A  	        call    GETLN           ; Get line number to DE
1C30: FE2C    	        cp      ','             ; Another line number?
1C32: C0      	        ret     NZ              ; No - Drop through
1C33: C3281C  	        jp      ONGOLP          ; Yes - loop
              	
1C36: CD8B1E  	IF:     call    EVAL            ; Evaluate expression
1C39: 7E      	        ld      A,(HL)          ; Get token
1C3A: FE88    	        cp      ZGOTO           ; "GOTO" token?
1C3C: CA441C  	        jp      Z,IFGO          ; Yes - Get line
1C3F: CDE117  	        call    CHKSYN          ; Make sure it's "THEN"
1C42: B6      	        defb    ZTHEN           ; "THEN" token
1C43: 2B      	        dec     HL              ; Cancel increment
1C44: CD7C1E  	IFGO:   call    TSTNUM          ; Make sure it's numeric
1C47: CD5F2B  	        call    TSTSGN          ; Test state of expression
1C4A: CAA91B  	        jp      Z,REM           ; False - Drop through
1C4D: CD041A  	        call    GETCHR          ; Get next character
1C50: DA641B  	        jp      C,GOTO          ; Number - GOTO that line
1C53: C3EB19  	        jp      IFJMP           ; Otherwise do statement
              	
1C56: 2B      	MRPRNT: dec     HL              ; dec 'cos GETCHR INCs
1C57: CD041A  	        call    GETCHR          ; Get next character
1C5A: CABD1C  	PRINT:  jp      Z,PRNTCRLF      ; CRLF if just PRINT
1C5D: C8      	PRNTLP: ret     Z               ; End of list - Exit
1C5E: FEB2    	        cp      ZTAB            ; "TAB(" token?
1C60: CAE51C  	        jp      Z,DOTAB         ; Yes - Do TAB routine
1C63: FEB5    	        cp      ZSPC            ; "SPC(" token?
1C65: CAE51C  	        jp      Z,DOTAB         ; Yes - Do SPC routine
1C68: E5      	        push    HL              ; Save code string address
1C69: FE2C    	        cp      ','             ; Comma?
1C6B: CACC1C  	        jp      Z,DOCOM         ; Yes - Move to next zone
1C6E: FE3B    	        cp      ';'             ; Semi-colon?
1C70: CA091D  	        jp      Z,NEXITM        ; Do semi-colon routine
1C73: C1      	        pop     BC              ; Code string address to BC
1C74: CD8B1E  	        call    EVAL            ; Evaluate expression
1C77: E5      	        push    HL              ; Save code string address
1C78: 3A9281  	        ld      A,(TYPE)        ; Get variable type
1C7B: B7      	        or      A               ; Is it a string variable?
1C7C: C2A41C  	        jp      NZ,PRNTST       ; Yes - Output string contents
1C7F: CD042D  	        call    NUMASC          ; Convert number to text
1C82: CD3623  	        call    CRTST           ; Create temporary string
1C85: 3600    	        ld      (HL),NLLCR      ; Followed by a NULL char (was SPC, space)
1C87: 2AC981  	        ld      HL,(FPREG)      ; Get length of output
1C8A: 34      	        inc     (HL)            ; Plus 1 for the space
1C8B: 2AC981  	        ld      HL,(FPREG)      ; < Not needed >
1C8E: 3AA280  	        ld      A,(LWIDTH)      ; Get width of line
1C91: 47      	        ld      B,A             ; To B
1C92: 04      	        inc     B               ; Width 255 (No limit)?
1C93: CAA01C  	        jp      Z,PRNTNB        ; Yes - Output number string
1C96: 04      	        inc     B               ; Adjust it
1C97: 3A9081  	        ld      A,(CURPOS)      ; Get cursor position
1C9A: 86      	        add     A,(HL)          ; Add length of string
1C9B: 3D      	        dec     A               ; Adjust it
1C9C: B8      	        cp      B               ; Will output fit on this line?
1C9D: D4BD1C  	        call    NC,PRNTCRLF     ; No - CRLF first
1CA0: CD7B23  	PRNTNB: call    PRS1            ; Output string at (HL)
1CA3: AF      	        xor     A               ; Skip call by setting 'z' flag
1CA4: C47B23  	PRNTST: call    NZ,PRS1         ; Output string at (HL)
1CA7: E1      	        pop     HL              ; Restore code string address
1CA8: C3561C  	        jp      MRPRNT          ; See if more to PRINT
              	
1CAB: 3A9081  	STTLIN: ld      A,(CURPOS)      ; Make sure on new line
1CAE: B7      	        or      A               ; Already at start?
1CAF: C8      	        ret     Z               ; Yes - Do nothing
1CB0: C3BD1C  	        jp      PRNTCRLF        ; Start a new line
              	
1CB3: AF      	ENDINP: xor     A
1CB4: 321D82  	        ld      (KBDNPT),A      ; char is not from keyboard
1CB7: 77      	        ld      (HL),A          ; Mark end of buffer
1CB8: 213581  	        ld      HL,BUFFER-1     ; Point to buffer
1CBB: 180A    	        jr      CNTEND
1CBD: 3E0D    	PRNTCRLF:ld     A,CR            ; Load a CR
1CBF: CDEC17  	        call    OUTC            ; Output character
1CC2: 3E0A    	        ld      A,LF            ; Load a LF
1CC4: CDEC17  	        call    OUTC            ; Output character
1CC7: AF      	CNTEND: xor     A               ; Set to position 0
1CC8: 329081  	        ld      (CURPOS),A      ; Store it
1CCB: C9      	        ret                     ; return to caller
              	
1CCC: 3AA380  	DOCOM:  ld      A,(COMMAN)      ; Get comma width
1CCF: 47      	        ld      B,A             ; Save in B
1CD0: 3A9081  	        ld      A,(CURPOS)      ; Get current position
1CD3: B8      	        cp      B               ; Within the limit?
1CD4: D4BD1C  	        call    NC,PRNTCRLF     ; No - output CRLF
1CD7: D2091D  	        jp      NC,NEXITM       ; Get next item
1CDA: D60E    	ZONELP: sub     $0E             ; Next zone of 14 characters
1CDC: D2DA1C  	        jp      NC,ZONELP       ; Repeat if more zones
1CDF: 2F      	        cpl                     ; Number of null chars to output
1CE0: 0E00    	        ld      C,NLLCR         ; null char
1CE2: C3FF1C  	        jp      ASPCS           ; Output them
              	
1CE5: F5      	DOTAB:  push    AF              ; Save token
1CE6: CDFD25  	        call    FNDNUM          ; Evaluate expression
1CE9: CDE117  	        call    CHKSYN          ; Make sure ")" follows
1CEC: 29      	        defb    ')'
1CED: 2B      	        dec     HL              ; Back space on to ")"
1CEE: F1      	        pop     AF              ; Restore token
1CEF: 0E00    	        ld      C,NLLCR         ; for SPC we use NULL char (was SPACE)
1CF1: D6B5    	        sub     ZSPC            ; Was it "SPC(" ?
1CF3: E5      	        push    HL              ; Save code string address
1CF4: CAFA1C  	        jp      Z,DOSPC         ; Yes - Do 'E' spaces
1CF7: 3AD881  	        ld      A,(SCR_CURS_X)  ; Get current X position
1CFA: 2F      	DOSPC:  cpl                     ; Number of spaces to print to
1CFB: 83      	        add     A,E             ; Total number to print
1CFC: D2091D  	        jp      NC,NEXITM       ; TAB < Current POS(X)
1CFF: 3C      	ASPCS:  inc     A               ; Output A spaces
1D00: 47      	        ld      B,A             ; Save number to print
1D01: 79      	SPCLP:  ld      A,C             ; char to print
1D02: CDEC17  	        call    OUTC            ; Output character in A
1D05: 05      	        dec     B               ; Count them
1D06: C2011D  	        jp      NZ,SPCLP        ; Repeat if more
1D09: E1      	NEXITM: pop     HL              ; Restore code string address
1D0A: CD041A  	        call    GETCHR          ; Get next character
1D0D: C35D1C  	        jp      PRNTLP          ; More to print
              	
1D10: 3F526564	REDO:   defb    "?Redo from start",CR,0
1D14: 6F206672	
1D18: 6F6D2073	
1D1C: 74617274	
1D20: 0D00    	
              	
1D22: 3AB281  	BADINP: ld      A,(READFG)      ; READ or INPUT?
1D25: B7      	        or      A
1D26: C2F714  	        jp      NZ,DATSNR       ; READ - ?SN Error
1D29: C1      	        pop     BC              ; Throw away code string addr
1D2A: 21101D  	        ld      HL,REDO         ; "Redo from start" message
1D2D: CD7823  	        call    PRS             ; Output string
1D30: C36216  	        jp      DOAGN           ; Do last INPUT again
              	
1D33: CDE322  	INPUT:  call    IDTEST          ; Test for illegal direct
1D36: 7E      	        ld      A,(HL)          ; Get character after "INPUT"
1D37: FE22    	        cp      $22             ; '"' ; Is there a prompt string?
1D39: 3E00    	        ld      A,$00           ; Clear A and leave flags
1D3B: 32A580  	        ld      (CTLOFG),A      ; Enable output
1D3E: C24D1D  	        jp      NZ,NOPMPT       ; No prompt - get input
1D41: CD3723  	        call    QTSTR           ; Get string terminated by '"'
1D44: CDE117  	        call    CHKSYN          ; Check for ';' after prompt
1D47: 3B      	        defb    ";"
1D48: E5      	        push    HL              ; Save code string address
1D49: CD7B23  	        call    PRS1            ; Output prompt string
1D4C: 3E      	        defb    $3E             ; Skip "push HL"
1D4D: E5      	NOPMPT: push    HL              ; Save code string address
1D4E: CD6616  	        call    PROMPT          ; Get input with "? " prompt
1D51: C1      	        pop     BC              ; Restore code string address
1D52: DA531A  	        jp      C,INPBRK        ; Break pressed - Exit
1D55: 23      	        inc     HL              ; Next byte
1D56: 7E      	        ld      A,(HL)          ; Get it
1D57: B7      	        or      A               ; End of line?
1D58: 2B      	        dec     HL              ; Back again
1D59: C5      	        push    BC              ; Re-save code string address
1D5A: CD2B08  	        call    CURSOR_OFF      ; disable cursor
1D5D: CAA61B  	        jp      Z,NXTDTA        ; Yes - Find next DATA stmt
1D60: 362C    	        ld      (HL),','        ; Store comma as separator
1D62: C36A1D  	        jp      NXTITM          ; Get next item
              	
1D65: E5      	READ:   push    HL              ; Save code string address
1D66: 2AC181  	        ld      HL,(NXTDAT)     ; Next DATA statement
1D69: F6      	        defb    $F6             ; Flag "READ"
1D6A: AF      	NXTITM: xor     A               ; Flag "INPUT"
1D6B: 32B281  	        ld      (READFG),A      ; Save "READ"/"INPUT" flag
1D6E: E3      	        ex      (SP),HL         ; Get code str' , Save pointer
1D6F: C3761D  	        jp      GTVLUS          ; Get values
              	
1D72: CDE117  	NEDMOR: call    CHKSYN          ; Check for comma between items
1D75: 2C      	        defb    ','
1D76: CD7E20  	GTVLUS: call    GETVAR          ; Get variable name
1D79: E3      	        ex      (SP),HL         ; Save code str" , Get pointer
1D7A: D5      	        push    DE              ; Save variable address
1D7B: 7E      	        ld      A,(HL)          ; Get next "INPUT"/"DATA" byte
1D7C: FE2C    	        cp      ','             ; Comma?
1D7E: CA9E1D  	        jp      Z,ANTVLU        ; Yes - Get another value
1D81: 3AB281  	        ld      A,(READFG)      ; Is it READ?
1D84: B7      	        or      A
1D85: C20A1E  	        jp      NZ,FDTLP        ; Yes - Find next DATA stmt
1D88: 3E3F    	        ld      A,'?'           ; More INPUT needed
1D8A: CDEC17  	        call    OUTC            ; Output character
1D8D: CD6616  	        call    PROMPT          ; Get INPUT with prompt
1D90: D1      	        pop     DE              ; Variable address
1D91: C1      	        pop     BC              ; Code string address
1D92: DA531A  	        jp      C,INPBRK        ; Break pressed
1D95: 23      	        inc     HL              ; Point to next DATA byte
1D96: 7E      	        ld      A,(HL)          ; Get byte
1D97: B7      	        or      A               ; Is it zero (No input) ?
1D98: 2B      	        dec     HL              ; Back space INPUT pointer
1D99: C5      	        push    BC              ; Save code string address
1D9A: CAA61B  	        jp      Z,NXTDTA        ; Find end of buffer
1D9D: D5      	        push    DE              ; Save variable address
1D9E: 3A9281  	ANTVLU: ld      A,(TYPE)        ; Check data type
1DA1: B7      	        or      A               ; Is it numeric?
1DA2: CAC81D  	        jp      Z,INPBIN        ; Yes - Convert to binary
1DA5: CD041A  	        call    GETCHR          ; Get next character
1DA8: 57      	        ld      D,A             ; Save input character
1DA9: 47      	        ld      B,A             ; Again
1DAA: FE22    	        cp      $22             ; '"'     ; Start of literal sting?
1DAC: CABC1D  	        jp      Z,STRENT        ; Yes - Create string entry
1DAF: 3AB281  	        ld      A,(READFG)      ; "READ" or "INPUT" ?
1DB2: B7      	        or      A
1DB3: 57      	        ld      D,A             ; Save 00 if "INPUT"
1DB4: CAB91D  	        jp      Z,ITMSEP        ; "INPUT" - End with 00
1DB7: 163A    	        ld      D,':'           ; "DATA" - End with 00 or ':'
1DB9: 062C    	ITMSEP: ld      B,','           ; Item separator
1DBB: 2B      	        dec     HL              ; Back space for DTSTR
1DBC: CD3A23  	STRENT: call    DTSTR           ; Get string terminated by D
1DBF: EB      	        ex      DE,HL           ; String address to DE
1DC0: 21D31D  	        ld      HL,LTSTND       ; Where to go after LETSTR
1DC3: E3      	        ex      (SP),HL         ; Save HL , get input pointer
1DC4: D5      	        push    DE              ; Save address of string
1DC5: C3D91B  	        jp      LETSTR          ; Assign string to variable
              	
1DC8: CD041A  	INPBIN: call    GETCHR          ; Get next character
1DCB: CD662C  	        call    ASCTFP          ; Convert ASCII to FP number
1DCE: E3      	        ex      (SP),HL         ; Save input ptr, Get var addr
1DCF: CDB72B  	        call    FPTHL           ; Move FPREG to variable
1DD2: E1      	        pop     HL              ; Restore input pointer
1DD3: 2B      	LTSTND: dec     HL              ; dec 'cos GETCHR INCs
1DD4: CD041A  	        call    GETCHR          ; Get next character
1DD7: CADF1D  	        jp      Z,MORDT         ; End of line - More needed?
1DDA: FE2C    	        cp      ','             ; Another value?
1DDC: C2221D  	        jp      NZ,BADINP       ; No - Bad input
1DDF: E3      	MORDT:  ex      (SP),HL         ; Get code string address
1DE0: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
1DE1: CD041A  	        call    GETCHR          ; Get next character
1DE4: C2721D  	        jp      NZ,NEDMOR       ; More needed - Get it
1DE7: D1      	        pop     DE              ; Restore DATA pointer
1DE8: 3AB281  	        ld      A,(READFG)      ; "READ" or "INPUT" ?
1DEB: B7      	        or      A
1DEC: EB      	        ex      DE,HL           ; DATA pointer to HL
1DED: C22A1A  	        jp      NZ,UPDATA       ; Update DATA pointer if "READ"
1DF0: D5      	        push    DE              ; Save code string address
1DF1: B6      	        or      (HL)            ; More input given?
1DF2: 21FA1D  	        ld      HL,EXTIG        ; "?Extra ignored" message
1DF5: C47823  	        call    NZ,PRS          ; Output string if extra given
1DF8: E1      	        pop     HL              ; Restore code string address
1DF9: C9      	        ret
              	
1DFA: 3F457874	EXTIG:  defb    "?Extra ignored",CR,0
1DFE: 72612069	
1E02: 676E6F72	
1E06: 65640D00	
              	
1E0A: CDA71B  	FDTLP:  call    DATA            ; Get next statement
1E0D: B7      	        or      A               ; End of line?
1E0E: C2231E  	        jp      NZ,FANDT        ; No - See if DATA statement
1E11: 23      	        inc     HL
1E12: 7E      	        ld      A,(HL)          ; End of program?
1E13: 23      	        inc     HL
1E14: B6      	        or      (HL)            ; 00 00 Ends program
1E15: 1E06    	        ld      E,OD            ; ?OD Error
1E17: CA1115  	        jp      Z,ERROR         ; Yes - Out of DATA
1E1A: 23      	        inc     HL
1E1B: 5E      	        ld      E,(HL)          ; LSB of line number
1E1C: 23      	        inc     HL
1E1D: 56      	        ld      D,(HL)          ; MSB of line number
1E1E: EB      	        ex      DE,HL
1E1F: 22AE81  	        ld      (DATLIN),HL     ; Set line of current DATA item
1E22: EB      	        ex      DE,HL
1E23: CD041A  	FANDT:  call    GETCHR          ; Get next character
1E26: FE83    	        cp      ZDATA           ; "DATA" token
1E28: C20A1E  	        jp      NZ,FDTLP        ; No "DATA" - Keep looking
1E2B: C39E1D  	        jp      ANTVLU          ; Found - Convert input
              	
1E2E: 110000  	NEXT:   ld      DE,$0000        ; In case no index given
1E31: C47E20  	NEXT1:  call    NZ,GETVAR       ; Get index address
1E34: 22B381  	        ld      (BRKLIN),HL     ; Save code string address
1E37: CD8614  	        call    BAKSTK          ; Look for "FOR" block
1E3A: C20315  	        jp      NZ,NFERR        ; No "FOR" - ?NF Error
1E3D: F9      	        ld      SP,HL           ; Clear nested loops
1E3E: D5      	        push    DE              ; Save index address
1E3F: 7E      	        ld      A,(HL)          ; Get sign of STEP
1E40: 23      	        inc     HL
1E41: F5      	        push    AF              ; Save sign of STEP
1E42: D5      	        push    DE              ; Save index address
1E43: CD9D2B  	        call    PHLTFP          ; Move index value to FPREG
1E46: E3      	        ex      (SP),HL         ; Save address of TO value
1E47: E5      	        push    HL              ; Save address of index
1E48: CDB928  	        call    ADDPHL          ; Add STEP to index value
1E4B: E1      	        pop     HL              ; Restore address of index
1E4C: CDB72B  	        call    FPTHL           ; Move value to index variable
1E4F: E1      	        pop     HL              ; Restore address of TO value
1E50: CDAE2B  	        call    LOADFP          ; Move TO value to BCDE
1E53: E5      	        push    HL              ; Save address of line of FOR
1E54: CDDA2B  	        call    CMPNUM          ; Compare index with TO value
1E57: E1      	        pop     HL              ; Restore address of line num
1E58: C1      	        pop     BC              ; Address of sign of STEP
1E59: 90      	        sub     B               ; Compare with expected sign
1E5A: CDAE2B  	        call    LOADFP          ; BC = Loop stmt,DE = Line num
1E5D: CA691E  	        jp      Z,KILFOR        ; Loop finished - Terminate it
1E60: EB      	        ex      DE,HL           ; Loop statement line number
1E61: 22AF80  	        ld      (LINEAT),HL     ; Set loop line number
1E64: 69      	        ld      L,C             ; Set code string to loop
1E65: 60      	        ld      H,B
1E66: C3C019  	        jp      PUTFID          ; Put back "FOR" and continue
              	
1E69: F9      	KILFOR: ld      SP,HL           ; Remove "FOR" block
1E6A: 2AB381  	        ld      HL,(BRKLIN)     ; Code string after "NEXT"
1E6D: 7E      	        ld      A,(HL)          ; Get next byte in code string
1E6E: FE2C    	        cp      ','             ; More NEXTs ?
1E70: C2C419  	        jp      NZ,RUNCNT       ; No - Do next statement
1E73: CD041A  	        call    GETCHR          ; Position to index name
1E76: CD311E  	        call    NEXT1           ; Re-enter NEXT routine
              	; < will not RETurn to here , Exit to RUNCNT or Loop >
              	
1E79: CD8B1E  	GETNUM: call    EVAL            ; Get a numeric expression
1E7C: F6      	TSTNUM: defb    $F6             ; Clear carry (numeric)
1E7D: 37      	TSTSTR: scf                     ; Set carry (string)
1E7E: 3A9281  	CHKTYP: ld      A,(TYPE)        ; Check types match
1E81: 8F      	        adc     A,A             ; Expected + actual
1E82: B7      	        or      A               ; Clear carry , set parity
1E83: E8      	        ret     PE              ; Even parity - Types match
1E84: C30F15  	        jp      TMERR           ; Different types - Error
              	
1E87: CDE117  	OPNPAR: call    CHKSYN          ; Make sure "(" follows
1E8A: 28      	        defb    '('
1E8B: 2B      	EVAL:   dec     HL              ; Evaluate expression & save
1E8C: 1600    	        ld      D,$00           ; Precedence value
1E8E: D5      	EVAL1:  push    DE              ; Save precedence
1E8F: 0E01    	        ld      C,$01
1E91: CDBA14  	        call    CHKSTK          ; Check for 1 level of stack
1E94: CD021F  	        call    OPRND           ; Get next expression value
1E97: 22B581  	EVAL2:  ld      (NXTOPR),HL     ; Save address of next operator
1E9A: 2AB581  	EVAL3:  ld      HL,(NXTOPR)     ; Restore address of next opr
1E9D: C1      	        pop     BC              ; Precedence value and operator
1E9E: 78      	        ld      A,B             ; Get precedence value
1E9F: FE78    	        cp      $78             ; "AND", "OR", or "XOR" ?
1EA1: D47C1E  	        call    NC,TSTNUM       ; No - Make sure it's a number
1EA4: 7E      	        ld      A,(HL)          ; Get next operator / function
1EA5: 1600    	        ld      D,$00           ; Clear Last relation
1EA7: D6C3    	RLTLP:  sub     ZGTR            ; ">" Token
1EA9: DAC31E  	        jp      C,FOPRND        ; + - * / ^ AND OR XOR - Test it
1EAC: FE03    	        cp      ZLTH+1-ZGTR     ; < = >
1EAE: D2C31E  	        jp      NC,FOPRND       ; Function - Call it
1EB1: FE01    	        cp      ZEQUAL-ZGTR     ; "="
1EB3: 17      	        rla                     ; <- Test for legal
1EB4: AA      	        xor     D               ; <- combinations of < = >
1EB5: BA      	        cp      D               ; <- by combining last token
1EB6: 57      	        ld      D,A             ; <- with current one
1EB7: DAFD14  	        jp      C,SNERR         ; Error if "<<' '==" or ">>"
1EBA: 22AA81  	        ld      (CUROPR),HL     ; Save address of current token
1EBD: CD041A  	        call    GETCHR          ; Get next character
1EC0: C3A71E  	        jp      RLTLP           ; Treat the two as one
              	
1EC3: 7A      	FOPRND: ld      A,D             ; < = > found ?
1EC4: B7      	        or      A
1EC5: C2F91F  	        jp      NZ,TSTRED       ; Yes - Test for reduction
1EC8: 7E      	        ld      A,(HL)          ; Get operator token
1EC9: 22AA81  	        ld      (CUROPR),HL     ; Save operator address
1ECC: D6B9    	        sub     ZPLUS           ; Operator or function?
1ECE: D8      	        ret     C               ; Neither - Exit
1ECF: FE0A    	        cp      ZOR+1-ZPLUS     ; Is it + - * / ^ AND XOR OR ?
1ED1: D0      	        ret     NC              ; No - Exit
1ED2: 5F      	        ld      E,A             ; Coded operator
1ED3: 3A9281  	        ld      A,(TYPE)        ; Get data type
1ED6: 3D      	        dec     A               ; FF = numeric , 00 = string
1ED7: B3      	        or      E               ; Combine with coded operator
1ED8: 7B      	        ld      A,E             ; Get coded operator
1ED9: CA6E24  	        jp      Z,CONCAT        ; String concatenation
1EDC: 07      	        rlca                    ; Times 2
1EDD: 83      	        add     A,E             ; Times 3
1EDE: 5F      	        ld      E,A             ; To DE (D is 0)
1EDF: 21AE11  	        ld      HL,PRITAB       ; Precedence table
1EE2: 19      	        add     HL,DE           ; To the operator concerned
1EE3: 78      	        ld      A,B             ; Last operator precedence
1EE4: 56      	        ld      D,(HL)          ; Get evaluation precedence
1EE5: BA      	        cp      D               ; Compare with eval precedence
1EE6: D0      	        ret     NC              ; Exit if higher precedence
1EE7: 23      	        inc     HL              ; Point to routine address
1EE8: CD7C1E  	        call    TSTNUM          ; Make sure it's a number
              	
1EEB: C5      	STKTHS: push    BC              ; Save last precedence & token
1EEC: 019A1E  	        ld      BC,EVAL3        ; Where to go on prec' break
1EEF: C5      	        push    BC              ; Save on stack for return
1EF0: 43      	        ld      B,E             ; Save operator
1EF1: 4A      	        ld      C,D             ; Save precedence
1EF2: CD902B  	        call    STAKFP          ; Move value to stack
1EF5: 58      	        ld      E,B             ; Restore operator
1EF6: 51      	        ld      D,C             ; Restore precedence
1EF7: 4E      	        ld      C,(HL)          ; Get LSB of routine address
1EF8: 23      	        inc     HL
1EF9: 46      	        ld      B,(HL)          ; Get MSB of routine address
1EFA: 23      	        inc     HL
1EFB: C5      	        push    BC              ; Save routine address
1EFC: 2AAA81  	        ld      HL,(CUROPR)     ; Address of current operator
1EFF: C38E1E  	        jp      EVAL1           ; Loop until prec' break
              	
1F02: AF      	OPRND:  xor     A               ; Get operand routine
1F03: 329281  	        ld      (TYPE),A        ; Set numeric expected
1F06: CD041A  	        call    GETCHR          ; Get next character
1F09: 1E24    	        ld      E,MO            ; ?MO Error
1F0B: CA1115  	        jp      Z,ERROR         ; No operand - Error
1F0E: DA662C  	        jp      C,ASCTFP        ; Number - Get value
1F11: CDA61A  	        call    CHKLTR          ; See if a letter
1F14: D2691F  	        jp      NC,CONVAR       ; Letter - Find variable
1F17: FE26    	        cp      '&'             ; &H = HEX, &B = BINARY
1F19: 2012    	        jr      NZ,NOTAMP
1F1B: CD041A  	        call    GETCHR          ; Get next character
1F1E: FE48    	        cp      'H'             ; Hex number indicated? [function added]
1F20: CAED38  	        jp      Z,HEXTFP        ; Convert Hex to FPREG
1F23: FE42    	        cp      'B'             ; Binary number indicated? [function added]
1F25: CA5D39  	        jp      Z,BINTFP        ; Convert Bin to FPREG
1F28: 1E02    	        ld      E,SN            ; If neither then a ?SN Error
1F2A: CA1115  	        jp      Z,ERROR         ;
1F2D: FEB9    	NOTAMP: cp      ZPLUS           ; '+' Token ?
1F2F: CA021F  	        jp      Z,OPRND         ; Yes - Look for operand
1F32: FE2E    	        cp      '.'             ; '.' ?
1F34: CA662C  	        jp      Z,ASCTFP        ; Yes - Create FP number
1F37: FEBA    	        cp      ZMINUS          ; '-' Token ?
1F39: CA581F  	        jp      Z,MINUS         ; Yes - Do minus
1F3C: FE22    	        cp      $22             ; '"'             ; Literal string ?
1F3E: CA3723  	        jp      Z,QTSTR         ; Get string terminated by '"'
1F41: FEB7    	        cp      ZNOT            ; "NOT" Token ?
1F43: CA5920  	        jp      Z,EVNOT         ; Yes - Eval NOT expression
1F46: FEB4    	        cp      ZFN             ; "FN" Token ?
1F48: CA9B22  	        jp      Z,DOFN          ; Yes - Do FN routine
1F4B: D6C6    	        sub     ZSGN            ; Is it a function?
1F4D: D27A1F  	        jp      NC,FNOFST       ; Yes - Evaluate function
1F50: CD871E  	EVLPAR: call    OPNPAR          ; Evaluate expression in "()"
1F53: CDE117  	        call    CHKSYN          ; Make sure ")" follows
1F56: 29      	        defb    ')'
1F57: C9      	        ret
              	
1F58: 167D    	MINUS:  ld      D,$7D           ; '-' precedence
1F5A: CD8E1E  	        call    EVAL1           ; Evaluate until prec' break
1F5D: 2AB581  	        ld      HL,(NXTOPR)     ; Get next operator address
1F60: E5      	        push    HL              ; Save next operator address
1F61: CD882B  	        call    INVSGN          ; Negate value
1F64: CD7C1E  	RETNUM: call    TSTNUM          ; Make sure it's a number
1F67: E1      	        pop     HL              ; Restore next operator address
1F68: C9      	        ret
              	
1F69: CD7E20  	CONVAR: call    GETVAR          ; Get variable address to DE
1F6C: E5      	FRMEVL: push    HL              ; Save code string address
1F6D: EB      	        ex      DE,HL           ; Variable address to HL
1F6E: 22C981  	        ld      (FPREG),HL      ; Save address of variable
1F71: 3A9281  	        ld      A,(TYPE)        ; Get type
1F74: B7      	        or      A               ; Numeric?
1F75: CC9D2B  	        call    Z,PHLTFP        ; Yes - Move contents to FPREG
1F78: E1      	        pop     HL              ; Restore code string address
1F79: C9      	        ret
              	
1F7A: 0600    	FNOFST: ld      B,$00           ; Get address of function
1F7C: 07      	        rlca                    ; Double function offset
1F7D: 4F      	        ld      C,A             ; BC = Offset in function table
1F7E: C5      	        push    BC              ; Save adjusted token value
1F7F: CD041A  	        call    GETCHR          ; Get next character
1F82: 79      	        ld      A,C             ; Get adjusted token value
1F83: FE39    	        cp      2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
1F85: DAA11F  	        jp      C,FNVAL         ; No - Do function
1F88: CD871E  	        call    OPNPAR          ; Evaluate expression  (X,...
1F8B: CDE117  	        call    CHKSYN          ; Make sure ',' follows
1F8E: 2C      	        defb    ','
1F8F: CD7D1E  	        call    TSTSTR          ; Make sure it's a string
1F92: EB      	        ex      DE,HL           ; Save code string address
1F93: 2AC981  	        ld      HL,(FPREG)      ; Get address of string
1F96: E3      	        ex      (SP),HL         ; Save address of string
1F97: E5      	        push    HL              ; Save adjusted token value
1F98: EB      	        ex      DE,HL           ; Restore code string address
1F99: CD0026  	        call    GETINT          ; Get integer 0-255
1F9C: EB      	        ex      DE,HL           ; Save code string address
1F9D: E3      	        ex      (SP),HL         ; Save integer,HL = adj' token
1F9E: C3A91F  	        jp      GOFUNC          ; Jump to string function
              	
1FA1: CD501F  	FNVAL:  call    EVLPAR          ; Evaluate expression
1FA4: E3      	        ex      (SP),HL         ; HL = Adjusted token value
1FA5: 11641F  	        ld      DE,RETNUM       ; Return number from function
1FA8: D5      	        push    DE              ; Save on stack
1FA9: 019A0F  	GOFUNC: ld      BC,FNCTAB       ; Function routine addresses
1FAC: 09      	        add     HL,BC           ; Point to right address
1FAD: 4E      	        ld      C,(HL)          ; Get LSB of address
1FAE: 23      	        inc     HL              ;
1FAF: 66      	        ld      H,(HL)          ; Get MSB of address
1FB0: 69      	        ld      L,C             ; Address to HL
1FB1: E9      	        jp      (HL)            ; Jump to function
              	
1FB2: 15      	SGNEXP: dec     D               ; Dee to flag negative exponent
1FB3: FEBA    	        cp      ZMINUS          ; '-' token ?
1FB5: C8      	        ret     Z               ; Yes - Return
1FB6: FE2D    	        cp      '-'             ; '-' ASCII ?
1FB8: C8      	        ret     Z               ; Yes - Return
1FB9: 14      	        inc     D               ; Inc to flag positive exponent
1FBA: FE2B    	        cp      '+'             ; '+' ASCII ?
1FBC: C8      	        ret     Z               ; Yes - Return
1FBD: FEB9    	        cp      ZPLUS           ; '+' token ?
1FBF: C8      	        ret     Z               ; Yes - Return
1FC0: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
1FC1: C9      	        ret                     ; Return "NZ"
              	
              	; execute OR, AND, and XOR operations
1FC2: AF      	PAND:   xor     A               ; for AND, Z=1
1FC3: 1807    	        jr      CNTLGC          
1FC5: AF      	POR     xor     A               ; for OR, Z=0, S=1
1FC6: D601    	        sub     $01
1FC8: 1802    	        jr      CNTLGC
1FCA: AF      	PXOR:   xor     A               ; for XOR, Z=0, S=0
1FCB: 3C      	        inc     A
1FCC: F5      	CNTLGC: push    AF              ; store operand's flags
1FCD: CD7C1E  	        call    TSTNUM          ; Make sure it's a number
1FD0: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
1FD3: F1      	        pop     AF              ; retrieve operand's flags
1FD4: EB      	        ex      DE,HL           ; <- Get last
1FD5: C1      	        pop     BC              ; <-  value
1FD6: E3      	        ex      (SP),HL         ; <-  from
1FD7: EB      	        ex      DE,HL           ; <-  stack
1FD8: CDA02B  	        call    FPBCDE          ; Move last value to FPREG
1FDB: F5      	        push    AF              ; store operand's flags
1FDC: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
1FDF: F1      	        pop     AF              ; retrieve operand's flags
1FE0: C1      	        pop     BC              ; Get value
1FE1: 79      	        ld      A,C             ; Get LSB
1FE2: 215922  	        ld      HL,ACPASS       ; Address of save AC as current
1FE5: 2005    	        jr      NZ,POR1         ; if X/OR, jump over
1FE7: A3      	PAND1:  and     E               ; "AND" LSBs
1FE8: 4F      	        ld      C,A             ; Save LSB
1FE9: 78      	        ld      A,B             ; Get MSB
1FEA: A2      	        and     D               ; "AND" MSBs
1FEB: E9      	        jp      (HL)            ; Save AC as current (ACPASS)
1FEC: F2F41F  	POR1:   jp      P,PXOR1         ; if S=0, jump to XOR
1FEF: B3      	        or      E               ; "OR" LSBs
1FF0: 4F      	        ld      C,A             ; Save LSB
1FF1: 78      	        ld      A,B             ; Get MSB
1FF2: B2      	        or      D               ; "OR" MSBs
1FF3: E9      	        jp      (HL)            ; Save AC as current (ACPASS)
1FF4: AB      	PXOR1:  xor     E               ; "XOR" LSBs
1FF5: 4F      	        ld      C,A             ; Save LSB
1FF6: 78      	        ld      A,B             ; Get MSB
1FF7: AA      	        xor     D               ; "XOR" MSBs
1FF8: E9      	        jp      (HL)            ; Save AC as current (ACPASS) 
              	
1FF9: 210B20  	TSTRED: ld      HL,CMPLOG       ; Logical compare routine
1FFC: 3A9281  	        ld      A,(TYPE)        ; Get data type
1FFF: 1F      	        rra                     ; Carry set = string
2000: 7A      	        ld      A,D             ; Get last precedence value
2001: 17      	        rla                     ; Times 2 plus carry
2002: 5F      	        ld      E,A             ; To E
2003: 1664    	        ld      D,$64           ; Relational precedence
2005: 78      	        ld      A,B             ; Get current precedence
2006: BA      	        cp      D               ; Compare with last
2007: D0      	        ret     NC              ; Eval if last was rel' or log'
2008: C3EB1E  	        jp      STKTHS          ; Stack this one and get next
              	
200B: 0D20    	CMPLOG: defw    CMPLG1          ; Compare two values / strings
200D: 79      	CMPLG1: ld      A,C             ; Get data type
200E: B7      	        or      A
200F: 1F      	        rra
2010: C1      	        pop     BC              ; Get last expression to BCDE
2011: D1      	        pop     DE
2012: F5      	        push    AF              ; Save status
2013: CD7E1E  	        call    CHKTYP          ; Check that types match
2016: 214F20  	        ld      HL,CMPRES       ; Result to comparison
2019: E5      	        push    HL              ; Save for RETurn
201A: CADA2B  	        jp      Z,CMPNUM        ; Compare values if numeric
201D: AF      	        xor     A               ; Compare two strings
201E: 329281  	        ld      (TYPE),A        ; Set type to numeric
2021: D5      	        push    DE              ; Save string name
2022: CDBB24  	        call    GSTRCU          ; Get current string
2025: 7E      	        ld      A,(HL)          ; Get length of string
2026: 23      	        inc     HL
2027: 23      	        inc     HL
2028: 4E      	        ld      C,(HL)          ; Get LSB of address
2029: 23      	        inc     HL
202A: 46      	        ld      B,(HL)          ; Get MSB of address
202B: D1      	        pop     DE              ; Restore string name
202C: C5      	        push    BC              ; Save address of string
202D: F5      	        push    AF              ; Save length of string
202E: CDBF24  	        call    GSTRDE          ; Get second string
2031: CDAE2B  	        call    LOADFP          ; Get address of second string
2034: F1      	        pop     AF              ; Restore length of string 1
2035: 57      	        ld      D,A             ; Length to D
2036: E1      	        pop     HL              ; Restore address of string 1
2037: 7B      	CMPSTR: ld      A,E             ; Bytes of string 2 to do
2038: B2      	        or      D               ; Bytes of string 1 to do
2039: C8      	        ret     Z               ; Exit if all bytes compared
203A: 7A      	        ld      A,D             ; Get bytes of string 1 to do
203B: D601    	        sub     $01
203D: D8      	        ret     C               ; Exit if end of string 1
203E: AF      	        xor     A
203F: BB      	        cp      E               ; Bytes of string 2 to do
2040: 3C      	        inc     A
2041: D0      	        ret     NC              ; Exit if end of string 2
2042: 15      	        dec     D               ; Count bytes in string 1
2043: 1D      	        dec     E               ; Count bytes in string 2
2044: 0A      	        ld      A,(BC)          ; Byte in string 2
2045: BE      	        cp      (HL)            ; Compare to byte in string 1
2046: 23      	        inc     HL              ; Move up string 1
2047: 03      	        inc     BC              ; Move up string 2
2048: CA3720  	        jp      Z,CMPSTR        ; Same - Try next bytes
204B: 3F      	        ccf                     ; Flag difference (">" or "<")
204C: C36A2B  	        jp      FLGDIF          ; "<" gives -1 , ">" gives +1
              	
204F: 3C      	CMPRES: inc     A               ; Increment current value
2050: 8F      	        adc     A,A             ; Double plus carry
2051: C1      	        pop     BC              ; Get other value
2052: A0      	        and     B               ; Combine them
2053: C6FF    	        add     A,-1            ; Carry set if different
2055: 9F      	        sbc     A,A             ; 00 - Equal , FF - Different
2056: C3712B  	        jp      FLGREL          ; Set current value & continue
              	
2059: 165A    	EVNOT:  ld      D,$5A           ; Precedence value for "NOT"
205B: CD8E1E  	        call    EVAL1           ; Eval until precedence break
205E: CD7C1E  	        call    TSTNUM          ; Make sure it's a number
2061: CDBA1A  	        call    DEINT           ; Get integer -32768 - 32767
2064: 7B      	        ld      A,E             ; Get LSB
2065: 2F      	        cpl                     ; Invert LSB
2066: 4F      	        ld      C,A             ; Save "NOT" of LSB
2067: 7A      	        ld      A,D             ; Get MSB
2068: 2F      	        cpl                     ; Invert MSB
2069: CD5922  	        call    ACPASS          ; Save AC as current
206C: C1      	        pop     BC              ; Clean up stack
206D: C39A1E  	        jp      EVAL3           ; Continue evaluation
              	
2070: 2B      	DIMRET: dec     HL              ; dec 'cos GETCHR INCs
2071: CD041A  	        call    GETCHR          ; Get next character
2074: C8      	        ret     Z               ; End of DIM statement
2075: CDE117  	        call    CHKSYN          ; Make sure ',' follows
2078: 2C      	        defb    ','
2079: 017020  	DIM:    ld      BC,DIMRET       ; Return to "DIMRET"
207C: C5      	        push    BC              ; Save on stack
207D: F6      	        defb    $F6             ; Flag "Create" variable
207E: AF      	GETVAR: xor     A               ; Find variable address,to DE
207F: 329181  	        ld      (LCRFLG),A      ; Set locate / create flag
2082: 46      	        ld      B,(HL)          ; Get First byte of name
2083: CDA61A  	GTFNAM: call    CHKLTR          ; See if a letter
2086: DAFD14  	        jp      C,SNERR         ; ?SN Error if not a letter
2089: AF      	        xor     A
208A: 4F      	        ld      C,A             ; Clear second byte of name
208B: 329281  	        ld      (TYPE),A        ; Set type to numeric
208E: CD041A  	        call    GETCHR          ; Get next character
2091: DA9A20  	        jp      C,SVNAM2        ; Numeric - Save in name
2094: CDA61A  	        call    CHKLTR          ; See if a letter
2097: DAA720  	        jp      C,CHARTY        ; Not a letter - Check type
209A: 4F      	SVNAM2: ld      C,A             ; Save second byte of name
209B: CD041A  	ENDNAM: call    GETCHR          ; Get next character
209E: DA9B20  	        jp      C,ENDNAM        ; Numeric - Get another
20A1: CDA61A  	        call    CHKLTR          ; See if a letter
20A4: D29B20  	        jp      NC,ENDNAM       ; Letter - Get another
20A7: D624    	CHARTY: sub     '$'             ; String variable?
20A9: C2B620  	        jp      NZ,NOTSTR       ; No - Numeric variable
20AC: 3C      	        inc     A               ; A = 1 (string type)
20AD: 329281  	        ld      (TYPE),A        ; Set type to string
20B0: 0F      	        rrca                    ; A = 80H , Flag for string
20B1: 81      	        add     A,C             ; 2nd byte of name has bit 7 on
20B2: 4F      	        ld      C,A             ; Resave second byte on name
20B3: CD041A  	        call    GETCHR          ; Get next character
20B6: 3AB081  	NOTSTR: ld      A,(FORFLG)      ; Array name needed ?
20B9: 3D      	        dec     A
20BA: CA6321  	        jp      Z,ARLDSV        ; Yes - Get array name
20BD: F2C620  	        jp      P,NSCFOR        ; No array with "FOR" or "FN"
20C0: 7E      	        ld      A,(HL)          ; Get byte again
20C1: D628    	        sub     '('             ; Subscripted variable?
20C3: CA3B21  	        jp      Z,SBSCPT        ; Yes - Sort out subscript
              	
20C6: AF      	NSCFOR: xor     A               ; Simple variable
20C7: 32B081  	        ld      (FORFLG),A      ; Clear "FOR" flag
20CA: E5      	        push    HL              ; Save code string address
20CB: 50      	        ld      D,B             ; DE = Variable name to find
20CC: 59      	        ld      E,C
20CD: 2AC381  	        ld      HL,(FNRGNM)     ; FN argument name
20D0: CDDB17  	        call    CPDEHL          ; Is it the FN argument?
20D3: 11C581  	        ld      DE,FNARG        ; Point to argument value
20D6: CA4F2A  	        jp      Z,POPHRT        ; Yes - Return FN argument value
20D9: 2ABD81  	        ld      HL,(VAREND)     ; End of variables
20DC: EB      	        ex      DE,HL           ; Address of end of search
20DD: 2ABB81  	        ld      HL,(PROGND)     ; Start of variables address
20E0: CDDB17  	FNDVAR: call    CPDEHL          ; End of variable list table?
20E3: CAF920  	        jp      Z,CFEVAL        ; Yes - Called from EVAL?
20E6: 79      	        ld      A,C             ; Get second byte of name
20E7: 96      	        sub     (HL)            ; Compare with name in list
20E8: 23      	        inc     HL              ; Move on to first byte
20E9: C2EE20  	        jp      NZ,FNTHR        ; Different - Find another
20EC: 78      	        ld      A,B             ; Get first byte of name
20ED: 96      	        sub     (HL)            ; Compare with name in list
20EE: 23      	FNTHR:  inc     HL              ; Move on to LSB of value
20EF: CA2D21  	        jp      Z,RETADR        ; Found - Return address
20F2: 23      	        inc     HL              ; <- Skip
20F3: 23      	        inc     HL              ; <- over
20F4: 23      	        inc     HL              ; <- F.P.
20F5: 23      	        inc     HL              ; <- value
20F6: C3E020  	        jp      FNDVAR          ; Keep looking
              	
20F9: E1      	CFEVAL: pop     HL              ; Restore code string address
20FA: E3      	        ex      (SP),HL         ; Get return address
20FB: D5      	        push    DE              ; Save address of variable
20FC: 116C1F  	        ld      DE,FRMEVL       ; Return address in EVAL
20FF: CDDB17  	        call    CPDEHL          ; Called from EVAL ?
2102: D1      	        pop     DE              ; Restore address of variable
2103: CA3021  	        jp      Z,RETNUL        ; Yes - Return null variable
2106: E3      	        ex      (SP),HL         ; Put back return
2107: E5      	        push    HL              ; Save code string address
2108: C5      	        push    BC              ; Save variable name
2109: 010600  	        ld      BC,$0006        ; 2 byte name plus 4 byte data
210C: 2ABF81  	        ld      HL,(ARREND)     ; End of arrays
210F: E5      	        push    HL              ; Save end of arrays
2110: 09      	        add     HL,BC           ; Move up 6 bytes
2111: C1      	        pop     BC              ; Source address in BC
2112: E5      	        push    HL              ; Save new end address
2113: CDA914  	        call    MOVUP           ; Move arrays up
2116: E1      	        pop     HL              ; Restore new end address
2117: 22BF81  	        ld      (ARREND),HL     ; Set new end address
211A: 60      	        ld      H,B             ; End of variables to HL
211B: 69      	        ld      L,C
211C: 22BD81  	        ld      (VAREND),HL     ; Set new end address
              	
211F: 2B      	ZEROLP: dec     HL              ; Back through to zero variable
2120: 3600    	        ld      (HL),$00        ; Zero byte in variable
2122: CDDB17  	        call    CPDEHL          ; Done them all?
2125: C21F21  	        jp      NZ,ZEROLP       ; No - Keep on going
2128: D1      	        pop     DE              ; Get variable name
2129: 73      	        ld      (HL),E          ; Store second character
212A: 23      	        inc     HL
212B: 72      	        ld      (HL),D          ; Store first character
212C: 23      	        inc     HL
212D: EB      	RETADR: ex      DE,HL           ; Address of variable in DE
212E: E1      	        pop     HL              ; Restore code string address
212F: C9      	        ret
              	
2130: 32CC81  	RETNUL: ld      (FPEXP),A       ; Set result to zero
2133: 217A14  	        ld      HL,ZERBYT       ; Also set a null string
2136: 22C981  	        ld      (FPREG),HL      ; Save for EVAL
2139: E1      	        pop     HL              ; Restore code string address
213A: C9      	        ret
              	
213B: E5      	SBSCPT: push    HL              ; Save code string address
213C: 2A9181  	        ld      HL,(LCRFLG)     ; Locate/Create and Type
213F: E3      	        ex      (SP),HL         ; Save and get code string
2140: 57      	        ld      D,A             ; Zero number of dimensions
2141: D5      	SCPTLP: push    DE              ; Save number of dimensions
2142: C5      	        push    BC              ; Save array name
2143: CDAE1A  	        call    FPSINT          ; Get subscript (0-32767)
2146: C1      	        pop     BC              ; Restore array name
2147: F1      	        pop     AF              ; Get number of dimensions
2148: EB      	        ex      DE,HL
2149: E3      	        ex      (SP),HL         ; Save subscript value
214A: E5      	        push    HL              ; Save LCRFLG and TYPE
214B: EB      	        ex      DE,HL
214C: 3C      	        inc     A               ; Count dimensions
214D: 57      	        ld      D,A             ; Save in D
214E: 7E      	        ld      A,(HL)          ; Get next byte in code string
214F: FE2C    	        cp      ','             ; Comma (more to come)?
2151: CA4121  	        jp      Z,SCPTLP        ; Yes - More subscripts
2154: CDE117  	        call    CHKSYN          ; Make sure ")" follows
2157: 29      	        defb    ')'
2158: 22B581  	        ld      (NXTOPR),HL     ; Save code string address
215B: E1      	        pop     HL              ; Get LCRFLG and TYPE
215C: 229181  	        ld      (LCRFLG),HL     ; Restore Locate/create & type
215F: 1E00    	        ld      E,$00           ; Flag not CSAVE* or CLOAD*
2161: D5      	        push    DE              ; Save number of dimensions (D)
2162: 11      	        defb    $11             ; Skip "push HL" and "push AF'
              	
2163: E5      	ARLDSV: push    HL              ; Save code string address
2164: F5      	        push    AF              ; A = 00 , Flags set = Z,N
2165: 2ABD81  	        ld      HL,(VAREND)     ; Start of arrays
2168: 3E      	        defb    $3E             ; Skip "add HL,DE"
2169: 19      	FNDARY: add     HL,DE           ; Move to next array start
216A: EB      	        ex      DE,HL
216B: 2ABF81  	        ld      HL,(ARREND)     ; End of arrays
216E: EB      	        ex      DE,HL           ; Current array pointer
216F: CDDB17  	        call    CPDEHL          ; End of arrays found?
2172: CA9B21  	        jp      Z,CREARY        ; Yes - Create array
2175: 7E      	        ld      A,(HL)          ; Get second byte of name
2176: B9      	        cp      C               ; Compare with name given
2177: 23      	        inc     HL              ; Move on
2178: C27D21  	        jp      NZ,NXTARY       ; Different - Find next array
217B: 7E      	        ld      A,(HL)          ; Get first byte of name
217C: B8      	        cp      B               ; Compare with name given
217D: 23      	NXTARY: inc     HL              ; Move on
217E: 5E      	        ld      E,(HL)          ; Get LSB of next array address
217F: 23      	        inc     HL
2180: 56      	        ld      D,(HL)          ; Get MSB of next array address
2181: 23      	        inc     HL
2182: C26921  	        jp      NZ,FNDARY       ; Not found - Keep looking
2185: 3A9181  	        ld      A,(LCRFLG)      ; Found Locate or Create it?
2188: B7      	        or      A
2189: C20615  	        jp      NZ,DDERR        ; Create - ?DD Error
218C: F1      	        pop     AF              ; Locate - Get number of dim'ns
218D: 44      	        ld      B,H             ; BC Points to array dim'ns
218E: 4D      	        ld      C,L
218F: CA4F2A  	        jp      Z,POPHRT        ; Jump if array load/save
2192: 96      	        sub     (HL)            ; Same number of dimensions?
2193: CAF921  	        jp      Z,FINDEL        ; Yes - Find element
2196: 1E10    	BSERR:  ld      E,BS            ; ?BS Error
2198: C31115  	        jp      ERROR           ; Output error
              	
219B: 110400  	CREARY: ld      DE,$0004        ; 4 Bytes per entry
219E: F1      	        pop     AF              ; Array to save or 0 dim'ns?
219F: CACF1A  	        jp      Z,FCERR         ; Yes - ?FC Error
21A2: 71      	        ld      (HL),C          ; Save second byte of name
21A3: 23      	        inc     HL
21A4: 70      	        ld      (HL),B          ; Save first byte of name
21A5: 23      	        inc     HL
21A6: 4F      	        ld      C,A             ; Number of dimensions to C
21A7: CDBA14  	        call    CHKSTK          ; Check if enough memory
21AA: 23      	        inc     HL              ; Point to number of dimensions
21AB: 23      	        inc     HL
21AC: 22AA81  	        ld      (CUROPR),HL     ; Save address of pointer
21AF: 71      	        ld      (HL),C          ; Set number of dimensions
21B0: 23      	        inc     HL
21B1: 3A9181  	        ld      A,(LCRFLG)      ; Locate of Create?
21B4: 17      	        rla                     ; Carry set = Create
21B5: 79      	        ld      A,C             ; Get number of dimensions
21B6: 010B00  	CRARLP: ld      BC,10+1         ; Default dimension size 10
21B9: D2BE21  	        jp      NC,DEFSIZ       ; Locate - Set default size
21BC: C1      	        pop     BC              ; Get specified dimension size
21BD: 03      	        inc     BC              ; Include zero element
21BE: 71      	DEFSIZ: ld      (HL),C          ; Save LSB of dimension size
21BF: 23      	        inc     HL
21C0: 70      	        ld      (HL),B          ; Save MSB of dimension size
21C1: 23      	        inc     HL
21C2: F5      	        push    AF              ; Save num' of dim'ns an status
21C3: E5      	        push    HL              ; Save address of dim'n size
21C4: CD4B2C  	        call    MLDEBC          ; Multiply DE by BC to find
21C7: EB      	        ex      DE,HL           ; amount of mem needed (to DE)
21C8: E1      	        pop     HL              ; Restore address of dimension
21C9: F1      	        pop     AF              ; Restore number of dimensions
21CA: 3D      	        dec     A               ; Count them
21CB: C2B621  	        jp      NZ,CRARLP       ; Do next dimension if more
21CE: F5      	        push    AF              ; Save locate/create flag
21CF: 42      	        ld      B,D             ; MSB of memory needed
21D0: 4B      	        ld      C,E             ; LSB of memory needed
21D1: EB      	        ex      DE,HL
21D2: 19      	        add     HL,DE           ; Add bytes to array start
21D3: DAD214  	        jp      C,OMERR         ; Too big - Error
21D6: CDC314  	        call    ENFMEM          ; See if enough memory
21D9: 22BF81  	        ld      (ARREND),HL     ; Save new end of array
              	
21DC: 2B      	ZERARY: dec     HL              ; Back through array data
21DD: 3600    	        ld      (HL),$00        ; Set array element to zero
21DF: CDDB17  	        call    CPDEHL          ; All elements zeroed?
21E2: C2DC21  	        jp      NZ,ZERARY       ; No - Keep on going
21E5: 03      	        inc     BC              ; Number of bytes + 1
21E6: 57      	        ld      D,A             ; A=0
21E7: 2AAA81  	        ld      HL,(CUROPR)     ; Get address of array
21EA: 5E      	        ld      E,(HL)          ; Number of dimensions
21EB: EB      	        ex      DE,HL           ; To HL
21EC: 29      	        add     HL,HL           ; Two bytes per dimension size
21ED: 09      	        add     HL,BC           ; Add number of bytes
21EE: EB      	        ex      DE,HL           ; Bytes needed to DE
21EF: 2B      	        dec     HL
21F0: 2B      	        dec     HL
21F1: 73      	        ld      (HL),E          ; Save LSB of bytes needed
21F2: 23      	        inc     HL
21F3: 72      	        ld      (HL),D          ; Save MSB of bytes needed
21F4: 23      	        inc     HL
21F5: F1      	        pop     AF              ; Locate / Create?
21F6: DA1D22  	        jp      C,ENDDIM        ; A is 0 , End if create
21F9: 47      	FINDEL: ld      B,A             ; Find array element
21FA: 4F      	        ld      C,A
21FB: 7E      	        ld      A,(HL)          ; Number of dimensions
21FC: 23      	        inc     HL
21FD: 16      	        defb    $16             ; Skip "pop HL"
21FE: E1      	FNDELP: pop     HL              ; Address of next dim' size
21FF: 5E      	        ld      E,(HL)          ; Get LSB of dim'n size
2200: 23      	        inc     HL
2201: 56      	        ld      D,(HL)          ; Get MSB of dim'n size
2202: 23      	        inc     HL
2203: E3      	        ex      (SP),HL         ; Save address - Get index
2204: F5      	        push    AF              ; Save number of dim'ns
2205: CDDB17  	        call    CPDEHL          ; Dimension too large?
2208: D29621  	        jp      NC,BSERR        ; Yes - ?BS Error
220B: E5      	        push    HL              ; Save index
220C: CD4B2C  	        call    MLDEBC          ; Multiply previous by size
220F: D1      	        pop     DE              ; Index supplied to DE
2210: 19      	        add     HL,DE           ; Add index to pointer
2211: F1      	        pop     AF              ; Number of dimensions
2212: 3D      	        dec     A               ; Count them
2213: 44      	        ld      B,H             ; MSB of pointer
2214: 4D      	        ld      C,L             ; LSB of pointer
2215: C2FE21  	        jp      NZ,FNDELP       ; More - Keep going
2218: 29      	        add     HL,HL           ; 4 Bytes per element
2219: 29      	        add     HL,HL
221A: C1      	        pop     BC              ; Start of array
221B: 09      	        add     HL,BC           ; Point to element
221C: EB      	        ex      DE,HL           ; Address of element to DE
221D: 2AB581  	ENDDIM: ld      HL,(NXTOPR)     ; Got code string address
2220: C9      	        ret
              	
2221: CD7C1E  	TMR:    call    TSTNUM          ; Make sure it's a number
2224: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
2227: F3      	        di                      ; we must work with INTs disabled
2228: 21CE81  	        ld      HL,TMRCNT       ; load the address of the first byte of the counter
222B: 7B      	        ld      A,E             ; move param into A
222C: A7      	        and     A               ; is it 0?
222D: 2802    	        jr      Z,LSBTMR        ; print the 2 LSBytes of timer
222F: 23      	        inc     HL              ; else print the 2 MSBytes of timer
2230: 23      	        inc     HL
2231: 46      	LSBTMR: ld      B,(HL)          ; Get LSB of contents
2232: 23      	        inc     HL
2233: 7E      	        ld      A,(HL)          ; Get MSB of contents
2234: FB      	        ei                      ; re-enable INTs
2235: C35A22  	        jp      ABPASS          ;return word into AB
              	
2238: 2ABF81  	FRE:    ld      HL,(ARREND)     ; Start of free memory
223B: EB      	        ex      DE,HL           ; To DE
223C: 210000  	        ld      HL,$0000        ; End of free memory
223F: 39      	        add     HL,SP           ; Current stack value
2240: 3A9281  	        ld      A,(TYPE)        ; Dummy argument type
2243: B7      	        or      A
2244: CA5422  	        jp      Z,FRENUM        ; Numeric - Free variable space
2247: CDBB24  	        call    GSTRCU          ; Current string to pool
224A: CDBB23  	        call    GARBGE          ; Garbage collection
224D: 2AAD80  	        ld      HL,(STRSPC)     ; Bottom of string space in use
2250: EB      	        ex      DE,HL           ; To DE
2251: 2AA881  	        ld      HL,(STRBOT)     ; Bottom of string space
2254: 7D      	FRENUM: ld      A,L             ; Get LSB of end
2255: 93      	        sub     E               ; Subtract LSB of beginning
2256: 4F      	        ld      C,A             ; Save difference if C
2257: 7C      	        ld      A,H             ; Get MSB of end
2258: 9A      	        sbc     A,D             ; Subtract MSB of beginning
2259: 41      	ACPASS: ld      B,C             ; Return integer AC
225A: 50      	ABPASS: ld      D,B             ; Return integer AB
225B: 1E00    	        ld      E,$00
225D: 219281  	        ld      HL,TYPE         ; Point to type
2260: 73      	        ld      (HL),E          ; Set type to numeric
2261: 0690    	        ld      B,$80+$10       ; 16 bit integer
2263: C3762B  	        jp      RETINT          ; Return the integr
              	
              	; returns the X position of the cursor during a print
2266: 3A9081  	POS:    ld      A,(CURPOS)      ; Get cursor position
2269: 47      	PASSA:  ld      B,A             ; Put A into AB
226A: AF      	        xor     A               ; Zero A
226B: C35A22  	        jp      ABPASS          ; Return integer AB
              	
226E: CDF122  	DEF:    call    CHEKFN          ; Get "FN" and name
2271: CDE322  	        call    IDTEST          ; Test for illegal direct
2274: 01A71B  	        ld      BC,DATA         ; To get next statement
2277: C5      	        push    BC              ; Save address for RETurn
2278: D5      	        push    DE              ; Save address of function ptr
2279: CDE117  	        call    CHKSYN          ; Make sure "(" follows
227C: 28      	        defb    '('
227D: CD7E20  	        call    GETVAR          ; Get argument variable name
2280: E5      	        push    HL              ; Save code string address
2281: EB      	        ex      DE,HL           ; Argument address to HL
2282: 2B      	        dec     HL
2283: 56      	        ld      D,(HL)          ; Get first byte of arg name
2284: 2B      	        dec     HL
2285: 5E      	        ld      E,(HL)          ; Get second byte of arg name
2286: E1      	        pop     HL              ; Restore code string address
2287: CD7C1E  	        call    TSTNUM          ; Make sure numeric argument
228A: CDE117  	        call    CHKSYN          ; Make sure ")" follows
228D: 29      	        defb    ')'
228E: CDE117  	        call    CHKSYN          ; Make sure "=" follows
2291: C4      	        defb    ZEQUAL          ; "=" token
2292: 44      	        ld      B,H             ; Code string address to BC
2293: 4D      	        ld      C,L
2294: E3      	        ex      (SP),HL         ; Save code str , Get FN ptr
2295: 71      	        ld      (HL),C          ; Save LSB of FN code string
2296: 23      	        inc     HL
2297: 70      	        ld      (HL),B          ; Save MSB of FN code string
2298: C33023  	        jp      SVSTAD          ; Save address and do function
              	
229B: CDF122  	DOFN:   call    CHEKFN          ; Make sure FN follows
229E: D5      	        push    DE              ; Save function pointer address
229F: CD501F  	        call    EVLPAR          ; Evaluate expression in "()"
22A2: CD7C1E  	        call    TSTNUM          ; Make sure numeric result
22A5: E3      	        ex      (SP),HL         ; Save code str , Get FN ptr
22A6: 5E      	        ld      E,(HL)          ; Get LSB of FN code string
22A7: 23      	        inc     HL
22A8: 56      	        ld      D,(HL)          ; Get MSB of FN code string
22A9: 23      	        inc     HL
22AA: 7A      	        ld      A,D             ; And function DEFined?
22AB: B3      	        or      E
22AC: CA0915  	        jp      Z,UFERR         ; No - ?UF Error
22AF: 7E      	        ld      A,(HL)          ; Get LSB of argument address
22B0: 23      	        inc     HL
22B1: 66      	        ld      H,(HL)          ; Get MSB of argument address
22B2: 6F      	        ld      L,A             ; HL = Arg variable address
22B3: E5      	        push    HL              ; Save it
22B4: 2AC381  	        ld      HL,(FNRGNM)     ; Get old argument name
22B7: E3      	        ex      (SP),HL         ; Save old , Get new
22B8: 22C381  	        ld      (FNRGNM),HL     ; Set new argument name
22BB: 2AC781  	        ld      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
22BE: E5      	        push    HL              ; Save it
22BF: 2AC581  	        ld      HL,(FNARG)      ; Get MSB,EXP of old arg value
22C2: E5      	        push    HL              ; Save it
22C3: 21C581  	        ld      HL,FNARG        ; HL = Value of argument
22C6: D5      	        push    DE              ; Save FN code string address
22C7: CDB72B  	        call    FPTHL           ; Move FPREG to argument
22CA: E1      	        pop     HL              ; Get FN code string address
22CB: CD791E  	        call    GETNUM          ; Get value from function
22CE: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
22CF: CD041A  	        call    GETCHR          ; Get next character
22D2: C2FD14  	        jp      NZ,SNERR        ; Bad character in FN - Error
22D5: E1      	        pop     HL              ; Get MSB,EXP of old arg
22D6: 22C581  	        ld      (FNARG),HL      ; Restore it
22D9: E1      	        pop     HL              ; Get LSB,NLSB of old arg
22DA: 22C781  	        ld      (FNARG+2),HL    ; Restore it
22DD: E1      	        pop     HL              ; Get name of old arg
22DE: 22C381  	        ld      (FNRGNM),HL     ; Restore it
22E1: E1      	        pop     HL              ; Restore code string address
22E2: C9      	        ret
              	
22E3: E5      	IDTEST: push    HL              ; Save code string address
22E4: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line number
22E7: 23      	        inc     HL              ; -1 means direct statement
22E8: 7C      	        ld      A,H
22E9: B5      	        or      L
22EA: E1      	        pop     HL              ; Restore code string address
22EB: C0      	        ret     NZ              ; Return if in program
22EC: 1E16    	        ld      E,ID            ; ?ID Error
22EE: C31115  	        jp      ERROR
              	
22F1: CDE117  	CHEKFN: call    CHKSYN          ; Make sure FN follows
22F4: B4      	        defb    ZFN             ; "FN" token
22F5: 3E80    	        ld      A,$80
22F7: 32B081  	        ld      (FORFLG),A      ; Flag FN name to find
22FA: B6      	        or      (HL)            ; FN name has bit 7 set
22FB: 47      	        ld      B,A             ; in first byte of name
22FC: CD8320  	        call    GTFNAM          ; Get FN name
22FF: C37C1E  	        jp      TSTNUM          ; Make sure numeric function
              	
2302: CD7C1E  	STR:    call    TSTNUM          ; Make sure it's a number
2305: CD042D  	        call    NUMASC          ; Turn number into text
2308: CD3623  	STR1:   call    CRTST           ; Create string entry for it
230B: CDBB24  	        call    GSTRCU          ; Current string to pool
230E: 011625  	        ld      BC,TOPOOL       ; Save in string pool
2311: C5      	        push    BC              ; Save address on stack
              	
2312: 7E      	SAVSTR: ld      A,(HL)          ; Get string length
2313: 23      	        inc     HL
2314: 23      	        inc     HL
2315: E5      	        push    HL              ; Save pointer to string
2316: CD9123  	        call    TESTR           ; See if enough string space
2319: E1      	        pop     HL              ; Restore pointer to string
231A: 4E      	        ld      C,(HL)          ; Get LSB of address
231B: 23      	        inc     HL
231C: 46      	        ld      B,(HL)          ; Get MSB of address
231D: CD2A23  	        call    CRTMST          ; Create string entry
2320: E5      	        push    HL              ; Save pointer to MSB of addr
2321: 6F      	        ld      L,A             ; Length of string
2322: CDAE24  	        call    TOSTRA          ; Move to string area
2325: D1      	        pop     DE              ; Restore pointer to MSB
2326: C9      	        ret
              	
2327: CD9123  	MKTMST: call    TESTR           ; See if enough string space
232A: 21A481  	CRTMST: ld      HL,TMPSTR       ; Temporary string
232D: E5      	        push    HL              ; Save it
232E: 77      	        ld      (HL),A          ; Save length of string
232F: 23      	        inc     HL
2330: 23      	SVSTAD: inc     HL
2331: 73      	        ld      (HL),E          ; Save LSB of address
2332: 23      	        inc     HL
2333: 72      	        ld      (HL),D          ; Save MSB of address
2334: E1      	        pop     HL              ; Restore pointer
2335: C9      	        ret
              	
2336: 2B      	CRTST:  dec     HL              ; dec - INCed after
2337: 0622    	QTSTR:  ld      B,$22           ; '"'           ; Terminating quote
2339: 50      	        ld      D,B             ; Quote to D
233A: E5      	DTSTR:  push    HL              ; Save start
233B: 0EFF    	        ld      C,-1            ; Set counter to -1
233D: 23      	QTSTLP: inc     HL              ; Move on
233E: 7E      	        ld      A,(HL)          ; Get byte
233F: 0C      	        inc     C               ; Count bytes
2340: B7      	        or      A               ; End of line?
2341: CA4C23  	        jp      Z,CRTSTE        ; Yes - Create string entry
2344: BA      	        cp      D               ; Terminator D found?
2345: CA4C23  	        jp      Z,CRTSTE        ; Yes - Create string entry
2348: B8      	        cp      B               ; Terminator B found?
2349: C23D23  	        jp      NZ,QTSTLP       ; No - Keep looking
234C: FE22    	CRTSTE: cp      $22             ; '"'             ; End with '"'?
234E: CC041A  	        call    Z,GETCHR        ; Yes - Get next character
2351: E3      	        ex      (SP),HL         ; Starting quote
2352: 23      	        inc     HL              ; First byte of string
2353: EB      	        ex      DE,HL           ; To DE
2354: 79      	        ld      A,C             ; Get length
2355: CD2A23  	        call    CRTMST          ; Create string entry
2358: 11A481  	TSTOPL: ld      DE,TMPSTR       ; Temporary string
235B: 2A9681  	        ld      HL,(TMSTPT)     ; Temporary string pool pointer
235E: 22C981  	        ld      (FPREG),HL      ; Save address of string ptr
2361: 3E01    	        ld      A,$01
2363: 329281  	        ld      (TYPE),A        ; Set type to string
2366: CDBA2B  	        call    DETHL4          ; Move string to pool
2369: CDDB17  	        call    CPDEHL          ; Out of string pool?
236C: 229681  	        ld      (TMSTPT),HL     ; Save new pointer
236F: E1      	        pop     HL              ; Restore code string address
2370: 7E      	        ld      A,(HL)          ; Get next code byte
2371: C0      	        ret     NZ              ; Return if pool OK
2372: 1E1E    	        ld      E,ST            ; ?ST Error
2374: C31115  	        jp      ERROR           ; String pool overflow
              	
2377: 23      	PRNUMS: inc     HL              ; Skip leading space
2378: CD3623  	PRS:    call    CRTST           ; Create string entry for it
237B: CDBB24  	PRS1:   call    GSTRCU          ; Current string to pool
237E: CDAE2B  	        call    LOADFP          ; Move string block to BCDE
2381: 1C      	        inc     E               ; Length + 1
2382: 1D      	PRSLP:  dec     E               ; Count characters
2383: C8      	        ret     Z               ; End of string
2384: 0A      	        ld      A,(BC)          ; Get byte to output
2385: CDEC17  	        call    OUTC            ; Output character in A
2388: FE0D    	        cp      CR              ; Return?
238A: CCC71C  	        call    Z,CNTEND        ; Yes - Position cursor to 0
238D: 03      	        inc     BC              ; Next byte in string
238E: C38223  	        jp      PRSLP           ; More characters to output
              	
2391: B7      	TESTR:  or      A               ; Test if enough room
2392: 0E      	        defb    $0E             ; No garbage collection done
2393: F1      	GRBDON: pop     AF              ; Garbage collection done
2394: F5      	        push    AF              ; Save status
2395: 2AAD80  	        ld      HL,(STRSPC)     ; Bottom of string space in use
2398: EB      	        ex      DE,HL           ; To DE
2399: 2AA881  	        ld      HL,(STRBOT)     ; Bottom of string area
239C: 2F      	        cpl                     ; Negate length (Top down)
239D: 4F      	        ld      C,A             ; -Length to BC
239E: 06FF    	        ld      B,-1            ; BC = -ve length of string
23A0: 09      	        add     HL,BC           ; Add to bottom of space in use
23A1: 23      	        inc     HL              ; Plus one for 2's complement
23A2: CDDB17  	        call    CPDEHL          ; Below string RAM area?
23A5: DAAF23  	        jp      C,TESTOS        ; Tidy up if not done else err
23A8: 22A881  	        ld      (STRBOT),HL     ; Save new bottom of area
23AB: 23      	        inc     HL              ; Point to first byte of string
23AC: EB      	        ex      DE,HL           ; Address to DE
23AD: F1      	POPAF:  pop     AF              ; Throw away status push
23AE: C9      	        ret
              	
23AF: F1      	TESTOS: pop     AF              ; Garbage collect been done?
23B0: 1E1A    	        ld      E,OS            ; ?OS Error
23B2: CA1115  	        jp      Z,ERROR         ; Yes - Not enough string space
23B5: BF      	        cp      A               ; Flag garbage collect done
23B6: F5      	        push    AF              ; Save status
23B7: 019323  	        ld      BC,GRBDON       ; Garbage collection done
23BA: C5      	        push    BC              ; Save for RETurn
23BB: 2A9481  	GARBGE: ld      HL,(LSTRAM)     ; Get end of RAM pointer
23BE: 22A881  	GARBLP: ld      (STRBOT),HL     ; Reset string pointer
23C1: 210000  	        ld      HL,$0000
23C4: E5      	        push    HL              ; Flag no string found
23C5: 2AAD80  	        ld      HL,(STRSPC)     ; Get bottom of string space
23C8: E5      	        push    HL              ; Save bottom of string space
23C9: 219881  	        ld      HL,TMSTPL       ; Temporary string pool
23CC: EB      	GRBLP:  ex      DE,HL
23CD: 2A9681  	        ld      HL,(TMSTPT)     ; Temporary string pool pointer
23D0: EB      	        ex      DE,HL
23D1: CDDB17  	        call    CPDEHL          ; Temporary string pool done?
23D4: 01CC23  	        ld      BC,GRBLP        ; Loop until string pool done
23D7: C22024  	        jp      NZ,STPOOL       ; No - See if in string area
23DA: 2ABB81  	        ld      HL,(PROGND)     ; Start of simple variables
23DD: EB      	SMPVAR: ex      DE,HL
23DE: 2ABD81  	        ld      HL,(VAREND)     ; End of simple variables
23E1: EB      	        ex      DE,HL
23E2: CDDB17  	        call    CPDEHL          ; All simple strings done?
23E5: CAF323  	        jp      Z,ARRLP         ; Yes - Do string arrays
23E8: 7E      	        ld      A,(HL)          ; Get type of variable
23E9: 23      	        inc     HL
23EA: 23      	        inc     HL
23EB: B7      	        or      A               ; "S" flag set if string
23EC: CD2324  	        call    STRADD          ; See if string in string area
23EF: C3DD23  	        jp      SMPVAR          ; Loop until simple ones done
              	
23F2: C1      	GNXARY: pop     BC              ; Scrap address of this array
23F3: EB      	ARRLP:  ex      DE,HL
23F4: 2ABF81  	        ld      HL,(ARREND)     ; End of string arrays
23F7: EB      	        ex      DE,HL
23F8: CDDB17  	        call    CPDEHL          ; All string arrays done?
23FB: CA4924  	        jp      Z,SCNEND        ; Yes - Move string if found
23FE: CDAE2B  	        call    LOADFP          ; Get array name to BCDE
2401: 7B      	        ld      A,E             ; Get type of array
2402: E5      	        push    HL              ; Save address of num of dim'ns
2403: 09      	        add     HL,BC           ; Start of next array
2404: B7      	        or      A               ; Test type of array
2405: F2F223  	        jp      P,GNXARY        ; Numeric array - Ignore it
2408: 22AA81  	        ld      (CUROPR),HL     ; Save address of next array
240B: E1      	        pop     HL              ; Get address of num of dim'ns
240C: 4E      	        ld      C,(HL)          ; BC = Number of dimensions
240D: 0600    	        ld      B,$00
240F: 09      	        add     HL,BC           ; Two bytes per dimension size
2410: 09      	        add     HL,BC
2411: 23      	        inc     HL              ; Plus one for number of dim'ns
2412: EB      	GRBARY: ex      DE,HL
2413: 2AAA81  	        ld      HL,(CUROPR)     ; Get address of next array
2416: EB      	        ex      DE,HL
2417: CDDB17  	        call    CPDEHL          ; Is this array finished?
241A: CAF323  	        jp      Z,ARRLP         ; Yes - Get next one
241D: 011224  	        ld      BC,GRBARY       ; Loop until array all done
2420: C5      	STPOOL: push    BC              ; Save return address
2421: F680    	        or      $80             ; Flag string type
2423: 7E      	STRADD: ld      A,(HL)          ; Get string length
2424: 23      	        inc     HL
2425: 23      	        inc     HL
2426: 5E      	        ld      E,(HL)          ; Get LSB of string address
2427: 23      	        inc     HL
2428: 56      	        ld      D,(HL)          ; Get MSB of string address
2429: 23      	        inc     HL
242A: F0      	        ret     P               ; Not a string - Return
242B: B7      	        or      A               ; Set flags on string length
242C: C8      	        ret     Z               ; Null string - Return
242D: 44      	        ld      B,H             ; Save variable pointer
242E: 4D      	        ld      C,L
242F: 2AA881  	        ld      HL,(STRBOT)     ; Bottom of new area
2432: CDDB17  	        call    CPDEHL          ; String been done?
2435: 60      	        ld      H,B             ; Restore variable pointer
2436: 69      	        ld      L,C
2437: D8      	        ret     C               ; String done - Ignore
2438: E1      	        pop     HL              ; Return address
2439: E3      	        ex      (SP),HL         ; Lowest available string area
243A: CDDB17  	        call    CPDEHL          ; String within string area?
243D: E3      	        ex      (SP),HL         ; Lowest available string area
243E: E5      	        push    HL              ; Re-save return address
243F: 60      	        ld      H,B             ; Restore variable pointer
2440: 69      	        ld      L,C
2441: D0      	        ret     NC              ; Outside string area - Ignore
2442: C1      	        pop     BC              ; Get return , Throw 2 away
2443: F1      	        pop     AF              ;
2444: F1      	        pop     AF              ;
2445: E5      	        push    HL              ; Save variable pointer
2446: D5      	        push    DE              ; Save address of current
2447: C5      	        push    BC              ; Put back return address
2448: C9      	        ret                     ; Go to it
              	
2449: D1      	SCNEND: pop     DE              ; Addresses of strings
244A: E1      	        pop     HL              ;
244B: 7D      	        ld      A,L             ; HL = 0 if no more to do
244C: B4      	        or      H
244D: C8      	        ret     Z               ; No more to do - Return
244E: 2B      	        dec     HL
244F: 46      	        ld      B,(HL)          ; MSB of address of string
2450: 2B      	        dec     HL
2451: 4E      	        ld      C,(HL)          ; LSB of address of string
2452: E5      	        push    HL              ; Save variable address
2453: 2B      	        dec     HL
2454: 2B      	        dec     HL
2455: 6E      	        ld      L,(HL)          ; HL = Length of string
2456: 2600    	        ld      H,$00
2458: 09      	        add     HL,BC           ; Address of end of string+1
2459: 50      	        ld      D,B             ; String address to DE
245A: 59      	        ld      E,C
245B: 2B      	        dec     HL              ; Last byte in string
245C: 44      	        ld      B,H             ; Address to BC
245D: 4D      	        ld      C,L
245E: 2AA881  	        ld      HL,(STRBOT)     ; Current bottom of string area
2461: CDAC14  	        call    MOVSTR          ; Move string to new address
2464: E1      	        pop     HL              ; Restore variable address
2465: 71      	        ld      (HL),C          ; Save new LSB of address
2466: 23      	        inc     HL
2467: 70      	        ld      (HL),B          ; Save new MSB of address
2468: 69      	        ld      L,C             ; Next string area+1 to HL
2469: 60      	        ld      H,B
246A: 2B      	        dec     HL              ; Next string area address
246B: C3BE23  	        jp      GARBLP          ; Look for more strings
              	
246E: C5      	CONCAT: push    BC              ; Save prec' opr & code string
246F: E5      	        push    HL              ;
2470: 2AC981  	        ld      HL,(FPREG)      ; Get first string
2473: E3      	        ex      (SP),HL         ; Save first string
2474: CD021F  	        call    OPRND           ; Get second string
2477: E3      	        ex      (SP),HL         ; Restore first string
2478: CD7D1E  	        call    TSTSTR          ; Make sure it's a string
247B: 7E      	        ld      A,(HL)          ; Get length of second string
247C: E5      	        push    HL              ; Save first string
247D: 2AC981  	        ld      HL,(FPREG)      ; Get second string
2480: E5      	        push    HL              ; Save second string
2481: 86      	        add     A,(HL)          ; Add length of second string
2482: 1E1C    	        ld      E,LS            ; ?LS Error
2484: DA1115  	        jp      C,ERROR         ; String too long - Error
2487: CD2723  	        call    MKTMST          ; Make temporary string
248A: D1      	        pop     DE              ; Get second string to DE
248B: CDBF24  	        call    GSTRDE          ; Move to string pool if needed
248E: E3      	        ex      (SP),HL         ; Get first string
248F: CDBE24  	        call    GSTRHL          ; Move to string pool if needed
2492: E5      	        push    HL              ; Save first string
2493: 2AA681  	        ld      HL,(TMPSTR+2)   ; Temporary string address
2496: EB      	        ex      DE,HL           ; To DE
2497: CDA524  	        call    SSTSA           ; First string to string area
249A: CDA524  	        call    SSTSA           ; Second string to string area
249D: 21971E  	        ld      HL,EVAL2        ; Return to evaluation loop
24A0: E3      	        ex      (SP),HL         ; Save return,get code string
24A1: E5      	        push    HL              ; Save code string address
24A2: C35823  	        jp      TSTOPL          ; To temporary string to pool
              	
24A5: E1      	SSTSA:  pop     HL              ; Return address
24A6: E3      	        ex      (SP),HL         ; Get string block,save return
24A7: 7E      	        ld      A,(HL)          ; Get length of string
24A8: 23      	        inc     HL
24A9: 23      	        inc     HL
24AA: 4E      	        ld      C,(HL)          ; Get LSB of string address
24AB: 23      	        inc     HL
24AC: 46      	        ld      B,(HL)          ; Get MSB of string address
24AD: 6F      	        ld      L,A             ; Length to L
24AE: 2C      	TOSTRA: inc     L               ; inc - DECed after
24AF: 2D      	TSALP:  dec     L               ; Count bytes moved
24B0: C8      	        ret     Z               ; End of string - Return
24B1: 0A      	        ld      A,(BC)          ; Get source
24B2: 12      	        ld      (DE),A          ; Save destination
24B3: 03      	        inc     BC              ; Next source
24B4: 13      	        inc     DE              ; Next destination
24B5: C3AF24  	        jp      TSALP           ; Loop until string moved
              	
24B8: CD7D1E  	GETSTR: call    TSTSTR          ; Make sure it's a string
24BB: 2AC981  	GSTRCU: ld      HL,(FPREG)      ; Get current string
24BE: EB      	GSTRHL: ex      DE,HL           ; Save DE
24BF: CDD924  	GSTRDE: call    BAKTMP          ; Was it last tmp-str?
24C2: EB      	        ex      DE,HL           ; Restore DE
24C3: C0      	        ret     NZ              ; No - Return
24C4: D5      	        push    DE              ; Save string
24C5: 50      	        ld      D,B             ; String block address to DE
24C6: 59      	        ld      E,C
24C7: 1B      	        dec     DE              ; Point to length
24C8: 4E      	        ld      C,(HL)          ; Get string length
24C9: 2AA881  	        ld      HL,(STRBOT)     ; Current bottom of string area
24CC: CDDB17  	        call    CPDEHL          ; Last one in string area?
24CF: C2D724  	        jp      NZ,POPHL        ; No - Return
24D2: 47      	        ld      B,A             ; Clear B (A=0)
24D3: 09      	        add     HL,BC           ; Remove string from str' area
24D4: 22A881  	        ld      (STRBOT),HL     ; Save new bottom of str' area
24D7: E1      	POPHL:  pop     HL              ; Restore string
24D8: C9      	        ret
              	
24D9: 2A9681  	BAKTMP: ld      HL,(TMSTPT)     ; Get temporary string pool top
24DC: 2B      	        dec     HL              ; Back
24DD: 46      	        ld      B,(HL)          ; Get MSB of address
24DE: 2B      	        dec     HL              ; Back
24DF: 4E      	        ld      C,(HL)          ; Get LSB of address
24E0: 2B      	        dec     HL              ; Back
24E1: 2B      	        dec     HL              ; Back
24E2: CDDB17  	        call    CPDEHL          ; String last in string pool?
24E5: C0      	        ret     NZ              ; Yes - Leave it
24E6: 229681  	        ld      (TMSTPT),HL     ; Save new string pool top
24E9: C9      	        ret
              	
24EA: 016922  	LEN:    ld      BC,PASSA        ; To return integer A
24ED: C5      	        push    BC              ; Save address
24EE: CDB824  	GETLEN: call    GETSTR          ; Get string and its length
24F1: AF      	        xor     A
24F2: 57      	        ld      D,A             ; Clear D
24F3: 329281  	        ld      (TYPE),A        ; Set type to numeric
24F6: 7E      	        ld      A,(HL)          ; Get length of string
24F7: B7      	        or      A               ; Set status flags
24F8: C9      	        ret
              	
24F9: 016922  	ASC:    ld      BC,PASSA        ; To return integer A
24FC: C5      	        push    BC              ; Save address
24FD: CDEE24  	GTFLNM: call    GETLEN          ; Get length of string
2500: CACF1A  	        jp      Z,FCERR         ; Null string - Error
2503: 23      	        inc     HL
2504: 23      	        inc     HL
2505: 5E      	        ld      E,(HL)          ; Get LSB of address
2506: 23      	        inc     HL
2507: 56      	        ld      D,(HL)          ; Get MSB of address
2508: 1A      	        ld      A,(DE)          ; Get first byte of string
2509: C9      	        ret
              	
250A: 3E01    	CHR:    ld      A,$01           ; One character string
250C: CD2723  	        call    MKTMST          ; Make a temporary string
250F: CD0326  	        call    MAKINT          ; Make it integer A
2512: 2AA681  	        ld      HL,(TMPSTR+2)   ; Get address of string
2515: 73      	        ld      (HL),E          ; Save character
2516: C1      	TOPOOL: pop     BC              ; Clean up stack
2517: C35823  	        jp      TSTOPL          ; Temporary string to pool
              	
251A: CDB325  	LEFT:   call    LFRGNM          ; Get number and ending ")"
251D: AF      	        xor     A               ; Start at first byte in string
251E: E3      	RIGHT1: ex      (SP),HL         ; Save code string,Get string
251F: 4F      	        ld      C,A             ; Starting position in string
2520: E5      	MID1:   push    HL              ; Save string block address
2521: 7E      	        ld      A,(HL)          ; Get length of string
2522: B8      	        cp      B               ; Compare with number given
2523: DA2825  	        jp      C,ALLFOL        ; All following bytes required
2526: 78      	        ld      A,B             ; Get new length
2527: 11      	        defb    $11             ; Skip "ld C,0"
2528: 0E00    	ALLFOL: ld      C,$00           ; First byte of string
252A: C5      	        push    BC              ; Save position in string
252B: CD9123  	        call    TESTR           ; See if enough string space
252E: C1      	        pop     BC              ; Get position in string
252F: E1      	        pop     HL              ; Restore string block address
2530: E5      	        push    HL              ; And re-save it
2531: 23      	        inc     HL
2532: 23      	        inc     HL
2533: 46      	        ld      B,(HL)          ; Get LSB of address
2534: 23      	        inc     HL
2535: 66      	        ld      H,(HL)          ; Get MSB of address
2536: 68      	        ld      L,B             ; HL = address of string
2537: 0600    	        ld      B,$00           ; BC = starting address
2539: 09      	        add     HL,BC           ; Point to that byte
253A: 44      	        ld      B,H             ; BC = source string
253B: 4D      	        ld      C,L
253C: CD2A23  	        call    CRTMST          ; Create a string entry
253F: 6F      	        ld      L,A             ; Length of new string
2540: CDAE24  	        call    TOSTRA          ; Move string to string area
2543: D1      	        pop     DE              ; Clear stack
2544: CDBF24  	        call    GSTRDE          ; Move to string pool if needed
2547: C35823  	        jp      TSTOPL          ; Temporary string to pool
              	
254A: CDB325  	RIGHT:  call    LFRGNM          ; Get number and ending ")"
254D: D1      	        pop     DE              ; Get string length
254E: D5      	        push    DE              ; And re-save
254F: 1A      	        ld      A,(DE)          ; Get length
2550: 90      	        sub     B               ; Move back N bytes
2551: C31E25  	        jp      RIGHT1          ; Go and get sub-string
              	
2554: EB      	MID:    ex      DE,HL           ; Get code string address
2555: 7E      	        ld      A,(HL)          ; Get next byte ',' or ")"
2556: CDB825  	        call    MIDNUM          ; Get number supplied
2559: 04      	        inc     B               ; Is it character zero?
255A: 05      	        dec     B
255B: CACF1A  	        jp      Z,FCERR         ; Yes - Error
255E: C5      	        push    BC              ; Save starting position
255F: 1EFF    	        ld      E,$FF           ; All of string
2561: FE29    	        cp      ')'             ; Any length given?
2563: CA6D25  	        jp      Z,RSTSTR        ; No - Rest of string
2566: CDE117  	        call    CHKSYN          ; Make sure ',' follows
2569: 2C      	        defb    ','
256A: CD0026  	        call    GETINT          ; Get integer 0-255
256D: CDE117  	RSTSTR: call    CHKSYN          ; Make sure ")" follows
2570: 29      	        defb    ')'
2571: F1      	        pop     AF              ; Restore starting position
2572: E3      	        ex      (SP),HL         ; Get string,8ave code string
2573: 012025  	        ld      BC,MID1         ; Continuation of MID$ routine
2576: C5      	        push    BC              ; Save for return
2577: 3D      	        dec     A               ; Starting position-1
2578: BE      	        cp      (HL)            ; Compare with length
2579: 0600    	        ld      B,$00           ; Zero bytes length
257B: D0      	        ret     NC              ; Null string if start past end
257C: 4F      	        ld      C,A             ; Save starting position-1
257D: 7E      	        ld      A,(HL)          ; Get length of string
257E: 91      	        sub     C               ; Subtract start
257F: BB      	        cp      E               ; Enough string for it?
2580: 47      	        ld      B,A             ; Save maximum length available
2581: D8      	        ret     C               ; Truncate string if needed
2582: 43      	        ld      B,E             ; Set specified length
2583: C9      	        ret                     ; Go and create string
              	
2584: CDEE24  	VAL:    call    GETLEN          ; Get length of string
2587: CA2E29  	        jp      Z,RESZER        ; Result zero
258A: 5F      	        ld      E,A             ; Save length
258B: 23      	        inc     HL
258C: 23      	        inc     HL
258D: 7E      	        ld      A,(HL)          ; Get LSB of address
258E: 23      	        inc     HL
258F: 66      	        ld      H,(HL)          ; Get MSB of address
2590: 6F      	        ld      L,A             ; HL = String address
2591: E5      	        push    HL              ; Save string address
2592: 19      	        add     HL,DE
2593: 46      	        ld      B,(HL)          ; Get end of string+1 byte
2594: 72      	        ld      (HL),D          ; Zero it to terminate
2595: E3      	        ex      (SP),HL         ; Save string end,get start
2596: C5      	        push    BC              ; Save end+1 byte
2597: 7E      	        ld      A,(HL)          ; Get starting byte
2598: FE24    	        cp      '$'             ; Hex number indicated? [function added]
259A: C2A225  	        jp      NZ,VAL1
259D: CDED38  	        call    HEXTFP          ; Convert Hex to FPREG
25A0: 180D    	        jr      VAL3
25A2: FE25    	VAL1:   cp      '%'             ; Binary number indicated? [function added]
25A4: C2AC25  	        jp      NZ,VAL2
25A7: CD5D39  	        call    BINTFP          ; Convert Bin to FPREG
25AA: 1803    	        jr      VAL3
25AC: CD662C  	VAL2:   call    ASCTFP          ; Convert ASCII string to FP
25AF: C1      	VAL3:   pop     BC              ; Restore end+1 byte
25B0: E1      	        pop     HL              ; Restore end+1 address
25B1: 70      	        ld      (HL),B          ; Put back original byte
25B2: C9      	        ret
              	
25B3: EB      	LFRGNM: ex      DE,HL           ; Code string address to HL
25B4: CDE117  	        call    CHKSYN          ; Make sure ")" follows
25B7: 29      	        defb    ')'
25B8: C1      	MIDNUM: pop     BC              ; Get return address
25B9: D1      	        pop     DE              ; Get number supplied
25BA: C5      	        push    BC              ; Re-save return address
25BB: 43      	        ld      B,E             ; Number to B
25BC: C9      	        ret
              	
25BD: CD0326  	INP:    call    MAKINT          ; Make it integer A
25C0: 32A080  	        ld      (INPORT),A      ; Set input port
25C3: CD9F80  	        call    INPSUB          ; Get input from port
25C6: C36922  	        jp      PASSA           ; Return integer A
              	
25C9: CDED25  	POUT:   call    SETIO           ; Set up port number
25CC: C36780  	        jp      OUTSUB          ; Output data and return
              	
25CF: CDED25  	WAIT:   call    SETIO           ; Set up port number
25D2: F5      	        push    AF              ; Save AND mask
25D3: 1E00    	        ld      E,$00           ; Assume zero if none given
25D5: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
25D6: CD041A  	        call    GETCHR          ; Get next character
25D9: CAE325  	        jp      Z,NOXOR         ; No XOR byte given
25DC: CDE117  	        call    CHKSYN          ; Make sure ',' follows
25DF: 2C      	        defb    ','
25E0: CD0026  	        call    GETINT          ; Get integer 0-255 to XOR with
25E3: C1      	NOXOR:  pop     BC              ; Restore AND mask
25E4: CD9F80  	WAITLP: call    INPSUB          ; Get input
25E7: AB      	        xor     E               ; Flip selected bits
25E8: A0      	        and     B               ; Result non-zero?
25E9: CAE425  	        jp      Z,WAITLP        ; No = keep waiting
25EC: C9      	        ret
              	
25ED: CD0026  	SETIO:  call    GETINT          ; Get integer 0-255
25F0: 32A080  	        ld      (INPORT),A      ; Set input port
25F3: 326880  	        ld      (OTPORT),A      ; Set output port
25F6: CDE117  	        call    CHKSYN          ; Make sure ',' follows
25F9: 2C      	        defb    ','
25FA: C30026  	        jp      GETINT          ; Get integer 0-255 and return
              	
25FD: CD041A  	FNDNUM: call    GETCHR          ; Get next character
2600: CD791E  	GETINT: call    GETNUM          ; Get a number from 0 to 255
2603: CDB41A  	MAKINT: call    DEPINT          ; Make sure value 0 - 255
2606: 7A      	        ld      A,D             ; Get MSB of number
2607: B7      	        or      A               ; Zero?
2608: C2CF1A  	        jp      NZ,FCERR        ; No - Error
260B: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
260C: CD041A  	        call    GETCHR          ; Get next character
260F: 7B      	        ld      A,E             ; Get number to A
2610: C9      	        ret
              	
              	
              	; activate a Non-Maskable Interrupt hooked to VDP interrupt signal
2611: CD791E  	NMI:    call    GETNUM          ; Get memory address
2614: CDBA1A  	        call    DEINT           ; get integer -32768 to 32767
2617: 7B      	        ld      A,E             ; check if address is 0
2618: B2      	        or      D
2619: 2011    	        jr      NZ,NM1          ; no, so jump over
261B: F3      	        di                      ; disable INTs
261C: CD4826  	        call    NMIDINT         ; disable VDP INT
261F: E5      	        push    HL              ; store HL
2620: 21ED45  	        ld      HL,$45ED        ; these are the op-codes for "RETN"
2623: 226180  	        ld      (NMIUSR),HL     ; store RETN
2626: AF      	        xor     A
2627: 326380  	        ld      (NMIUSR+2),A    ; "NOP"
262A: 1811    	        jr      NMI2            ; execute the last part of code
262C: E5      	NM1:    push    HL              ; store current HL
262D: EB      	        ex      DE,HL           ; move address argument into HL
262E: F3      	        di                      ; disable INTs
262F: CD4826  	        call    NMIDINT         ; disable VDP INT, if enabled
2632: 3EC3    	        ld      A,$C3           ; "jp" instruction
2634: 326180  	        ld      (NMIUSR),A      ; store it
2637: 226280  	        ld      (NMIUSR+1),HL   ; store address
263A: CD4126  	        call    NMIEINT         ; re-enable VDP INT
263D: FB      	NMI2:   ei                      ; re-enable INTS
263E: 00      	        nop                     ; wait for INTs
263F: E1      	        pop    HL               ; retrieve HL
2640: C9      	        ret                     ; return to caller
              	; enable VDP INT
2641: CD5726  	NMIEINT:call    NMIVR1          ; load default VReg #1 setting
2644: F620    	        or      %00100000       ; enable VDP INT
2646: 1803    	        jr      NMIINT          ; rest of code is shared
              	; disable VDP INT
2648: CD5726  	NMIDINT:call    NMIVR1          ; load default VReg #1 setting
264B: D5      	NMIINT: push    DE              ; store DE
264C: 5F      	        ld      E,A             ; move value into E
264D: 3E01    	        ld      A,$01           ; VREG #1
264F: F3      	        di                      ; disable INTs
2650: CD1306  	        call    WRITE_VREG      ; disable VDP INT
2653: FB      	        ei                      ; re-enable INTs
2654: 00      	        nop                     ; wait for INTs being enabled
2655: D1      	        pop     DE              ; retrieve DE
2656: C9      	        ret                     ; return to caller
              	
              	; load VREG #1 setting for current screen mode and return it into A
2657: E5      	NMIVR1: push    HL              ; store HL
2658: D5      	        push    DE              ; store DE
2659: 3AD481  	        ld      A,(SCR_MODE)    ; check screen mode
265C: 87      	        add     A,A             ; multiply A by 8...
265D: 87      	        add     A,A             ; ...so that reg. A can points..
265E: 87      	        add     A,A             ; to the correct settings
265F: 3C      	        inc     A               ; need to change VREG 1
2660: 5F      	        ld      E,A             ; copy A into E
2661: 1600    	        ld      D,$00           ; reset D
2663: 21140A  	        ld      HL,VDPMODESET   ; pointer to register #1 setting...
2666: 19      	        add     HL,DE           ; ...for current screen mode
2667: 7E      	        ld      A,(HL)          ; load current setting
2668: D1      	        pop     DE              ; retrieve DE
2669: E1      	        pop     HL              ; retrieve HL
266A: C9      	        ret                     ; return to caller
              	
              	; execute a machine language routine, eventually passing a param into A
266B: CD791E  	SYS:    call    GETNUM          ; Get memory address
266E: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
2671: D5      	        push    DE              ; store address
2672: AF      	        xor     A               ; reset A
2673: 32E381  	        ld      (TMPBFR1),A     ; store into temp buffer
2676: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
2677: CD041A  	        call    GETCHR          ; Get next character
267A: 280A    	        jr      Z,NOSYSPR       ; jump if nothing follows
267C: CDE117  	        call    CHKSYN          ; Make sure ',' follows
267F: 2C      	        defb    ','
2680: CD0026  	        call    GETINT          ; get value if something follows
2683: 32E381  	        ld      (TMPBFR1),A     ; store into temp buffer
2686: 3AE381  	NOSYSPR:ld      A,(TMPBFR1)     ; recover A
2689: D1      	        pop     DE              ; recover user routine's address
268A: E5      	        push    HL              ; save current HL
268B: EB      	        ex      DE,HL           ; move address into HL
268C: 119126  	        ld      DE,SYSRET       ; recover point to return to after the user routine
268F: D5      	        push    DE              ; store into stack
2690: E9      	        jp      HL              ; execute user routine
2691: E1      	SYSRET: pop     HL              ; retrieve HL
2692: C9      	        ret                     ; return to caller
              	
              	
              	; read the contents of a byte from RAM
2693: CDBA1A  	PEEK:   call    DEINT           ; Get memory address
2696: 1A      	        ld      A,(DE)          ; Get byte in memory
2697: C36922  	        jp      PASSA           ; Return integer A
              	
              	; read the contents of a byte from VRAM
269A: CDBA1A  	VPEEK:  call    DEINT           ; Get VRAM address into DE
269D: EB      	        ex      DE,HL           ; Copy param into HL
269E: F3      	        di                      ; Disable interrupts
269F: CDE905  	        call    READ_VIDEO_LOC  ; Read data from VRAM at address HL
26A2: FB      	        ei                      ; Re-enable interrupts
26A3: EB      	        ex      DE,HL           ; Restore HL
26A4: C36922  	        jp      PASSA           ; Return value into A
              	
              	; recover params for POKE/VPOKE commands
              	; returns address into DE and byte to be written into A
26A7: CD791E  	PKEPRMS:call    GETNUM          ; Get memory address
26AA: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
26AD: ED53E381	        ld      (TMPBFR1),DE    ; Store DE into a temp. buffer
26B1: CDE117  	        call    CHKSYN          ; Make sure ',' follows
26B4: 2C      	        defb    ','
26B5: CD0026  	        call    GETINT          ; Get integer 0-255
26B8: ED5BE381	        ld      DE,(TMPBFR1)    ; Restore memory address
26BC: C9      	        ret                     ; Return to caller
              	
              	; write a byte into SRAM
26BD: CDA726  	POKE:   call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
26C0: 12      	        ld      (DE),A          ; Load it into memory
26C1: C9      	        ret
              	
              	; write a byte into VRAM
26C2: CDA726  	VPOKE:  call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
26C5: EB      	        ex      DE,HL           ; Copy address into HL
26C6: F3      	        di                      ; Disable interrupts
26C7: CDFE05  	        call    WRITE_VIDEO_LOC ; write data into VRAM at address HL
26CA: FB      	        ei                      ; Re-enable interrupts
26CB: EB      	        ex      DE,HL           ; Restore HL
26CC: C9      	        ret                     ; Return to caller
              	
              	; position the cursor at a specific X,Y location onto screen
26CD: CD0026  	LOCATE: call    GETINT          ; get the first param into A
26D0: E5      	        push    HL              ; store HL
26D1: 21D281  	        ld      HL,SCR_SIZE_W   ; load address of screen width
26D4: 5E      	        ld      E,(HL)          ; load screen width into E
26D5: E1      	        pop     HL              ; restore HL
26D6: BB      	        cp      E               ; compare witdh with param
26D7: D2CF1A  	        jp      NC,FCERR        ; value over the width of the screen, exit with Illegal F.C. error
26DA: 32E381  	        ld      (TMPBFR1),A     ; Store X into a temp. buffer
26DD: CDE117  	        call    CHKSYN          ; Make sure ',' follows
26E0: 2C      	        defb    ','
26E1: CD0026  	        call    GETINT          ; Get the second param into A
26E4: E5      	        push    HL              ; store HL
26E5: 21D381  	        ld      HL,SCR_SIZE_H   ; load address of screen width
26E8: 5E      	        ld      E,(HL)          ; load screen width into A
26E9: E1      	        pop     HL              ; restore HL
26EA: BB      	        cp      E               ; compare witdh with param
26EB: D2CF1A  	        jp      NC,FCERR        ; value over the height of the screen, exit with Illegal F.C. error
26EE: 32DB81  	        ld      (SCR_CUR_NY),A  ; store new Y
26F1: 3AE381  	        ld      A,(TMPBFR1)     ; recover the new X
26F4: 32DA81  	        ld      (SCR_CUR_NX),A  ; store new X
26F7: E5      	        push    HL              ; store HL
26F8: F3      	        di                      ; disable INTs
26F9: CD2F06  	        call    MOVCRS          ; move cursor to new location
26FC: FB      	        ei                      ; re-enable INTs
26FD: E1      	        pop     HL              ; restore HL
26FE: C9      	        ret                     ; return to caller
              	
              	; write a byte into one of the PSG registers
26FF: CD0026  	SREG:   call    GETINT          ; Get register number back into A
2702: FE10    	        cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
2704: D2CF1A  	        jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
2707: 32E381  	        ld      (TMPBFR1),A     ; Store A into a temp. buffer
270A: CDE117  	        call    CHKSYN          ; Make sure ',' follows
270D: 2C      	        defb    ','
270E: CD0026  	        call    GETINT          ; get second value (0-255), returned into A
2711: 5F      	        ld      E,A             ; store value into E
2712: 3AE381  	        ld      A,(TMPBFR1)     ; recover VDP register and store into D
2715: 0E40    	        ld      C,PSG_REG       ; output port to access PSG registers
2717: ED79    	        out     (C),A           ; send register # to PSG
2719: 0E41    	        ld      C,PSG_DAT       ; output port to send data to PSG
271B: ED59    	        out     (C),E           ; send byte to write into selected register
271D: C9      	        ret                     ; return to caller
              	
              	; VOLUME ch,vol
              	; set the volume for the audio channels
              	; "ch" is 1~3 for corresponding channel, or 0 for all; "vol" is 0~15 (0=OFF, 15=MAX)
271E: CD0026  	VOLUME: call    GETINT          ; get integer 0-255 (recover channel)
2721: FE04    	        cp      $04             ; check if it's in the range 0~3
2723: D2CF1A  	        jp      NC,FCERR        ; if not, exit with Illegal function call error
2726: 32E381  	        ld      (TMPBFR1),A     ; Store A into a temp. buffer
2729: CDE117  	        call    CHKSYN          ; Make sure ',' follows
272C: 2C      	        defb    ','
272D: CD0026  	        call    GETINT          ; get integer 0-255 (recover channel)
2730: FE10    	        cp      $10             ; check if it's in the range 0~15
2732: D2CF1A  	        jp      NC,FCERR        ; if not, exit with Illegal funcion call
2735: 57      	        ld      D,A             ; store volume into D
2736: 3AE381  	        ld      A,(TMPBFR1)     ; retrieve channel
2739: A7      	        and     A               ; is it 0? (0=every channel)
273A: 2010    	        jr      NZ,VOLCH        ; no, jump over
273C: 0603    	        ld      B,$03           ; yes, set every channel
273E: 1E08    	        ld      E,$08           ; register volume of first channel
2740: 0E40    	RPVOLCG:ld      C,PSG_REG       ; PSG register port
2742: ED59    	        out     (C),E           ; set register #
2744: 0E41    	        ld      C,PSG_DAT       ; PSG data port
2746: ED51    	        out     (C),D           ; send volume
2748: 1C      	        inc     E               ; next register
2749: 10F5    	        djnz    RPVOLCG         ; repeat for each channel
274B: C9      	        ret                     ; return to caller
274C: 0E40    	VOLCH:  ld      C,PSG_REG       ; PSG register port
274E: C607    	        add     $07             ; add 7 to A so that we have the correct register (1->8, 2->9, 3->10)
2750: ED79    	        out     (C),A           ; set register
2752: 0E41    	        ld      C,PSG_DAT       ; PSG data port
2754: ED51    	        out     (C),D           ; send volume level
2756: C9      	        ret                     ; return to caller
              	
              	; SOUND ch,tone,dur
              	; play a tone or noise of "tone" frequency from selected channel "ch" for duration "dur"
              	; "ch" is 1~6 (0=means sound OFF,1~3 for tone, 4~6 for noise) / "tone" is 1~4,095 (0=means no tone) /
              	; "dur" is 1~16383 h.o.s.,0.001~163s (0=means non-stop tone)
2757: CD0026  	SOUND:  call    GETINT          ; get integer 0-255 (recover channel)
275A: A7      	        and     A               ; is it zero?
275B: 2006    	        jr      NZ,CTSNDC       ; no, continue with checking of params
275D: E5      	        push    HL              ; store HL
275E: CD860B  	        call    CLRPSGREGS      ; yes, it's zero, so reset PSG registers to shut down every sound
2761: E1      	        pop     HL              ; retrieve HL
2762: C9      	        ret                     ; return to caller
2763: 32E381  	CTSNDC: ld      (TMPBFR1),A     ; no, continue by storing A into a temp. buffer
2766: FE04    	        cp      $04             ; is channel >3?
2768: D2E827  	        jp      NC,NOISUP       ; Yes - check to see if it's a noise channel
276B: CDE117  	        call    CHKSYN          ; No, continue checking by making sure ',' follows
276E: 2C      	        defb    ','
276F: CD791E  	        call    GETNUM          ; Get tone frequency
2772: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
2775: ED53E581	        ld      (TMPBFR2),DE    ; Store frequency
2779: CDE117  	        call    CHKSYN          ; Make sure ',' follows
277C: 2C      	        defb    ','
277D: CD791E  	        call    GETNUM          ; Get duration
2780: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
2783: ED53E781	        ld      (TMPBFR3),DE    ; Store duration
              	                                ; CHECK CHANNEL
2787: 3AE381  	        ld      A,(TMPBFR1)     ; recover channel
278A: FE01    	        cp      $01             ; is channel <1?
278C: DACF1A  	        jp      C,FCERR         ; Yes - Illegal function call error
              	                                ; CHECK FREQUENCY
278F: ED5BE581	        ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
2793: 7A      	        ld      A,D             ; move D into A and check if it is in the range 0~4095...
2794: FE10    	        cp      $10             ; ...so D must not be greater than $0F (15)
2796: D2CF1A  	        jp      NC,FCERR        ; if not in the range, exit with an Illegal function call error
              	                                ; CHECK DURATION
2799: ED5BE781	        ld      DE,(TMPBFR3)    ; restore duration from temp buffer
279D: 7A      	        ld      A,D             ; check if it is in the range 0~16383...
279E: E6C0    	        and     $C0             ; ...(15th & 14th bits must not be set)
27A0: C2CF1A  	        jp      NZ,FCERR        ; if not in the range, exit with an Illegal function call error
              	                                ;
              	                                ; SET TONE:
              	                                ; let's start by setting up the channel
27A3: 3AE381  	        ld      A,(TMPBFR1)     ; restore channel value
27A6: FE03    	        cp      $03             ; is it 3?
27A8: 2002    	        jr      NZ,SND1         ; no, jump over
27AA: 3E04    	        ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
27AC: 2F      	SND1:   cpl                     ; complement of A - this is used later to set on the channel into the mixer
27AD: CD2628  	        call    WRTSND          ; enable line into mixer of channel stored in A
              	                                ; SET FREQUENCY
              	                                ; we simply get frequency and subtract from 4096. The result
              	                                ; is put into register pair of the corresponding freq tone channel
27B0: ED5BE581	        ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
27B4: E5      	        push    HL              ; store HL (it will be used by the subroutine)
27B5: 210010  	        ld      HL,$1000        ; load 4096 into HL
27B8: A7      	        and     A               ; reset C flag
27B9: ED52    	        sbc     HL,DE           ; subtract freq from HL - now the frequency is inverted, so we will send the low as high and vice-versa
27BB: 3AE381  	        ld      A,(TMPBFR1)     ; restore channel value
27BE: 3D      	        dec     A               ; set A into the range 0~2
27BF: 87      	        add     A,A             ; double A to find the register pair that correspond to the channel (A->0,1 / B->2,3, C->4,5)
27C0: 0E40    	        ld      C,PSG_REG       ; PSG register port
27C2: ED79    	        out     (C),A           ; select first register of the pair
27C4: 0E41    	        ld      C,PSG_DAT       ; PSG data port
27C6: ED69    	        out     (C),L           ; send high byte
27C8: 0E40    	        ld      C,PSG_REG       ; PSG register support
27CA: 3C      	        inc     A               ; second register of the pair
27CB: ED79    	        out     (C),A           ; select register
27CD: 0E41    	        ld      C,PSG_DAT       ; PSG data port
27CF: ED61    	        out     (C),H           ; send low byte
27D1: ED5BE781	        ld      DE,(TMPBFR3)    ; recover duration
27D5: 3AE381  	        ld      A,(TMPBFR1)     ; recover channel value
27D8: 3D      	        dec     A               ; set channel into the range 0~2
27D9: 87      	        add     A,A             ; double A to find the correct offset
27DA: 211782  	        ld      HL,CHASNDDTN    ; set duration into...
27DD: 85      	        add     A,L             ; ...the proper...
27DE: 3001    	        jr      NC,SNDOVR       ; (is there a rest? no, jump over
27E0: 24      	        inc     H               ; yes, increment H)
27E1: 6F      	SNDOVR: ld      L,A             ; ...register pair...
27E2: 7323722B	        ld      (HL),DE         ; ...and store the value
27E6: E1      	        pop     HL              ; retrieve HL
27E7: C9      	        ret                     ; Return to caller
27E8: FE07    	NOISUP: cp      $07             ; is channel in range 4 to 6 (for a noise)?
27EA: D2CF1A  	        jp      NC,FCERR        ; no, so ILLEGAL FUNCTION CALL
27ED: CDE117  	        call    CHKSYN          ; yes, continue checking by making sure ',' follows
27F0: 2C      	        defb    ','
27F1: CD0026  	        call    GETINT          ; get integer 0-255 (recover frequency)
27F4: FE20    	        cp      $20             ; make sure it's in range 0~31
27F6: D2CF1A  	        jp      NC,FCERR        ; no, so Illegal function call
27F9: 5F      	        ld      E,A             ; store freq into E
27FA: 3AE381  	        ld      A,(TMPBFR1)     ; retrieve channel
27FD: D603    	        sub     $03             ; subtract 3 to get channel in range 1~3
27FF: FE03    	        cp      $03             ; is it 3?
2801: 2002    	        jr      NZ,NOS1         ; no, jump over
2803: 3E04    	        ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
2805: 87      	NOS1:   add     A,A
2806: 87      	        add     A,A
2807: 87      	        add     A,A             ; let's move A 3 bits to left
2808: 47      	        ld      B,A             ; store channel into B
2809: 7B      	        ld      A,E             ; check if
280A: A7      	        and     A               ; freq is 0 (means that noise reproduction must be halted)
280B: 200A    	        jr      NZ,NOS2         ; no, so jump over
280D: 3E07    	        ld      A,$07           ; mixer register
280F: CDD40B  	        call    SETSNDREG       ; set mixer register
2812: ED78    	        in      A,(C)           ; load current mixer value
2814: B0      	        or      B               ; disable noise
2815: 1818    	        jr      NOS3            ; continue over
2817: 78      	NOS2:   ld      A,B             ; recover channel
2818: 2F      	        cpl                     ; complement of A - this is used to set on the channel into the mixer
2819: CD2628  	        call    WRTSND          ; enable line into mixer of channel stored in A
281C: 3E06    	        ld      A,$06           ; write into noise register
281E: CDD40B  	        call    SETSNDREG       ; set register into PSG
2821: 7B      	        ld      A,E             ; load value for noise frequency
2822: CDD90B  	        call    WRTSNDREG       ; write data into register $06
2825: C9      	        ret
              	        ; enable line into mixer of channel stored in A
2826: 47      	WRTSND: ld      B,A             ; move channel into B
2827: 3E07    	        ld      A,$07           ; mixer register
2829: CDD40B  	        call    SETSNDREG       ; set mixer register
282C: ED78    	        in      A,(C)           ; load current value
282E: A0      	        and     B               ; set on the channel into the mixer (remember that 0=ON)
              	                                ; example: if channel is A (1), complement of 1 is 254 (11111110). So, 255 (in case
              	                                ; the register is still unchanged after reset) is 11111111 and
              	                                ; 11111111 AND 11111110 is equal to 11111110
              	                                ; 11111001 AND 11111110 is equal to 11111000 (in case channels B & C are ON)
282F: 47      	NOS3:   ld      B,A
2830: 3E07    	        ld      A,$07
2832: CDD40B  	        call    SETSNDREG
2835: 78      	        ld      A,B
2836: 00      	        nop
2837: CDD90B  	        call    WRTSNDREG       ; send new value for the mixer
283A: C9      	        ret                     ; return to caller
              	
              	; write a byte into one of the VDP registers
283B: CD0026  	VREG:   call    GETINT          ; Get register number back into A
283E: FE08    	        cp      $08             ; check if value is equal or greater than 8 (VDP registers are only 8, from 0 to 7)
2840: D2CF1A  	        jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
2843: 32E381  	        ld      (TMPBFR1),A     ; Store A into a temp. buffer
2846: CDE117  	        call    CHKSYN          ; Make sure ',' follows
2849: 2C      	        defb    ','
284A: CD0026  	        call    GETINT          ; get value (0-255)
284D: 5F      	        ld      E,A             ; store value into E
284E: 3AE381  	        ld      A,(TMPBFR1)     ; recover VDP register and store into A
2851: F3      	        di                      ; disable INTs
2852: CD1306  	        call    WRITE_VREG      ; write value into VDP register
2855: FB      	        ei                      ; re-enable INTs
2856: C9      	        ret                     ; return to caller
              	
              	; read the VDP status register and return it into A
2857: CDBA1A  	VSTAT:  call    DEINT           ; Get integer -32768 to 32767 (Note: we do NOT use it)
285A: F3      	        di                      ; disable INTs
285B: CD1E06  	        call    READ_VSTAT      ; read VDP register status
285E: FB      	        ei                      ; re-enable INTs
285F: C36922  	        jp      PASSA           ; Return integer A
              	
              	; read from PSG register and return it into A
2862: CDBA1A  	SSTAT:  call    DEINT           ; get integer -32768 to 32767
2865: 7B      	        ld      A,E             ; consider LSB
2866: FE10    	        cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
2868: D2CF1A  	        jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
286B: 0E40    	        ld      C,PSG_REG       ; output port to set PSG register
286D: ED79    	        out     (C),A           ; send register to read from
286F: ED78    	        in      A,(C)           ; read register's contents and store into A
2871: C36922  	        jp      PASSA           ; return A
              	
              	; read the temp key buffer and return the value of the current key being pressed
              	; can wait for the number of 100thds of second before to return
2874: CDE322  	INKEY:  call    IDTEST          ; Test for illegal direct
2877: CDBA1A  	        call    DEINT           ; get number param (100thds of second to wait)
287A: C5      	        push    BC              ; store BC
287B: 3ACE81  	        ld      A,(TMRCNT)      ; Load current value of system timer
287E: 47      	        ld      B,A             ; move it into B
287F: 3ACE81  	CMP_A:  ld      A,(TMRCNT)      ; make a little delay of 1/100 sec...
2882: B8      	        cp      B               ; ...to let the sniffer collect...
2883: 20FA    	        jr      NZ,CMP_A        ; ...at least 1 char before to continue
2885: 7A      	        ld      A,D             ; check the param
2886: AB      	        xor     E               ; if DE<>0 then...
2887: 2005    	        jr      NZ,INKEY2       ; ...jump over...
2889: 3A1F82  	        ld      A,(TMPKEYBFR)   ; ...else read the buffer and...
288C: 181C    	        jr      ENDINK          ; ...return it
288E: 7A      	INKEY2: ld      A,D             ; check if param>1023
288F: FE04    	        cp      $04             ; to do this we check if MSB>3
2891: D2CF1A  	        jp      NC,FCERR        ; if MSB >=4 then error
2894: 3ACE81  	        ld      A,(TMRCNT)      ; Load current value of system timer
2897: 47      	        ld      B,A             ; move it into B
2898: 3A1F82  	CHKINK: ld      A,(TMPKEYBFR)   ; load current value
289B: A7      	        and     A               ; is it 0?
289C: 200C    	        jr      NZ,ENDINK       ; no, so we can return it
289E: 3ACE81  	        ld      A,(TMRCNT)      ; load current value of system timer
28A1: B8      	        cp      B               ; is it the same value?
28A2: 28F4    	        jr      Z,CHKINK        ; yes, so read again
28A4: 47      	        ld      B,A             ; store new value
28A5: 1B      	        dec     DE              ; no, decrement timer
28A6: 7A      	        ld      A,D             ; check if zero reached
28A7: B3      	        or      E               ; by ORing D and E
28A8: 20EE    	        jr      NZ,CHKINK       ; if not 0, repeat
28AA: C1      	ENDINK: pop     BC              ; restore BC
28AB: F5      	        push    AF              ; store A
28AC: F3      	        di                      ; disable INTs
28AD: AF      	        xor     A               ; clear the...
28AE: 321F82  	        ld      (TMPKEYBFR),A   ; ...TMP KEY buffer for the next read
28B1: FB      	        ei                      ; re-enable INTs
28B2: F1      	        pop     AF              ; retrieve A
28B3: C36922  	ENDINK2:jp      PASSA           ; return A as ASCII value
              	
28B6: 21DD2D  	ROUND:  ld      HL,HALF         ; Add 0.5 to FPREG
28B9: CDAE2B  	ADDPHL: call    LOADFP          ; Load FP at (HL) to BCDE
28BC: C3C828  	        jp      FPADD           ; Add BCDE to FPREG
              	
28BF: CDAE2B  	SUBPHL: call    LOADFP          ; FPREG = -FPREG + number at HL
28C2: 21      	        defb    $21             ; Skip "pop BC" and "pop DE"
28C3: C1      	PSUB:   pop     BC              ; Get FP number from stack
28C4: D1      	        pop     DE
28C5: CD882B  	SUBCDE: call    INVSGN          ; Negate FPREG
28C8: 78      	FPADD:  ld      A,B             ; Get FP exponent
28C9: B7      	        or      A               ; Is number zero?
28CA: C8      	        ret     Z               ; Yes - Nothing to add
28CB: 3ACC81  	        ld      A,(FPEXP)       ; Get FPREG exponent
28CE: B7      	        or      A               ; Is this number zero?
28CF: CAA02B  	        jp      Z,FPBCDE        ; Yes - Move BCDE to FPREG
28D2: 90      	        sub     B               ; BCDE number larger?
28D3: D2E228  	        jp      NC,NOSWAP       ; No - Don't swap them
28D6: 2F      	        cpl                     ; Two's complement
28D7: 3C      	        inc     A               ;  FP exponent
28D8: EB      	        ex      DE,HL
28D9: CD902B  	        call    STAKFP          ; Put FPREG on stack
28DC: EB      	        ex      DE,HL
28DD: CDA02B  	        call    FPBCDE          ; Move BCDE to FPREG
28E0: C1      	        pop     BC              ; Restore number from stack
28E1: D1      	        pop     DE
28E2: FE19    	NOSWAP: cp      24+1            ; Second number insignificant?
28E4: D0      	        ret     NC              ; Yes - First number is result
28E5: F5      	        push    AF              ; Save number of bits to scale
28E6: CDC52B  	        call    SIGNS           ; Set MSBs & sign of result
28E9: 67      	        ld      H,A             ; Save sign of result
28EA: F1      	        pop     AF              ; Restore scaling factor
28EB: CD8D29  	        call    SCALE           ; Scale BCDE to same exponent
28EE: B4      	        or      H               ; Result to be positive?
28EF: 21C981  	        ld      HL,FPREG        ; Point to FPREG
28F2: F20829  	        jp      P,MINCDE        ; No - Subtract FPREG from CDE
28F5: CD6D29  	        call    PLUCDE          ; Add FPREG to CDE
28F8: D24E29  	        jp      NC,RONDUP       ; No overflow - Round it up
28FB: 23      	        inc     HL              ; Point to exponent
28FC: 34      	        inc     (HL)            ; Increment it
28FD: CA0C15  	        jp      Z,OVERR         ; Number overflowed - Error
2900: 2E01    	        ld      L,$01           ; 1 bit to shift right
2902: CDA329  	        call    SHRT1           ; Shift result right
2905: C34E29  	        jp      RONDUP          ; Round it up
              	
2908: AF      	MINCDE: xor     A               ; Clear A and carry
2909: 90      	        sub     B               ; Negate exponent
290A: 47      	        ld      B,A             ; Re-save exponent
290B: 7E      	        ld      A,(HL)          ; Get LSB of FPREG
290C: 9B      	        sbc     A, E            ; Subtract LSB of BCDE
290D: 5F      	        ld      E,A             ; Save LSB of BCDE
290E: 23      	        inc     HL
290F: 7E      	        ld      A,(HL)          ; Get NMSB of FPREG
2910: 9A      	        sbc     A,D             ; Subtract NMSB of BCDE
2911: 57      	        ld      D,A             ; Save NMSB of BCDE
2912: 23      	        inc     HL
2913: 7E      	        ld      A,(HL)          ; Get MSB of FPREG
2914: 99      	        sbc     A,C             ; Subtract MSB of BCDE
2915: 4F      	        ld      C,A             ; Save MSB of BCDE
2916: DC7929  	CONPOS: call    C,COMPL         ; Overflow - Make it positive
              	
2919: 68      	BNORM:  ld      L,B             ; L = Exponent
291A: 63      	        ld      H,E             ; H = LSB
291B: AF      	        xor     A
291C: 47      	BNRMLP: ld      B,A             ; Save bit count
291D: 79      	        ld      A,C             ; Get MSB
291E: B7      	        or      A               ; Is it zero?
291F: C23B29  	        jp      NZ,PNORM        ; No - Do it bit at a time
2922: 4A      	        ld      C,D             ; MSB = NMSB
2923: 54      	        ld      D,H             ; NMSB= LSB
2924: 65      	        ld      H,L             ; LSB = VLSB
2925: 6F      	        ld      L,A             ; VLSB= 0
2926: 78      	        ld      A,B             ; Get exponent
2927: D608    	        sub     $08             ; Count 8 bits
2929: FEE0    	        cp      -24-8           ; Was number zero?
292B: C21C29  	        jp      NZ,BNRMLP       ; No - Keep normalising
292E: AF      	RESZER: xor     A               ; Result is zero
292F: 32CC81  	SAVEXP: ld      (FPEXP),A       ; Save result as zero
2932: C9      	        ret
              	
2933: 05      	NORMAL: dec     B               ; Count bits
2934: 29      	        add     HL,HL           ; Shift HL left
2935: 7A      	        ld      A,D             ; Get NMSB
2936: 17      	        rla                     ; Shift left with last bit
2937: 57      	        ld      D,A             ; Save NMSB
2938: 79      	        ld      A,C             ; Get MSB
2939: 8F      	        adc     A,A             ; Shift left with last bit
293A: 4F      	        ld      C,A             ; Save MSB
293B: F23329  	PNORM:  jp      P,NORMAL        ; Not done - Keep going
293E: 78      	        ld      A,B             ; Number of bits shifted
293F: 5C      	        ld      E,H             ; Save HL in EB
2940: 45      	        ld      B,L
2941: B7      	        or      A               ; Any shifting done?
2942: CA4E29  	        jp      Z,RONDUP        ; No - Round it up
2945: 21CC81  	        ld      HL,FPEXP        ; Point to exponent
2948: 86      	        add     A,(HL)          ; Add shifted bits
2949: 77      	        ld      (HL),A          ; Re-save exponent
294A: D22E29  	        jp      NC,RESZER       ; Underflow - Result is zero
294D: C8      	        ret     Z               ; Result is zero
294E: 78      	RONDUP: ld      A,B             ; Get VLSB of number
294F: 21CC81  	RONDB:  ld      HL,FPEXP        ; Point to exponent
2952: B7      	        or      A               ; Any rounding?
2953: FC6029  	        call    M,FPROND        ; Yes - Round number up
2956: 46      	        ld      B,(HL)          ; B = Exponent
2957: 23      	        inc     HL
2958: 7E      	        ld      A,(HL)          ; Get sign of result
2959: E680    	        and     %10000000       ; Only bit 7 needed
295B: A9      	        xor     C               ; Set correct sign
295C: 4F      	        ld      C,A             ; Save correct sign in number
295D: C3A02B  	        jp      FPBCDE          ; Move BCDE to FPREG
              	
2960: 1C      	FPROND: inc     E               ; Round LSB
2961: C0      	        ret     NZ              ; Return if ok
2962: 14      	        inc     D               ; Round NMSB
2963: C0      	        ret     NZ              ; Return if ok
2964: 0C      	        inc     C               ; Round MSB
2965: C0      	        ret     NZ              ; Return if ok
2966: 0E80    	        ld      C,$80           ; Set normal value
2968: 34      	        inc     (HL)            ; Increment exponent
2969: C0      	        ret     NZ              ; Return if ok
296A: C30C15  	        jp      OVERR           ; Overflow error
              	
296D: 7E      	PLUCDE: ld      A,(HL)          ; Get LSB of FPREG
296E: 83      	        add     A,E             ; Add LSB of BCDE
296F: 5F      	        ld      E,A             ; Save LSB of BCDE
2970: 23      	        inc     HL
2971: 7E      	        ld      A,(HL)          ; Get NMSB of FPREG
2972: 8A      	        adc     A,D             ; Add NMSB of BCDE
2973: 57      	        ld      D,A             ; Save NMSB of BCDE
2974: 23      	        inc     HL
2975: 7E      	        ld      A,(HL)          ; Get MSB of FPREG
2976: 89      	        adc     A,C             ; Add MSB of BCDE
2977: 4F      	        ld      C,A             ; Save MSB of BCDE
2978: C9      	        ret
              	
2979: 21CD81  	COMPL:  ld      HL,SGNRES       ; Sign of result
297C: 7E      	        ld      A,(HL)          ; Get sign of result
297D: 2F      	        cpl                     ; Negate it
297E: 77      	        ld      (HL),A          ; Put it back
297F: AF      	        xor     A
2980: 6F      	        ld      L,A             ; Set L to zero
2981: 90      	        sub     B               ; Negate exponent,set carry
2982: 47      	        ld      B,A             ; Re-save exponent
2983: 7D      	        ld      A,L             ; Load zero
2984: 9B      	        sbc     A,E             ; Negate LSB
2985: 5F      	        ld      E,A             ; Re-save LSB
2986: 7D      	        ld      A,L             ; Load zero
2987: 9A      	        sbc     A,D             ; Negate NMSB
2988: 57      	        ld      D,A             ; Re-save NMSB
2989: 7D      	        ld      A,L             ; Load zero
298A: 99      	        sbc     A,C             ; Negate MSB
298B: 4F      	        ld      C,A             ; Re-save MSB
298C: C9      	        ret
              	
298D: 0600    	SCALE:  ld      B,$00           ; Clear underflow
298F: D608    	SCALLP: sub     $08             ; 8 bits (a whole byte)?
2991: DA9C29  	        jp      C,SHRITE        ; No - Shift right A bits
2994: 43      	        ld      B,E             ; <- Shift
2995: 5A      	        ld      E,D             ; <- right
2996: 51      	        ld      D,C             ; <- eight
2997: 0E00    	        ld      C,$00           ; <- bits
2999: C38F29  	        jp      SCALLP          ; More bits to shift
              	
299C: C609    	SHRITE: add     A,8+1           ; Adjust count
299E: 6F      	        ld      L,A             ; Save bits to shift
299F: AF      	SHRLP:  xor     A               ; Flag for all done
29A0: 2D      	        dec     L               ; All shifting done?
29A1: C8      	        ret     Z               ; Yes - Return
29A2: 79      	        ld      A,C             ; Get MSB
29A3: 1F      	SHRT1:  rra                     ; Shift it right
29A4: 4F      	        ld      C,A             ; Re-save
29A5: 7A      	        ld      A,D             ; Get NMSB
29A6: 1F      	        rra                     ; Shift right with last bit
29A7: 57      	        ld      D,A             ; Re-save it
29A8: 7B      	        ld      A,E             ; Get LSB
29A9: 1F      	        rra                     ; Shift right with last bit
29AA: 5F      	        ld      E,A             ; Re-save it
29AB: 78      	        ld      A,B             ; Get underflow
29AC: 1F      	        rra                     ; Shift right with last bit
29AD: 47      	        ld      B,A             ; Re-save underflow
29AE: C39F29  	        jp      SHRLP           ; More bits to do
              	
29B1: 00000081	UNITY:  defb    $00,$00,$00,$81 ; 1.00000
              	
29B5: 03      	LOGTAB: defb    $03             ; Table used by LOG
29B6: AA561980	        defb    $AA,$56,$19,$80 ; 0.59898
29BA: F1227680	        defb    $F1,$22,$76,$80 ; 0.96147
29BE: 45AA3882	        defb    $45,$AA,$38,$82 ; 2.88539
              	
29C2: CD5F2B  	LOG:    call    TSTSGN          ; Test sign of value
29C5: B7      	        or      A
29C6: EACF1A  	        jp      PE,FCERR        ; ?FC Error if <= zero
29C9: 21CC81  	        ld      HL,FPEXP        ; Point to exponent
29CC: 7E      	        ld      A,(HL)          ; Get exponent
29CD: 013580  	        ld      BC,$8035        ; BCDE = SQR(1/2)
29D0: 11F304  	        ld      DE,$04F3
29D3: 90      	        sub     B               ; Scale value to be < 1
29D4: F5      	        push    AF              ; Save scale factor
29D5: 70      	        ld      (HL),B          ; Save new exponent
29D6: D5      	        push    DE              ; Save SQR(1/2)
29D7: C5      	        push    BC
29D8: CDC828  	        call    FPADD           ; Add SQR(1/2) to value
29DB: C1      	        pop     BC              ; Restore SQR(1/2)
29DC: D1      	        pop     DE
29DD: 04      	        inc     B               ; Make it SQR(2)
29DE: CDB52A  	        call    DVBCDE          ; Divide by SQR(2)
29E1: 21B129  	        ld      HL,UNITY        ; Point to 1.
29E4: CDBF28  	        call    SUBPHL          ; Subtract FPREG from 1
29E7: 21B529  	        ld      HL,LOGTAB       ; Coefficient table
29EA: CDA72E  	        call    SUMSER          ; Evaluate sum of series
29ED: 018080  	        ld      BC,$8080        ; BCDE = -0.5
29F0: 110000  	        ld      DE,$0000
29F3: CDC828  	        call    FPADD           ; Subtract 0.5 from FPREG
29F6: F1      	        pop     AF              ; Restore scale factor
29F7: CDDA2C  	        call    RSCALE          ; Re-scale number
29FA: 013180  	MULLN2: ld      BC,$8031        ; BCDE = Ln(2)
29FD: 111872  	        ld      DE,$7218
2A00: 21      	        defb    $21             ; Skip "pop BC" and "pop DE"
              	
2A01: C1      	MULT:   pop     BC              ; Get number from stack
2A02: D1      	        pop     DE
2A03: CD5F2B  	FPMULT: call    TSTSGN          ; Test sign of FPREG
2A06: C8      	        ret     Z               ; Return zero if zero
2A07: 2E00    	        ld      L,$00           ; Flag add exponents
2A09: CD1D2B  	        call    ADDEXP          ; Add exponents
2A0C: 79      	        ld      A,C             ; Get MSB of multiplier
2A0D: 323182  	        ld      (MULVAL),A      ; Save MSB of multiplier
2A10: EB      	        ex      DE,HL
2A11: 223282  	        ld      (MULVAL+1),HL   ; Save rest of multiplier
2A14: 010000  	        ld      BC,$0000        ; Partial product (BCDE) = zero
2A17: 50      	        ld      D,B
2A18: 58      	        ld      E,B
2A19: 211929  	        ld      HL,BNORM        ; Address of normalise
2A1C: E5      	        push    HL              ; Save for return
2A1D: 21252A  	        ld      HL,MULT8        ; Address of 8 bit multiply
2A20: E5      	        push    HL              ; Save for NMSB,MSB
2A21: E5      	        push    HL              ;
2A22: 21C981  	        ld      HL,FPREG        ; Point to number
2A25: 7E      	MULT8:  ld      A,(HL)          ; Get LSB of number
2A26: 23      	        inc     HL              ; Point to NMSB
2A27: B7      	        or      A               ; Test LSB
2A28: CA512A  	        jp      Z,BYTSFT        ; Zero - shift to next byte
2A2B: E5      	        push    HL              ; Save address of number
2A2C: 2E08    	        ld      L,$08           ; 8 bits to multiply by
2A2E: 1F      	MUL8LP: rra                     ; Shift LSB right
2A2F: 67      	        ld      H,A             ; Save LSB
2A30: 79      	        ld      A,C             ; Get MSB
2A31: D23F2A  	        jp      NC,NOMADD       ; Bit was zero - Don't add
2A34: E5      	        push    HL              ; Save LSB and count
2A35: 2A3282  	        ld      HL,(MULVAL+1)   ; Get LSB and NMSB
2A38: 19      	        add     HL,DE           ; Add NMSB and LSB
2A39: EB      	        ex      DE,HL           ; Leave sum in DE
2A3A: E1      	        pop     HL              ; Restore MSB and count
2A3B: 3A3182  	        ld      A,(MULVAL)      ; Get MSB of multiplier
2A3E: 89      	        adc     A,C             ; Add MSB
2A3F: 1F      	NOMADD: rra                     ; Shift MSB right
2A40: 4F      	        ld      C,A             ; Re-save MSB
2A41: 7A      	        ld      A,D             ; Get NMSB
2A42: 1F      	        rra                     ; Shift NMSB right
2A43: 57      	        ld      D,A             ; Re-save NMSB
2A44: 7B      	        ld      A,E             ; Get LSB
2A45: 1F      	        rra                     ; Shift LSB right
2A46: 5F      	        ld      E,A             ; Re-save LSB
2A47: 78      	        ld      A,B             ; Get VLSB
2A48: 1F      	        rra                     ; Shift VLSB right
2A49: 47      	        ld      B,A             ; Re-save VLSB
2A4A: 2D      	        dec     L               ; Count bits multiplied
2A4B: 7C      	        ld      A,H             ; Get LSB of multiplier
2A4C: C22E2A  	        jp      NZ,MUL8LP       ; More - Do it
2A4F: E1      	POPHRT: pop     HL              ; Restore address of number
2A50: C9      	        ret
              	
2A51: 43      	BYTSFT: ld      B,E             ; Shift partial product left
2A52: 5A      	        ld      E,D
2A53: 51      	        ld      D,C
2A54: 4F      	        ld      C,A
2A55: C9      	        ret
              	
              	
              	; WORKING ––
2A56: C1      	DINT:   pop     BC              ; Get number from stack
2A57: D1      	        pop     DE
2A58: CDB52A  	        call    DVBCDE          ; get BCDE/FPREG and store result into FPREG
2A5B: C3322C  	        jp      INT             ; return INT(FPREG)
              	
              	
              	; A MODULO B - return remainder of the integer division A/B where:
              	; A is in stack; B is in FPREG
              	; math is:
              	; A=INT(A); B=INT(B); R=A-(B*INT(A/B))
2A5E: CD322C  	MOD:    call    INT             ; B=INT(B)
2A61: CDAB2B  	        call    BCDEFP          ; copy B (from FPREG) into BCDE
2A64: ED53E781	        ld      (TMPBFR3),DE    ; store B into...
2A68: ED43E981	        ld      (TMPBFR4),BC    ; ...a temp buffer
2A6C: C1      	        pop     BC              ; recover A...
2A6D: D1      	        pop     DE              ; ...from stack
2A6E: CDA02B  	        call    FPBCDE          ; store A into FPREG
2A71: CD322C  	        call    INT             ; get integer part: A=INT(A)
2A74: CDAB2B  	        call    BCDEFP          ; copy A (from FPREG) into BCDE
2A77: ED53E381	        ld      (TMPBFR1),DE    ; store A into...
2A7B: ED43E581	        ld      (TMPBFR2),BC    ; ...a temp buffer
              	                                ; begin calculation
2A7F: 2AE781  	        ld      HL,(TMPBFR3)    ; move B...
2A82: 22C981  	        ld      (FPREG),HL      ; ...from...
2A85: 2AE981  	        ld      HL,(TMPBFR4)    ; ...temp buffer...
2A88: 22CB81  	        ld      (FPREG+2),HL    ; ...into FPREG
2A8B: CDB52A  	        call    DVBCDE          ; compute A/B and store into FPREG
2A8E: CD322C  	        call    INT             ; get integer part of result: now FPREG = INT(A/B)
2A91: ED5BE781	        ld      DE,(TMPBFR3)    ; load B...
2A95: ED4BE981	        ld      BC,(TMPBFR4)    ; ...into BCDE
2A99: CD032A  	        call    FPMULT          ; get B*INT(A/B) and store into FPREG
2A9C: ED5BE381	        ld      DE,(TMPBFR1)    ; retrieve A from...
2AA0: ED4BE581	        ld      BC,(TMPBFR2)    ; ...temp buffer
2AA4: C3C528  	        jp      SUBCDE          ; return result of A-(B*INT(A/B))
              	
              	
2AA7: CD902B  	DIV10:  call    STAKFP          ; Save FPREG on stack
2AAA: 012084  	        ld      BC,$8420        ; BCDE = 10.
2AAD: 110000  	        ld      DE,$0000
2AB0: CDA02B  	        call    FPBCDE          ; Move 10 to FPREG
              	
2AB3: C1      	DIV:    pop     BC              ; Get number from stack
2AB4: D1      	        pop     DE
2AB5: CD5F2B  	DVBCDE: call    TSTSGN          ; Test sign of FPREG
2AB8: CA0015  	        jp      Z,DZERR         ; Error if division by zero
2ABB: 2EFF    	        ld      L,-1            ; Flag subtract exponents
2ABD: CD1D2B  	        call    ADDEXP          ; Subtract exponents
2AC0: 34      	        inc     (HL)            ; Add 2 to exponent to adjust
2AC1: 34      	        inc     (HL)
2AC2: 2B      	        dec     HL              ; Point to MSB
2AC3: 7E      	        ld      A,(HL)          ; Get MSB of dividend
2AC4: 327380  	        ld      (DIV3),A        ; Save for subtraction
2AC7: 2B      	        dec     HL
2AC8: 7E      	        ld      A,(HL)          ; Get NMSB of dividend
2AC9: 326F80  	        ld      (DIV2),A        ; Save for subtraction
2ACC: 2B      	        dec     HL
2ACD: 7E      	        ld      A,(HL)          ; Get MSB of dividend
2ACE: 326B80  	        ld      (DIV1),A        ; Save for subtraction
2AD1: 41      	        ld      B,C             ; Get MSB
2AD2: EB      	        ex      DE,HL           ; NMSB,LSB to HL
2AD3: AF      	        xor     A
2AD4: 4F      	        ld      C,A             ; Clear MSB of quotient
2AD5: 57      	        ld      D,A             ; Clear NMSB of quotient
2AD6: 5F      	        ld      E,A             ; Clear LSB of quotient
2AD7: 327680  	        ld      (DIV4),A        ; Clear overflow count
2ADA: E5      	DIVLP:  push    HL              ; Save divisor
2ADB: C5      	        push    BC
2ADC: 7D      	        ld      A,L             ; Get LSB of number
2ADD: CD6A80  	        call    DIVSUP          ; Subt' divisor from dividend
2AE0: DE00    	        sbc     A,$00           ; Count for overflows
2AE2: 3F      	        ccf
2AE3: D2ED2A  	        jp      NC,RESDIV       ; Restore divisor if borrow
2AE6: 327680  	        ld      (DIV4),A        ; Re-save overflow count
2AE9: F1      	        pop     AF              ; Scrap divisor
2AEA: F1      	        pop     AF
2AEB: 37      	        scf                     ; Set carry to
2AEC: D2      	        defb    $D2             ; Skip "pop BC" and "pop HL"
              	
2AED: C1      	RESDIV: pop     BC              ; Restore divisor
2AEE: E1      	        pop     HL
2AEF: 79      	        ld      A,C             ; Get MSB of quotient
2AF0: 3C      	        inc     A
2AF1: 3D      	        dec     A
2AF2: 1F      	        rra                     ; Bit 0 to bit 7
2AF3: FA4F29  	        jp      M,RONDB         ; Done - Normalise result
2AF6: 17      	        rla                     ; Restore carry
2AF7: 7B      	        ld      A,E             ; Get LSB of quotient
2AF8: 17      	        rla                     ; Double it
2AF9: 5F      	        ld      E,A             ; Put it back
2AFA: 7A      	        ld      A,D             ; Get NMSB of quotient
2AFB: 17      	        rla                     ; Double it
2AFC: 57      	        ld      D,A             ; Put it back
2AFD: 79      	        ld      A,C             ; Get MSB of quotient
2AFE: 17      	        rla                     ; Double it
2AFF: 4F      	        ld      C,A             ; Put it back
2B00: 29      	        add     HL,HL           ; Double NMSB,LSB of divisor
2B01: 78      	        ld      A,B             ; Get MSB of divisor
2B02: 17      	        rla                     ; Double it
2B03: 47      	        ld      B,A             ; Put it back
2B04: 3A7680  	        ld      A,(DIV4)        ; Get VLSB of quotient
2B07: 17      	        rla                     ; Double it
2B08: 327680  	        ld      (DIV4),A        ; Put it back
2B0B: 79      	        ld      A,C             ; Get MSB of quotient
2B0C: B2      	        or      D               ; Merge NMSB
2B0D: B3      	        or      E               ; Merge LSB
2B0E: C2DA2A  	        jp      NZ,DIVLP        ; Not done - Keep dividing
2B11: E5      	        push    HL              ; Save divisor
2B12: 21CC81  	        ld      HL,FPEXP        ; Point to exponent
2B15: 35      	        dec     (HL)            ; Divide by 2
2B16: E1      	        pop     HL              ; Restore divisor
2B17: C2DA2A  	        jp      NZ,DIVLP        ; Ok - Keep going
2B1A: C30C15  	        jp      OVERR           ; Overflow error
              	
              	
2B1D: 78      	ADDEXP: ld      A,B             ; Get exponent of dividend
2B1E: B7      	        or      A               ; Test it
2B1F: CA412B  	        jp      Z,OVTST3        ; Zero - Result zero
2B22: 7D      	        ld      A,L             ; Get add/subtract flag
2B23: 21CC81  	        ld      HL,FPEXP        ; Point to exponent
2B26: AE      	        xor     (HL)            ; Add or subtract it
2B27: 80      	        add     A,B             ; Add the other exponent
2B28: 47      	        ld      B,A             ; Save new exponent
2B29: 1F      	        rra                     ; Test exponent for overflow
2B2A: A8      	        xor     B
2B2B: 78      	        ld      A,B             ; Get exponent
2B2C: F2402B  	        jp      P,OVTST2        ; Positive - Test for overflow
2B2F: C680    	        add     A,$80           ; Add excess 128
2B31: 77      	        ld      (HL),A          ; Save new exponent
2B32: CA4F2A  	        jp      Z,POPHRT        ; Zero - Result zero
2B35: CDC52B  	        call    SIGNS           ; Set MSBs and sign of result
2B38: 77      	        ld      (HL),A          ; Save new exponent
2B39: 2B      	        dec     HL              ; Point to MSB
2B3A: C9      	        ret
              	
2B3B: CD5F2B  	OVTST1: call    TSTSGN          ; Test sign of FPREG
2B3E: 2F      	        cpl                     ; Invert sign
2B3F: E1      	        pop     HL              ; Clean up stack
2B40: B7      	OVTST2: or      A               ; Test if new exponent zero
2B41: E1      	OVTST3: pop     HL              ; Clear off return address
2B42: F22E29  	        jp      P,RESZER        ; Result zero
2B45: C30C15  	        jp      OVERR           ; Overflow error
              	
2B48: CDAB2B  	MLSP10: call    BCDEFP          ; Move FPREG to BCDE
2B4B: 78      	        ld      A,B             ; Get exponent
2B4C: B7      	        or      A               ; Is it zero?
2B4D: C8      	        ret     Z               ; Yes - Result is zero
2B4E: C602    	        add     A,$02           ; Multiply by 4
2B50: DA0C15  	        jp      C,OVERR         ; Overflow - ?OV Error
2B53: 47      	        ld      B,A             ; Re-save exponent
2B54: CDC828  	        call    FPADD           ; Add BCDE to FPREG (Times 5)
2B57: 21CC81  	        ld      HL,FPEXP        ; Point to exponent
2B5A: 34      	        inc     (HL)            ; Double number (Times 10)
2B5B: C0      	        ret     NZ              ; Ok - Return
2B5C: C30C15  	        jp      OVERR           ; Overflow error
              	
2B5F: 3ACC81  	TSTSGN: ld      A,(FPEXP)       ; Get sign of FPREG
2B62: B7      	        or      A
2B63: C8      	        ret     Z               ; RETurn if number is zero
2B64: 3ACB81  	        ld      A,(FPREG+2)     ; Get MSB of FPREG
2B67: FE      	        defb    0FEH            ; Test sign
2B68: 2F      	RETREL: cpl                     ; Invert sign
2B69: 17      	        rla                     ; Sign bit to carry
2B6A: 9F      	FLGDIF: sbc     A,A             ; Carry to all bits of A
2B6B: C0      	        ret     NZ              ; Return -1 if negative
2B6C: 3C      	        inc     A               ; Bump to +1
2B6D: C9      	        ret                     ; Positive - Return +1
              	
2B6E: CD5F2B  	SGN:    call    TSTSGN          ; Test sign of FPREG
2B71: 0688    	FLGREL: ld      B,$80+8         ; 8 bit integer in exponent
2B73: 110000  	        ld      DE,0            ; Zero NMSB and LSB
2B76: 21CC81  	RETINT: ld      HL,FPEXP        ; Point to exponent
2B79: 4F      	        ld      C,A             ; CDE = MSB,NMSB and LSB
2B7A: 70      	        ld      (HL),B          ; Save exponent
2B7B: 0600    	        ld      B,0             ; CDE = integer to normalise
2B7D: 23      	        inc     HL              ; Point to sign of result
2B7E: 3680    	        ld      (HL),$80        ; Set sign of result
2B80: 17      	        rla                     ; Carry = sign of integer
2B81: C31629  	        jp      CONPOS          ; Set sign of result
              	
2B84: CD5F2B  	ABS:    call    TSTSGN          ; Test sign of FPREG
2B87: F0      	        ret     P               ; Return if positive
2B88: 21CB81  	INVSGN: ld      HL,FPREG+2      ; Point to MSB
2B8B: 7E      	        ld      A,(HL)          ; Get sign of mantissa
2B8C: EE80    	        xor     $80             ; Invert sign of mantissa
2B8E: 77      	        ld      (HL),A          ; Re-save sign of mantissa
2B8F: C9      	        ret
              	
2B90: EB      	STAKFP: ex      DE,HL           ; Save code string address
2B91: 2AC981  	        ld      HL,(FPREG)      ; LSB,NLSB of FPREG
2B94: E3      	        ex      (SP),HL         ; Stack them,get return
2B95: E5      	        push    HL              ; Re-save return
2B96: 2ACB81  	        ld      HL,(FPREG+2)    ; MSB and exponent of FPREG
2B99: E3      	        ex      (SP),HL         ; Stack them,get return
2B9A: E5      	        push    HL              ; Re-save return
2B9B: EB      	        ex      DE,HL           ; Restore code string address
2B9C: C9      	        ret
              	
              	; store F.P. number from BCDE into FPREG
2B9D: CDAE2B  	PHLTFP: call    LOADFP          ; Number at HL to BCDE
2BA0: EB      	FPBCDE: ex      DE,HL           ; Save code string address
2BA1: 22C981  	        ld      (FPREG),HL      ; Save LSB,NLSB of number
2BA4: 60      	        ld      H,B             ; Exponent of number
2BA5: 69      	        ld      L,C             ; MSB of number
2BA6: 22CB81  	        ld      (FPREG+2),HL    ; Save MSB and exponent
2BA9: EB      	        ex      DE,HL           ; Restore code string address
2BAA: C9      	        ret
              	
              	; load F.P. number from FPREG into BCDE
2BAB: 21C981  	BCDEFP: ld      HL,FPREG        ; Point to FPREG
2BAE: 5E      	LOADFP: ld      E,(HL)          ; Get LSB of number
2BAF: 23      	        inc     HL
2BB0: 56      	        ld      D,(HL)          ; Get NMSB of number
2BB1: 23      	        inc     HL
2BB2: 4E      	        ld      C,(HL)          ; Get MSB of number
2BB3: 23      	        inc     HL
2BB4: 46      	        ld      B,(HL)          ; Get exponent of number
2BB5: 23      	INCHL:  inc     HL              ; Used for conditional "inc HL"
2BB6: C9      	        ret
              	
2BB7: 11C981  	FPTHL:  ld      DE,FPREG        ; Point to FPREG
2BBA: 0604    	DETHL4: ld      B,$04           ; 4 bytes to move
2BBC: 1A      	DETHLB: ld      A,(DE)          ; Get source
2BBD: 77      	        ld      (HL),A          ; Save destination
2BBE: 13      	        inc     DE              ; Next source
2BBF: 23      	        inc     HL              ; Next destination
2BC0: 05      	        dec     B               ; Count bytes
2BC1: C2BC2B  	        jp      NZ,DETHLB       ; Loop if more
2BC4: C9      	        ret
              	
2BC5: 21CB81  	SIGNS:  ld      HL,FPREG+2      ; Point to MSB of FPREG
2BC8: 7E      	        ld      A,(HL)          ; Get MSB
2BC9: 07      	        rlca                    ; Old sign to carry
2BCA: 37      	        scf                     ; Set MSBit
2BCB: 1F      	        rra                     ; Set MSBit of MSB
2BCC: 77      	        ld      (HL),A          ; Save new MSB
2BCD: 3F      	        ccf                     ; Complement sign
2BCE: 1F      	        rra                     ; Old sign to carry
2BCF: 23      	        inc     HL
2BD0: 23      	        inc     HL
2BD1: 77      	        ld      (HL),A          ; Set sign of result
2BD2: 79      	        ld      A,C             ; Get MSB
2BD3: 07      	        rlca                    ; Old sign to carry
2BD4: 37      	        scf                     ; Set MSBit
2BD5: 1F      	        rra                     ; Set MSBit of MSB
2BD6: 4F      	        ld      C,A             ; Save MSB
2BD7: 1F      	        rra
2BD8: AE      	        xor     (HL)            ; New sign of result
2BD9: C9      	        ret
              	
2BDA: 78      	CMPNUM: ld      A,B             ; Get exponent of number
2BDB: B7      	        or      A
2BDC: CA5F2B  	        jp      Z,TSTSGN        ; Zero - Test sign of FPREG
2BDF: 21682B  	        ld      HL,RETREL       ; Return relation routine
2BE2: E5      	        push    HL              ; Save for return
2BE3: CD5F2B  	        call    TSTSGN          ; Test sign of FPREG
2BE6: 79      	        ld      A,C             ; Get MSB of number
2BE7: C8      	        ret     Z               ; FPREG zero - Number's MSB
2BE8: 21CB81  	        ld      HL,FPREG+2      ; MSB of FPREG
2BEB: AE      	        xor     (HL)            ; Combine signs
2BEC: 79      	        ld      A,C             ; Get MSB of number
2BED: F8      	        ret     M               ; Exit if signs different
2BEE: CDF42B  	        call    CMPFP           ; Compare FP numbers
2BF1: 1F      	        rra                     ; Get carry to sign
2BF2: A9      	        xor     C               ; Combine with MSB of number
2BF3: C9      	        ret
              	
2BF4: 23      	CMPFP:  inc     HL              ; Point to exponent
2BF5: 78      	        ld      A,B             ; Get exponent
2BF6: BE      	        cp      (HL)            ; Compare exponents
2BF7: C0      	        ret     NZ              ; Different
2BF8: 2B      	        dec     HL              ; Point to MBS
2BF9: 79      	        ld      A,C             ; Get MSB
2BFA: BE      	        cp      (HL)            ; Compare MSBs
2BFB: C0      	        ret     NZ              ; Different
2BFC: 2B      	        dec     HL              ; Point to NMSB
2BFD: 7A      	        ld      A,D             ; Get NMSB
2BFE: BE      	        cp      (HL)            ; Compare NMSBs
2BFF: C0      	        ret     NZ              ; Different
2C00: 2B      	        dec     HL              ; Point to LSB
2C01: 7B      	        ld      A,E             ; Get LSB
2C02: 96      	        sub     (HL)            ; Compare LSBs
2C03: C0      	        ret     NZ              ; Different
2C04: E1      	        pop     HL              ; Drop RETurn
2C05: E1      	        pop     HL              ; Drop another RETurn
2C06: C9      	        ret
              	
2C07: 47      	FPINT:  ld      B,A             ; <- Move
2C08: 4F      	        ld      C,A             ; <- exponent
2C09: 57      	        ld      D,A             ; <- to all
2C0A: 5F      	        ld      E,A             ; <- bits
2C0B: B7      	        or      A               ; Test exponent
2C0C: C8      	        ret     Z               ; Zero - Return zero
2C0D: E5      	        push    HL              ; Save pointer to number
2C0E: CDAB2B  	        call    BCDEFP          ; Move FPREG to BCDE
2C11: CDC52B  	        call    SIGNS           ; Set MSBs & sign of result
2C14: AE      	        xor     (HL)            ; Combine with sign of FPREG
2C15: 67      	        ld      H,A             ; Save combined signs
2C16: FC2B2C  	        call    M,DCBCDE        ; Negative - Decrement BCDE
2C19: 3E98    	        ld      A,$80+24        ; 24 bits
2C1B: 90      	        sub     B               ; Bits to shift
2C1C: CD8D29  	        call    SCALE           ; Shift BCDE
2C1F: 7C      	        ld      A,H             ; Get combined sign
2C20: 17      	        rla                     ; Sign to carry
2C21: DC6029  	        call    C,FPROND        ; Negative - Round number up
2C24: 0600    	        ld      B,$00           ; Zero exponent
2C26: DC7929  	        call    C,COMPL         ; If negative make positive
2C29: E1      	        pop     HL              ; Restore pointer to number
2C2A: C9      	        ret
              	
2C2B: 1B      	DCBCDE: dec     DE              ; Decrement BCDE
2C2C: 7A      	        ld      A,D             ; Test LSBs
2C2D: A3      	        and     E
2C2E: 3C      	        inc     A
2C2F: C0      	        ret     NZ              ; Exit if LSBs not FFFF
2C30: 0B      	        dec     BC              ; Decrement MSBs
2C31: C9      	        ret
              	
2C32: 21CC81  	INT:    ld      HL,FPEXP        ; Point to exponent
2C35: 7E      	        ld      A,(HL)          ; Get exponent
2C36: FE98    	        cp      $80+24          ; Integer accuracy only?
2C38: 3AC981  	        ld      A,(FPREG)       ; Get LSB
2C3B: D0      	        ret     NC              ; Yes - Already integer
2C3C: 7E      	        ld      A,(HL)          ; Get exponent
2C3D: CD072C  	        call    FPINT           ; F.P to integer
2C40: 3698    	        ld      (HL),$80+24     ; Save 24 bit integer
2C42: 7B      	        ld      A,E             ; Get LSB of number
2C43: F5      	        push    AF              ; Save LSB
2C44: 79      	        ld      A,C             ; Get MSB of number
2C45: 17      	        rla                     ; Sign to carry
2C46: CD1629  	        call    CONPOS          ; Set sign of result
2C49: F1      	        pop     AF              ; Restore LSB of number
2C4A: C9      	        ret
              	
2C4B: 210000  	MLDEBC: ld      HL,$0000        ; Clear partial product
2C4E: 78      	        ld      A,B             ; Test multiplier
2C4F: B1      	        or      C
2C50: C8      	        ret     Z               ; Return zero if zero
2C51: 3E10    	        ld      A,$10           ; 16 bits
2C53: 29      	MLDBLP: add     HL,HL           ; Shift P.P left
2C54: DA9621  	        jp      C,BSERR         ; ?BS Error if overflow
2C57: EB      	        ex      DE,HL
2C58: 29      	        add     HL,HL           ; Shift multiplier left
2C59: EB      	        ex      DE,HL
2C5A: D2612C  	        jp      NC,NOMLAD       ; Bit was zero - No add
2C5D: 09      	        add     HL,BC           ; Add multiplicand
2C5E: DA9621  	        jp      C,BSERR         ; ?BS Error if overflow
2C61: 3D      	NOMLAD: dec     A               ; Count bits
2C62: C2532C  	        jp      NZ,MLDBLP       ; More
2C65: C9      	        ret
              	
2C66: FE2D    	ASCTFP: cp      '-'             ; Negative?
2C68: F5      	        push    AF              ; Save it and flags
2C69: CA722C  	        jp      Z,CNVNUM        ; Yes - Convert number
2C6C: FE2B    	        cp      '+'             ; Positive?
2C6E: CA722C  	        jp      Z,CNVNUM        ; Yes - Convert number
2C71: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
2C72: CD2E29  	CNVNUM: call    RESZER          ; Set result to zero
2C75: 47      	        ld      B,A             ; Digits after point counter
2C76: 57      	        ld      D,A             ; Sign of exponent
2C77: 5F      	        ld      E,A             ; Exponent of ten
2C78: 2F      	        cpl
2C79: 4F      	        ld      C,A             ; Before or after point flag
2C7A: CD041A  	MANLP:  call    GETCHR          ; Get next character
2C7D: DAC32C  	        jp      C,ADDIG         ; Digit - Add to number
2C80: FE2E    	        cp      '.'
2C82: CA9E2C  	        jp      Z,DPOINT        ; '.' - Flag point
2C85: FE45    	        cp      'E'
2C87: C2A22C  	        jp      NZ,CONEXP       ; Not 'E' - Scale number
2C8A: CD041A  	        call    GETCHR          ; Get next character
2C8D: CDB21F  	        call    SGNEXP          ; Get sign of exponent
2C90: CD041A  	EXPLP:  call    GETCHR          ; Get next character
2C93: DAE52C  	        jp      C,EDIGIT        ; Digit - Add to exponent
2C96: 14      	        inc     D               ; Is sign negative?
2C97: C2A22C  	        jp      NZ,CONEXP       ; No - Scale number
2C9A: AF      	        xor     A
2C9B: 93      	        sub     E               ; Negate exponent
2C9C: 5F      	        ld      E,A             ; And re-save it
2C9D: 0C      	        inc     C               ; Flag end of number
2C9E: 0C      	DPOINT: inc     C               ; Flag point passed
2C9F: CA7A2C  	        jp      Z,MANLP         ; Zero - Get another digit
2CA2: E5      	CONEXP: push    HL              ; Save code string address
2CA3: 7B      	        ld      A,E             ; Get exponent
2CA4: 90      	        sub     B               ; Subtract digits after point
2CA5: F4BB2C  	SCALMI: call    P,SCALPL        ; Positive - Multiply number
2CA8: F2B12C  	        jp      P,ENDCON        ; Positive - All done
2CAB: F5      	        push    AF              ; Save number of times to /10
2CAC: CDA72A  	        call    DIV10           ; Divide by 10
2CAF: F1      	        pop     AF              ; Restore count
2CB0: 3C      	        inc     A               ; Count divides
              	
2CB1: C2A52C  	ENDCON: jp      NZ,SCALMI       ; More to do
2CB4: D1      	        pop     DE              ; Restore code string address
2CB5: F1      	        pop     AF              ; Restore sign of number
2CB6: CC882B  	        call    Z,INVSGN        ; Negative - Negate number
2CB9: EB      	        ex      DE,HL           ; Code string address to HL
2CBA: C9      	        ret
              	
2CBB: C8      	SCALPL: ret     Z               ; Exit if no scaling needed
2CBC: F5      	MULTEN: push    AF              ; Save count
2CBD: CD482B  	        call    MLSP10          ; Multiply number by 10
2CC0: F1      	        pop     AF              ; Restore count
2CC1: 3D      	        dec     A               ; Count multiplies
2CC2: C9      	        ret
              	
2CC3: D5      	ADDIG:  push    DE              ; Save sign of exponent
2CC4: 57      	        ld      D,A             ; Save digit
2CC5: 78      	        ld      A,B             ; Get digits after point
2CC6: 89      	        adc     A,C             ; Add one if after point
2CC7: 47      	        ld      B,A             ; Re-save counter
2CC8: C5      	        push    BC              ; Save point flags
2CC9: E5      	        push    HL              ; Save code string address
2CCA: D5      	        push    DE              ; Save digit
2CCB: CD482B  	        call    MLSP10          ; Multiply number by 10
2CCE: F1      	        pop     AF              ; Restore digit
2CCF: D630    	        sub     '0'             ; Make it absolute
2CD1: CDDA2C  	        call    RSCALE          ; Re-scale number
2CD4: E1      	        pop     HL              ; Restore code string address
2CD5: C1      	        pop     BC              ; Restore point flags
2CD6: D1      	        pop     DE              ; Restore sign of exponent
2CD7: C37A2C  	        jp      MANLP           ; Get another digit
              	
2CDA: CD902B  	RSCALE: call    STAKFP          ; Put number on stack
2CDD: CD712B  	        call    FLGREL          ; Digit to add to FPREG
2CE0: C1      	PADD:   pop     BC              ; Restore number
2CE1: D1      	        pop     DE
2CE2: C3C828  	        jp      FPADD           ; Add BCDE to FPREG and return
              	
2CE5: 7B      	EDIGIT: ld      A,E             ; Get digit
2CE6: 07      	        rlca                    ; Times 2
2CE7: 07      	        rlca                    ; Times 4
2CE8: 83      	        add     A,E             ; Times 5
2CE9: 07      	        rlca                    ; Times 10
2CEA: 86      	        add     A,(HL)          ; Add next digit
2CEB: D630    	        sub     '0'             ; Make it absolute
2CED: 5F      	        ld      E,A             ; Save new digit
2CEE: C3902C  	        jp      EXPLP           ; Look for another digit
              	
2CF1: E5      	LINEIN: push    HL              ; Save code string address
2CF2: 217614  	        ld      HL,INMSG        ; Output " in "
2CF5: CD7823  	        call    PRS             ; Output string at HL
2CF8: E1      	        pop     HL              ; Restore code string address
2CF9: EB      	PRNTHL: ex      DE,HL           ; Code string address to DE
2CFA: AF      	        xor     A
2CFB: 0698    	        ld      B,$80+24        ; 24 bits
2CFD: CD762B  	        call    RETINT          ; Return the integer
2D00: 217723  	        ld      HL,PRNUMS       ; Print number string
2D03: E5      	        push    HL              ; Save for return
2D04: 212482  	NUMASC: ld      HL,PBUFF        ; Convert number to ASCII
2D07: E5      	        push    HL              ; Save for return
2D08: CD5F2B  	        call    TSTSGN          ; Test sign of FPREG
2D0B: 3620    	        ld      (HL),SPC        ; Space at start
2D0D: F2122D  	        jp      P,SPCFST        ; Positive - Space to start
2D10: 362D    	        ld      (HL),'-'        ; '-' sign at start
2D12: 23      	SPCFST: inc     HL              ; First byte of number
2D13: 3630    	        ld      (HL),'0'        ; '0' if zero
2D15: CAC82D  	        jp      Z,JSTZER        ; Return '0' if zero
2D18: E5      	        push    HL              ; Save buffer address
2D19: FC882B  	        call    M,INVSGN        ; Negate FPREG if negative
2D1C: AF      	        xor     A               ; Zero A
2D1D: F5      	        push    AF              ; Save it
2D1E: CDCE2D  	        call    RNGTST          ; Test number is in range
2D21: 014391  	SIXDIG: ld      BC,$9143        ; BCDE - 99999.9
2D24: 11F84F  	        ld      DE,$4FF8
2D27: CDDA2B  	        call    CMPNUM          ; Compare numbers
2D2A: B7      	        or      A
2D2B: E23F2D  	        jp      PO,INRNG        ; > 99999.9 - Sort it out
2D2E: F1      	        pop     AF              ; Restore count
2D2F: CDBC2C  	        call    MULTEN          ; Multiply by ten
2D32: F5      	        push    AF              ; Re-save count
2D33: C3212D  	        jp      SIXDIG          ; Test it again
              	
2D36: CDA72A  	GTSIXD: call    DIV10           ; Divide by 10
2D39: F1      	        pop     AF              ; Get count
2D3A: 3C      	        inc     A               ; Count divides
2D3B: F5      	        push    AF              ; Re-save count
2D3C: CDCE2D  	        call    RNGTST          ; Test number is in range
2D3F: CDB628  	INRNG:  call    ROUND           ; Add 0.5 to FPREG
2D42: 3C      	        inc     A
2D43: CD072C  	        call    FPINT           ; F.P to integer
2D46: CDA02B  	        call    FPBCDE          ; Move BCDE to FPREG
2D49: 010603  	        ld      BC,$0306        ; 1E+06 to 1E-03 range
2D4C: F1      	        pop     AF              ; Restore count
2D4D: 81      	        add     A,C             ; 6 digits before point
2D4E: 3C      	        inc     A               ; Add one
2D4F: FA5B2D  	        jp      M,MAKNUM        ; Do it in 'E' form if < 1E-02
2D52: FE08    	        cp      6+1+1           ; More than 999999 ?
2D54: D25B2D  	        jp      NC,MAKNUM       ; Yes - Do it in 'E' form
2D57: 3C      	        inc     A               ; Adjust for exponent
2D58: 47      	        ld      B,A             ; Exponent of number
2D59: 3E02    	        ld      A,2             ; Make it zero after
              	
2D5B: 3D      	MAKNUM: dec     A               ; Adjust for digits to do
2D5C: 3D      	        dec     A
2D5D: E1      	        pop     HL              ; Restore buffer address
2D5E: F5      	        push    AF              ; Save count
2D5F: 11E12D  	        ld      DE,POWERS       ; Powers of ten
2D62: 05      	        dec     B               ; Count digits before point
2D63: C26C2D  	        jp      NZ,DIGTXT       ; Not zero - Do number
2D66: 362E    	        ld      (HL),'.'        ; Save point
2D68: 23      	        inc     HL              ; Move on
2D69: 3630    	        ld      (HL),'0'        ; Save zero
2D6B: 23      	        inc     HL              ; Move on
2D6C: 05      	DIGTXT: dec     B               ; Count digits before point
2D6D: 362E    	        ld      (HL),'.'        ; Save point in case
2D6F: CCB52B  	        call    Z,INCHL         ; Last digit - move on
2D72: C5      	        push    BC              ; Save digits before point
2D73: E5      	        push    HL              ; Save buffer address
2D74: D5      	        push    DE              ; Save powers of ten
2D75: CDAB2B  	        call    BCDEFP          ; Move FPREG to BCDE
2D78: E1      	        pop     HL              ; Powers of ten table
2D79: 062F    	        ld      B,'0'-1         ; ASCII '0' - 1
2D7B: 04      	TRYAGN: inc     B               ; Count subtractions
2D7C: 7B      	        ld      A,E             ; Get LSB
2D7D: 96      	        sub     (HL)            ; Subtract LSB
2D7E: 5F      	        ld      E,A             ; Save LSB
2D7F: 23      	        inc     HL
2D80: 7A      	        ld      A,D             ; Get NMSB
2D81: 9E      	        sbc     A,(HL)          ; Subtract NMSB
2D82: 57      	        ld      D,A             ; Save NMSB
2D83: 23      	        inc     HL
2D84: 79      	        ld      A,C             ; Get MSB
2D85: 9E      	        sbc     A,(HL)          ; Subtract MSB
2D86: 4F      	        ld      C,A             ; Save MSB
2D87: 2B      	        dec     HL              ; Point back to start
2D88: 2B      	        dec     HL
2D89: D27B2D  	        jp      NC,TRYAGN       ; No overflow - Try again
2D8C: CD6D29  	        call    PLUCDE          ; Restore number
2D8F: 23      	        inc     HL              ; Start of next number
2D90: CDA02B  	        call    FPBCDE          ; Move BCDE to FPREG
2D93: EB      	        ex      DE,HL           ; Save point in table
2D94: E1      	        pop     HL              ; Restore buffer address
2D95: 70      	        ld      (HL),B          ; Save digit in buffer
2D96: 23      	        inc     HL              ; And move on
2D97: C1      	        pop     BC              ; Restore digit count
2D98: 0D      	        dec     C               ; Count digits
2D99: C26C2D  	        jp      NZ,DIGTXT       ; More - Do them
2D9C: 05      	        dec     B               ; Any decimal part?
2D9D: CAAC2D  	        jp      Z,DOEBIT        ; No - Do 'E' bit
2DA0: 2B      	SUPTLZ: dec     HL              ; Move back through buffer
2DA1: 7E      	        ld      A,(HL)          ; Get character
2DA2: FE30    	        cp      '0'             ; '0' character?
2DA4: CAA02D  	        jp      Z,SUPTLZ        ; Yes - Look back for more
2DA7: FE2E    	        cp      '.'             ; A decimal point?
2DA9: C4B52B  	        call    NZ,INCHL        ; Move back over digit
              	
2DAC: F1      	DOEBIT: pop     AF              ; Get 'E' flag
2DAD: CACB2D  	        jp      Z,NOENED        ; No 'E' needed - End buffer
2DB0: 3645    	        ld      (HL),'E'        ; Put 'E' in buffer
2DB2: 23      	        inc     HL              ; And move on
2DB3: 362B    	        ld      (HL),'+'        ; Put '+' in buffer
2DB5: F2BC2D  	        jp      P,OUTEXP        ; Positive - Output exponent
2DB8: 362D    	        ld      (HL),'-'        ; Put '-' in buffer
2DBA: 2F      	        cpl                     ; Negate exponent
2DBB: 3C      	        inc     A
2DBC: 062F    	OUTEXP: ld      B,'0'-1         ; ASCII '0' - 1
2DBE: 04      	EXPTEN: inc     B               ; Count subtractions
2DBF: D60A    	        sub     $0A             ; Tens digit
2DC1: D2BE2D  	        jp      NC,EXPTEN       ; More to do
2DC4: C63A    	        add     A,'0'+10        ; Restore and make ASCII
2DC6: 23      	        inc     HL              ; Move on
2DC7: 70      	        ld      (HL),B          ; Save MSB of exponent
2DC8: 23      	JSTZER: inc     HL              ;
2DC9: 77      	        ld      (HL),A          ; Save LSB of exponent
2DCA: 23      	        inc     HL
2DCB: 71      	NOENED: ld      (HL),C          ; Mark end of buffer
2DCC: E1      	        pop     HL              ; Restore code string address
2DCD: C9      	        ret
              	
2DCE: 017494  	RNGTST: ld      BC,$9474        ; BCDE = 999999.
2DD1: 11F723  	        ld      DE,$23F7
2DD4: CDDA2B  	        call    CMPNUM          ; Compare numbers
2DD7: B7      	        or      A
2DD8: E1      	        pop     HL              ; Return address to HL
2DD9: E2362D  	        jp      PO,GTSIXD       ; Too big - Divide by ten
2DDC: E9      	        jp      (HL)            ; Otherwise return to caller
              	
2DDD: 00000080	HALF:   defb    $00,$00,$00,$80 ; 0.5
              	
2DE1: A08601  	POWERS: defb    $A0,$86,$01  ; 100000
2DE4: 102700  	        defb    $10,$27,$00  ;  10000
2DE7: E80300  	        defb    $E8,$03,$00  ;   1000
2DEA: 640000  	        defb    $64,$00,$00  ;    100
2DED: 0A0000  	        defb    $0A,$00,$00  ;     10
2DF0: 010000  	        defb    $01,$00,$00  ;      1
              	
2DF3: 21882B  	NEGAFT: ld      HL,INVSGN       ; Negate result
2DF6: E3      	        ex      (SP),HL         ; To be done after caller
2DF7: E9      	        jp      (HL)            ; Return to caller
              	
2DF8: CD902B  	SQR:    call    STAKFP          ; Put value on stack
2DFB: 21DD2D  	        ld      HL,HALF         ; Set power to 1/2
2DFE: CD9D2B  	        call    PHLTFP          ; Move 1/2 to FPREG
              	
2E01: C1      	POWER:  pop     BC              ; Get base
2E02: D1      	        pop     DE
2E03: CD5F2B  	        call    TSTSGN          ; Test sign of power
2E06: 78      	        ld      A,B             ; Get exponent of base
2E07: CA462E  	        jp      Z,EXP           ; Make result 1 if zero
2E0A: F2112E  	        jp      P,POWER1        ; Positive base - Ok
2E0D: B7      	        or      A               ; Zero to negative power?
2E0E: CA0015  	        jp      Z,DZERR         ; Yes - ?/0 Error
2E11: B7      	POWER1: or      A               ; Base zero?
2E12: CA2F29  	        jp      Z,SAVEXP        ; Yes - Return zero
2E15: D5      	        push    DE              ; Save base
2E16: C5      	        push    BC
2E17: 79      	        ld      A,C             ; Get MSB of base
2E18: F67F    	        or      %01111111       ; Get sign status
2E1A: CDAB2B  	        call    BCDEFP          ; Move power to BCDE
2E1D: F22E2E  	        jp      P,POWER2        ; Positive base - Ok
2E20: D5      	        push    DE              ; Save power
2E21: C5      	        push    BC
2E22: CD322C  	        call    INT             ; Get integer of power
2E25: C1      	        pop     BC              ; Restore power
2E26: D1      	        pop     DE
2E27: F5      	        push    AF              ; MSB of base
2E28: CDDA2B  	        call    CMPNUM          ; Power an integer?
2E2B: E1      	        pop     HL              ; Restore MSB of base
2E2C: 7C      	        ld      A,H             ; but don't affect flags
2E2D: 1F      	        rra                     ; Exponent odd or even?
2E2E: E1      	POWER2: pop     HL              ; Restore MSB and exponent
2E2F: 22CB81  	        ld      (FPREG+2),HL    ; Save base in FPREG
2E32: E1      	        pop     HL              ; LSBs of base
2E33: 22C981  	        ld      (FPREG),HL      ; Save in FPREG
2E36: DCF32D  	        call    C,NEGAFT        ; Odd power - Negate result
2E39: CC882B  	        call    Z,INVSGN        ; Negative base - Negate it
2E3C: D5      	        push    DE              ; Save power
2E3D: C5      	        push    BC
2E3E: CDC229  	        call    LOG             ; Get LOG of base
2E41: C1      	        pop     BC              ; Restore power
2E42: D1      	        pop     DE
2E43: CD032A  	        call    FPMULT          ; Multiply LOG by power
              	
2E46: CD902B  	EXP:    call    STAKFP          ; Put value on stack
2E49: 013881  	        ld      BC,$8138        ; BCDE = 1/Ln(2)
2E4C: 113BAA  	        ld      DE,$AA3B
2E4F: CD032A  	        call    FPMULT          ; Multiply value by 1/LN(2)
2E52: 3ACC81  	        ld      A,(FPEXP)       ; Get exponent
2E55: FE88    	        cp      $80+8           ; Is it in range?
2E57: D23B2B  	        jp      NC,OVTST1       ; No - Test for overflow
2E5A: CD322C  	        call    INT             ; Get INT of FPREG
2E5D: C680    	        add     A,$80           ; For excess 128
2E5F: C602    	        add     A,$02           ; Exponent > 126?
2E61: DA3B2B  	        jp      C,OVTST1        ; Yes - Test for overflow
2E64: F5      	        push    AF              ; Save scaling factor
2E65: 21B129  	        ld      HL,UNITY        ; Point to 1.
2E68: CDB928  	        call    ADDPHL          ; Add 1 to FPREG
2E6B: CDFA29  	        call    MULLN2          ; Multiply by LN(2)
2E6E: F1      	        pop     AF              ; Restore scaling factor
2E6F: C1      	        pop     BC              ; Restore exponent
2E70: D1      	        pop     DE
2E71: F5      	        push    AF              ; Save scaling factor
2E72: CDC528  	        call    SUBCDE          ; Subtract exponent from FPREG
2E75: CD882B  	        call    INVSGN          ; Negate result
2E78: 21862E  	        ld      HL,EXPTAB       ; Coefficient table
2E7B: CDB62E  	        call    SMSER1          ; Sum the series
2E7E: 110000  	        ld      DE,$0000        ; Zero LSBs
2E81: C1      	        pop     BC              ; Scaling factor
2E82: 4A      	        ld      C,D             ; Zero MSB
2E83: C3032A  	        jp      FPMULT          ; Scale result to correct value
              	
2E86: 08      	EXPTAB: defb    $08             ; Table used by EXP
2E87: 402E9474	        defb    $40,$2E,$94,$74 ; -1/7! (-1/5040)
2E8B: 704F2E77	        defb    $70,$4F,$2E,$77 ;  1/6! ( 1/720)
2E8F: 6E02887A	        defb    $6E,$02,$88,$7A ; -1/5! (-1/120)
2E93: E6A02A7C	        defb    $E6,$A0,$2A,$7C ;  1/4! ( 1/24)
2E97: 50AAAA7E	        defb    $50,$AA,$AA,$7E ; -1/3! (-1/6)
2E9B: FFFF7F7F	        defb    $FF,$FF,$7F,$7F ;  1/2! ( 1/2)
2E9F: 00008081	        defb    $00,$00,$80,$81 ; -1/1! (-1/1)
2EA3: 00000081	        defb    $00,$00,$00,$81 ;  1/0! ( 1/1)
              	
2EA7: CD902B  	SUMSER: call    STAKFP          ; Put FPREG on stack
2EAA: 11012A  	        ld      DE,MULT         ; Multiply by "X"
2EAD: D5      	        push    DE              ; To be done after
2EAE: E5      	        push    HL              ; Save address of table
2EAF: CDAB2B  	        call    BCDEFP          ; Move FPREG to BCDE
2EB2: CD032A  	        call    FPMULT          ; Square the value
2EB5: E1      	        pop     HL              ; Restore address of table
2EB6: CD902B  	SMSER1: call    STAKFP          ; Put value on stack
2EB9: 7E      	        ld      A,(HL)          ; Get number of coefficients
2EBA: 23      	        inc     HL              ; Point to start of table
2EBB: CD9D2B  	        call    PHLTFP          ; Move coefficient to FPREG
2EBE: 06      	        defb    06H             ; Skip "pop AF"
2EBF: F1      	SUMLP:  pop     AF              ; Restore count
2EC0: C1      	        pop     BC              ; Restore number
2EC1: D1      	        pop     DE
2EC2: 3D      	        dec     A               ; Cont coefficients
2EC3: C8      	        ret     Z               ; All done
2EC4: D5      	        push    DE              ; Save number
2EC5: C5      	        push    BC
2EC6: F5      	        push    AF              ; Save count
2EC7: E5      	        push    HL              ; Save address in table
2EC8: CD032A  	        call    FPMULT          ; Multiply FPREG by BCDE
2ECB: E1      	        pop     HL              ; Restore address in table
2ECC: CDAE2B  	        call    LOADFP          ; Number at HL to BCDE
2ECF: E5      	        push    HL              ; Save address in table
2ED0: CDC828  	        call    FPADD           ; Add coefficient to FPREG
2ED3: E1      	        pop     HL              ; Restore address in table
2ED4: C3BF2E  	        jp      SUMLP           ; More coefficients
              	
2ED7: CD5F2B  	RND:    call    TSTSGN          ; Test sign of FPREG
2EDA: 217A80  	        ld      HL,SEED+2       ; Random number seed
2EDD: FA382F  	        jp      M,RESEED        ; Negative - Re-seed
2EE0: 219B80  	        ld      HL,LSTRND       ; Last random number
2EE3: CD9D2B  	        call    PHLTFP          ; Move last RND to FPREG
2EE6: 217A80  	        ld      HL,SEED+2       ; Random number seed
2EE9: C8      	        ret     Z               ; Return if RND(0)
2EEA: 86      	        add     A,(HL)          ; Add (SEED)+2)
2EEB: E607    	        and     %00000111       ; 0 to 7
2EED: 0600    	        ld      B,$00
2EEF: 77      	        ld      (HL),A          ; Re-save seed
2EF0: 23      	        inc     HL              ; Move to coefficient table
2EF1: 87      	        add     A,A             ; 4 bytes
2EF2: 87      	        add     A,A             ; per entry
2EF3: 4F      	        ld      C,A             ; BC = Offset into table
2EF4: 09      	        add     HL,BC           ; Point to coefficient
2EF5: CDAE2B  	        call    LOADFP          ; Coefficient to BCDE
2EF8: CD032A  	        call    FPMULT  ;       ; Multiply FPREG by coefficient
2EFB: 3A7980  	        ld      A,(SEED+1)      ; Get (SEED+1)
2EFE: 3C      	        inc     A               ; Add 1
2EFF: E603    	        and     %00000011       ; 0 to 3
2F01: 0600    	        ld      B,$00
2F03: FE01    	        cp      $01             ; Is it zero?
2F05: 88      	        adc     A,B             ; Yes - Make it 1
2F06: 327980  	        ld      (SEED+1),A      ; Re-save seed
2F09: 213C2F  	        ld      HL,RNDTAB-4     ; Addition table
2F0C: 87      	        add     A,A             ; 4 bytes
2F0D: 87      	        add     A,A             ; per entry
2F0E: 4F      	        ld      C,A             ; BC = Offset into table
2F0F: 09      	        add     HL,BC           ; Point to value
2F10: CDB928  	        call    ADDPHL          ; Add value to FPREG
2F13: CDAB2B  	RND1:   call    BCDEFP          ; Move FPREG to BCDE
2F16: 7B      	        ld      A,E             ; Get LSB
2F17: 59      	        ld      E,C             ; LSB = MSB
2F18: EE4F    	        xor     %01001111       ; Fiddle around
2F1A: 4F      	        ld      C,A             ; New MSB
2F1B: 3680    	        ld      (HL),$80        ; Set exponent
2F1D: 2B      	        dec     HL              ; Point to MSB
2F1E: 46      	        ld      B,(HL)          ; Get MSB
2F1F: 3680    	        ld      (HL),$80        ; Make value -0.5
2F21: 217880  	        ld      HL,SEED         ; Random number seed
2F24: 34      	        inc     (HL)            ; Count seed
2F25: 7E      	        ld      A,(HL)          ; Get seed
2F26: D6AB    	        sub     $AB             ; Do it modulo 171
2F28: C22F2F  	        jp      NZ,RND2         ; Non-zero - Ok
2F2B: 77      	        ld      (HL),A          ; Zero seed
2F2C: 0C      	        inc     C               ; Fillde about
2F2D: 15      	        dec     D               ; with the
2F2E: 1C      	        inc     E               ; number
2F2F: CD1929  	RND2:   call    BNORM           ; Normalise number
2F32: 219B80  	        ld      HL,LSTRND       ; Save random number
2F35: C3B72B  	        jp      FPTHL           ; Move FPREG to last and return
              	
2F38: 77      	RESEED: ld      (HL),A          ; Re-seed random numbers
2F39: 2B      	        dec     HL
2F3A: 77      	        ld      (HL),A
2F3B: 2B      	        dec     HL
2F3C: 77      	        ld      (HL),A
2F3D: C3132F  	        jp      RND1            ; Return RND seed
              	
2F40: 68B14668	RNDTAB: defb    $68,$B1,$46,$68 ; Table used by RND
2F44: 99E99269	        defb    $99,$E9,$92,$69
2F48: 10D17568	        defb    $10,$D1,$75,$68
              	
2F4C: 21962F  	COS:    ld      HL,HALFPI       ; Point to PI/2
2F4F: CDB928  	        call    ADDPHL          ; Add it to PPREG
2F52: CD902B  	SIN:    call    STAKFP          ; Put angle on stack
2F55: 014983  	        ld      BC,$8349        ; BCDE = 2 PI
2F58: 11DB0F  	        ld      DE,$0FDB
2F5B: CDA02B  	        call    FPBCDE          ; Move 2 PI to FPREG
2F5E: C1      	        pop     BC              ; Restore angle
2F5F: D1      	        pop     DE
2F60: CDB52A  	        call    DVBCDE          ; Divide angle by 2 PI
2F63: CD902B  	        call    STAKFP          ; Put it on stack
2F66: CD322C  	        call    INT             ; Get INT of result
2F69: C1      	        pop     BC              ; Restore number
2F6A: D1      	        pop     DE
2F6B: CDC528  	        call    SUBCDE          ; Make it 0 <= value < 1
2F6E: 219A2F  	        ld      HL,QUARTR       ; Point to 0.25
2F71: CDBF28  	        call    SUBPHL          ; Subtract value from 0.25
2F74: CD5F2B  	        call    TSTSGN          ; Test sign of value
2F77: 37      	        scf                     ; Flag positive
2F78: F2822F  	        jp      P,SIN1          ; Positive - Ok
2F7B: CDB628  	        call    ROUND           ; Add 0.5 to value
2F7E: CD5F2B  	        call    TSTSGN          ; Test sign of value
2F81: B7      	        or      A               ; Flag negative
2F82: F5      	SIN1:   push    AF              ; Save sign
2F83: F4882B  	        call    P,INVSGN        ; Negate value if positive
2F86: 219A2F  	        ld      HL,QUARTR       ; Point to 0.25
2F89: CDB928  	        call    ADDPHL          ; Add 0.25 to value
2F8C: F1      	        pop     AF              ; Restore sign
2F8D: D4882B  	        call    NC,INVSGN       ; Negative - Make positive
2F90: 219E2F  	        ld      HL,SINTAB       ; Coefficient table
2F93: C3A72E  	        jp      SUMSER          ; Evaluate sum of series
              	
2F96: DB0F4981	HALFPI: defb    $DB,$0F,$49,$81 ; 1.5708 (PI/2)
              	
2F9A: 0000007F	QUARTR: defb    $00,$00,$00,$7F ; 0.25
              	
2F9E: 05      	SINTAB: defb    $05             ; Table used by SIN
2F9F: BAD71E86	        defb    $BA,$D7,$1E,$86 ; 39.711
2FA3: 64269987	        defb    $64,$26,$99,$87 ;-76.575
2FA7: 58342387	        defb    $58,$34,$23,$87 ; 81.602
2FAB: E05DA586	        defb    $E0,$5D,$A5,$86 ;-41.342
2FAF: DA0F4983	        defb    $DA,$0F,$49,$83 ;  6.2832
              	
2FB3: CD902B  	TAN:    call    STAKFP          ; Put angle on stack
2FB6: CD522F  	        call    SIN             ; Get SIN of angle
2FB9: C1      	        pop     BC              ; Restore angle
2FBA: E1      	        pop     HL
2FBB: CD902B  	        call    STAKFP          ; Save SIN of angle
2FBE: EB      	        ex      DE,HL           ; BCDE = Angle
2FBF: CDA02B  	        call    FPBCDE          ; Angle to FPREG
2FC2: CD4C2F  	        call    COS             ; Get COS of angle
2FC5: C3B32A  	        jp      DIV             ; TAN = SIN / COS
              	
2FC8: CD5F2B  	ATN:    call    TSTSGN          ; Test sign of value
2FCB: FCF32D  	        call    M,NEGAFT        ; Negate result after if -ve
2FCE: FC882B  	        call    M,INVSGN        ; Negate value if -ve
2FD1: 3ACC81  	        ld      A,(FPEXP)       ; Get exponent
2FD4: FE81    	        cp      81H             ; Number less than 1?
2FD6: DAE52F  	        jp      C,ATN1          ; Yes - Get arc tangnt
2FD9: 010081  	        ld      BC,$8100        ; BCDE = 1
2FDC: 51      	        ld      D,C
2FDD: 59      	        ld      E,C
2FDE: CDB52A  	        call    DVBCDE          ; Get reciprocal of number
2FE1: 21BF28  	        ld      HL,SUBPHL       ; Sub angle from PI/2
2FE4: E5      	        push    HL              ; Save for angle > 1
2FE5: 21EF2F  	ATN1:   ld      HL,ATNTAB       ; Coefficient table
2FE8: CDA72E  	        call    SUMSER          ; Evaluate sum of series
2FEB: 21962F  	        ld      HL,HALFPI       ; PI/2 - angle in case > 1
2FEE: C9      	        ret                     ; Number > 1 - Sub from PI/2
              	
2FEF: 09      	ATNTAB: defb    $09             ; Table used by ATN
2FF0: 4AD73B78	        defb    $4A,$D7,$3B,$78 ; 1/17
2FF4: 026E847B	        defb    $02,$6E,$84,$7B ;-1/15
2FF8: FEC12F7C	        defb    $FE,$C1,$2F,$7C ; 1/13
2FFC: 74319A7D	        defb    $74,$31,$9A,$7D ;-1/11
3000: 843D5A7D	        defb    $84,$3D,$5A,$7D ; 1/9
3004: C87F917E	        defb    $C8,$7F,$91,$7E ;-1/7
3008: E4BB4C7E	        defb    $E4,$BB,$4C,$7E ; 1/5
300C: 6CAAAA7F	        defb    $6C,$AA,$AA,$7F ;-1/3
3010: 00000081	        defb    $00,$00,$00,$81 ; 1/1
              	
              	
3014: C9      	ARET:   ret                     ; A RETurn instruction
              	
3015: D7      	GETINP: rst     $10             ; input a character
3016: C9      	        ret
              	
3017: E5      	CLS:    push    HL
3018: D5      	        push    DE
3019: 3AD481  	        ld      A,(SCR_MODE)    ; check screen mode
301C: FE02    	        cp      $02             ; G2 mode?
301E: CC3705  	        call    Z,EMPTYVIDBUF   ; yes, reset video buffer
3021: D1      	        pop     DE
3022: E1      	        pop     HL
3023: 3E0C    	        ld      A,CS            ; ASCII Clear screen
3025: CD1F18  	        call    SND2VID         ; send to screen
3028: C38D39  	        jp      MONOUT          ; Output character
              	
302B: CD0026  	WIDTH:  call    GETINT          ; Get integer 0-255
302E: 7B      	        ld      A,E             ; Width to A
302F: 32A280  	        ld      (LWIDTH),A      ; Set width
3032: C9      	        ret
              	
              	
3033: CDBA1A  	DEEK:   call    DEINT           ; Get integer -32768 to 32767
3036: D5      	        push    DE              ; Save number
3037: E1      	        pop     HL              ; Number to HL
3038: 46      	RECWRD: ld      B,(HL)          ; Get LSB of contents
3039: 23      	        inc     HL
303A: 7E      	        ld      A,(HL)          ; Get MSB of contents
303B: C35A22  	        jp      ABPASS          ; Return integer AB
              	
303E: CD791E  	DOKE:   call    GETNUM          ; Get a number
3041: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
3044: D5      	        push    DE              ; Save address
3045: CDE117  	        call    CHKSYN          ; Make sure ',' follows
3048: 2C      	        defb    ','
3049: CD791E  	        call    GETNUM          ; Get a number
304C: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
304F: E3      	        ex      (SP),HL         ; Save value,get address
3050: 73      	        ld      (HL),E          ; Save LSB of value
3051: 23      	        inc     HL
3052: 72      	        ld      (HL),D          ; Save MSB of value
3053: E1      	        pop     HL              ; Restore code string address
3054: C9      	        ret
              	
              	; stop the execution of code for a certain bit of time. The pause
              	; is between $0000 and $FFFF 100ths of second (0~655.5 secs)
3055: CD791E  	PAUSE:  call    GETNUM          ; Get a number
3058: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
305B: 7A      	        ld      A,D             ; load D into A
305C: B3      	        or      E               ; are D & E equal to $00?
305D: C8      	        ret     Z               ; if yes, then return
305E: C5      	DIR_PAU:push    BC              ; store BC
305F: 3ACE81  	        ld      A,(TMRCNT)      ; Load current value of system timer
3062: 47      	        ld      B,A             ; move it into B
3063: CD2F1A  	RPTPS:  call    TSTBRK          ; Test for break key
3066: 3ACE81  	        ld      A,(TMRCNT)      ; Load current value of system timer
3069: B8      	        cp      B               ; is it the same value?
306A: 28F7    	        jr      Z,RPTPS         ; yes, so read again
306C: 47      	        ld      B,A             ; no, so store the new value
306D: 1B      	        dec     DE              ; decrement interval
306E: 7A      	        ld      A,D             ; load D into A
306F: B3      	        or      E               ; check if DE is equal to 0 (if D & e are $00 then result is 0)
3070: 20F1    	        jr      NZ,RPTPS        ; no, repeat
3072: C1      	        pop     BC              ; yes, recover BC and continue
3073: C9      	        ret
              	
              	; change the screen mode. Usage: SCREEN X[,Y][,Z]
              	; where X is: 0=text mode (40x24),
              	; 1=graphic mode 1 (32x24 chars); 2=graphic mode 2 (256x192 pixels);
              	; 3=multicolor mode (64x48 pixels); 4=extended graphic mode 2 (32x24 chars mixed between G1 and G2)
              	; Y is: 0=8x8 sprites, 1=16x16 sprites
              	; Z is: 0=no sprite magnification; 1=sprite magnification x2 (8x8=>16x16, and 16x16=32x32)
              	; (the latters are accepted only in graphic modes G1, G2, G3, and G4)
3074: AF      	SCREEN: xor     A
3075: 32E581  	        ld      (TMPBFR2),A     ; sprite size & magnif. byte set to 0
3078: CD0026  	        call    GETINT          ; Get integer 0-255
307B: FE05    	        cp      $05             ; is it a valid mode (0~4)?
307D: D2CF1A  	        jp      NC,FCERR        ; No - Illegal function call Error
3080: 32E381  	        ld      (TMPBFR1),A     ; store graphic mode
3083: A7      	        and     A               ; is it 0 (text mode)?
3084: CAA030  	        jp      Z,SCVDP         ; yes, ignore other arguments and set mode immediately
3087: CDDF30  	SETVDP: call    CHKSCAR         ; no, check if sprite size follows
308A: DA9230  	        jp      C,CKMAGN        ; no (set to 0 or missing), so jump over
308D: 3E02    	        ld      A,$02           ; no, so set sprite size
308F: 32E581  	        ld      (TMPBFR2),A     ; ...to 16x16
3092: CDDF30  	CKMAGN: call    CHKSCAR         ; check if sprite magnification follows
3095: DAA030  	        jp      C,SCVDP         ; no (set to 0 or missing), so jump over
3098: 3AE581  	        ld      A,(TMPBFR2)     ; yes, so retrieve sprite attributes...
309B: F601    	        or      $01             ; ...set sprite magnification to 2x...
309D: 32E581  	        ld      (TMPBFR2),A     ; ...and save flags again
30A0: F3      	SCVDP:  di                      ; disable INTs
30A1: D5      	        push    DE              ; store DE
30A2: E5      	        push    HL              ; store HL
30A3: 3AE381  	        ld      A,(TMPBFR1)     ; recover graphic mode
30A6: 5F      	        ld      E,A             ; and store it into E
30A7: 3AE581  	        ld      A,(TMPBFR2)     ; recover sprite flags
30AA: 57      	        ld      D,A             ; and store them into D
30AB: D5      	        push    DE              ; store D & E
30AC: CD5D03  	        call    initVDP         ; initialize VDP with mode pointed by E
30AF: D1      	        pop     DE              ; retrieve D & E
30B0: 7B      	        ld      A,E             ; move graphic mode into A
30B1: 87      	        add     A,A
30B2: 87      	        add     A,A
30B3: 87      	        add     A,A             ; multiply A times 8 to get offset of graphic mode
30B4: 5F      	        ld      E,A             ; and pass it into E
30B5: D5      	        push    DE              ; store sprite flags in E
30B6: 1600    	        ld      D,$00           ; reset D
30B8: 21150A  	        ld      HL,VDPMODESET+1 ; load address of VDP settings for reg#1
30BB: 19      	        add     HL,DE           ; load correct reg#1 setting
30BC: D1      	        pop     DE              ; retrieve sprite flags from E
30BD: 7E      	        ld      A,(HL)          ; load reg#1 setting
30BE: E6FC    	        and     %11111100       ; reset size & magn. bits
30C0: B2      	        or      D               ; set size & magn. bits
30C1: 5F      	        ld      E,A             ; value into E
30C2: 3E01    	        ld      A,$01           ; reg #1
30C4: CD1306  	        call    WRITE_VREG      ; send setting to reg #1
30C7: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line number
30CA: 23      	        inc     HL              ; -1 means direct statement
30CB: 7C      	        ld      A,H
30CC: B5      	        or      L
30CD: CC1508  	        call    Z,CURSOR_ON     ; enable cursor if not in program mode
30D0: FB      	        ei                      ; re-enable interrupts
30D1: E1      	        pop     HL              ; restore HL
30D2: D1      	        pop     DE              ; restore DE
30D3: 3AD381  	        ld      A,(SCR_SIZE_H)  ; check the screen mode by looking at the screen height
30D6: FE30    	        cp      $30             ; is it 48 chars or 192 pixels (MC and G2 modes)?
30D8: D0      	        ret     NC              ; yes, so exit (in graphics 2 and multicolor no print-on-video)
30D9: 3E01    	        ld      A,$01           ; no (we are in Text, G1 or ExG2), so activate the...
30DB: 32DF81  	        ld      (PRNTVIDEO),A   ; ...video buffer...
30DE: C9      	        ret                     ; ...and return to caller
              	
              	; check an additional argument for SCREEN
30DF: 2B      	CHKSCAR:dec     HL              ; dec 'cos GETCHR INCs
30E0: CD041A  	        call    GETCHR          ; Get next character
30E3: 37      	        scf                     ; set carry flag
30E4: C8      	        ret     Z               ; return if nothing follows with Carry=1
30E5: CDE117  	        call    CHKSYN          ; Make sure ',' follows
30E8: 2C      	        defb    ','
30E9: CD0026  	        call    GETINT          ; get value
30EC: 1F      	        rra                     ; Carry=bit #0
30ED: 3F      	        ccf                     ; invert Carry, so Carry=0 if arg. is 1, and Carry=1 otherwise (arg<>1)
30EE: C9      	        ret                     ; return
              	
              	
              	; change the colors of the screen - Syntax is COLOR a,b,c where:
              	; a=foreground color / b=background color / c=border color
              	; a,b,c must be in a range between 1 and 15 (0 is transparent and it's not supported)
30EF: CD0026  	COLOR:  call    GETINT          ; get first value
30F2: CD9631  	        call    CHKCLR          ; check if it's in range 1~15
30F5: 32E381  	        ld      (TMPBFR1),A     ; store it
30F8: 3AD481  	        ld      A,(SCR_MODE)    ; check screen mode
30FB: FE03    	        cp      $03             ; is it multicolor mode?
30FD: 200D    	        jr      NZ,CNTCKCL      ; no, continue
30FF: 3E0F    	        ld      A,$0F           ; white for...
3101: 32E181  	        ld      (FRGNDCLR),A    ; ...foreground (even it's not used in MC)
3104: 3AE381  	        ld      A,(TMPBFR1)     ; yes, so we stop here because in MC mode we just support border color
3107: 32E781  	        ld      (TMPBFR3),A     ; move color into temp buffer 3
310A: 1834    	        jr      CLRMC           ; jump to set color
310C: CDE117  	CNTCKCL:call    CHKSYN          ; Make sure ',' follows
310F: 2C      	        defb    ','
3110: CD0026  	        call    GETINT          ; get second value
3113: CD9631  	        call    CHKCLR          ; check if it's in range 1~15
3116: 32E581  	        ld      (TMPBFR2),A     ; store it
3119: 32E281  	        ld      (BKGNDCLR),A    ; and set as background color
311C: 3AD481  	        ld      A,(SCR_MODE)    ; check screen mode
311F: A7      	        and     A               ; is it text mode?
3120: 281B    	        jr      Z,CLRTXT        ; yes, stop here because in text mode, background and border colors coincide
3122: CDE117  	        call    CHKSYN          ; Make sure ',' follows
3125: 2C      	        defb    ','
3126: CD0026  	        call    GETINT          ; get third value
3129: CD9631  	        call    CHKCLR          ; check if it's in range 1~15
312C: 32E781  	        ld      (TMPBFR3),A     ; store it
312F: D5      	        push    DE              ; store DE
3130: 3AD481  	        ld      A,(SCR_MODE)    ; check screen mode
3133: FE01    	        cp      $01             ; is it G1 mode?
3135: 2810    	        jr      Z,CLRG1         ; yes, jump over
3137: FE02    	        cp      $02             ; is it G2 mode?
3139: 2815    	        jr      Z,CLRG2         ; yes, jump over
313B: 181C    	        jr      CLREX2          ; last case can only be ExG2
313D: CD8931  	CLRTXT: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
3140: 32E781  	CLRMC:  ld      (TMPBFR3),A     ; store color settings (for MC mode, we only set border color)
3143: D5      	        push    DE              ; store DE
3144: F3      	        di                      ; disable INTs
3145: 182E    	        jr      SETBRCL         ; set colors and exit
3147: CD8931  	CLRG1:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
314A: 1601    	        ld      D,$01           ; repeat 1 time
314C: 0620    	        ld      B,$20           ; 32 bytes of colors
314E: 1810    	        jr      LOADCLR         ; load colors
3150: CD8931  	CLRG2:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
3153: 1618    	        ld      D,$18           ; 18 pages of...
3155: 0600    	        ld      B,$00           ; ...256 bytes each
3157: 1807    	        jr      LOADCLR         ; load colors
3159: CD8931  	CLREX2: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
315C: 1608    	        ld      D,$08           ; 8 pages of...
315E: 0600    	        ld      B,$00           ; ...256 bytes each
3160: E5      	LOADCLR:push    HL              ; store HL
3161: 210020  	        ld      HL,$2000        ; color table start: $2000
3164: F3      	        di                      ; disable INTs
3165: CDC905  	        call    SETVDPADRS
3168: 0E30    	        ld      C,VDP_DAT       ; VDP data mode
316A: ED79    	RPTLDCL:out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
316C: 00      	        nop
316D: 00      	        nop
316E: 10FA    	        djnz    RPTLDCL         ; repeat for 256 bytes (1 page)
3170: 15      	        dec     D               ; did we fill up all the pages?
3171: 20F7    	        jr      NZ,RPTLDCL      ; no, repeat
3173: FB      	        ei
3174: E1      	        pop     HL              ; retrieve HL
3175: 87      	SETBRCL:add     A,A             ; move high nibble
3176: 87      	        add     A,A             ; to right to get the
3177: 87      	        add     A,A             ; foreground color
3178: 87      	        add     A,A             ; into the low nibble
3179: 32E181  	        ld      (FRGNDCLR),A    ; store foreground color
317C: 3AE781  	        ld      A,(TMPBFR3)     ; recover border color
317F: 5F      	        ld      E,A             ; move A into E
3180: 3E07    	        ld      A,$07           ; VDP register 7
3182: F3      	        di
3183: CD1306  	        call    WRITE_VREG      ; send value to VDP: set border color
3186: FB      	        ei                      ; re-enable INTs
3187: D1      	        pop     DE              ; retrieve DE
3188: C9      	        ret                     ; return to caller
              	
              	
              	; mix 2 color nibbles in 1 byte
3189: 3AE581  	MIXCLRS:ld      A,(TMPBFR2)     ; retrieve background color
318C: 47      	        ld      B,A             ; move it into B
318D: 3AE381  	        ld      A,(TMPBFR1)     ; retrieve foreground color
3190: 87      	        add     A,A             ; move foreground color into the high nibble of A
3191: 87      	        add     A,A
3192: 87      	        add     A,A
3193: 87      	        add     A,A
3194: B0      	        or      B               ; put background color into the low nibble of A
3195: C9      	        ret                     ; return to caller
              	
              	
              	; check if the color is not 0 and into the range 1~15
3196: A7      	CHKCLR: and     A               ; is it 0?
3197: CAFD14  	        jp      Z,SNERR         ; yes, raise a SN error
319A: FE10    	        cp      $10             ; is it in range 1~15?
319C: D2FD14  	        jp      NC,SNERR        ; no, raise a SN error
319F: C9      	        ret                     ; param is OK, can return
              	
              	
              	; check if in graphics 2 mode
31A0: 3AD481  	CHKG2M: ld      A,(SCR_MODE)    ; check screen mode
31A3: FE02    	        cp      $02             ; actually, we can paint only in G2
31A5: C24935  	        jp      NZ,GMERR        ; no G2, print a No Graphics Mode Error
31A8: C9      	        ret                     ; return to caller
              	
              	
              	; PLOT X,Y[,color]
              	; plot a pixel in graphic mode 2
31A9: CDA031  	PLOT:   call    CHKG2M          ; check if in G2 mode
31AC: CD0026  	        call    GETINT          ; get X coords.
31AF: 32E381  	        ld      (TMPBFR1),A     ; store it into a temp buffer
31B2: CDE117  	        call    CHKSYN          ; Make sure ',' follows
31B5: 2C      	        defb    ','
31B6: CD0026  	        call    GETINT          ; get Y coords,
31B9: FEC0    	        cp      $C0             ; check if Y is in range 0~191
31BB: D2CF1A  	        jp      NC,FCERR        ; no, raise an FC error
31BE: 32E581  	        ld      (TMPBFR2),A     ; store into a temp buffer
31C1: CD3035  	        call    CLRPRM          ; check if param "color" has been passed
31C4: E5      	CNTPLOT:push    HL              ; store HL
31C5: C5      	        push    BC              ; store BC
31C6: D5      	        push    DE              ; store DE
              	        ; formula is: ADDRESS=(INT(X/8))*8 + (INT(Y/8))*256 + R(Y/8)
              	        ; where R(Y/8) is the remainder of (Y/8)
              	        ; the pixel to be set is given by R(X/8), and data is taken from the array
31C7: 3AE581  	        ld      A,(TMPBFR2)     ; retrieve Y
31CA: FEC0    	        cp      $C0             ; Y>=192?
31CC: D21632  	        jp      NC,NOGD         ; yes, so leave
31CF: 1E08    	        ld      E,$08           ; load E with divisor
31D1: 57      	        ld      D,A             ; and store into D (dividend)
31D2: CDDF39  	        call    DIV_8_8         ; get Y/8, D is quotient=INT(Y/8), and A is remainder
31D5: 4F      	        ld      C,A             ; store remainder into C
31D6: 42      	        ld      B,D             ; B=(INT(Y/8))*256 (we simply copy quotient into B)
31D7: 6069    	        ld      HL,BC           ; copy BC into HL: now HL has the VRAM address of the byte being set
31D9: 3AE381  	        ld      A,(TMPBFR1)     ; retrieve X
31DC: 57      	        ld      D,A             ; and move it into D (dividend)
31DD: CDDF39  	        call    DIV_8_8         ; get X/8, D is quotient=INT(X/8), and A is remainder
31E0: 4F      	        ld      C,A             ; store remainder into C
31E1: 7A      	        ld      A,D             ; move quotient into A
31E2: 87      	        add     A,A
31E3: 87      	        add     A,A
31E4: 87      	        add     A,A             ; multiply quotient by 8
31E5: 5F      	        ld      E,A             ; store result into E
31E6: 1600    	        ld      D,$00           ; reset D
31E8: 19      	        add     HL,DE           ; add DE to HL, getting the final VRAM address
31E9: EB      	        ex      DE,HL           ; move VRAM address into DE
31EA: 211A32  	        ld      HL,PXLSET       ; starting address of table for pixel to draw
31ED: 0600    	        ld      B,$00           ; reset B
31EF: 09      	        add     HL,BC           ; add C (remainder of X/8) to get address of pixel to turn on
31F0: 7E      	        ld      A,(HL)          ; load pixel data
31F1: EB      	        ex      DE,HL           ; retrieve VRAM pattern address into HL
31F2: 57      	        ld      D,A             ; move pixel value into D
31F3: 3AE781  	        ld      A,(TMPBFR3)     ; retrieve color
31F6: 87      	        add     A,A             ; now we move low nibble
31F7: 87      	        add     A,A             ; in the high nibble
31F8: 87      	        add     A,A             ; by adding A to itself
31F9: 87      	        add     A,A             ; 4 times (this is a shift left 4)
31FA: 5F      	        ld      E,A             ; move it into E
31FB: F3      	        di                      ; disable INTs
31FC: CDE905  	        call    READ_VIDEO_LOC  ; load original value of VRAM cell
31FF: FB      	        ei
3200: B2      	        or      D               ; plot new pixel preserving original pattern
3201: F3      	        di
3202: CDFE05  	        call    WRITE_VIDEO_LOC ; write new value into VRAM cell
3205: FB      	        ei
3206: CBEC    	        set     5,H             ; set to write into color VRAM (it's like adding $2000 to HL)
3208: F3      	        di
3209: CDE905  	        call    READ_VIDEO_LOC  ; load original colors of pixel
320C: FB      	        ei
320D: E60F    	        and     %00001111       ; reset high nibble (the foreground color)
320F: B3      	        or      E               ; set new foreground color
3210: F3      	        di
3211: CDFE05  	        call    WRITE_VIDEO_LOC ; write new color settings
3214: FB      	        ei                      ; re-enable INTs
3215: 00      	        nop                     ; wait for INTs to be enabled again
3216: D1      	NOGD:   pop     DE              ; retrieve DE
3217: C1      	        pop     BC              ; retrieve BC
3218: E1      	        pop     HL              ; retrieve HL
3219: C9      	        ret                     ; return to caller
321A: 80402010	PXLSET: defb    $80,$40,$20,$10,$08,$04,$02,$01 ; pixel to be set ON
321E: 08040201	
              	        ; where R(X/8)=> 0=80h, 1=40h, 2=20h, 3=10h, 4=08h, 5=04h, 6=02h, 7=$01
              	
              	; DRAW X1,Y1,X2,Y2[,color]
              	; Draw a line using Bresenham's line algorithm from X1,Y1 to X2,Y2
              	; X1,Y1 can be either less than or greater than X2,Y2 (meaning that)
              	; the drawing will be ever done from X1,Y2 to X2,Y2, regardless of
              	; the values. If color is not specified, the foreground color set
              	; with COLOR will be used 
81E3:         	X1      equ     TMPBFR1
81E5:         	Y1      equ     TMPBFR2
81EB:         	X2      equ     VIDEOBUFF
81ED:         	Y2      equ     VIDEOBUFF+$02
81EF:         	ER      equ     VIDEOBUFF+$04
81F1:         	E2      equ     VIDEOBUFF+$06
81F3:         	SX      equ     VIDEOBUFF+$08
81F5:         	SY      equ     VIDEOBUFF+$0A
81F7:         	DX      equ     VIDEOBUFF+$0C
81F9:         	DY      equ     VIDEOBUFF+$0E
3222: CDA031  	DRAW:   call    CHKG2M          ; check if in G2 mode
3225: CD1835  	        call    CLRVDBF         ; clear VIDEOBUFF
3228: CD0026  	        call    GETINT          ; get X1 coords.
322B: 32E381  	        ld      (X1),A          ; store it into a temp buffer
322E: CDE117  	        call    CHKSYN          ; Make sure ',' follows
3231: 2C      	        defb    ','
3232: CD0026  	        call    GETINT          ; get Y1 coords.
3235: FEC0    	        cp      $C0             ; check if Y1 is in range 0~191
3237: D2CF1A  	        jp      NC,FCERR        ; no, raise an FC error
323A: 32E581  	        ld      (Y1),A          ; store into a temp buffer
323D: CDE117  	        call    CHKSYN          ; Make sure ',' follows
3240: 2C      	        defb    ','
3241: CD0026  	        call    GETINT          ; get X2 coords.
3244: 32EB81  	        ld      (X2),A          ; store it into a temp buffer
3247: CDE117  	        call    CHKSYN          ; Make sure ',' follows
324A: 2C      	        defb    ','
324B: CD0026  	        call    GETINT          ; get Y2 coords
324E: FEC0    	        cp      $C0             ; check if Y2 is in range 0~191
3250: D2CF1A  	        jp      NC,FCERR        ; no, raise an FC error
3253: 32ED81  	        ld      (Y2),A          ; store it into a temp buffer
3256: CD3035  	        call    CLRPRM          ; check for arg. "color" and store it into TMPBFR3
3259: E5      	        push    HL              ; store register we'll use
325A: D5      	        push    DE              
325B: C5      	        push    BC
325C: ED5BE381	        ld      DE,(X1)         ; load X1 and
3260: 2AEB81  	        ld      HL,(X2)         ; X2
3263: B7      	        or      A               ; clear CARRY
3264: ED52    	        sbc     HL,DE           ; DX=X2-X1
3266: CDD539  	        call    absHL           ; DX=ABS(DX)
3269: 22F781  	        ld      (DX),HL         ; store DX
326C: 01FFFF  	        ld      BC,$FFFF        ; SX=-1
326F: 2AE381  	        ld      HL,(X1)
3272: ED5BEB81	        ld      DE,(X2)
3276: CDB039  	        call    CMP16           ; X1<X2?
3279: F27F32  	        jp      P,X1GR          ; no, X1>=X2
327C: 010100  	        ld      BC,$0001        ; yes, so set SX=1
327F: ED43F381	X1GR:   ld      (SX),BC         ; store SX
3283: ED5BE581	        ld      DE,(Y1)
3287: 2AED81  	        ld      HL,(Y2)
328A: B7      	        or      A               ; clear Carry
328B: ED52    	        sbc     HL,DE           ; DY=Y2-Y1
328D: CDD539  	        call    absHL           ; DY=ABS(DY)
3290: 22F981  	        ld      (DY),HL         ; store DY
3293: 01FFFF  	        ld      BC,$FFFF        ; SY=-1
3296: 2AE581  	        ld      HL,(Y1)
3299: ED5BED81	        ld      DE,(Y2)
329D: CDB039  	        call    CMP16           ; is Y1<Y2?
32A0: F2A632  	        jp      P,Y1GR          ; no, Y1>=Y2
32A3: 010100  	        ld      BC,$0001        ; yes, so set SY=1
32A6: ED43F581	Y1GR:   ld      (SY),BC         ; store SY
32AA: 2AF981  	        ld      HL,(DY)         ; ER=DY
32AD: CDD839  	        call    negHL           ; ER=-DY
32B0: 22EF81  	        ld      (ER),HL         ; store ER
32B3: 2AF781  	        ld      HL,(DX)
32B6: ED5BF981	        ld      DE,(DY)
32BA: CDB039  	        call    CMP16           ; DX>DY?
32BD: CAC932  	        jp      Z,ER2           ; no, DX=DY
32C0: FAC932  	        jp      M,ER2           ; no, DX<DY
32C3: 2AF781  	        ld      HL,(DX)         ; reload DX
32C6: 22EF81  	        ld      (ER),HL         ; yes: DX>DY, so ER=DX
32C9: 2AEF81  	ER2:    ld      HL,(ER)         ; load ER
32CC: CB2C    	        sra     H               ; right shift (and preserve sign)...
32CE: CB1D    	        rr      L               ; ...of HL, so ER=INT(ER/2)
32D0: 22EF81  	STRE2:  ld      (ER),HL         ; store ER
32D3: CDC431  	RPTDRW: call    CNTPLOT         ; plot first pixel
32D6: 2AE381  	        ld      HL,(X1)
32D9: ED5BEB81	        ld      DE,(X2)
32DD: CDB039  	        call    CMP16           ; X1=X2?
32E0: 200D    	        jr      NZ,CNTDRW       ; no, continue drawing
32E2: 2AE581  	        ld      HL,(Y1)         ; yes, so check
32E5: ED5BED81	        ld      DE,(Y2)         ; also Y
32E9: CDB039  	        call    CMP16           ; Y1=Y2?
32EC: CA4533  	        jp      Z,ENDDRAW       ; yes, finished drawing: exit
32EF: ED5BEF81	CNTDRW: ld      DE,(ER)
32F3: ED53F181	        ld      (E2),DE         ; E2=ER
32F7: 2AF781  	        ld      HL,(DX)
32FA: CDD839  	        call    negHL           ; DX=-DX
32FD: EB      	        ex      DE,HL           ; invert DE and HL => HL=E2, DE=-DX
32FE: CDB039  	        call    CMP16           ; E2>-DX?
3301: CA1F33  	        jp      Z,DXGR          ; no, E2=-DX: jump
3304: FA1F33  	        jp      M,DXGR          ; no, E2<-DX: jump
3307: 2AEF81  	        ld      HL,(ER)         ; yes
330A: ED5BF981	        ld      DE,(DY)
330E: B7      	        or      A               ; clear CARRY
330F: ED52    	        sbc     HL,DE           ; ER=ER-DY
3311: 22EF81  	        ld      (ER),HL
3314: 2AE381  	        ld      HL,(X1)
3317: ED5BF381	        ld      DE,(SX)
331B: 19      	        add     HL,DE           ; X1=X1+SX (increment X1)
331C: 22E381  	        ld      (X1),HL
331F: 2AF181  	DXGR:   ld      HL,(E2)
3322: ED5BF981	        ld      DE,(DY)
3326: CDB039  	        call    CMP16           ; E2<DY?
3329: F2D332  	        jp      P,RPTDRW        ; no, E2>=DY: so jump over
332C: 2AEF81  	        ld      HL,(ER)         ; yes
332F: ED5BF781	        ld      DE,(DX)
3333: 19      	        add     HL,DE           ; ER=ER+DX
3334: 22EF81  	        ld      (ER),HL
3337: 2AE581  	        ld      HL,(Y1)
333A: ED5BF581	        ld      DE,(SY)
333E: 19      	        add     HL,DE           ; Y1=Y1+SY (increment Y1)
333F: 22E581  	        ld      (Y1),HL
3342: C3D332  	        jp      RPTDRW          ; repeat
3345: C1      	ENDDRAW:pop     BC              ; retrieve BC
3346: D1      	        pop     DE              ; retrieve DE
3347: E1      	        pop     HL              ; retrieve HL
3348: C9      	        ret                     ; return to caller
              	
              	
              	; CIRCLE X,Y,R[,C]
              	; Draw a circle using Bresenham's circle algorithm with center in X,Y
              	; and radius R, with optional color C. If color is not specified, the
              	; foreground color set with COLOR will be used 
81EB:         	XC      equ     VIDEOBUFF
81ED:         	YC      equ     VIDEOBUFF+$02
81EF:         	RADIUS  equ     VIDEOBUFF+$04
81F1:         	XI      equ     VIDEOBUFF+$06
81F3:         	YI      equ     VIDEOBUFF+$08
81F5:         	DC      equ     VIDEOBUFF+$0A
3349: CDA031  	CIRCLE: call    CHKG2M          ; check if in G2 mode
334C: CD1835  	        call    CLRVDBF         ; clear VIDEOBUFF
334F: CD0026  	        call    GETINT          ; get X coords.
3352: 32EB81  	        ld      (XC),A          ; store it into a temp buffer
3355: CDE117  	        call    CHKSYN          ; Make sure ',' follows
3358: 2C      	        defb    ','
3359: CD0026  	        call    GETINT          ; get Y coords,
335C: 32ED81  	        ld      (YC),A          ; store it into a temp buffer
335F: CDE117  	        call    CHKSYN          ; Make sure ',' follows
3362: 2C      	        defb    ','
3363: CD0026  	        call    GETINT          ; get radius
3366: 32EF81  	        ld      (RADIUS),A      ; store it into a temp buffer
3369: CD3035  	        call    CLRPRM          ; check if param "color" has been passed
336C: C5      	        push    BC              ; store BC
336D: D5      	        push    DE              ; store DE
336E: E5      	        push    HL              ; store HL
336F: AF      	        xor     A               ; clear A,
3370: 47      	        ld      B,A             ; B,
3371: 4F      	        ld      C,A             ; C,
3372: 57      	        ld      D,A             ; D,
3373: 67      	        ld      H,A             ; and H
3374: ED43F181	        ld      (XI),BC         ; clear XI
3378: 3AEF81  	        ld      A,(RADIUS)      ; load RADIUS into A
337B: 6F      	        ld      L,A             ; HL now contains R
337C: 22F381  	        ld      (YI),HL         ; YI=RADIUS
337F: 29      	        add     HL,HL           ; R*2
3380: EB      	        ex      DE,HL           ; put HL into DE
3381: 210300  	        ld      HL,$0003        ; now HL is 3
3384: AF      	        xor     A               ; clear Carry
3385: ED52    	        sbc     HL,DE           ; HL=>D=3-(2*R)
3387: 22F581  	        ld      (DC),HL         ; store D
338A: CDE933  	        call    DRWCRL          ; draw initial point
338D: ED5BF181	RPTCRL: ld      DE,(XI)         ; load XI
3391: 2AF381  	        ld      HL,(YI)         ; load YI
3394: CDB039  	        call    CMP16           ; is YI<DI?
3397: CAA033  	        jp      Z,RPTCL1        ; no, YI=XI
339A: F2A033  	        jp      P,RPTCL1        ; no, YI>XI
339D: C3E533  	        jp      ENDCRL          ; yes, so we've finished
33A0: 21F181  	RPTCL1: ld      HL,XI
33A3: 34      	        inc     (HL)            ; XI=XI+1
33A4: 2AF581  	        ld      HL,(DC)         ; load D
33A7: 7C      	        ld      A,H
33A8: B5      	        or      L               ; is D=0? Yes, jump over
33A9: CACD33  	        jp      Z,DLSZ
33AC: CB7C    	        bit     7,H             ; is D<0?
33AE: 201D    	        jr      NZ,DLSZ         ; yes, jump over
33B0: ED5BF381	        ld      DE,(YI)         ; D>0
33B4: 1B      	        dec     DE              ; so, YI=YI-1
33B5: ED53F381	        ld      (YI),DE         ; store YI
33B9: AF      	        xor     A               ; clear Carry
33BA: 2AF181  	        ld      HL,(XI)
33BD: ED52    	        sbc     HL,DE           ; HL=XI-YI
33BF: 29      	        add     HL,HL
33C0: 29      	        add     HL,HL           ; HL=HL*4
33C1: 110A00  	        ld      DE,10
33C4: 19      	        add     HL,DE           ; HL=HL+10
33C5: ED5BF581	        ld      DE,(DC)         ; load D
33C9: EB      	        ex      DE,HL           ; invert DE and HL, so that HL=4*(XI-YI)+10 and DE=D
33CA: 19      	        add     HL,DE           ; D=D+4*(XI-YI)+10
33CB: 180F    	        jr      PLTCRL          ; plot next pixel
33CD: 2AF181  	DLSZ:   ld      HL,(XI)         ; load XI
33D0: 29      	        add     HL,HL
33D1: 29      	        add     HL,HL           ; XI=XI*4
33D2: 110600  	        ld      DE,$0006
33D5: 19      	        add     HL,DE
33D6: ED5BF581	        ld      DE,(DC)
33DA: EB      	        ex      DE,HL           ; HL=D and DE=4*XI+6
33DB: 19      	        add     HL,DE           ; D=D+4*XI+6
33DC: 22F581  	PLTCRL: ld      (DC),HL         ; store new D
33DF: CDE933  	        call    DRWCRL          ; plot pixel
33E2: C38D33  	        jp      RPTCRL          ; repeat
33E5: E1      	ENDCRL: pop     HL
33E6: D1      	        pop     DE
33E7: C1      	        pop     BC
33E8: C9      	        ret                     ; return to caller
33E9: 2AEB81  	DRWCRL: ld      HL,(XC)
33EC: ED5BF181	        ld      DE,(XI)
33F0: 19      	        add     HL,DE           ; X=XC+XI
33F1: 22E381  	        ld      (X1),HL         ; store X
33F4: CD0835  	        call    VALIDX          ; check if X is valid (0~255)
33F7: DA0B34  	        jp      C,CNTCL1        ; if Carry is set, X is not valid
33FA: 2AED81  	        ld      HL,(YC)
33FD: ED5BF381	        ld      DE,(YI)
3401: 19      	        add     HL,DE           ; Y=YC+YI
3402: 22E581  	        ld      (Y1),HL         ; store Y
3405: CD0D35  	        call    VALIDY          ; check if Y is valid (0~191)
3408: D4C431  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
340B: AF      	CNTCL1: xor     A               ; clear Carry
340C: 2AEB81  	        ld      HL,(XC)
340F: ED5BF181	        ld      DE,(XI)
3413: ED52    	        sbc     HL,DE           ; X=XC-XI
3415: 22E381  	        ld      (X1),HL         ; store X
3418: CD0835  	        call    VALIDX          ; check if X is valid (0~255)
341B: DA2F34  	        jp      C,CNTCL2        ; if Carry is set, X is not valid
341E: 2AED81  	        ld      HL,(YC)
3421: ED5BF381	        ld      DE,(YI)
3425: 19      	        add     HL,DE           ; Y=YC+YI
3426: 22E581  	        ld      (Y1),HL         ; store Y
3429: CD0D35  	        call    VALIDY          ; check if Y is valid (0~191)
342C: D4C431  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
342F: 2AEB81  	CNTCL2: ld      HL,(XC)
3432: ED5BF181	        ld      DE,(XI)
3436: 19      	        add     HL,DE           ; X=XC+XI
3437: 22E381  	        ld      (X1),HL         ; store X
343A: CD0835  	        call    VALIDX          ; check if X is valid (0~255)
343D: DA5334  	        jp      C,CNTCL3        ; if Carry is set, X is not valid
3440: AF      	        xor     A               ; clear Carry
3441: 2AED81  	        ld      HL,(YC)
3444: ED5BF381	        ld      DE,(YI)
3448: ED52    	        sbc     HL,DE           ; Y=YC-YI
344A: 22E581  	        ld      (Y1),HL         ; store Y
344D: CD0D35  	        call    VALIDY          ; check if Y is valid (0~191)
3450: D4C431  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
3453: AF      	CNTCL3: xor     A               ; clear Carry
3454: 2AEB81  	        ld      HL,(XC)
3457: ED5BF181	        ld      DE,(XI)
345B: ED52    	        sbc     HL,DE           ; X=XC-XI
345D: 22E381  	        ld      (X1),HL         ; store X
3460: CD0835  	        call    VALIDX          ; check if X is valid (0~255)
3463: DA7934  	        jp      C,CNTCL4        ; if Carry is set, X is not valid
3466: AF      	        xor     A               ; clear Carry
3467: 2AED81  	        ld      HL,(YC)
346A: ED5BF381	        ld      DE,(YI)
346E: ED52    	        sbc     HL,DE           ; Y=YC-YI
3470: 22E581  	        ld      (Y1),HL         ; store Y
3473: CD0D35  	        call    VALIDY          ; check if Y is valid (0~191)
3476: D4C431  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
3479: 2AEB81  	CNTCL4: ld      HL,(XC)
347C: ED5BF381	        ld      DE,(YI)
3480: 19      	        add     HL,DE           ; X=XC+YI
3481: 22E381  	        ld      (X1),HL         ; store X
3484: CD0835  	        call    VALIDX          ; check if X is valid (0~255)
3487: DA9B34  	        jp      C,CNTCL5        ; if Carry is set, X is not valid
348A: 2AED81  	        ld      HL,(YC)
348D: ED5BF181	        ld      DE,(XI)
3491: 19      	        add     HL,DE           ; Y=YC+XI
3492: 22E581  	        ld      (Y1),HL         ; store Y
3495: CD0D35  	        call    VALIDY          ; check if Y is valid (0~191)
3498: D4C431  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
349B: AF      	CNTCL5: xor     A               ; clear Carry
349C: 2AEB81  	        ld      HL,(XC)
349F: ED5BF381	        ld      DE,(YI)
34A3: ED52    	        sbc     HL,DE           ; X=XC-YI
34A5: 22E381  	        ld      (X1),HL         ; store X
34A8: CD0835  	        call    VALIDX          ; check if X is valid (0~255)
34AB: DABF34  	        jp      C,CNTCL6        ; if Carry is set, X is not valid
34AE: 2AED81  	        ld      HL,(YC)
34B1: ED5BF181	        ld      DE,(XI)
34B5: 19      	        add     HL,DE           ; Y=YC+XI
34B6: 22E581  	        ld      (Y1),HL         ; store Y
34B9: CD0D35  	        call    VALIDY          ; check if Y is valid (0~191)
34BC: D4C431  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
34BF: 2AEB81  	CNTCL6: ld      HL,(XC)
34C2: ED5BF381	        ld      DE,(YI)
34C6: 19      	        add     HL,DE           ; X=XC+YI
34C7: 22E381  	        ld      (X1),HL         ; store X
34CA: CD0835  	        call    VALIDX          ; check if X is valid (0~255)
34CD: DAE334  	        jp      C,CNTCL7        ; if Carry is set, X is not valid
34D0: AF      	        xor     A               ; clear Carry
34D1: 2AED81  	        ld      HL,(YC)
34D4: ED5BF181	        ld      DE,(XI)
34D8: ED52    	        sbc     HL,DE           ; Y=YC-XI
34DA: 22E581  	        ld      (Y1),HL         ; store Y
34DD: CD0D35  	        call    VALIDY          ; check if Y is valid (0~191)
34E0: D4C431  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
34E3: AF      	CNTCL7: xor     A               ; clear Carry
34E4: 2AEB81  	        ld      HL,(XC)
34E7: ED5BF381	        ld      DE,(YI)
34EB: ED52    	        sbc     HL,DE           ; X=XC-YI
34ED: 22E381  	        ld      (X1),HL         ; store X
34F0: CD0835  	        call    VALIDX          ; check if X is valid (0~255)
34F3: D8      	        ret     C               ; if Carry is set, X is not valid
34F4: AF      	        xor     A               ; clear Carry
34F5: 2AED81  	        ld      HL,(YC)
34F8: ED5BF181	        ld      DE,(XI)
34FC: ED52    	        sbc     HL,DE           ; Y=YC-XI
34FE: 22E581  	        ld      (Y1),HL         ; store Y
3501: CD0D35  	        call    VALIDY          ; check if Y is valid (0~191)
3504: D4C431  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
3507: C9      	        ret                     ; return to caller
              	
              	; check if X,Y coordinates are valid: 0<=X<=255 and 0<=Y<=191
              	; input: HL (value to check), can be negative
              	; output: CARRY flag: reset => VALID  //  set => NOT VALID
              	; destroys: A
3508: AF      	VALIDX: xor     A               ; reset A
3509: B4      	        or      H               ; check if H is 0 (this means that X is in range 0~255 and not negative)
350A: C8      	        ret     Z               ; yes, we can return (C is clear)
350B: 37      	        scf                     ; set Carry flag to raise error
350C: C9      	        ret                     ; return to caller
              	
350D: AF      	VALIDY: xor     A               ; reset A
350E: B4      	        or      H               ; check if H is 0 (this means that Y is in range 0~255 and not negative)
350F: 2802    	        jr      Z,CNTVALY       ; yes, continue checking
3511: 37      	        scf                     ; no, raise error by setting Carry flag
3512: C9      	        ret                     ; return to caller
3513: 7D      	CNTVALY:ld      A,L
3514: FEC0    	        cp      $C0             ; is Y<192? Carry is set if Y<192
3516: 3F      	        ccf                     ; invert Carry, so Carry=0 means OK, Carry=1 means ERROR
3517: C9      	        ret                     ; return to caller
              	
              	
              	; clear VIDEOBUFF before using it as temp buffer
3518: AF      	CLRVDBF:xor     A               ; clear A
3519: C5      	        push    BC              ; store BC
351A: E5      	        push    HL              ; store HL
351B: 21E381  	        ld      HL,TMPBFR1      ; address of 1st cell
351E: 0606    	        ld      B,$06           ; 6 cells
3520: 77      	RPTCVB1:ld      (HL),A          ; clear cell
3521: 23      	        inc     HL              ; next cell
3522: 10FC    	        djnz    RPTCVB1         ; repeat
3524: 0628    	        ld      B,$28           ; 40 cells
3526: 21EB81  	        ld      HL,VIDEOBUFF    ; address of 1st cell
3529: 77      	RPTCVB2:ld      (HL),A          ; clear cell
352A: 23      	        inc     HL              ; next cell
352B: 10FC    	        djnz    RPTCVB2         ; repeat
352D: E1      	        pop     HL              ; retrieve HL
352E: C1      	        pop     BC              ; retrieve BC
352F: C9      	        ret                     ; return to caller
              	
              	
              	; check if a color is passed as argument with PLOT, DRAW, and CIRCLE
              	; commands. If not present, the default foreground color will be used
3530: 3AE181  	CLRPRM: ld      A,(FRGNDCLR)    ; load foreground color
3533: 32E781  	        ld      (TMPBFR3),A     ; store into temp buffer
3536: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
3537: CD041A  	        call    GETCHR          ; Get next character
353A: C8      	        ret     Z               ; return if nothing follows
353B: CDE117  	        call    CHKSYN          ; Make sure ',' follows
353E: 2C      	        defb    ','
353F: CD0026  	        call    GETINT          ; get value
3542: CD9631  	        call    CHKCLR          ; check if color is in range 1~15
3545: 32E781  	        ld      (TMPBFR3),A     ; store color into temp buffer
3548: C9      	        ret                     ; return to caller
              	
              	
              	; no graphics mode error: raised when a graphics command is invoked
              	; out of graphic 2 mode.
3549: 1E2A    	GMERR:  ld      E,GM            ; load Graphics Mode Error flag
354B: C31115  	        jp      ERROR           ; print error
              	
              	
              	; set a serial port: params are PORT,BPS,DATA,PARITY,STOP
              	; PORT=1/2; BPS=1,200~57,600 (see below), DATA=5/6/7/8
              	; PARITY: 0=no parity; 1=ODD parity; 2=EVEN parity;
              	; STOP=0/1/2/3: 0=0 bit; 1=1 bit; 2=1.5 bits; 3=2 bits
              	; PORT 1 acts as a char device; PORT 2 acts as a block device
81EB:         	PRTNUM  equ     VIDEOBUFF
81EC:         	BPS     equ     VIDEOBUFF+$01
81EE:         	DATABT  equ     BPS+$02
81EF:         	PARBT   equ     DATABT+$01
81F0:         	STPBT   equ     PARBT+$01
81F1:         	SIOBFR  equ     STPBT+$01
354E: CD0026  	SERIAL: call    GETINT          ; get port #
3551: A7      	        and     A               ; is it zero?
3552: CACF1A  	        jp      Z,FCERR         ; yes, error
3555: FE03    	        cp      $03             ; is it 1 or 2?
3557: D22237  	        jp      NC,SCERR        ; no, error
355A: 32EB81  	        ld      (PRTNUM),A      ; store port number into a temp buffer
355D: CDE117  	        call    CHKSYN          ; Make sure ',' follows
3560: 2C      	        defb    ','
3561: CDD41A  	        call    ATOH            ; get bps (returned into DE)
3564: 7A      	        ld      A,D             ; move MSB into A
3565: B3      	        or      E               ; LSB OR MSB, to check if bps=0
3566: 203A    	        jr      NZ,CNTSER       ; no, continue checking
              	        ; if baud rate is 0, then close the serial comm.
3568: 3AEB81  	RSTSER1:ld      A,(PRTNUM)      ; yes, so reset the channel. First, load port number
356B: 3D      	        dec     A               ; subtract 1, so that serial channel is 0=>A and 1=>B
356C: C622    	        add     SIO_CA          ; find correct channel
356E: 4F      	        ld      C,A             ; store serial channel
356F: F3      	        di                      ; disable INTs
3570: AF      	        xor     A               ; reset A
3571: 1601    	        ld      D,$01           ; start from WR1
3573: 0605    	        ld      B,$05           ; 5 registers
3575: ED51    	RPTRSSR:out     (C),D           ; select register
3577: ED79    	        out     (C),A           ; reset register
3579: 14      	        inc     D               ; next register
357A: 10F9    	        djnz    RPTRSSR         ; repeat
357C: 3E30    	        ld      A,%00110000     ; write into WR0: error reset, select WR0
357E: ED79    	        out     (C),A           ; send command to serial channel
3580: 3E18    	        ld      A,%00011000     ; write into WR0: channel reset
3582: ED79    	        out     (C),A           ; send command to serial channel
3584: FB      	        ei                      ; re-enable INTs
3585: E5      	        push    HL              ; store HL
3586: 212282  	        ld      HL,SERIALS_EN   ; serials enabled status byte
3589: DB01    	        in      A,(PIO_DB)      ; read status LEDs
358B: CB41    	        bit     0,C             ; check serial port
358D: 2009    	        jr      NZ,SRPT2        ; if bit is set, jump to port 2
358F: CBB7    	        res     6,A             ; it's port 1
3591: CBA7    	        res     4,A             ; remove possible error LED
3593: CB86    	        res     0,(HL)          ; disable port 1
3595: C39E35  	        jp      SERLED          ; jump over
3598: CBBF    	SRPT2:  res     7,A             ; it's port 2
359A: CBAF    	        res     5,A             ; remove possible error LED
359C: CB8E    	        res     1,(HL)          ; disable port 2
359E: D301    	SERLED: out     (PIO_DB),A      ; send new configuration
35A0: E1      	        pop     HL              ; retrieve HL
35A1: C9      	        ret                     ; return to caller
              	        ; check if bps=1, meaning reactivate RX on serial
35A2: 7A      	CNTSER: ld      A,D
35A3: B2      	        or      D               ; check if bps<>1 by first checking D=0
35A4: 203B    	        jr      NZ,CNTSER2      ; if not, jump over
35A6: 7B      	        ld      A,E             ; then by checking that
35A7: FE01    	        cp      $01             ; E=1
35A9: 2036    	        jr      NZ,CNTSER2      ; if not, jump over
35AB: 3AEB81  	        ld      A,(PRTNUM)      ; load port number
35AE: FE01    	        cp      $01             ; is it port 1? (currently do NOT support on port 2)
35B0: C22237  	        jp      NZ,SCERR        ; no, raise error and exit 
35B3: 57      	        ld      D,A             ; store port on D
35B4: 3A2282  	        ld      A,(SERIALS_EN)  ; load address of serial status cell
35B7: A2      	        and     D               ; check status
35B8: CA2237  	        jp      Z,SCERR         ; port not open, raise error
35BB: F3      	        di                      ; disable INTs
35BC: 7A      	        ld      A,D             ; move port # into A
35BD: 5F      	        ld      E,A             ; store original A into E
35BE: 87      	        add     A
35BF: 87      	        add     A               ; move A to left times 2
35C0: 57      	        ld      D,A             ; move value into D
35C1: 3A2282  	        ld      A,(SERIALS_EN)  ; load serial status byte
35C4: B2      	        or      D               ; re-enable RX
35C5: 322282  	        ld      (SERIALS_EN),A  ; store new serial status
35C8: 7B      	        ld      A,E             ; recover port #
35C9: 3D      	        dec     A               ; check port
35CA: 200A    	        jr      NZ,CNTRX2       ; port is #2
35CC: CD8801  	        call    SIO_A_EI        ; re-enable RX on port 1
35CF: DB01    	        in      A,(PIO_DB)      ; load status LEDs
35D1: CBA7    	        res     4,A             ; remove error LED
35D3: C3DD35  	        jp      RXEND           ; terminate setting
35D6: CD8801  	CNTRX2: call    SIO_A_EI        ; re-enable RX on port 2 -> CURRENTLY only port 1 is supported
35D9: DB01    	        in      A,(PIO_DB)      ; load status LEDs
35DB: CBAF    	        res     5,A             ; remove error LED
35DD: D301    	RXEND:  out     (PIO_DB),A      ; set new status for LEDs
35DF: FB      	        ei                      ; re-enable INTs
35E0: C9      	        ret                     ; return to caller
              	        ; set serial port comm.
35E1: D5      	CNTSER2:push    DE              ; store BPS
35E2: 3AEB81  	        ld      A,(PRTNUM)      ; load port number
35E5: 57      	        ld      D,A             ; move port # into D
35E6: 3A2282  	        ld      A,(SERIALS_EN)  ; check if serial port is already open
35E9: A2      	        and     D               ; by ANDing A with D
35EA: D1      	        pop     DE              ; retrieve BPS
35EB: CAF335  	        jp      Z,CNTSER3       ; not open, continue
35EE: 1E2E    	        ld      E,SA            ; already open, so raise a "Serial Port Already Error"
35F0: C31115  	        jp      ERROR           ; and leave
35F3: E5      	CNTSER3:push    HL              ; store HL   
35F4: 2100E1  	        ld      HL,$E100        ; check bps. start with HL=57,600
35F7: CDB039  	        call    CMP16           ; is bps<=57,600?
35FA: E1      	        pop     HL              ; but first, recover HL
35FB: DA2237  	        jp      C,SCERR         ; no (bps>57,600) then error
35FE: ED53EC81	        ld      (BPS),DE        ; store bps
3602: CDE117  	        call    CHKSYN          ; Make sure ',' follows
3605: 2C      	        defb    ','
3606: CD0026  	        call    GETINT          ; get data bits
3609: FE05    	        cp      $05             ; is it <5?
360B: DA2237  	        jp      C,SCERR         ; yes, error
360E: FE09    	        cp      $09             ; is it >=9?
3610: D2CF1A  	        jp      NC,FCERR        ; no, error
3613: 32EE81  	        ld      (DATABT),A      ; store data bits
3616: CDE117  	        call    CHKSYN          ; Make sure ',' follows
3619: 2C      	        defb    ','
361A: CD0026  	        call    GETINT          ; get parity bits
361D: FE03    	        cp      A,$03           ; check if parity is in range 0~2
361F: D22237  	        jp      NC,SCERR        ; no, error
3622: 32EF81  	        ld      (PARBT),A       ; store parity
3625: CDE117  	        call    CHKSYN          ; Make sure ',' follows
3628: 2C      	        defb    ','
3629: CD0026  	        call    GETINT          ; get stop bits
362C: FE03    	        cp      $03             ; is it >=3?
362E: D22237  	        jp      NC,SCERR        ; yes, error
3631: 32F081  	        ld      (STPBT),A       ; store stop bits
              	        ; check if bps are legal
3634: E5      	        push    HL              ; store HL 
3635: D5      	        push    DE              ; store DE
3636: DDE5    	        push    IX              ; store IX
3638: DD21FD36	        ld      IX,SUP_BPS      ; allowed BPSs
363C: 060B    	        ld      B,$0B           ; 11 items
363E: 0E00    	        ld      C,$00           ; reset pointer
3640: 2AEC81  	CKBPS:  ld      HL,(BPS)        ; load BPS
3643: DD5E00  	        ld      E,(IX+0)        ; load LSB of item
3646: DD5601  	        ld      D,(IX+1)        ; load MSB of item
3649: CDB039  	        call    CMP16           ; is it equal?
364C: CA5936  	        jp      Z,FNDBPS        ; yes, found correspondance
364F: DD23    	        inc     IX
3651: DD23    	        inc     IX              ; no, go to next entry
3653: 0C      	        inc     C               ; increment pointer
3654: 10EA    	        djnz    CKBPS           ; repeat for 10 entries
3656: C31E37  	        jp      SCERR1          ; if nothing found, raise an error
3659: 3AEB81  	FNDBPS: ld      A,(PRTNUM)      ; check serial port
365C: 3D      	        dec     A               ; is it port 1?
365D: CA6336  	        jp      Z,SET_P1        ; yes, set port 1
3660: C31E37  	        jp      SCERR1          ; at the moment, only port 1 can be configured
3663:         	SET_P1: ;init CTC CH0: CH0 provides RX/TX clock to SIO port A
              	        ; TO0 output frequency=INPUT CLK/time constant. Time constant is set to get 16 times
              	        ; the requested baud rate. I.e., if bps is 19,200 then time constast is set to 6 because
              	        ; 1,843,200/6 = 307,200 Hz (that is 19,200 x 16)
3663: F3      	        di                      ; disable INTs
3664: 0600    	        ld      B,$00           ; reset B
3666: 211337  	        ld      HL,CTC_CFG      ; address of first CTC divider
3669: 09      	        add     HL,BC           ; adjust for corret CTC divider
366A: 3E47    	        ld      A,%01000111     ; interrupt off, counter mode, prsc=16 (doesn't matter), ext. start,
              	                                ; start upon loading time constant, time constant follows, sw reset, command word
366C: D310    	        out     (CTC_CH0),A     ; configure CTC channel 0
366E: 7E      	        ld      A,(HL)          ; load CTC divider
366F: D310    	        out     (CTC_CH0),A     ; send divider
              	        ; configure SIO
3671: 21F102  	        ld      HL,SIO_A_SETS   ; load default settings for SIO
3674: 11F181  	        ld      DE,SIOBFR       ; into a temp buffer
3677: 010A00  	        ld      BC,$000A        ; 10 items to copy
367A: EDB0    	        ldir                    ; copy SIO settings into TEMP buffer
367C: 3AF681  	        ld      A,(SIOBFR+5)    ; load WR5 setting
367F: 47      	        ld      B,A             ; move it into B
3680: 3AEE81  	        ld      A,(DATABT)      ; load DATA bits
3683: FE05    	        cp      $05             ; is it 5 bits?
3685: 2006    	        jr      NZ,BITS6        ; no, jump over
3687: CBB0    	        res     6,B
3689: CBA8    	        res     5,B             ; set D6 & D5 to 0
368B: 1819    	        jr      SETPAR          ; jump to set parity
368D: FE06    	BITS6:  cp      $06             ; is it 6 bits?
368F: 2006    	        jr      NZ,BITS7        ; no, jump over
3691: CBF0    	        set     6,B
3693: CBA8    	        res     5,B             ; set D6 & D5 to 1,0
3695: 180F    	        jr      SETPAR          ; jump to set parity
3697: FE07    	BITS7:  cp      $07             ; is it 7 bits?
3699: 2007    	        jr      NZ,BITS8        ; no, jump over
369B: CBB0    	        res     6,B
369D: CBE8    	        set     5,B             ; set D6 & D5 to 0,1
369F: C3A636  	        jp      SETPAR          ; jump to set parity
36A2: CBF0    	BITS8:  set     6,B
36A4: CBE8    	        set     5,B             ; set D6 & D5 to 1,1
36A6: 78      	SETPAR: ld      A,B
36A7: 32F681  	        ld      (SIOBFR+5),A    ; save DATA bits
36AA: E660    	        and     %01100000       ; filter only D5&D6 bits
36AC: 87      	        add     A,A             ; shift left times 1
36AD: 322382  	        ld      (SERABITS),A    ; store for SIO_A_EI & SIO_A_DI functions
36B0: 3AF081  	        ld      A,(STPBT)       ; load STOP bits
36B3: 87      	        add     A,A
36B4: 87      	        add     A,A             ; 2 left shifts
36B5: 47      	        ld      B,A             ; move forming byte into B
36B6: 3AEF81  	        ld      A,(PARBT)       ; load PARITY setting
36B9: A7      	        and     A               ; is it 0?
36BA: CAC536  	        jp      Z,STRPAR        ; yes, jump over
36BD: CBC0    	        set     0,B             ; set PARITY on
36BF: 3D      	        dec     A               ; is parity ODD?
36C0: CAC536  	        jp      Z,STRPAR        ; yes, so jump over
36C3: CBC8    	        set     1,B             ; no, it's EVEN so set the corresponding bit
36C5: 3AF481  	STRPAR: ld      A,(SIOBFR+3)    ; load WR4 setting
36C8: E6F0    	        and     %11110000       ; reset STOP & PARITY bits
36CA: B0      	        or      B               ; set new STOP & PARITY bits
36CB: 32F481  	        ld      (SIOBFR+3),A    ; store new value
              	        ;set up TX and RX:
              	        ; the followings are settings for channel A
36CE: 21F181  	        ld      HL,SIOBFR       ; settings for SIO ch. A
36D1: 0606    	        ld      B,$06           ; 6 bytes to send
36D3: 0E22    	        ld      C,SIO_CA        ; I/O address of SIO ch.A
36D5: EDB3    	        otir                    ; send bytes to SIO
              	        ; the following are settings for channel B (don't need to load HL since settings are contigous)
36D7: 0604    	        ld      B,$04           ; other 4 bytes to send
36D9: 0E23    	        ld      C,SIO_CB        ; I/O address of SIO ch.B
36DB: EDB3    	        otir                    ; send bytes to SIO
              	        ; the following are settings for channel A
36DD: 3E01    	        ld      A,$01           ; write into WR0: select WR1
36DF: D322    	        out     (SIO_CA),A
36E1: 3E18    	        ld      A,%00011000     ; interrupts on every RX char; parity is no special condition;
              	                                ; buffer overrun is special condition
36E3: D322    	        out     (SIO_CA),A
36E5: CD8801  	        call    SIO_A_EI        ; enable RX on SIO channel A
36E8: 212282  	EXITSER:ld      HL,SERIALS_EN
36EB: CBC6    	        set     0,(HL)          ; set serial port 1 status ON
36ED: CBD6    	        set     2,(HL)          ; set serial port 1 RX ON
              	        ; back to normal running
36EF: FB      	        ei                      ; re-enable INTs
36F0: DB01    	        in      A,(PIO_DB)      ; load status LEDs
36F2: CBF7    	        set     6,A             ; set status LED on
36F4: CBA7    	        res     4,A             ; set error LED off
36F6: D301    	        out     (PIO_DB),A      ; send new configuration
36F8: DDE1    	        pop     IX              ; retrieve IX
36FA: D1      	        pop     DE              ; retrieve DE
36FB: E1      	        pop     HL              ; retrieve HL
36FC: C9      	        ret                     ; return to caller
              	
              	; allowed bps (Bauds per second)
36FD: 00E10096	SUP_BPS:defw    57600,38400,28800,19200,14400,9600,4800,3600,2400,1200,600
3701: 8070004B	
3705: 40388025	
3709: C012100E	
370D: 6009B004	
3711: 5802    	
              	; corresponding CTC divider
3713: 02030406	CTC_CFG:defb    2,3,4,6,8,12,24,32,48,96,192
3717: 080C1820	
371B: 3060C0  	
              	
              	; serial configuration error
371E: DDE1    	SCERR1: pop     IX              ; retrieve IX
3720: D1      	        pop     DE              ; retrieve DE
3721: E1      	        pop     HL              ; retrieve HL
3722: 1E2C    	SCERR:  ld      E,SC            ; Serial Configuration Error
3724: C31115  	        jp      ERROR           ; print error
              	
              	; check for direct mode
3727: E5      	DIRMOD: push    HL              ; Save code string address
3728: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line number
372B: 23      	        inc     HL              ; -1 means direct statement
372C: 7C      	        ld      A,H
372D: B5      	        or      L
372E: E1      	        pop     HL              ; Restore code string address
372F: C24937  	        jp      NZ,HLPERR       ; raise error if in indirect mode
3732: C9      	        ret
              	
              	
              	; HELP lists the line program where an error was found
3733: CD2737  	HELP:   call    DIRMOD          ; check if in direct mode
3736: E5      	        push    HL              ; store HL
3737: 2AB180  	        ld      HL,(HLPLN)      ; load HELP line
373A: 23      	        inc     HL              ; increment HL
373B: 7C      	        ld      A,H
373C: B5      	        or      L               ; check if there is a line into the HELP reg.
373D: E1      	        pop     HL
373E: CA4937  	        jp      Z,HLPERR        ; no line found, raise error
3741: ED5BB180	        ld      DE,(HLPLN)      ; recover line
3745: C1      	        pop     BC              ; remove BC from stack since it's not needed anymore for LIST
3746: C36F18  	        jp      LST01H          ; jump to list line
3749: 1E30    	HLPERR: ld      E,HP            ; HELP call error
374B: C31115  	        jp      ERROR           ; raise error
              	
              	
              	; KEY command to list/modify function keys
374E: 2B      	KEY:    dec     HL              ; dec 'cos GETCHR INCs
374F: CD041A  	        call    GETCHR          ; Get next character
3752: CAD237  	        jp      Z,LSTKEYS       ; jump if nothing follows
              	                                ; change FN keys
3755: CD0026  	        call    GETINT          ; get a number
3758: A7      	        and     A               ; is it 0?
3759: 2010    	        jr      NZ,KEYCH        ; no, jump over         
375B: E5      	        push    HL              ; yes - reset FN keys to defaults
375C: D5      	        push    DE              ; store HL & DE
375D: 21ED13  	        ld      HL,DEFFNKS      ; pointer to default FN keys texts
3760: 11B380  	        ld      DE,FNKEYS       ; pointer to destination
3763: 018000  	        ld      BC,$0080        ; 128 chars to be copied
3766: EDB0    	        ldir                    ; restore default texts
3768: D1      	        pop     DE              ; retrieve DE
3769: E1      	        pop     HL              ; retrieve HL
376A: C9      	        ret                     ; return to caller
376B: FE09    	KEYCH:  cp      $09             ; is it >= 9?
376D: D2FD14  	        jp      NC,SNERR        ; yes - syntax error
3770: 3D      	        dec     A               ; FN key in range 0~7
3771: 87      	        add     A,A             ; multiply A...
3772: 87      	        add     A,A             ; ... times 4...
3773: 87      	        add     A,A             ; ... to get the correct...
3774: 87      	        add     A,A             ; ... offset fo FN key text
3775: 32E381  	        ld      (TMPBFR1),A     ; store FN key offset...
3778: AF      	        xor     A               ; ...in a...
3779: 32E481  	        ld      (TMPBFR1+1),A   ; ...16-bit register
377C: CDE117  	        call    CHKSYN          ; Make sure ',' follows
377F: 2C      	        defb    ','
3780: 444D    	        ld      BC,HL           ; copy address into BC
3782: CD8B1E  	        call    EVAL            ; Evaluate expression (in E there is the length)
3785: E5      	        push    HL              ; store string pointer
3786: 3A9281  	        ld      A,(TYPE)        ; Get variable type
3789: B7      	        or      A               ; Is it a string variable?
378A: CAFD14  	        jp      Z,SNERR         ; no - syntax error
378D: CDBB24  	        call    GSTRCU          ; Current string to pool
3790: CDAE2B  	        call    LOADFP          ; Move string block data to (BC=pointer, DE=length)
3793: 7B      	        ld      A,E             ; copy length into A
3794: FE11    	        cp      $11             ; is length > 16?
3796: DA9B37  	        jp      C,DECLN1        ; no, jump over
3799: 1E10    	        ld      E,$10           ; yes, so set length to 16
379B: 3E10    	DECLN1: ld      A,$10           ; calculate how many...
379D: 93      	        sub     E               ; ...null chars needed to fill up...
379E: 57      	        ld      D,A             ; ...the FN key text
379F: C5      	        push    BC              ; store address of string 
37A0: ED4BE381	        ld      BC,(TMPBFR1)    ; load FN key offset
37A4: 21B380  	        ld      HL,FNKEYS       ; load address of FN keys texts
37A7: 09      	        add     HL,BC           ; get corrected address
37A8: C1      	        pop     BC              ; retrieve address of string chars
37A9: 0A      	CPKEY:  ld      A,(BC)          ; load char from string
37AA: FE0D    	        cp      CR              ; return?
37AC: CAB937  	        jp      Z,CPKEY2        ; yes, store char
37AF: FE7B    	        cp      $7B             ; if char > "z" ?
37B1: D2FD14  	        jp      NC,SNERR        ; yes - syntax error
37B4: FE20    	        cp      $20             ; is char < space?
37B6: DAFD14  	        jp      C,SNERR         ; yes - syntax error
37B9: FE61    	CPKEY2: cp      $61             ; is it >= 'a'?
37BB: DAC037  	        jp      C,CPKEY3        ; no, continue
37BE: E65F    	        and     %01011111       ; set letters to uppercase
37C0: 77      	CPKEY3: ld      (HL),A          ; store char
37C1: 23      	        inc     HL              ; next string char
37C2: 03      	        inc     BC              ; next free cell
37C3: 1D      	        dec     E               ; decrement E
37C4: 20E3    	        jr      NZ,CPKEY        ; repeat until 0
37C6: AF      	        xor     A               ; null char
37C7: 14      	        inc     D               ; +1 to decrement below
37C8: 15      	CPKEY1: dec     D               ; how many null chars to insert?
37C9: CAD037  	        jp      Z,CPKYEND       ; no more nulls, so exit
37CC: 77      	        ld      (HL),A          ; store it
37CD: 23      	        inc     HL              ; next cell
37CE: 18F8    	        jr      CPKEY1          ; repeat
37D0: E1      	CPKYEND:pop     HL              ; retrieve pointer to string
37D1: C9      	        ret                     ; return to caller
              	                                ; list FN keys
37D2: E5      	LSTKEYS:push    HL              ; Save code string address
37D3: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line number
37D6: 23      	        inc     HL              ; -1 means direct statement
37D7: 7C      	        ld      A,H
37D8: B5      	        or      L
37D9: E1      	        pop     HL              ; Restore code string address
37DA: C2FD14  	        jp      NZ,SNERR        ; raise error if in indirect mode
37DD: E5      	        push    HL              ; store HL
37DE: D5      	        push    DE              ; store DE
37DF: 21B380  	        ld      HL,FNKEYS       ; load starting address of FN keys text
37E2: 0E01    	        ld      C,$01           ; 8 function keys
37E4: 0610    	PRTK4:  ld      B,$10           ; 16 chars each
37E6: 118538  	PRTK2:  ld      DE,CHKEY1       ; message "KEY "
37E9: CD7638  	        call    PRTCKEY         ; print it
37EC: 79      	        ld      A,C             ; load FN key
37ED: C630    	        add     $30             ; get number in ASCI code
37EF: CDEC17  	        call    OUTC            ; print it
37F2: 118A38  	        ld      DE,CHKEY2       ; message ": ""
37F5: CD7638  	        call    PRTCKEY         ; print it
37F8: 3E01    	        ld      A,$01           ; " opened
37FA: 32E381  	        ld      (TMPBFR1),A
37FD: 7E      	LDKEY:  ld      A,(HL)          ; retrieve char
37FE: A7      	        and     A               ; is it zero?
37FF: CA1238  	        jp      Z,CNTLTK        ; yes, go next char
3802: CD5E38  	        call    OPNQT           ; check if quotes are opened
3805: FE22    	        cp      $22             ; check if char is "?
3807: CA2738  	        jp      Z,PRTCHR        ; yes, print "chr$("
380A: FE0D    	        cp      CR              ; is it a CR?
380C: CA2738  	        jp      Z,PRTCHR        ; yes, print "chr$("
380F: CDEC17  	PRTK3:  call    OUTC            ; no, just print it
3812: 23      	CNTLTK: inc     HL              ; next char
3813: 10E8    	        djnz    LDKEY           ; continue until finished
3815: CD4C38  	        call    CLSQT           ; check if quotes are still open
3818: 3E0D    	        ld      A,CR            ; go next line
381A: CDEC17  	        call    OUTC            ; print it
381D: 0C      	        inc     C               ; next FN key
381E: 79      	        ld      A,C             ; check if...
381F: FE09    	        cp      $09             ; finished keys?
3821: DAE437  	        jp      C,PRTK4         ; no, repeat 1 more time
3824: D1      	        pop     DE              ; retrieve DE
3825: E1      	        pop     HL              ; retrieve HL
3826: C9      	        ret                     ; return to caller
              	
3827: E5      	PRTCHR: push    HL              ; store HL
3828: CD4C38  	        call    CLSQT           ; check if quotes are closed
382B: 3E2B    	        ld      A,'+'           ; '+' char
382D: CDEC17  	        call    OUTC            ; print it
3830: 118E38  	        ld      DE,CHKEY3       ; address of "CHR$("
3833: CD7638  	        call    PRTCKEY         ; print it
3836: E1      	        pop     HL              ; recover HL
3837: 23      	        inc     HL              ; next char
3838: 05      	        dec     B               ; increment char counter
3839: 119438  	        ld      DE,CHKEY4       ; load address of RETURN
383C: 7E      	        ld      A,(HL)          ; load char
383D: FE0D    	        cp      CR              ; is it a RETURN?
383F: 2003    	        jr      NZ,PTCHR1       ; no, jump over
3841: 119738  	        ld      DE,CHKEY5       ; yes, load address of "
3844: CD7638  	PTCHR1: call    PRTCKEY         ; print it
3847: 3E29    	        ld      A,')'           ; char )
3849: C30F38  	        jp      PRTK3           ; continue
              	
384C: F5      	CLSQT:  push    AF              ; store A
384D: 3AE381  	        ld      A,(TMPBFR1)     ; quote status
3850: A7      	        and     A               ; are they closed?
3851: 2809    	        jr      Z,CLSQT1        ; if yes, return
3853: 3E22    	        ld      A,$22           ; no, so close them
3855: CDEC17  	        call    OUTC            ; print "
3858: AF      	        xor     A               ; set quotes
3859: 32E381  	        ld      (TMPBFR1),A     ; as closed
385C: F1      	CLSQT1: pop     AF              ; retrieve A
385D: C9      	        ret                     ; return to caller
              	
385E: F5      	OPNQT:  push    AF              ; store A
385F: 3AE381  	        ld      A,(TMPBFR1)     ; quote status
3862: A7      	        and     A               ; are they open?
3863: 200F    	        jr      NZ,OPNQT1       ; if yes, return
3865: 3E2B    	        ld      A,'+'           ; no, so add '+
3867: CDEC17  	        call    OUTC            ; print it
386A: 3E22    	        ld      A,$22           ; and then open quotes
386C: CDEC17  	        call    OUTC            ; print them
386F: 3E01    	        ld      A,$01           ; set quotes
3871: 32E381  	        ld      (TMPBFR1),A     ; as opened
3874: F1      	OPNQT1: pop     AF              ; retrieve A
3875: C9      	        ret                     ; return to caller
              	
3876: F5      	PRTCKEY:push    AF              ; store original char
3877: 1A      	PRTK1:  ld      A,(DE)          ; load char
3878: A7      	        and     A               ; is it 0?
3879: CA8338  	        jp      Z,PRTEND        ; yes, finished printing
387C: CDEC17  	        call    OUTC            ; no, print char
387F: 13      	        inc     DE              ; next char
3880: C37738  	        jp      PRTK1           ; repeat
3883: F1      	PRTEND: pop     AF              ; retrieve AF
3884: C9      	        ret                     ; return to caller
              	
3885: 4B455920	CHKEY1: defb    "KEY ",0
3889: 00      	
388A: 3A202200	CHKEY2: defb    ": ",34,0
388E: 63687224	CHKEY3: defb    "chr$(",0
3892: 2800    	
3894: 313300  	CHKEY4: defb    "13",0
3897: 333400  	CHKEY5: defb    "34",0
              	
              	
              	; HEX$(nn) Convert 16 bit number to Hexadecimal string
389A: CD7C1E  	HEX: 	call	TSTNUM          ; Verify it's a number
389D: CDBA1A  	        call	DEINT           ; Get integer -32768 to 32767
38A0: C5      	        push	BC              ; Save contents of BC
38A1: 212482  	        ld      HL,PBUFF        ; load address of PBUFF into HL
38A4: 7A      	        ld      A,D             ; Get MSB into A
38A5: B7      	        or      A               ; OR with LSB to see if param=0
38A6: 280C    	        jr      Z,HEX2          ; Skip output if both high digits are zero
38A8: CDD038  	        call    BYT2ASC         ; Convert D to ASCII
38AB: 78      	        ld      A,B             ; cechk if B
38AC: FE30    	        cp      '0'             ; is 0
38AE: 2802    	        jr      Z,HEX1          ; Don't store high digit if zero
38B0: 70      	        ld      (HL),B          ; Store it to PBUFF
38B1: 23      	        inc     HL              ; Next location
38B2: 71      	HEX1:   ld      (HL),C          ; Store C to PBUFF+1
38B3: 23      	        inc     HL              ; Next location
38B4: 7B      	HEX2:   ld      A,E             ; Get lower byte
38B5: CDD038  	        call    BYT2ASC         ; Convert E to ASCII
38B8: 7A      	        ld      A,D
38B9: B7      	        or      A
38BA: 2005    	        jr      NZ,HEX3         ; If upper byte was not zero then always print lower byte
38BC: 78      	        ld      A,B
38BD: FE30    	        cp      '0'             ; If high digit of lower byte is zero then don't print
38BF: 2802    	        jr      Z,HEX4
38C1: 70      	HEX3:   ld      (HL),B          ; to PBUFF+2
38C2: 23      	        inc     HL              ; Next location
38C3: 71      	HEX4:   ld      (HL),C          ; to PBUFF+3
38C4: 23      	        inc     HL              ; PBUFF+4 to zero
38C5: AF      	        xor     A               ; Terminating character
38C6: 77      	        ld      (HL),A          ; Store zero to terminate
38C7: 23      	        inc     HL              ; Make sure PBUFF is terminated
38C8: 77      	        ld      (HL),A          ; Store the double zero there
38C9: C1      	        pop     BC              ; Get BC back
38CA: 212482  	        ld      HL,PBUFF        ; Reset to start of PBUFF
38CD: C30823  	        jp      STR1            ; Convert the PBUFF to a string and return it
38D0: 47      	BYT2ASC	ld      B,A             ; Save original value
38D1: E60F    	        and     $0F             ; Strip off upper nybble
38D3: FE0A    	        cp      $0A             ; 0-9?
38D5: 3802    	        jr      C,ADD30         ; If A-F, add 7 more
38D7: C607    	        add     A,$07           ; Bring value up to ASCII A-F
38D9: C630    	ADD30	add     A,$30           ; And make ASCII
38DB: 4F      	        ld      C,A             ; Save converted char to C
38DC: 78      	        ld      A,B             ; Retrieve original value
38DD: 0F      	        rrca                    ; and Rotate it right
38DE: 0F      	        rrca
38DF: 0F      	        rrca
38E0: 0F      	        rrca
38E1: E60F    	        and     $0F             ; Mask off upper nybble
38E3: FE0A    	        cp      $0A             ; 0-9? < A hex?
38E5: 3802    	        jr      C,ADD301        ; Skip Add 7
38E7: C607    	        add     A,$07           ; Bring it up to ASCII A-F
38E9: C630    	ADD301	add     A,$30           ; And make it full ASCII
38EB: 47      	        ld      B,A             ; Store high order byte
38EC: C9      	        ret
              	
              	; Convert "&Hnnnn" to FPREG
              	; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
              	; Char is in A, NC if char is ;<=>?@ A-z, CY is set if 0-9
38ED: EB      	HEXTFP  ex      DE,HL           ; Move code string pointer to DE
38EE: 210000  	        ld      HL,$0000        ; Zero out the value
38F1: CD0639  	        call    GETHEX          ; Check the number for valid hex
38F4: DA2639  	        jp      C,HXERR         ; First value wasn't hex, HX error
38F7: 1805    	        jr      HEXLP1          ; Convert first character
38F9: CD0639  	HEXLP   call    GETHEX          ; Get second and addtional characters
38FC: 381F    	        jr      C,HEXIT         ; Exit if not a hex character
38FE: 29      	HEXLP1  add     HL,HL           ; Rotate 4 bits to the left
38FF: 29      	        add     HL,HL
3900: 29      	        add     HL,HL
3901: 29      	        add     HL,HL
3902: B5      	        or      L               ; Add in D0-D3 into L
3903: 6F      	        ld      L,A             ; Save new value
3904: 18F3    	        jr      HEXLP           ; And continue until all hex characters are in
              	
3906: 13      	GETHEX  inc     DE              ; Next location
3907: 1A      	        ld      A,(DE)          ; Load character at pointer
3908: FE20    	        cp      SPC
390A: CA0639  	        jp      Z,GETHEX        ; Skip spaces
390D: D630    	        sub     $30             ; Get absolute value
390F: D8      	        ret     C               ; < "0", error
3910: FE0A    	        cp      $0A
3912: 3805    	        jr      C,NOSUB7        ; Is already in the range 0-9
3914: D607    	        sub     $07             ; Reduce to A-F
3916: FE0A    	        cp      $0A             ; Value should be $0A-$0F at this point
3918: D8      	        ret     C               ; CY set if was :            ; < = > ? @
3919: FE10    	NOSUB7  cp      $10             ; > Greater than "F"?
391B: 3F      	        ccf
391C: C9      	        ret                     ; CY set if it wasn't valid hex
              	
391D: EB      	HEXIT   ex      DE,HL           ; Value into DE, Code string into HL
391E: 7A      	        ld      A,D             ; Load DE into AC
391F: 4B      	        ld      C,E             ; For prep to
3920: E5      	        push    HL
3921: CD5922  	        call    ACPASS          ; ACPASS to set AC as integer into FPREG
3924: E1      	        pop     HL
3925: C9      	        ret
              	
3926: 1E26    	HXERR:  ld      E,HX            ; ?HEX Error
3928: C31115  	        jp      ERROR
              	
              	; BIN$(NN) Convert integer to a 1-16 char binary string
392B: CD7C1E  	BIN:    call    TSTNUM          ; Verify it's a number
392E: CDBA1A  	        call    DEINT           ; Get integer -32768 to 32767
3931: C5      	BIN2:   push    BC              ; Save contents of BC
3932: 212482  	        ld      HL,PBUFF
3935: 0611    	        ld      B,$11           ; One higher than max char count (16+1)
3937:         	ZEROSUP:                        ; Suppress leading zeros
3937: 05      	        dec     B               ; Max 16 chars
3938: 78      	        ld      A,B
3939: FE01    	        cp      $01
393B: 2808    	        jr      Z,BITOUT        ; Always output at least one character
393D: CB13    	        rl      E
393F: CB12    	        rl      D
3941: 30F4    	        jr      NC,ZEROSUP
3943: 1804    	        jr      BITOUT2
3945: CB13    	BITOUT: rl      E
3947: CB12    	        rl      D               ; Top bit now in carry
3949: 3E30    	BITOUT2:ld      A,'0'           ; Char for '0'
394B: CE00    	        adc     A,$00           ; If carry set then '0' --> '1'
394D: 77      	        ld      (HL),A
394E: 23      	        inc     HL
394F: 05      	        dec     B
3950: 20F3    	        jr      NZ,BITOUT
3952: AF      	        xor     A               ; Terminating character
3953: 77      	        ld      (HL),A          ; Store zero to terminate
3954: 23      	        inc     HL              ; Make sure PBUFF is terminated
3955: 77      	        ld      (HL),A          ; Store the double zero there
3956: C1      	        pop     BC
3957: 212482  	        ld      HL,PBUFF
395A: C30823  	        jp      STR1
              	
              	; Convert "&Bnnnn" to FPREG
              	; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
395D: EB      	BINTFP: ex      DE,HL           ; Move code string pointer to DE
395E: 210000  	        ld      HL,$0000        ; Zero out the value
3961: CD7A39  	        call    CHKBIN          ; Check the number for valid bin
3964: DA8839  	        jp      C,BINERR        ; First value wasn't bin, HX error
3967: D630    	BINIT:  sub     '0'
3969: 29      	        add     HL,HL           ; Rotate HL left
396A: B5      	        or      L
396B: 6F      	        ld      L,A
396C: CD7A39  	        call    CHKBIN          ; Get second and addtional characters
396F: 30F6    	        jr      NC,BINIT        ; Process if a bin character
3971: EB      	        ex      DE,HL           ; Value into DE, Code string into HL
3972: 7A      	        ld      A,D             ; Load DE into AC
3973: 4B      	        ld      C,E             ; For prep to
3974: E5      	        push    HL
3975: CD5922  	        call    ACPASS          ; ACPASS to set AC as integer into FPREG
3978: E1      	        pop     HL
3979: C9      	        ret
              	
              	; Char is in A, NC if char is 0 or 1
397A: 13      	CHKBIN: inc     DE
397B: 1A      	        ld      A,(DE)
397C: FE20    	        cp      SPC
397E: CA7A39  	        jp      Z,CHKBIN        ; Skip spaces
3981: FE30    	        cp      '0'             ; Set C if < '0'
3983: D8      	        ret     C
3984: FE32    	        cp      '2'
3986: 3F      	        ccf                     ; Set C if > '1'
3987: C9      	        ret
              	
3988: 1E28    	BINERR: ld      E,BN            ; ?BIN Error
398A: C31115  	        jp      ERROR
              	
              	
398D: C30800  	MONOUT: jp      $0008           ; output a char
              	
              	
3990: 3A2282  	RESET:  ld      A,(SERIALS_EN)
3993: E601    	        and     $01             ; is serial port #1 open?
3995: C46835  	        call    NZ,RSTSER1      ; yes, reset serial 1
3998: C30000  	        jp      $0000           ; Restart
              	
              	
399B: 3E00    	INITST: ld      A,$00           ; Clear break flag
399D: 32A980  	        ld      (BRKFLG),A
39A0: C3BB0E  	        jp      INIT
              	
              	
39A3: F5      	TSTBIT: push    AF              ; Save bit mask
39A4: A0      	        and     B               ; Get common bits
39A5: C1      	        pop     BC              ; Restore bit mask
39A6: B8      	        cp      B               ; Same bit set?
39A7: 3E00    	        ld      A,$00           ; Return 0 in A
39A9: C9      	        ret
              	
39AA: CDEC17  	OUTNCR: call    OUTC            ; Output character in A
39AD: C3BD1C  	        jp      PRNTCRLF        ; Output CRLF
              	; ------------------------------------------------------------------------------
              	; LM80C - UTILITY ROUTINES - R1.1
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. More info at
              	; www DOT leonardomiliani DOT com
              	;
              	; *ALS are routines from "Z80 Assembly Language Subroutines" by Lance
              	; A. Leventhal and Winthrop Saville - Ed. Osborne/McGraw-Hill (1983)
              	;
              	; * WKT are routines from WikiTI:
              	; http://wikiti.brandonw.net/index.php?title=WikiTI_Home
              	;
              	; * LAC are routines from Learn@Cemetch
              	; https://learn.cemetech.net/index.php/Main_Page
              	;
              	; ------------------------------------------------------------------------------
              	; Code Revision:
              	; R1.0 - 20200110 - First release: 16-bit comparision/multiplication/negation
              	; R1.1 - 20200413 - Second release: added ABS(HL) 
              	;
              	; ------------------------------------------------------------------------------
              	
              	; compare two 16-bit registers, HL (minuend) and DE (subtrahend)
              	; values can be both signed or unsigned words
              	; inputs: HL, DE
              	; destroys: A,F,HL
              	; returns: if both registers are 2's complement, use Z and S flags;
              	; otherwise:
              	; if HL=DE: Z,P,NC  - Z=1, S=0; C=0
              	; if HL>DE: NZ,P,NC - Z=0, S=0; C=0
              	; if HL<DE: NZ,M,C  - Z=0, S=1; C=1
              	; Source: ALS
              	
39B0: B7      	CMP16:  or      A           ; clear CARRY
39B1: ED52    	        sbc     HL,DE       ; subtract DE from HL
39B3: E0      	        ret     PO          ; return if no overflow
39B4: 7C      	        ld      A,H         ; overflow - invert SIGN flag
39B5: 1F      	        rra                 ; save CARRY flag in bit 7
39B6: EE40    	        xor     %01000000   ; complement bit 6 (SIGN bit)
39B8: 37      	        scf                 ; ensure a Non-Zero result
39B9: 8F      	        adc     A,A         ; restore CARRY, complemented SIGN
              	                            ; ZERO flag = 0 for sure
39BA: C9      	        ret                 ; return
              	
              	; ----------------------------------------------------------------------
              	
              	; multiply 2 signed/unsigned 16-bit words and return a 16-bit
              	; signed/unsigned product
              	; inputs: HL (multiplicand); DE (multiplier)
              	; destroys: A,F
              	; returns: HL (product)
              	; Source: ALS
              	
              	; initialize partial product, bit count
39BB: C5      	MUL16:  push    BC
39BC: 4D      	        ld      C,L         ; BC = multiplier
39BD: 44      	        ld      B,H
39BE: 210000  	        ld      HL,0        ; product = 0
39C1: 3E0F    	        ld      A,$0F       ; count = bit lenght - 1 (16-1)
              	        ; shift-and-add algorithm
              	        ; if MSB of multiplier is 1, add multiplicand to partial product
              	        ; shift partial product, multiplier left 1 bit
39C3: CB23    	MLP:    sla     E           ; shift multiplier left 1 bit
39C5: CB12    	        rl      D
39C7: 3001    	        jr      NC,MLP1     ; jump if MSB of multiplier = 0
39C9: 09      	        add     HL,BC       ; add multiplicand to partial product
39CA: 29      	MLP1:   add     HL,HL       ; shift partial product left
39CB: 3D      	        dec     A
39CC: 20F5    	        jr      NZ,MLP      ; continue until count = 0
              	        ; add multiplicand one last time if MSB of multiplier is 1
39CE: B2      	        or      D           ; sign flag = MSB of multiplier
39CF: F2D339  	        jp      P,EXMUL16   ; exit if MSB of multiplier is 0
39D2: 09      	        add     HL,BC       ; add multiplicand to product
39D3: C1      	EXMUL16:pop     BC
39D4: C9      	        ret
              	
              	; ----------------------------------------------------------------------
              	; absolute value of HL (same applies to other 16-bit register pairs)
              	; also, invert value of HL (or any other 16-bit register, just adjust the code)
              	;
              	; inputs: HL
              	; destroys: A
              	; operation: ABS(HL)
              	; returns: HL with no sign or negated
              	; Source: WKT
              	
39D5: CB7C    	absHL:  bit     7,H
39D7: C8      	        ret     Z
39D8: AF      	negHL:  xor     A
39D9: 95      	        sub     L
39DA: 6F      	        ld      L,A
39DB: 9F      	        sbc     A,A
39DC: 94      	        sub     H
39DD: 67      	        ld      H,A
39DE: C9      	        ret
              	
              	; ------------------------------------------------------------------------------
              	
              	; 8/8 division
              	; INPUT: D (dividend), E (divisor)
              	; OPERATION: D/E
              	; OUTPUT: D (quotient), A (remainder)
39DF: AF      	DIV_8_8:    xor     A
39E0: C5      	            push    BC
39E1: 0608    	            ld      B,08h
39E3: CB22    	DIV_8_8LOOP:sla     D
39E5: 17      	            rla
39E6: BB      	            cp      E
39E7: 3802    	            jr      C,$+4
39E9: 93      	            sub     E
39EA: 14      	            inc     D
39EB: 10F6    	            djnz    DIV_8_8LOOP
39ED: C1      	            pop     BC
39EE: C9      	            ret
              	
              	; ----------------------------------------------------------------------
              	; divide a 16-bit number by an 8-bit number
              	; (16/8 division)
              	;
              	; inputs: HL (Dividend), C (divisor)
              	; destroys: A
              	; OPERATION: HL/C
              	; returns: HL (quotient), A (remainder)
              	; source: WKT
              	
39EF: AF      	DIV_16_8:   xor     A
39F0: 0610    	            ld      B,16
39F2: 29      	DIV_16_8LP: add     HL,HL
39F3: 17      	            rla
39F4: 3803    	            jr      C,$+5
39F6: B9      	            cp      C
39F7: 3802    	            jr      C,$+4
39F9: 91      	            sub     C
39FA: 2C      	            inc     L
39FB: 10F5    	            djnz    DIV_16_8LP
39FD: C9      	            ret; ------------------------------------------------------------------------------
              	; LM80C - 6x8 CHARSET - R1.4
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. More info at
              	; www DOT leonardomiliani DOT com
              	; ------------------------------------------------------------------------------
              	; Code Revision:
              	; R1.0 - 20190511 - First revision: ASCII chars (from 0 to 127)
              	; R1.1 - 20190521 - Expanded to 255 chars
              	; R1.2 - 20191209 - Start adding graphic chars to be coherent with 8x8 fonts
              	; R1.3 - 20191226 - Added extended char codes (128-255)
              	; R1.4 - 20200228 - adopted more usual hexadecimal & binary prefixes
              	; ------------------------------------------------------------------------------
              	;
              	;-------------------------------------------------------------------------------
              	;
              	;               6 x 8    C  H  A  R  S  E  T
              	;
              	;-------------------------------------------------------------------------------
              	;
              	;       6X8 CHARS, DESIGNED FOR TEXT BUT USABLE IN GRAPHICS 1 MODE TOO
              	;       UPDATE: NOW GRAPHICS 1 MODE HAS ITS OWN CHAR SET
              	
39FE:         	CHRST68 equ $
39FE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
3A02: 00000000	
3A06: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
3A0A: 00000000	
3A0E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
3A12: 00000000	
3A16: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
3A1A: 00000000	
3A1E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
3A22: 00000000	
3A26: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
3A2A: 00000000	
3A2E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
3A32: 00000000	
3A36: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
3A3A: 00000000	
3A3E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
3A42: 00000000	
3A46: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
3A4A: 00000000	
3A4E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
3A52: 00000000	
3A56: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 
3A5A: 00000000	
3A5E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
3A62: 00000000	
3A66: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
3A6A: 00000000	
3A6E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
3A72: 00000000	
3A76: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
3A7A: 00000000	
3A7E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
3A82: 00000000	
3A86: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
3A8A: 00000000	
3A8E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
3A92: 00000000	
3A96: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
3A9A: 00000000	
3A9E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
3AA2: 00000000	
3AA6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
3AAA: 00000000	
3AAE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
3AB2: 00000000	
3AB6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
3ABA: 00000000	
3ABE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
3AC2: 00000000	
3AC6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
3ACA: 00000000	
3ACE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
3AD2: 00000000	
3AD6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
3ADA: 00000000	
3ADE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
3AE2: 00000000	
3AE6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
3AEA: 00000000	
3AEE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
3AF2: 00000000	
3AF6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
3AFA: 00000000	
3AFE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32: space
3B02: 00000000	
3B06: 20202020	        defb $20,$20,$20,$20,$20,$00,$20,$00 ; char 33: !
3B0A: 20002000	
3B0E: 50500000	        defb $50,$50,$00,$00,$00,$00,$00,$00 ; char 34: "
3B12: 00000000	
3B16: 5050F850	        defb $50,$50,$f8,$50,$f8,$50,$50,$00 ; char 35: #
3B1A: F8505000	
3B1E: 2078A070	        defb $20,$78,$a0,$70,$28,$f0,$20,$00 ; char 36: $
3B22: 28F02000	
3B26: C0C81020	        defb $c0,$c8,$10,$20,$40,$98,$18,$00 ; char 37: %
3B2A: 40981800	
3B2E: 6090A040	        defb $60,$90,$a0,$40,$a8,$90,$68,$00 ; char 38: &
3B32: A8906800	
3B36: 60204000	        defb $60,$20,$40,$00,$00,$00,$00,$00 ; char 39: '
3B3A: 00000000	
3B3E: 10204040	        defb $10,$20,$40,$40,$40,$20,$10,$00 ; char 40: (
3B42: 40201000	
3B46: 40201010	        defb $40,$20,$10,$10,$10,$20,$40,$00 ; char 41: )
3B4A: 10204000	
3B4E: 0020A870	        defb $00,$20,$a8,$70,$a8,$20,$00,$00 ; char 42: *
3B52: A8200000	
3B56: 002020F8	        defb $00,$20,$20,$f8,$20,$20,$00,$00 ; char 43: +
3B5A: 20200000	
3B5E: 00000000	        defb $00,$00,$00,$00,$60,$20,$40,$00 ; char 44: ,
3B62: 60204000	
3B66: 000000F8	        defb $00,$00,$00,$f8,$00,$00,$00,$00 ; char 45: -
3B6A: 00000000	
3B6E: 00000000	        defb $00,$00,$00,$00,$00,$60,$60,$00 ; char 46: .
3B72: 00606000	
3B76: 00081020	        defb $00,$08,$10,$20,$40,$80,$00,$00 ; char 47: /
3B7A: 40800000	
3B7E: 708898A8	        defb $70,$88,$98,$a8,$c8,$88,$70,$00 ; char 48: 0
3B82: C8887000	
3B86: 20602020	        defb $20,$60,$20,$20,$20,$20,$70,$00 ; char 49: 1
3B8A: 20207000	
3B8E: 70880810	        defb $70,$88,$08,$10,$20,$40,$f8,$00 ; char 50: 2
3B92: 2040F800	
3B96: F8102010	        defb $f8,$10,$20,$10,$08,$88,$70,$00 ; char 51: 3
3B9A: 08887000	
3B9E: 10305090	        defb $10,$30,$50,$90,$f8,$10,$10,$00 ; char 52: 4
3BA2: F8101000	
3BA6: F880F008	        defb $f8,$80,$f0,$08,$08,$88,$70,$00 ; char 53: 5
3BAA: 08887000	
3BAE: 304080F8	        defb $30,$40,$80,$f8,$88,$88,$70,$00 ; char 54: 6
3BB2: 88887000	
3BB6: F8081020	        defb $f8,$08,$10,$20,$40,$40,$40,$00 ; char 55: 7
3BBA: 40404000	
3BBE: 70888870	        defb $70,$88,$88,$70,$88,$88,$70,$00 ; char 56: 8
3BC2: 88887000	
3BC6: 70888878	        defb $70,$88,$88,$78,$08,$10,$60,$00 ; char 57: 9
3BCA: 08106000	
3BCE: 00303000	        defb $00,$30,$30,$00,$30,$30,$00,$00 ; char 58: :
3BD2: 30300000	
3BD6: 00303000	        defb $00,$30,$30,$00,$30,$10,$20,$00 ; char 59: ;
3BDA: 30102000	
3BDE: 10204080	        defb $10,$20,$40,$80,$40,$20,$10,$00 ; char 60: <
3BE2: 40201000	
3BE6: 0000F800	        defb $00,$00,$f8,$00,$f8,$00,$00,$00 ; char 61: =
3BEA: F8000000	
3BEE: 40201008	        defb $40,$20,$10,$08,$10,$20,$40,$00 ; char 62: >
3BF2: 10204000	
3BF6: 70880810	        defb $70,$88,$08,$10,$20,$00,$20,$00 ; char 63: ?
3BFA: 20002000	
3BFE: 70880868	        defb $70,$88,$08,$68,$a8,$a8,$70,$00 ; char 64: @
3C02: A8A87000	
3C06: 70888888	        defb $70,$88,$88,$88,$f8,$88,$88,$00 ; char 65: A
3C0A: F8888800	
3C0E: F08888F0	        defb $f0,$88,$88,$f0,$88,$88,$f0,$00 ; char 66: B
3C12: 8888F000	
3C16: 70888080	        defb $70,$88,$80,$80,$80,$88,$70,$00 ; char 67: C
3C1A: 80887000	
3C1E: E0908888	        defb $e0,$90,$88,$88,$88,$90,$e0,$00 ; char 68: D
3C22: 8890E000	
3C26: F88080F0	        defb $f8,$80,$80,$f0,$80,$80,$f8,$00 ; char 69: E
3C2A: 8080F800	
3C2E: F88080F0	        defb $f8,$80,$80,$f0,$80,$80,$80,$00 ; char 70: F
3C32: 80808000	
3C36: 708880B8	        defb $70,$88,$80,$b8,$88,$88,$78,$00 ; char 71: G
3C3A: 88887800	
3C3E: 888888F8	        defb $88,$88,$88,$f8,$88,$88,$88,$00 ; char 72: H
3C42: 88888800	
3C46: 70202020	        defb $70,$20,$20,$20,$20,$20,$70,$00 ; char 73: I
3C4A: 20207000	
3C4E: 38101010	        defb $38,$10,$10,$10,$10,$90,$60,$00 ; char 74: J
3C52: 10906000	
3C56: 8890A0C0	        defb $88,$90,$a0,$c0,$a0,$90,$88,$00 ; char 75: K
3C5A: A0908800	
3C5E: 80808080	        defb $80,$80,$80,$80,$80,$80,$f8,$00 ; char 76: L
3C62: 8080F800	
3C66: 88D8A8A8	        defb $88,$d8,$a8,$a8,$88,$88,$88,$00 ; char 77: M
3C6A: 88888800	
3C6E: 88C8A898	        defb $88,$c8,$a8,$98,$88,$88,$88,$00 ; char 78: N
3C72: 88888800	
3C76: 70888888	        defb $70,$88,$88,$88,$88,$88,$70,$00 ; char 79: O
3C7A: 88887000	
3C7E: F08888F0	        defb $f0,$88,$88,$f0,$80,$80,$80,$00 ; char 80: P
3C82: 80808000	
3C86: 70888888	        defb $70,$88,$88,$88,$a8,$90,$68,$00 ; char 81: Q
3C8A: A8906800	
3C8E: F08888F0	        defb $f0,$88,$88,$f0,$a0,$90,$88,$00 ; char 82: R
3C92: A0908800	
3C96: 78808070	        defb $78,$80,$80,$70,$08,$08,$f0,$00 ; char 83: S
3C9A: 0808F000	
3C9E: F8202020	        defb $f8,$20,$20,$20,$20,$20,$20,$00 ; char 84: T
3CA2: 20202000	
3CA6: 88888888	        defb $88,$88,$88,$88,$88,$88,$70,$00 ; char 85: U
3CAA: 88887000	
3CAE: 88888888	        defb $88,$88,$88,$88,$88,$50,$20,$00 ; char 86: V
3CB2: 88502000	
3CB6: 88888888	        defb $88,$88,$88,$88,$a8,$a8,$50,$00 ; char 87: W
3CBA: A8A85000	
3CBE: 88885020	        defb $88,$88,$50,$20,$50,$88,$88,$00 ; char 88: X
3CC2: 50888800	
3CC6: 88888850	        defb $88,$88,$88,$50,$20,$20,$20,$00 ; char 89: Y
3CCA: 20202000	
3CCE: F8081020	        defb $f8,$08,$10,$20,$40,$80,$f8,$00 ; char 90: Z
3CD2: 4080F800	
3CD6: 70404040	        defb $70,$40,$40,$40,$40,$40,$70,$00 ; char 91: [
3CDA: 40407000	
3CDE: 00804020	        defb $00,$80,$40,$20,$10,$08,$00,$00 ; char 92: \
3CE2: 10080000	
3CE6: 70101010	        defb $70,$10,$10,$10,$10,$10,$70,$00 ; char 93: ]
3CEA: 10107000	
3CEE: 20508800	        defb $20,$50,$88,$00,$00,$00,$00,$00 ; char 94: ^
3CF2: 00000000	
3CF6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$FC ; char 95: _ (underscore)
3CFA: 000000FC	
3CFE: 40201000	        defb $40,$20,$10,$00,$00,$00,$00,$00 ; char 96: `
3D02: 00000000	
3D06: 00007008	        defb $00,$00,$70,$08,$78,$88,$78,$00 ; char 97: a
3D0A: 78887800	
3D0E: 808080B0	        defb $80,$80,$80,$b0,$c8,$88,$f0,$00 ; char 98: b
3D12: C888F000	
3D16: 00007080	        defb $00,$00,$70,$80,$80,$88,$70,$00 ; char 99: c
3D1A: 80887000	
3D1E: 08080868	        defb $08,$08,$08,$68,$98,$88,$78,$00 ; char 100: d
3D22: 98887800	
3D26: 00007088	        defb $00,$00,$70,$88,$f8,$80,$70,$00 ; char 101: e
3D2A: F8807000	
3D2E: 304840E0	        defb $30,$48,$40,$e0,$40,$40,$40,$00 ; char 102: f
3D32: 40404000	
3D36: 00007888	        defb $00,$00,$78,$88,$78,$08,$70,$00 ; char 103: g
3D3A: 78087000	
3D3E: 8080B0C8	        defb $80,$80,$b0,$c8,$88,$88,$88,$00 ; char 104: h
3D42: 88888800	
3D46: 00200020	        defb $00,$20,$00,$20,$20,$20,$20,$00 ; char 105: i
3D4A: 20202000	
3D4E: 00100030	        defb $00,$10,$00,$30,$10,$90,$60,$00 ; char 106: j
3D52: 10906000	
3D56: 808090A0	        defb $80,$80,$90,$a0,$c0,$a0,$90,$00 ; char 107: k
3D5A: C0A09000	
3D5E: 60202020	        defb $60,$20,$20,$20,$20,$20,$70,$00 ; char 108: l
3D62: 20207000	
3D66: 0000D0A8	        defb $00,$00,$d0,$a8,$a8,$88,$88,$00 ; char 109: m
3D6A: A8888800	
3D6E: 0000B0C8	        defb $00,$00,$b0,$c8,$88,$88,$88,$00 ; char 110: n
3D72: 88888800	
3D76: 00007088	        defb $00,$00,$70,$88,$88,$88,$70,$00 ; char 111: o
3D7A: 88887000	
3D7E: 0000F088	        defb $00,$00,$f0,$88,$f0,$80,$80,$00 ; char 112: p
3D82: F0808000	
3D86: 00007888	        defb $00,$00,$78,$88,$78,$08,$08,$00 ; char 113: q
3D8A: 78080800	
3D8E: 0000B0C8	        defb $00,$00,$b0,$c8,$80,$80,$80,$00 ; char 114: r
3D92: 80808000	
3D96: 00007080	        defb $00,$00,$70,$80,$70,$08,$f0,$00 ; char 115: s
3D9A: 7008F000	
3D9E: 4040E040	        defb $40,$40,$e0,$40,$40,$48,$30,$00 ; char 116: t
3DA2: 40483000	
3DA6: 00008888	        defb $00,$00,$88,$88,$88,$98,$68,$00 ; char 117: u
3DAA: 88986800	
3DAE: 00008888	        defb $00,$00,$88,$88,$88,$50,$20,$00 ; char 118: v
3DB2: 88502000	
3DB6: 00008888	        defb $00,$00,$88,$88,$a8,$a8,$50,$00 ; char 119: w
3DBA: A8A85000	
3DBE: 00008850	        defb $00,$00,$88,$50,$20,$50,$88,$00 ; char 120: x
3DC2: 20508800	
3DC6: 00008898	        defb $00,$00,$88,$98,$68,$08,$70,$00 ; char 121: y
3DCA: 68087000	
3DCE: 0000F810	        defb $00,$00,$f8,$10,$20,$40,$f8,$00 ; char 122: z
3DD2: 2040F800	
3DD6: 10202040	        defb $10,$20,$20,$40,$20,$20,$10,$00 ; char 123: {
3DDA: 20201000	
3DDE: 20202020	        defb $20,$20,$20,$20,$20,$20,$20,$00 ; char 124: |
3DE2: 20202000	
3DE6: 20101008	        defb $20,$10,$10,$08,$10,$10,$20,$00 ; char 125: }
3DEA: 10102000	
3DEE: 00285000	        defb $00,$28,$50,$00,$00,$00,$00,$00 ; char 126: ~
3DF2: 00000000	
3DF6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 127: (delete) - here end the standard ASCII (0-127)
3DFA: 00000000	
3DFE: 7884CC84	        defb %01111000,%10000100,%11001100,%10000100,%10110100,%10000100,%01111000,%00000000 ; char 128 (open face)
3E02: B4847800	
3E06: 78FCB4FC	        defb %01111000,%11111100,%10110100,%11111100,%10110100,%11001100,%01111000,%00000000 ; char 129 (full face)
3E0A: B4CC7800	
3E0E: 48FCFCFC	        defb %01001000,%11111100,%11111100,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 130 (hearts)
3E12: FC783000	
3E16: 002070F8	        defb %00000000,%00100000,%01110000,%11111000,%11111000,%01110000,%00100000,%00000000 ; char 131 (diamonds)
3E1A: F8702000	
3E1E: 7020A8F8	        defb %01110000,%00100000,%10101000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 132 (clubs)
3E22: A8207000	
3E26: 2070F8F8	        defb %00100000,%01110000,%11111000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 133 (spades)
3E2A: A8207000	
3E2E: 303030FC	        defb %00110000,%00110000,%00110000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 134 
3E32: FC303030	
3E36: 0000003C	        defb %00000000,%00000000,%00000000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 135 
3E3A: 3C303030	
3E3E: 000000F0	        defb %00000000,%00000000,%00000000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 136 
3E42: F0303030	
3E46: 303030F0	        defb %00110000,%00110000,%00110000,%11110000,%11110000,%00000000,%00000000,%00000000 ; char 137 
3E4A: F0000000	
3E4E: 3030303C	        defb %00110000,%00110000,%00110000,%00111100,%00111100,%00000000,%00000000,%00000000 ; char 138 
3E52: 3C000000	
3E56: 303030FC	        defb %00110000,%00110000,%00110000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 139 
3E5A: FC000000	
3E5E: 3030303C	        defb %00110000,%00110000,%00110000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 140 
3E62: 3C303030	
3E66: 000000FC	        defb %00000000,%00000000,%00000000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 141 
3E6A: FC303030	
3E6E: 303030F0	        defb %00110000,%00110000,%00110000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 142 
3E72: F0303030	
3E76: 000000FC	        defb %00000000,%00000000,%00000000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 143 
3E7A: FC000000	
3E7E: 30303030	        defb %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000 ; char 144 
3E82: 30303030	
3E86: 0C1C1838	        defb %00001100,%00011100,%00011000,%00111000,%01110000,%01100000,%11100000,%11000000 ; char 145 
3E8A: 7060E0C0	
3E8E: C0E06070	        defb %11000000,%11100000,%01100000,%01110000,%00111000,%00011000,%00011100,%00001100 ; char 146 
3E92: 38181C0C	
3E96: CCCC7830	        defb %11001100,%11001100,%01111000,%00110000,%00110000,%01111000,%11001100,%11001100 ; char 147 
3E9A: 3078CCCC	
3E9E: 202020FC	        defb %00100000,%00100000,%00100000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 148 
3EA2: 20202020	
3EA6: 0000003C	        defb %00000000,%00000000,%00000000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 149 
3EAA: 20202020	
3EAE: 000000E0	        defb %00000000,%00000000,%00000000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 150 
3EB2: 20202020	
3EB6: 202020E0	        defb %00100000,%00100000,%00100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 151 
3EBA: 00000000	
3EBE: 2020203C	        defb %00100000,%00100000,%00100000,%00111100,%00000000,%00000000,%00000000,%00000000 ; char 152 
3EC2: 00000000	
3EC6: 202020FC	        defb %00100000,%00100000,%00100000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 153 
3ECA: 00000000	
3ECE: 2020203C	        defb %00100000,%00100000,%00100000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 154 
3ED2: 20202020	
3ED6: 000000FC	        defb %00000000,%00000000,%00000000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 155 
3EDA: 20202020	
3EDE: 202020E0	        defb %00100000,%00100000,%00100000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 156 
3EE2: 20202020	
3EE6: 000000FC	        defb %00000000,%00000000,%00000000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 157 
3EEA: 00000000	
3EEE: 20202020	        defb %00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000 ; char 158 
3EF2: 20202020	
3EF6: 04080810	        defb %00000100,%00001000,%00001000,%00010000,%00100000,%01000000,%01000000,%10000000 ; char 159 
3EFA: 20404080	
3EFE: 80404020	        defb %10000000,%01000000,%01000000,%00100000,%00010000,%00001000,%00001000,%00000100 ; char 160 
3F02: 10080804	
3F06: 84484830	        defb %10000100,%01001000,%01001000,%00110000,%00110000,%01001000,%01001000,%10000100 ; char 161 
3F0A: 30484884	
3F0E: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 162 
3F12: 0000FCFC	
3F16: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100 ; char 163 
3F1A: FCFCFCFC	
3F1E: 0000FCFC	        defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 164 
3F22: FCFCFCFC	
3F26: FCFC0000	        defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165 
3F2A: 00000000	
3F2E: FCFCFCFC	        defb %11111100,%11111100,%11111100,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 166 
3F32: 00000000	
3F36: FCFCFCFC	        defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 167 
3F3A: FCFC0000	
3F3E: 80808080	        defb %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000 ; char 168 
3F42: 80808080	
3F46: E0E0E0E0	        defb %11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000 ; char 169 
3F4A: E0E0E0E0	
3F4E: F8F8F8F8	        defb %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000 ; char 170 
3F52: F8F8F8F8	
3F56: 04040404	        defb %00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100 ; char 171 
3F5A: 04040404	
3F5E: 1C1C1C1C	        defb %00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100 ; char 172 
3F62: 1C1C1C1C	
3F66: 7C7C7C7C	        defb %01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100 ; char 173 
3F6A: 7C7C7C7C	
3F6E: FC848484	        defb %11111100,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 174 
3F72: 848484FC	
3F76: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%11100000,%11100000,%11100000,%11100000 ; char 175 
3F7A: E0E0E0E0	
3F7E: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00011100,%00011100,%00011100,%00011100 ; char 176 
3F82: 1C1C1C1C	
3F86: 1C1C1C1C	        defb %00011100,%00011100,%00011100,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 177 
3F8A: 00000000	
3F8E: E0E0E0E0	        defb %11100000,%11100000,%11100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 178 
3F92: 00000000	
3F96: E0E0E0E0	        defb %11100000,%11100000,%11100000,%11100000,%00011100,%00011100,%00011100,%00011100 ; char 179 
3F9A: 1C1C1C1C	
3F9E: 1C1C1C1C	        defb %00011100,%00011100,%00011100,%00011100,%11100000,%11100000,%11100000,%11100000 ; char 180 
3FA2: E0E0E0E0	
3FA6: 78787878	        defb %01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000 ; char 181 
3FAA: 78787878	
3FAE: CCCCCCCC	        defb %11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100 ; char 182 
3FB2: CCCCCCCC	
3FB6: FCFC0000	        defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 183 
3FBA: 0000FCFC	
3FBE: 0000FCFC	        defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 184 
3FC2: FCFC0000	
3FC6: 3030CCCC	        defb %00110000,%00110000,%11001100,%11001100,%00110000,%00110000,%11001100,%11001100 ; char 185 
3FCA: 3030CCCC	
3FCE: 54A854A8	        defb %01010100,%10101000,%01010100,%10101000,%01010100,%10101000,%01010100,%10101000 ; char 186 
3FD2: 54A854A8	
3FD6: 643098CC	        defb %01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100 ; char 187 
3FDA: 643098CC	
3FDE: CC643098	        defb %11001100,%01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000 ; char 188 
3FE2: CC643098	
3FE6: 3098CC64	        defb %00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100,%01100100 ; char 189 
3FEA: 3098CC64	
3FEE: 64CC9830	        defb %01100100,%11001100,%10011000,%00110000,%01100100,%11001100,%10011000,%00110000 ; char 190 
3FF2: 64CC9830	
3FF6: 2020F820	        defb %00100000,%00100000,%11111000,%00100000,%00100000,%00000000,%11111000,%00000000 ; char 191 (±)
3FFA: 2000F800	
3FFE: C0300830	        defb %11000000,%00110000,%00001000,%00110000,%11000000,%00000000,%11111000,%00000000 ; char 192 (≥)
4002: C000F800	
4006: 18608060	        defb %00011000,%01100000,%10000000,%01100000,%00011000,%00000000,%11111000,%00000000 ; char 193 (≤)
400A: 1800F800	
400E: 3C202020	        defb %00111100,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
4012: A0602000	
4016: 30484830	        defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (°)
401A: 00000000	
401E: 60103040	        defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (²)
4022: 70000000	
4026: 000054A8	        defb %00000000,%00000000,%01010100,%10101000,%00000000,%11111100,%00000000,%00000000 ; char 197
402A: 00FC0000	
402E: 0054A800	        defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (≈)
4032: 54A80000	
4036: 0080C0E0	        defb %00000000,%10000000,%11000000,%11100000,%11100000,%11000000,%10000000,%00000000 ; char 199
403A: E0C08000	
403E: FC783000	        defb %11111100,%01111000,%00110000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 200
4042: 00000000	
4046: 00040C1C	        defb %00000000,%00000100,%00001100,%00011100,%00011100,%00001100,%00000100,%00000000 ; char 201
404A: 1C0C0400	
404E: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00110000,%01111000,%11111100 ; char 202 
4052: 003078FC	
4056: 2070F820	        defb %00100000,%01110000,%11111000,%00100000,%00100000,%00100000,%00100000,%00000000 ; char 203 (up arrow)
405A: 20202000	
405E: 3C1C1C24	        defb %00111100,%00011100,%00011100,%00100100,%01000000,%10000000,%00000000,%00000000 ; char 204 (up right arrow)
4062: 40800000	
4066: 001018FC	        defb %00000000,%00010000,%00011000,%11111100,%00011000,%00010000,%00000000,%00000000 ; char 205 (right arrow)
406A: 18100000	
406E: 00008040	        defb %00000000,%00000000,%10000000,%01000000,%00100100,%00011100,%00011100,%00111100 ; char 206 (down right arrow)
4072: 241C1C3C	
4076: 00202020	        defb %00000000,%00100000,%00100000,%00100000,%00100000,%11111000,%01110000,%00100000 ; char 207 (down arrow)
407A: 20F87020	
407E: 00000408	        defb %00000000,%00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000 ; char 208 (down left arrow)
4082: 90E0E0F0	
4086: 002060FC	        defb %00000000,%00100000,%01100000,%11111100,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
408A: 60200000	
408E: F0E0E090	        defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
4092: 08040000	
4096: 3844F040	        defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
409A: F0443800	
409E: 000478A8	        defb %00000000,%00000100,%01111000,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
40A2: 28282800	
40A6: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00011100,%00100000,%00100000,%00100000 ; char 213
40AA: 1C202020	
40AE: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%11100000,%00010000,%00010000,%00010000 ; char 214
40B2: E0101010	
40B6: 101010E0	        defb %00010000,%00010000,%00010000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 215
40BA: 00000000	
40BE: 2020201C	        defb %00100000,%00100000,%00100000,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 216
40C2: 00000000	
40C6: 0000001C	        defb %00000000,%00000000,%00000000,%00011100,%00111100,%00110000,%00110000,%00110000 ; char 217
40CA: 3C303030	
40CE: 000000E0	        defb %00000000,%00000000,%00000000,%11100000,%11110000,%00110000,%00110000,%00110000 ; char 218
40D2: F0303030	
40D6: 303030F0	        defb %00110000,%00110000,%00110000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
40DA: E0000000	
40DE: 3030303C	        defb %00110000,%00110000,%00110000,%00111100,%00011100,%00000000,%00000000,%00000000 ; char 220
40E2: 1C000000	
40E6: 00304848	        defb %00000000,%00110000,%01001000,%01001000,%01001000,%00110000,%00000000,%00000000 ; char 221
40EA: 48300000	
40EE: 00307878	        defb %00000000,%00110000,%01111000,%01111000,%01111000,%00110000,%00000000,%00000000 ; char 222
40F2: 78300000	
40F6: 003078FC	        defb %00000000,%00110000,%01111000,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 223
40FA: FC783000	
40FE: FCF8F0E0	        defb %11111100,%11111000,%11110000,%11100000,%11100000,%11000000,%10000000,%10000000 ; char 224
4102: E0C08080	
4106: FC7C3C1C	        defb %11111100,%01111100,%00111100,%00011100,%00011100,%00001100,%00000100,%00000100 ; char 225
410A: 1C0C0404	
410E: 04040C1C	        defb %00000100,%00000100,%00001100,%00011100,%00011100,%00111100,%01111100,%11111100 ; char 226
4112: 1C3C7CFC	
4116: 8080C0E0	        defb %10000000,%10000000,%11000000,%11100000,%11100000,%11110000,%11111000,%11111100 ; char 227
411A: E0F0F8FC	
411E: 00040CD8	        defb %00000000,%00000100,%00001100,%11011000,%11110000,%11100000,%11000000,%00000000 ; char 228 (checkmark)
4122: F0E0C000	
4126: 00CC7830	        defb %00000000,%11001100,%01111000,%00110000,%01111000,%11001100,%00000000,%00000000 ; char 229 (x)
412A: 78CC0000	
412E: 70888888	        defb %01110000,%10001000,%10001000,%10001000,%01110000,%00100000,%01110000,%00100000 ; char 230 (female)
4132: 70207020	
4136: 001C0C74	        defb %00000000,%00011100,%00001100,%01110100,%10010000,%10010000,%01100000,%00000000 ; char 231 (male)
413A: 90906000	
413E: F8848484	        defb %11111000,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 232 (new doc)
4142: 848484FC	
4146: 00F0FC84	        defb %00000000,%11110000,%11111100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 233 (folder)
414A: 848484FC	
414E: 3078FC48	        defb %00110000,%01111000,%11111100,%01001000,%01001000,%01001000,%01001000,%01111000 ; char 234 (trash bin)
4152: 48484878	
4156: FC848484	        defb %11111100,%10000100,%10000100,%10000100,%11111100,%10110100,%10110100,%11111100 ; char 235 (floppy disk)
415A: FCB4B4FC	
415E: 0000D4D8	        defb %00000000,%00000000,%11010100,%11011000,%11010100,%11010100,%00000000,%00000000 ; char 236 (OK)
4162: D4D40000	
4166: 3078FC78	        defb %00110000,%01111000,%11111100,%01111000,%01111000,%01001000,%01001000,%01001000 ; char 237 (home)
416A: 78484848	
416E: 7884A4A4	        defb %01111000,%10000100,%10100100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 238 (clock)
4172: B4847800	
4176: 000008F4	        defb %00000000,%00000000,%00001000,%11110100,%10101000,%10000000,%00000000,%00000000 ; char 239 (key)
417A: A8800000	
417E: 203078B0	        defb %00100000,%00110000,%01111000,%10110000,%10100000,%10001000,%01110000,%00000000 ; char 240 (undo)
4182: A0887000	
4186: 00FCCCB4	        defb %00000000,%11111100,%11001100,%10110100,%10000100,%10000100,%11111100,%00000000 ; char 241 (letter)
418A: 8484FC00	
418E: 609090F0	        defb %01100000,%10010000,%10010000,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 242 (lock)
4192: F0F0F000	
4196: 081414F0	        defb %00001000,%00010100,%00010100,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 243 (unlock)
419A: F0F0F000	
419E: FCFC84B4	        defb %11111100,%11111100,%10000100,%10110100,%10010100,%10010100,%10000100,%11111100 ; char 244 (calendar)
41A2: 949484FC	
41A6: 00043858	        defb %00000000,%00000100,%00111000,%01011000,%01101000,%01110000,%10000000,%00000000 ; char 245 (diameter)
41AA: 68708000	
41AE: 78848484	        defb %01111000,%10000100,%10000100,%10000100,%01101100,%00011000,%00001000,%00000000 ; char 246 (baloon)
41B2: 6C180800	
41B6: 30282828	        defb %00110000,%00101000,%00101000,%00101000,%00100000,%01100000,%11100000,%01000000 ; char 247 (note)
41BA: 2060E040	
41BE: 2068E4E4	        defb %00100000,%01101000,%11100100,%11100100,%11100100,%01101000,%00100000,%00000000 ; char 248 (audio on)
41C2: E4682000	
41C6: 2060E0E0	        defb %00100000,%01100000,%11100000,%11100000,%11100000,%01100000,%00100000,%00000000 ; char 249 (audio off)
41CA: E0602000	
41CE: 80C0E0F0	        defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11110000,%10010000 ; char 250 (pointer)
41D2: F8FCF090	
41D6: 7884B4A4	        defb %01111000,%10000100,%10110100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 251 (©)
41DA: B4847800	
41DE: 30484040	        defb %00110000,%01001000,%01000000,%01000000,%11100000,%01000000,%01000100,%10111000 ; char 252 (£)
41E2: E04044B8	
41E6: 7884F048	        defb %01111000,%10000100,%11110000,%01001000,%01001000,%00111100,%10000100,%01111000 ; char 253 (§)
41EA: 483C8478	
41EE: 00002000	        defb %00000000,%00000000,%00100000,%00000000,%11111000,%00000000,%00100000,%00000000 ; char 254 (÷)
41F2: F8002000	
41F6: FCFCFCFC	        defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 255 (cursor)
41FA: FCFCFCFC	
              	        ; here ends the ASCII table
              	; ------------------------------------------------------------------------------
              	; LM80C - 8x8 CHARSET - R1.7
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. More info at
              	; www DOT leonardomiliani DOT com
              	; ------------------------------------------------------------------------------
              	; Code Revision:
              	; R1.0 - 20190615 - First revision: ASCII chars (from 0 to 255) - actually, they are 6x8 pixels
              	; R1.1 - 20190616 - Converted to 8x8 pixels
              	; R1.2 - 20191013 - Added new graphic chars and reorganized previous ones
              	; R1.3 - 20191015 - More graphic chars
              	; R1.4 - 20191202 - Fixed char 11/12, added new special chars
              	; R1.5 - 20191210 - Changed several graphic chars
              	; R1.6 - 20200125 - Removed double chars, changed with new ones
              	; R1.7 - 20200228 - adopted more usual hexadecimal & binary prefixes
              	; ------------------------------------------------------------------------------
              	;
              	;-------------------------------------------------------------------------------
              	;
              	;               8 x 8    C  H  A  R  S  E  T
              	;
              	;-------------------------------------------------------------------------------
              	;
              	;       8X8 CHARS, DESIGNED FOR GRAPHICS 1 MODE
              	
41FE:         	CHRST88 equ $
41FE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
4202: 00000000	
4206: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
420A: 00000000	
420E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
4212: 00000000	
4216: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
421A: 00000000	
421E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
4222: 00000000	
4226: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
422A: 00000000	
422E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
4232: 00000000	
4236: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
423A: 00000000	
423E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
4242: 00000000	
4246: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
424A: 00000000	
424E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
4252: 00000000	
4256: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 
425A: 00000000	
425E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
4262: 00000000	
4266: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
426A: 00000000	
426E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
4272: 00000000	
4276: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
427A: 00000000	
427E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
4282: 00000000	
4286: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
428A: 00000000	
428E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
4292: 00000000	
4296: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
429A: 00000000	
429E: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
42A2: 00000000	
42A6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
42AA: 00000000	
42AE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
42B2: 00000000	
42B6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
42BA: 00000000	
42BE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
42C2: 00000000	
42C6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
42CA: 00000000	
42CE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
42D2: 00000000	
42D6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
42DA: 00000000	
42DE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
42E2: 00000000	
42E6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
42EA: 00000000	
42EE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
42F2: 00000000	
42F6: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
42FA: 00000000	
42FE: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32 - space
4302: 00000000	
4306: 10101010	        defb %00010000,%00010000,%00010000,%00010000,%00010000,%00000000,%00010000,%00000000 ; char 33 - !
430A: 10001000	
430E: 28282800	        defb %00101000,%00101000,%00101000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 34 - "
4312: 00000000	
4316: 2828FE28	        defb %00101000,%00101000,%11111110,%00101000,%11111110,%00101000,%00101000,%00000000 ; char 35 - #
431A: FE282800	
431E: 103C5038	        defb %00010000,%00111100,%01010000,%00111000,%00010100,%01111000,%00010000,%00000000 ; char 36 - $
4322: 14781000	
4326: 00626408	        defb %00000000,%01100010,%01100100,%00001000,%00010000,%00100110,%01000110,%00000000 ; char 37 - %
432A: 10264600	
432E: 00304830	        defb %00000000,%00110000,%01001000,%00110000,%01001010,%01000100,%00111010,%00000000 ; char 38 - &
4332: 4A443A00	
4336: 08102000	        defb %00001000,%00010000,%00100000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 39 - '
433A: 00000000	
433E: 08102020	        defb %00001000,%00010000,%00100000,%00100000,%00100000,%00010000,%00001000,%00000000 ; char 40 - (
4342: 20100800	
4346: 20100808	        defb %00100000,%00010000,%00001000,%00001000,%00001000,%00010000,%00100000,%00000000 ; char 41 - )
434A: 08102000	
434E: 00105438	        defb %00000000,%00010000,%01010100,%00111000,%00111000,%01010100,%00010000,%00000000 ; char 42 - *
4352: 38541000	
4356: 0010107C	        defb %00000000,%00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%00000000 ; char 43 - +
435A: 10100000	
435E: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00001000,%00010000 ; char 44 - ,
4362: 00180810	
4366: 0000007C	        defb %00000000,%00000000,%00000000,%01111100,%00000000,%00000000,%00000000,%00000000 ; char 45 - -
436A: 00000000	
436E: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00011000,%00000000 ; char 46 - .
4372: 00181800	
4376: 00020408	        defb %00000000,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%00000000 ; char 47 - /
437A: 10204000	
437E: 38444C54	        defb %00111000,%01000100,%01001100,%01010100,%01100100,%01000100,%00111000,%00000000 ; char 48 - 0
4382: 64443800	
4386: 10305010	        defb %00010000,%00110000,%01010000,%00010000,%00010000,%00010000,%01111100,%00000000 ; char 49 - 1
438A: 10107C00	
438E: 38440408	        defb %00111000,%01000100,%00000100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 50 - 2
4392: 10207C00	
4396: 7C081008	        defb %01111100,%00001000,%00010000,%00001000,%00000100,%01000100,%00111000,%00000000 ; char 51 - 3
439A: 04443800	
439E: 08182848	        defb %00001000,%00011000,%00101000,%01001000,%01111100,%00001000,%00001000,%00000000 ; char 52 - 4
43A2: 7C080800	
43A6: 7C407804	        defb %01111100,%01000000,%01111000,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 53 - 5
43AA: 04443800	
43AE: 38444078	        defb %00111000,%01000100,%01000000,%01111000,%01000100,%01000100,%00111000,%00000000 ; char 54 - 6
43B2: 44443800	
43B6: 7C040810	        defb %01111100,%00000100,%00001000,%00010000,%00100000,%00100000,%00100000,%00000000 ; char 55 - 7
43BA: 20202000	
43BE: 38444438	        defb %00111000,%01000100,%01000100,%00111000,%01000100,%01000100,%00111000,%00000000 ; char 56 - 8
43C2: 44443800	
43C6: 3844443C	        defb %00111000,%01000100,%01000100,%00111100,%00000100,%01000100,%00111000,%00000000 ; char 57 - 9
43CA: 04443800	
43CE: 00181800	        defb %00000000,%00011000,%00011000,%00000000,%00011000,%00011000,%00000000,%00000000 ; char 58 - :
43D2: 18180000	
43D6: 00181800	        defb %00000000,%00011000,%00011000,%00000000,%00011000,%00001000,%00010000,%00000000 ; char 59 - ;
43DA: 18081000	
43DE: 04081020	        defb %00000100,%00001000,%00010000,%00100000,%00010000,%00001000,%00000100,%00000000 ; char 60 - <
43E2: 10080400	
43E6: 00007E00	        defb %00000000,%00000000,%01111110,%00000000,%01111110,%00000000,%00000000,%00000000 ; char 61 - =
43EA: 7E000000	
43EE: 20100804	        defb %00100000,%00010000,%00001000,%00000100,%00001000,%00010000,%00100000,%00000000 ; char 62 - >
43F2: 08102000	
43F6: 38440408	        defb %00111000,%01000100,%00000100,%00001000,%00010000,%00000000,%00010000,%00000000 ; char 63 - ?
43FA: 10001000	
43FE: 7884BCAC	        defb %01111000,%10000100,%10111100,%10101100,%10111000,%10000000,%10000100,%01111000 ; char 64 - @
4402: B8808478	
4406: 38444444	        defb %00111000,%01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%00000000 ; char 65 - A
440A: 7C444400	
440E: 78444478	        defb %01111000,%01000100,%01000100,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 66 - B
4412: 44447800	
4416: 38444040	        defb %00111000,%01000100,%01000000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 67 - C
441A: 40443800	
441E: 78444444	        defb %01111000,%01000100,%01000100,%01000100,%01000100,%01000100,%01111000,%00000000 ; char 68 - D
4422: 44447800	
4426: 7C404070	        defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01111100,%00000000 ; char 69 - E
442A: 40407C00	
442E: 7C404070	        defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01000000,%00000000 ; char 70 - F
4432: 40404000	
4436: 38444040	        defb %00111000,%01000100,%01000000,%01000000,%01011100,%01000100,%00111000,%00000000 ; char 71 - G
443A: 5C443800	
443E: 4444447C	        defb %01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%01000100,%00000000 ; char 72 - H
4442: 44444400	
4446: 38101010	        defb %00111000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 73 - I
444A: 10103800	
444E: 3C040404	        defb %00111100,%00000100,%00000100,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 74 - J
4452: 04443800	
4456: 44444870	        defb %01000100,%01000100,%01001000,%01110000,%01001000,%01000100,%01000100,%00000000 ; char 75 - K
445A: 48444400	
445E: 40404040	        defb %01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01111100,%00000000 ; char 76 - L
4462: 40407C00	
4466: 42665A42	        defb %01000010,%01100110,%01011010,%01000010,%01000010,%01000010,%01000010,%00000000 ; char 77 - M
446A: 42424200	
446E: 4464544C	        defb %01000100,%01100100,%01010100,%01001100,%01000100,%01000100,%01000100,%00000000 ; char 78 - N
4472: 44444400	
4476: 38444444	        defb %00111000,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 79 - O
447A: 44443800	
447E: 78444444	        defb %01111000,%01000100,%01000100,%01000100,%01111000,%01000000,%01000000,%00000000 ; char 80 - P
4482: 78404000	
4486: 38444444	        defb %00111000,%01000100,%01000100,%01000100,%01010100,%01001000,%00110100,%00000000 ; char 81 - Q
448A: 54483400	
448E: 78444444	        defb %01111000,%01000100,%01000100,%01000100,%01111000,%01001000,%01000100,%00000000 ; char 82 - R
4492: 78484400	
4496: 3C404038	        defb %00111100,%01000000,%01000000,%00111000,%00000100,%00000100,%01111000,%00000000 ; char 83 - S
449A: 04047800	
449E: 7C101010	        defb %01111100,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 84 - T
44A2: 10101000	
44A6: 44444444	        defb %01000100,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 85 - U
44AA: 44443800	
44AE: 44444444	        defb %01000100,%01000100,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 86 - V
44B2: 44281000	
44B6: 42424242	        defb %01000010,%01000010,%01000010,%01000010,%01011010,%01011010,%00100100,%00000000 ; char 87 - W
44BA: 5A5A2400	
44BE: 44442810	        defb %01000100,%01000100,%00101000,%00010000,%00101000,%01000100,%01000100,%00000000 ; char 88 - X
44C2: 28444400	
44C6: 44444428	        defb %01000100,%01000100,%01000100,%00101000,%00010000,%00010000,%00010000,%00000000 ; char 89 - Y
44CA: 10101000	
44CE: 7C040810	        defb %01111100,%00000100,%00001000,%00010000,%00100000,%01000000,%01111100,%00000000 ; char 90 - Z
44D2: 20407C00	
44D6: 38202020	        defb %00111000,%00100000,%00100000,%00100000,%00100000,%00100000,%00111000,%00000000 ; char 91 - [
44DA: 20203800	
44DE: 00402010	        defb %00000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000000 ; char 92 - \
44E2: 08040200	
44E6: 38080808	        defb %00111000,%00001000,%00001000,%00001000,%00001000,%00001000,%00111000,%00000000 ; char 93 - ]
44EA: 08083800	
44EE: 10284400	        defb %00010000,%00101000,%01000100,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 94 - ^
44F2: 00000000	
44F6: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%01111110,%00000000 ; char 95 _ (underscore)
44FA: 00007E00	
44FE: 20100800	        defb %00100000,%00010000,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 96 - `
4502: 00000000	
4506: 00003804	        defb %00000000,%00000000,%00111000,%00000100,%00111100,%01000100,%00111100,%00000000 ; char 97 - a
450A: 3C443C00	
450E: 40404078	        defb %01000000,%01000000,%01000000,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 98 - b
4512: 44447800	
4516: 00003840	        defb %00000000,%00000000,%00111000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 99 - c
451A: 40443800	
451E: 0404043C	        defb %00000100,%00000100,%00000100,%00111100,%01000100,%01000100,%00111100,%00000000 ; char 100 - d
4522: 44443C00	
4526: 00003844	        defb %00000000,%00000000,%00111000,%01000100,%01111100,%01000000,%00111000,%00000000 ; char 101 - e
452A: 7C403800	
452E: 18242070	        defb %00011000,%00100100,%00100000,%01110000,%00100000,%00100000,%00100000,%00000000 ; char 102 - f
4532: 20202000	
4536: 00003C44	        defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00111000 ; char 103 - g
453A: 443C0438	
453E: 40405864	        defb %01000000,%01000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 104 - h
4542: 44444400	
4546: 00100010	        defb %00000000,%00010000,%00000000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 105 - i
454A: 10101000	
454E: 08001808	        defb %00001000,%00000000,%00011000,%00001000,%00001000,%00001000,%01001000,%00110000 ; char 106 - j
4552: 08084830	
4556: 40404850	        defb %01000000,%01000000,%01001000,%01010000,%01100000,%01010000,%01001000,%00000000 ; char 107 - k
455A: 60504800	
455E: 30101010	        defb %00110000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 108 - l
4562: 10103800	
4566: 0000546A	        defb %00000000,%00000000,%01010100,%01101010,%01001010,%01000010,%01000010,%00000000 ; char 109 - m
456A: 4A424200	
456E: 00005864	        defb %00000000,%00000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 110 - n
4572: 44444400	
4576: 00003844	        defb %00000000,%00000000,%00111000,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 111: o
457A: 44443800	
457E: 00007844	        defb %00000000,%00000000,%01111000,%01000100,%01000100,%01111000,%01000000,%01000000 ; char 112: p
4582: 44784040	
4586: 00003C44	        defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00000100 ; char 113: q
458A: 443C0404	
458E: 00005864	        defb %00000000,%00000000,%01011000,%01100100,%01000000,%01000000,%01000000,%00000000 ; char 114: r
4592: 40404000	
4596: 00003840	        defb %00000000,%00000000,%00111000,%01000000,%00111000,%00000100,%01111000,%00000000 ; char 115: s
459A: 38047800	
459E: 20207020	        defb %00100000,%00100000,%01110000,%00100000,%00100000,%00100100,%00011000,%00000000 ; char 116: t
45A2: 20241800	
45A6: 00004444	        defb %00000000,%00000000,%01000100,%01000100,%01000100,%01001100,%00110100,%00000000 ; char 117: u
45AA: 444C3400	
45AE: 00004444	        defb %00000000,%00000000,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 118: v
45B2: 44281000	
45B6: 00004444	        defb %00000000,%00000000,%01000100,%01000100,%01010100,%01010100,%00101000,%00000000 ; char 119: w
45BA: 54542800	
45BE: 00004428	        defb %00000000,%00000000,%01000100,%00101000,%00010000,%00101000,%01000100,%00000000 ; char 120: x
45C2: 10284400	
45C6: 00004444	        defb %00000000,%00000000,%01000100,%01000100,%01001100,%00110100,%00000100,%00111000 ; char 121: y
45CA: 4C340438	
45CE: 00007C08	        defb %00000000,%00000000,%01111100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 122: z
45D2: 10207C00	
45D6: 18202040	        defb %00011000,%00100000,%00100000,%01000000,%00100000,%00100000,%00011000,%00000000 ; char 123: {
45DA: 20201800	
45DE: 10101010	        defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 124: |
45E2: 10101000	
45E6: 30080804	        defb %00110000,%00001000,%00001000,%00000100,%00001000,%00001000,%00110000,%00000000 ; char 125: }
45EA: 08083000	
45EE: 20540800	        defb %00100000,%01010100,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 126: ~
45F2: 00000000	
45F6: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 127 (delete) - end the standard ASCII (0-127)
45FA: 00000000	
45FE: 3C42A581	        defb %00111100,%01000010,%10100101,%10000001,%10100101,%10011001,%01000010,%00111100 ; char 128 (open face)
4602: A599423C	
4606: 3C7EDBFF	        defb %00111100,%01111110,%11011011,%11111111,%11011011,%11100111,%01111110,%00111100 ; char 129 (full face)
460A: DBE77E3C	
460E: 6CFEFEFE	        defb %01101100,%11111110,%11111110,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 130 (hearts)
4612: 7C381000	
4616: 10387CFE	        defb %00010000,%00111000,%01111100,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 131 (diamonds)
461A: 7C381000	
461E: 103854FE	        defb %00010000,%00111000,%01010100,%11111110,%01010100,%00010000,%01111100,%00000000 ; char 132 (clus)
4622: 54107C00	
4626: 10387CFE	        defb %00010000,%00111000,%01111100,%11111110,%11010110,%00010000,%01111100,%00000000 ; char 133 (spades)
462A: D6107C00	
462E: 181818FF	        defb %00011000,%00011000,%00011000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 134
4632: FF181818	
4636: 0000001F	        defb %00000000,%00000000,%00000000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 135
463A: 1F181818	
463E: 000000F8	        defb %00000000,%00000000,%00000000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 136
4642: F8181818	
4646: 181818F8	        defb %00011000,%00011000,%00011000,%11111000,%11111000,%00000000,%00000000,%00000000 ; char 137
464A: F8000000	
464E: 1818181F	        defb %00011000,%00011000,%00011000,%00011111,%00011111,%00000000,%00000000,%00000000 ; char 138
4652: 1F000000	
4656: 181818FF	        defb %00011000,%00011000,%00011000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 139
465A: FF000000	
465E: 1818181F	        defb %00011000,%00011000,%00011000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 140
4662: 1F181818	
4666: 000000FF	        defb %00000000,%00000000,%00000000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 141
466A: FF181818	
466E: 181818F8	        defb %00011000,%00011000,%00011000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 142
4672: F8181818	
4676: 000000FF	        defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 143
467A: FF000000	
467E: 18181818	        defb %00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000 ; char 144
4682: 18181818	
4686: 03070E1C	        defb %00000011,%00000111,%00001110,%00011100,%00111000,%01110000,%11100000,%11000000 ; char 145
468A: 3870E0C0	
468E: C0E07038	        defb %11000000,%11100000,%01110000,%00111000,%00011100,%00001110,%00000111,%00000011 ; char 146
4692: 1C0E0703	
4696: C3E77E3C	        defb %11000011,%11100111,%01111110,%00111100,%00111100,%01111110,%11100111,%11000011 ; char 147
469A: 3C7EE7C3	
469E: 101010FF	        defb %00010000,%00010000,%00010000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 148
46A2: 10101010	
46A6: 0000001F	        defb %00000000,%00000000,%00000000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 149
46AA: 10101010	
46AE: 000000F0	        defb %00000000,%00000000,%00000000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 150
46B2: 10101010	
46B6: 101010F0	        defb %00010000,%00010000,%00010000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 151
46BA: 00000000	
46BE: 1010101F	        defb %00010000,%00010000,%00010000,%00011111,%00000000,%00000000,%00000000,%00000000 ; char 152
46C2: 00000000	
46C6: 101010FF	        defb %00010000,%00010000,%00010000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 153
46CA: 00000000	
46CE: 1010101F	        defb %00010000,%00010000,%00010000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 154
46D2: 10101010	
46D6: 000000FF	        defb %00000000,%00000000,%00000000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 155
46DA: 10101010	
46DE: 101010F0	        defb %00010000,%00010000,%00010000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 156
46E2: 10101010	
46E6: 000000FF	        defb %00000000,%00000000,%00000000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 157
46EA: 00000000	
46EE: 10101010	        defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000 ; char 158
46F2: 10101010	
46F6: 01020408	        defb %00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000 ; char 159
46FA: 10204080	
46FE: 80402010	        defb %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001 ; char 160
4702: 08040201	
4706: 81422418	        defb %10000001,%01000010,%00100100,%00011000,%00011000,%00100100,%01000010,%10000001 ; char 161
470A: 18244281	
470E: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 162
4712: 0000FFFF	
4716: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; char 163
471A: FFFFFFFF	
471E: 0000FFFF	        defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 164
4722: FFFFFFFF	
4726: FFFF0000	        defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
472A: 00000000	
472E: FFFFFFFF	        defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 166
4732: 00000000	
4736: FFFFFFFF	        defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 167
473A: FFFF0000	
473E: C0C0C0C0	        defb %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000 ; char 168
4742: C0C0C0C0	
4746: F0F0F0F0	        defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; char 169
474A: F0F0F0F0	
474E: FCFCFCFC	        defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 170
4752: FCFCFCFC	
4756: 03030303	        defb %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011 ; char 171
475A: 03030303	
475E: 0F0F0F0F	        defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; char 172
4762: 0F0F0F0F	
4766: 3F3F3F3F	        defb %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111 ; char 173
476A: 3F3F3F3F	
476E: FF818181	        defb %11111111,%10000001,%10000001,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 174
4772: 818181FF	
4776: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; char 175
477A: F0F0F0F0	
477E: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; char 176
4782: 0F0F0F0F	
4786: 0F0F0F0F	        defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; char 177
478A: 00000000	
478E: F0F0F0F0	        defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 178
4792: 00000000	
4796: F0F0F0F0	        defb %11110000,%11110000,%11110000,%11110000,%00001111,%00001111,%00001111,%00001111 ; char 179
479A: 0F0F0F0F	
479E: 0F0F0F0F	        defb %00001111,%00001111,%00001111,%00001111,%11110000,%11110000,%11110000,%11110000 ; char 180
47A2: F0F0F0F0	
47A6: 3C3C3C3C	        defb %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100 ; char 181
47AA: 3C3C3C3C	
47AE: C3C3C3C3	        defb %11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011 ; char 182
47B2: C3C3C3C3	
47B6: FFFF0000	        defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 183
47BA: 0000FFFF	
47BE: 0000FFFF	        defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 184
47C2: FFFF0000	
47C6: 3333CCCC	        defb %00110011,%00110011,%11001100,%11001100,%00110011,%00110011,%11001100,%11001100 ; char 185
47CA: 3333CCCC	
47CE: 55AA55AA	        defb %01010101,%10101010,%01010101,%10101010,%01010101,%10101010,%01010101,%10101010 ; char 186
47D2: 55AA55AA	
47D6: 663399CC	        defb %01100110,%00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100 ; char 187
47DA: 663399CC	
47DE: CC993366	        defb %11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011,%01100110 ; char 188
47E2: CC993366	
47E6: 3399CC66	        defb %00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100,%01100110 ; char 189
47EA: 3399CC66	
47EE: 66CC9933	        defb %01100110,%11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011 ; char 190
47F2: 66CC9933	
47F6: 10107C10	        defb %00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%01111100,%00000000 ; char 191 (±)
47FA: 10007C00	
47FE: 60180618	        defb %01100000,%00011000,%00000110,%00011000,%01100000,%00000000,%01111110,%00000000 ; char 192 (≥)
4802: 60007E00	
4806: 06186018	        defb %00000110,%00011000,%01100000,%00011000,%00000110,%00000000,%01111110,%00000000 ; char 193 (≤)
480A: 06007E00	
480E: 3E202020	        defb %00111110,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
4812: A0602000	
4816: 30484830	        defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (°)
481A: 00000000	
481E: 60103040	        defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (²)
4822: 70000000	
4826: 00002A54	        defb %00000000,%00000000,%00101010,%01010100,%00000000,%01111110,%00000000,%00000000 ; char 197 
482A: 007E0000	
482E: 0054A800	        defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (≈)
4832: 54A80000	
4836: 80C0E0F0	        defb %10000000,%11000000,%11100000,%11110000,%11100000,%11000000,%10000000,%00000000 ; char 199
483A: E0C08000	
483E: FE7C3810	        defb %11111110,%01111100,%00111000,%00010000,%00000000,%00000000,%00000000,%00000000 ; char 200
4842: 00000000	
4846: 0103070F	        defb %00000001,%00000011,%00000111,%00001111,%00000111,%00000011,%00000001,%00000000 ; char 201
484A: 07030100	
484E: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00010000,%00111000,%01111100,%11111110 ; char 202
4852: 10387CFE	
4856: 10387C10	        defb %00010000,%00111000,%01111100,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 203 (up arrow)
485A: 10101000	
485E: 1E0E0E12	        defb %00011110,%00001110,%00001110,%00010010,%00100000,%01000000,%00000000,%00000000 ; char 204 (up right arrow)
4862: 20400000	
4866: 00080CFE	        defb %00000000,%00001000,%00001100,%11111110,%00001100,%00001000,%00000000,%00000000 ; char 205 (right arrow)
486A: 0C080000	
486E: 00402012	        defb %00000000,%01000000,%00100000,%00010010,%00001110,%00001110,%00011110,%00000000 ; char 206 (down right arrow)
4872: 0E0E1E00	
4876: 10101010	        defb %00010000,%00010000,%00010000,%00010000,%01111100,%00111000,%00010000,%00000000 ; char 207 (down arrow)
487A: 7C381000	
487E: 00040890	        defb %00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000,%00000000 ; char 208 (down left arrow)
4882: E0E0F000	
4886: 002060FE	        defb %00000000,%00100000,%01100000,%11111110,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
488A: 60200000	
488E: F0E0E090	        defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
4892: 08040000	
4896: 3844F040	        defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
489A: F0443800	
489E: 00027CA8	        defb %00000000,%00000010,%01111100,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
48A2: 28282800	
48A6: 00000007	        defb %00000000,%00000000,%00000000,%00000111,%00001000,%00010000,%00010000,%00010000 ; char 213
48AA: 08101010	
48AE: 000000E0	        defb %00000000,%00000000,%00000000,%11100000,%00010000,%00001000,%00001000,%00001000 ; char 214
48B2: 10080808	
48B6: 08080810	        defb %00001000,%00001000,%00001000,%00010000,%11100000,%00000000,%00000000,%00000000 ; char 215
48BA: E0000000	
48BE: 10101008	        defb %00010000,%00010000,%00010000,%00001000,%00000111,%00000000,%00000000,%00000000 ; char 216
48C2: 07000000	
48C6: 00000007	        defb %00000000,%00000000,%00000000,%00000111,%00001111,%00011100,%00011000,%00011000 ; char 217
48CA: 0F1C1818	
48CE: 000000E0	        defb %00000000,%00000000,%00000000,%11100000,%11110000,%00111000,%00011000,%00011000 ; char 218
48D2: F0381818	
48D6: 181838F0	        defb %00011000,%00011000,%00111000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
48DA: E0000000	
48DE: 18181C0F	        defb %00011000,%00011000,%00011100,%00001111,%00000111,%00000000,%00000000,%00000000 ; char 220
48E2: 07000000	
48E6: 003C4242	        defb %00000000,%00111100,%01000010,%01000010,%01000010,%01000010,%00111100,%00000000 ; char 221
48EA: 42423C00	
48EE: 003C7E7E	        defb %00000000,%00111100,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000 ; char 222
48F2: 7E7E3C00	
48F6: 00183C7E	        defb %00000000,%00011000,%00111100,%01111110,%01111110,%00111100,%00011000,%00000000 ; char 223
48FA: 7E3C1800	
48FE: FFFEFCF8	        defb %11111111,%11111110,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000 ; char 224
4902: F0E0C080	
4906: FF7F3F1F	        defb %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001 ; char 225
490A: 0F070301	
490E: 0103070F	        defb %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%01111111,%11111111 ; char 226
4912: 1F3F7FFF	
4916: 80C0E0F0	        defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110,%11111111 ; char 227
491A: F8FCFEFF	
491E: 0002066C	        defb %00000000,%00000010,%00000110,%01101100,%01111000,%01110000,%01100000,%00000000 ; char 228 (checkmark)
4922: 78706000	
4926: 00663C18	        defb %00000000,%01100110,%00111100,%00011000,%00111100,%01100110,%00000000,%00000000 ; char 229 (x)
492A: 3C660000	
492E: 38444444	        defb %00111000,%01000100,%01000100,%01000100,%00111000,%00010000,%00111000,%00010000 ; char 230 (female)
4932: 38103810	
4936: 07033D44	        defb %00000111,%00000011,%00111101,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 231 (male)
493A: 44443800	
493E: 78444242	        defb %01111000,%01000100,%01000010,%01000010,%01000010,%01000010,%01000010,%01111110 ; char 232 (new doc)
4942: 4242427E	
4946: 00F8FF81	        defb %00000000,%11111000,%11111111,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 233 (folder)
494A: 818181FF	
494E: 107CFE54	        defb %00010000,%01111100,%11111110,%01010100,%01010100,%01010100,%01010100,%01111100 ; char 234 (trash bin)
4952: 5454547C	
4956: FF818181	        defb %11111111,%10000001,%10000001,%10000001,%10111101,%10101101,%10101101,%11111111 ; char 235 (floppy disk)
495A: BDADADFF	
495E: 00EAAAAC	        defb %00000000,%11101010,%10101010,%10101100,%10101100,%10101010,%11101010,%00000000 ; char 236 (OK)
4962: ACAAEA00	
4966: 187EFF7E	        defb %00011000,%01111110,%11111111,%01111110,%01111110,%01100110,%01100110,%01100110 ; char 237 (home)
496A: 7E666666	
496E: 3C429191	        defb %00111100,%01000010,%10010001,%10010001,%10011101,%10000001,%01000010,%00111100 ; char 238 (clock)
4972: 9D81423C	
4976: 000205FD	        defb %00000000,%00000010,%00000101,%11111101,%10100101,%10100010,%00000000,%00000000 ; char 239 (key)
497A: A5A20000	
497E: 080C3E4C	        defb %00001000,%00001100,%00111110,%01001100,%01001000,%01000010,%01000010,%00111100 ; char 240 (undo)
4982: 4842423C	
4986: 00FFC3A5	        defb %00000000,%11111111,%11000011,%10100101,%10011001,%10000001,%11111111,%00000000 ; char 241 (letter)
498A: 9981FF00	
498E: 3844447C	        defb %00111000,%01000100,%01000100,%01111100,%01111100,%01111100,%01111100,%00000000 ; char 242 (lock)
4992: 7C7C7C00	
4996: 060909F8	        defb %00000110,%00001001,%00001001,%11111000,%11111000,%11111000,%11111000,%00000000 ; char 243 (unlock)
499A: F8F8F800	
499E: FFFF81AD	        defb %11111111,%11111111,%10000001,%10101101,%10100101,%10100101,%10000001,%11111111 ; char 244 (calendar)
49A2: A5A581FF	
49A6: 011A244A	        defb %00000001,%00011010,%00100100,%01001010,%01010010,%00100100,%01011000,%10000000 ; char 245 (diameter)
49AA: 52245880	
49AE: 7E818181	        defb %01111110,%10000001,%10000001,%10000001,%10000001,%01110110,%00001100,%00000100 ; char 246 (baloon)
49B2: 81760C04	
49B6: 0C0A0A0A	        defb %00001100,%00001010,%00001010,%00001010,%00001000,%00011000,%00111000,%00010000 ; char 247 (note)
49BA: 08183810	
49BE: 1231F5F5	        defb %00010010,%00110001,%11110101,%11110101,%11110101,%11110101,%00110001,%00010010 ; char 248 (audio on)
49C2: F5F53112	
49C6: 1030F0F0	        defb %00010000,%00110000,%11110000,%11110000,%11110000,%11110000,%00110000,%00010000 ; char 249 (audio off)
49CA: F0F03010	
49CE: 40607078	        defb %01000000,%01100000,%01110000,%01111000,%01111100,%01111110,%01111000,%01001000 ; char 250 (pointer)
49D2: 7C7E7848	
49D6: 3C4299A1	        defb %00111100,%01000010,%10011001,%10100001,%10100001,%10011001,%01000010,%00111100 ; char 251 (©)
49DA: A199423C	
49DE: 30484040	        defb %00110000,%01001000,%01000000,%01000000,%11110000,%01000000,%01000010,%10111100 ; char 252 (£)
49E2: F04042BC	
49E6: 3C427824	        defb %00111100,%01000010,%01111000,%00100100,%00100100,%00011110,%01000010,%00111100 ; char 253 (§)
49EA: 241E423C	
49EE: 00001000	        defb %00000000,%00000000,%00010000,%00000000,%01111100,%00000000,%00010000,%00000000 ; char 254 (÷)
49F2: 7C001000	
49F6: FFFFFFFF	        defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 255 (cursor)
49FA: FFFFFFFF	
              	
              	; ------------------------------------------------------------------------------
              	; LM80C - LOGO CHARSET - R1.1
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. More info at
              	; www DOT leonardomiliani DOT com
              	; ------------------------------------------------------------------------------
              	; Code Revision:
              	; R1.0 - 20200124 - First revision: logo chars
              	; R1.1 - 20200229 - Adopted usual hexadecimal & binary prefixes
              	; ------------------------------------------------------------------------------
              	
49FE:         	LOGOFONT:   equ $
49FE: 00000000	            defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; 0
4A02: 00000000	
4A06: FFFFFFFF	            defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; 1
4A0A: FFFFFFFF	
4A0E: FFFFFFFF	            defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; 2
4A12: 00000000	
4A16: 0F0F0F0F	            defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; 3
4A1A: 0F0F0F0F	
4A1E: 00000000	            defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; 4
4A22: FFFFFFFF	
4A26: F0F0F0F0	            defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; 5
4A2A: F0F0F0F0	
4A2E: 00000000	            defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; 6
4A32: 0F0F0F0F	
4A36: 00000000	            defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; 7
4A3A: F0F0F0F0	
4A3E: F0F0F0F0	            defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; 8
4A42: 00000000	
4A46: 0F0F0F0F	            defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; 9
4A4A: 00000000	
4A4E: 000000FC	            defb %00000000,%00000000,%00000000,%11111100,%11111111,%00000111,%00000011,%00000000 ; 10
4A52: FF070300	
4A56: 0000003F	            defb %00000000,%00000000,%00000000,%00111111,%11111111,%11100000,%11000000,%00000000 ; 11
4A5A: FFE0C000	
4A5E: 18181F19	            defb %00011000,%00011000,%00011111,%00011001,%00011001,%00011111,%00011000,%00011000 ; 12
4A62: 191F1818	
4A66: 1818F898	            defb %00011000,%00011000,%11111000,%10011000,%10011000,%11111000,%00011000,%00011000 ; 13
4A6A: 98F81818	
4A6E: 18181C1F	            defb %00011000,%00011000,%00011100,%00011111,%00001111,%00000000,%00000000,%00000000 ; 14
4A72: 0F000000	
4A76: 0000000F	            defb %00000000,%00000000,%00000000,%00001111,%00011111,%00011100,%00011000,%00011000 ; 15
4A7A: 1F1C1818	
4A7E: 000000F0	            defb %00000000,%00000000,%00000000,%11110000,%11111000,%00111000,%00011000,%00011000 ; 16
4A82: F8381818	
4A86: 181838F8	            defb %00011000,%00011000,%00111000,%11111000,%11110000,%00000000,%00000000,%00000000 ; 17
4A8A: F0000000	
4A8E: 000000FF	            defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; 18
4A92: FF000000	
4A96: 0F0F0F0F	            defb %00001111,%00001111,%00001111,%00001111,%11111111,%11111111,%11111111,%11111111 ; 19
4A9A: FFFFFFFF	
4A9E: F0F0F0F0	            defb %11110000,%11110000,%11110000,%11110000,%11111111,%11111111,%11111111,%11111111 ; 20
4AA2: FFFFFFFF	
4AA6: FFFFFFFF	            defb %11111111,%11111111,%11111111,%11111111,%11110000,%11110000,%11110000,%11110000 ; 21
4AAA: F0F0F0F0	
4AAE: FFFFFFFF	            defb %11111111,%11111111,%11111111,%11111111,%00001111,%00001111,%00001111,%00001111 ; 22
4AB2: 0F0F0F0F	
4AB6: 00307878	            defb %00000000,%00110000,%01111000,%01111000,%00110000,%00000000,%00000000,%00000000 ; 23
4ABA: 30000000	
              	            ; ------------------------------------------------------------------------------
              	; LM80C - FIRMWARE - R3.8
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. More info at
              	; www DOT leonardomiliani DOT com
              	; ------------------------------------------------------------------------------
              	; Coding/Editing/Compiling:
              	; Original init code for MC68B05 by Grant Searle
              	; Original SIO/CTC/PIO init code by Mario Blunk
              	; NASCOM BASIC originally modified by Gran Searle
              	; Code modified and adapted for LM80C by Leonardo Miliani
              	;
              	; Edited with Atom Editor
              	;
              	; Compiled with ZASM assembler 4.2.4
              	; https://k1.spdns.de/Develop/Projects/zasm-4.0/Distributions/
              	; ------------------------------------------------------------------------------
              	; Copyright notes:
              	; Parts of the code (c) Grant Searle - free for non commercial use
              	; Please include this advice and the note to the attribution of the original
              	; version to Grant Searle if you intend to redistribuite it
              	; http://searle.hostei.com/grant/index.html
              	; eMail: home.micros01@btinternet.com
              	;
              	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
              	; Parts of the code (c) Mario Blunk
              	; http://www.train­z.de
              	;
              	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
              	; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
              	; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
              	; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
              	; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
              	; the original ROM code (checksum A934H). PA
              	;
              	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. Code and computer schematics are released under
              	; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
              	; kind of warranty: you can use them at your own risk.
              	; You are free to use them for any non-commercial use: you are only asked to
              	; maintain the copyright notices, include this advice and the note to the 
              	; attribution of the original version to Leonardo Miliani, if you intend to
              	; redistribuite them.
              	; https://www.leonardomiliani.com
              	; 
              	; Please support me by visiting the following links:
              	; Main project page: https://www.leonardomiliani.com
              	; Schematics and code: https://github.com/leomil72/LM80C
              	; Videos about the computer: https://www.youtube.com/user/leomil72/videos
              	; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
              	; ------------------------------------------------------------------------------
              	
              	
              	; ------------------------------------------------------------------------------
              	; this line instructs the assembler to prepare a file for a ROM target
              	; meaning that blank cells will be filled up with $FF
              	#target rom
              	
              	; this line instructs the assembler to compile taking account that code
              	; starts at $0000 (the address reached by Z80 upon reset)
0000:         	#code BOOT, $0000
              	
              	; ------------------------------------------------------------------------------
              	; include the latest version of the bootloader: this sets up the address aliases
              	; configure the hardware, checks if warm or cold startup and loads the BASIC interpreter
              	
              	; END OF ASSEMBLY SOURCE
              	#end
              	
              	;-------------------------------------------------------------------------------


; +++ segments +++

#CODE          = $0000 =     0,  size = $4ABE = 19134
#CODE BOOT     = $0000 =     0,  size = $0000 =     0

; +++ global symbols +++

ABPASS           = $225A =  8794          rom.asm:4604
ABS              = $2B84 = 11140          rom.asm:6054
ACCSUM           = $1A99 =  6809          rom.asm:3477 (unused)
ACPASS           = $2259 =  8793          rom.asm:4603
ADD30            = $38D9 = 14553          rom.asm:7914
ADD301           = $38E9 = 14569          rom.asm:7925
ADDEXP           = $2B1D = 11037          rom.asm:5989
ADDIG            = $2CC3 = 11459          rom.asm:6279
ADDNEWLINE       = $094B =  2379          rom.asm:1389
ADDPHL           = $28B9 = 10425          rom.asm:5597
ALLFOL           = $2528 =  9512          rom.asm:5052
ANTVLU           = $1D9E =  7582          rom.asm:3887
ARET             = $3014 = 12308          rom.asm:6719 (unused)
ARLDSV           = $2163 =  8547          rom.asm:4444
ARREND           = $81BF = 33215          rom.asm:2011
ARRLP            = $23F3 =  9203          rom.asm:4843
ASC              = $24F9 =  9465          rom.asm:5022
ASCTFP           = $2C66 = 11366          rom.asm:6225
ASPCS            = $1CFF =  7423          rom.asm:3809
ATHOME           = $05DF =  1503          rom.asm:879
ATN              = $2FC8 = 12232          rom.asm:6690
ATN1             = $2FE5 = 12261          rom.asm:6702
ATNTAB           = $2FEF = 12271          rom.asm:6707
ATOH             = $1AD4 =  6868          rom.asm:3510
A_RTS_OFF        = $0160 =   352          rom.asm:187
A_RTS_ON         = $016E =   366          rom.asm:198
BACKSPACE        = $0748 =  1864          rom.asm:1100
BADINP           = $1D22 =  7458          rom.asm:3821
BAKSTK           = $1486 =  5254          rom.asm:2583
BAKTMP           = $24D9 =  9433          rom.asm:5000
BASTXT           = $8133 = 33075          rom.asm:1987
BCDEFP           = $2BAB = 11179          rom.asm:6083
BEEPOFF          = $0509 =  1289          rom.asm:746
BFREE            = $0F51 =  3921          rom.asm:2176
BIN              = $392B = 14635          rom.asm:7974
BIN2             = $3931 = 14641          rom.asm:7976 (unused)
BINERR           = $3988 = 14728          rom.asm:8035
BINIT            = $3967 = 14695          rom.asm:8010
BINTFP           = $395D = 14685          rom.asm:8006
BITOUT           = $3945 = 14661          rom.asm:7988
BITOUT2          = $3949 = 14665          rom.asm:7990
BITS6            = $368D = 13965          rom.asm:7596
BITS7            = $3697 = 13975          rom.asm:7601
BITS8            = $36A2 = 13986          rom.asm:7606
BKGNDCLR         = $81E2 = 33250          rom.asm:2034
BKSP             = $0008 =     8          rom.asm:1936
BN               = $0028 =    40          rom.asm:2085
BNMSG            = $1312 =  4882          rom.asm:2491
BNORM            = $2919 = 10521          rom.asm:5656
BNPTR            = $138E =  5006          rom.asm:2518 (unused)
BNRMLP           = $291C = 10524          rom.asm:5659
BOOT             = $0000 =     0  BOOT    rom.asm:8862 (unused)
BOOT_end         = $0000 =     0  BOOT    rom.asm:8862 (unused)
BOOT_size        = $0000 =     0  BOOT    rom.asm:8862 (unused)
BPS              = $81EC = 33260          rom.asm:7427
BRK              = $1A47 =  6727          rom.asm:3434
BRKFLG           = $80A9 = 32937          rom.asm:1981
BRKLIN           = $81B3 = 33203          rom.asm:2005
BRKMSG           = $1480 =  5248          rom.asm:2581
BRKRET           = $0F48 =  3912          rom.asm:2172
BS               = $0010 =    16          rom.asm:2073
BSERR            = $2196 =  8598          rom.asm:4475
BSMSG            = $1241 =  4673          rom.asm:2479
BSPTR            = $1376 =  4982          rom.asm:2506 (unused)
BUFFER           = $8136 = 33078          rom.asm:1988
BYT2ASC          = $38D0 = 14544          rom.asm:7909
BYTSFT           = $2A51 = 10833          rom.asm:5867
CFEVAL           = $20F9 =  8441          rom.asm:4375
CH3_TIMER        = $0232 =   562          rom.asm:338
CHABFREMPTY      = $01C3 =   451          rom.asm:252
CHAR2VID         = $068B =  1675          rom.asm:998
CHARINTOBFR      = $0133 =   307          rom.asm:157
CHARTY           = $20A7 =  8359          rom.asm:4331
CHASNDDTN        = $8217 = 33303          rom.asm:2045
CHBSNDDTN        = $8219 = 33305          rom.asm:2046
CHCKYPOS         = $076E =  1902          rom.asm:1119
CHCKYPOS2        = $07D9 =  2009          rom.asm:1179
CHCSNDDTN        = $821B = 33307          rom.asm:2047
CHECKALT         = $0C5F =  3167          rom.asm:1698
CHECKCTRL        = $0C6D =  3181          rom.asm:1704
CHECKKBD         = $0C7B =  3195          rom.asm:1710
CHECKWARM        = $02B2 =   690          rom.asm:404
CHEKFN           = $22F1 =  8945          rom.asm:4696
CHKALT           = $0CF3 =  3315          rom.asm:1770
CHKBIN           = $397A = 14714          rom.asm:8025
CHKBKSP          = $06B5 =  1717          rom.asm:1018
CHKCLR           = $3196 = 12694          rom.asm:6955
CHKCR            = $06AC =  1708          rom.asm:1014
CHKCRSDWN        = $06D9 =  1753          rom.asm:1034
CHKCRSLFT        = $06BE =  1726          rom.asm:1022
CHKCRSR          = $0241 =   577          rom.asm:348
CHKCRSRGT        = $06D0 =  1744          rom.asm:1030
CHKCRSUP         = $06C7 =  1735          rom.asm:1026
CHKCS            = $06A3 =  1699          rom.asm:1010
CHKCTRL          = $0CEA =  3306          rom.asm:1766
CHKEY1           = $3885 = 14469          rom.asm:7867
CHKEY2           = $388A = 14474          rom.asm:7868
CHKEY3           = $388E = 14478          rom.asm:7869
CHKEY4           = $3894 = 14484          rom.asm:7870
CHKEY5           = $3897 = 14487          rom.asm:7871
CHKFNK           = $0D26 =  3366          rom.asm:1795
CHKG2M           = $31A0 = 12704          rom.asm:6963
CHKINK           = $2898 = 10392          rom.asm:5576
CHKLF            = $06E2 =  1762          rom.asm:1038
CHKLN            = $0CD6 =  3286          rom.asm:1757
CHKLTR           = $1AA6 =  6822          rom.asm:3486
CHKSCAR          = $30DF = 12511          rom.asm:6851
CHKSNDCH         = $0BE8 =  3048          rom.asm:1626
CHKSTK           = $14BA =  5306          rom.asm:2620
CHKSUM           = $80A6 = 32934          rom.asm:1979
CHKSYN           = $17E1 =  6113          rom.asm:3089
CHKTYP           = $1E7E =  7806          rom.asm:4002
CHKYPOS          = $0795 =  1941          rom.asm:1140
CHR              = $250A =  9482          rom.asm:5034
CHR4VID          = $81E0 = 33248          rom.asm:2032
CHRST68          = $39FE = 14846          rom.asm:8222
CHRST88          = $41FE = 16894          rom.asm:8506
CIRCLE           = $3349 = 13129          rom.asm:7179
CKBPS            = $3640 = 13888          rom.asm:7556
CKINCHAR         = $021F =   543          rom.asm:319
CKMAGN           = $3092 = 12434          rom.asm:6804
CLEAR            = $1AF9 =  6905          rom.asm:3534
CLEARVIDBUF      = $05D2 =  1490          rom.asm:872
CLOTST           = $182D =  6189          rom.asm:3136
CLREG            = $1649 =  5705          rom.asm:2863
CLREX2           = $3159 = 12633          rom.asm:6911
CLRG1            = $3147 = 12615          rom.asm:6903
CLRG2            = $3150 = 12624          rom.asm:6907
CLRG2PTNTBL      = $0572 =  1394          rom.asm:810
CLRMC            = $3140 = 12608          rom.asm:6899
CLRPRM           = $3530 = 13616          rom.asm:7402
CLRPSGREGS       = $0B86 =  2950          rom.asm:1571
CLRPTR           = $1624 =  5668          rom.asm:2843
CLRTABLE         = $0532 =  1330          rom.asm:777
CLRTXT           = $313D = 12605          rom.asm:6898
CLRVDBF          = $3518 = 13592          rom.asm:7382
CLS              = $3017 = 12311          rom.asm:6724
CLSQT            = $384C = 14412          rom.asm:7833
CLSQT1           = $385C = 14428          rom.asm:7841
CMP16            = $39B0 = 14768          rom.asm:8096
CMPFP            = $2BF4 = 11252          rom.asm:6141
CMPLG1           = $200D =  8205          rom.asm:4237
CMPLOG           = $200B =  8203          rom.asm:4236
CMPNUM           = $2BDA = 11226          rom.asm:6124
CMPRES           = $204F =  8271          rom.asm:4285
CMPSTR           = $2037 =  8247          rom.asm:4265
CMP_A            = $287F = 10367          rom.asm:5563
CN               = $0020 =    32          rom.asm:2081
CNMSG            = $12D2 =  4818          rom.asm:2487
CNPTR            = $1386 =  4998          rom.asm:2514 (unused)
CNTCHKSND        = $0C1F =  3103          rom.asm:1659
CNTCKCL          = $310C = 12556          rom.asm:6877
CNTCL1           = $340B = 13323          rom.asm:7266
CNTCL2           = $342F = 13359          rom.asm:7279
CNTCL3           = $3453 = 13395          rom.asm:7292
CNTCL4           = $3479 = 13433          rom.asm:7306
CNTCL5           = $349B = 13467          rom.asm:7318
CNTCL6           = $34BF = 13503          rom.asm:7331
CNTCL7           = $34E3 = 13539          rom.asm:7344
CNTDRW           = $32EF = 13039          rom.asm:7133
CNTEND           = $1CC7 =  7367          rom.asm:3779
CNTFNK           = $0D81 =  3457          rom.asm:1845
CNTKBCK          = $0D20 =  3360          rom.asm:1793
CNTLGC           = $1FCC =  8140          rom.asm:4191
CNTLTK           = $3812 = 14354          rom.asm:7802
CNTNULL          = $08DB =  2267          rom.asm:1332
CNTNULL2         = $0905 =  2309          rom.asm:1354
CNTPLOT          = $31C4 = 12740          rom.asm:6981
CNTRX2           = $35D6 = 13782          rom.asm:7507
CNTRXCHA         = $011D =   285          rom.asm:141
CNTSER           = $35A2 = 13730          rom.asm:7478
CNTSER2          = $35E1 = 13793          rom.asm:7514
CNTSER3          = $35F3 = 13811          rom.asm:7523
CNTTXA           = $01FC =   508          rom.asm:291
CNTVALY          = $3513 = 13587          rom.asm:7375
CNTWTSP          = $1944 =  6468          rom.asm:3270
CNVNUM           = $2C72 = 11378          rom.asm:6231
COLD             = $0EA7 =  3751          rom.asm:2091
COLDSTART        = $02AA =   682          rom.asm:401
COLOR            = $30EF = 12527          rom.asm:6866
COMMAN           = $80A3 = 32931          rom.asm:1976
COMPL            = $2979 = 10617          rom.asm:5730
CONCAT           = $246E =  9326          rom.asm:4933
CONEXP           = $2CA2 = 11426          rom.asm:6255
CONPOS           = $2916 = 10518          rom.asm:5654
CONT             = $1A80 =  6784          rom.asm:3464
CONTAD           = $81B9 = 33209          rom.asm:2008
CONTCRSLFT       = $077F =  1919          rom.asm:1127
CONTCRSRGT       = $07EC =  2028          rom.asm:1189
CONTROLKEYS      = $8221 = 33313          rom.asm:2052
CONT_POS_CURS    = $066B =  1643          rom.asm:975
CONVAR           = $1F69 =  8041          rom.asm:4126
CORW             = $029E =   670          rom.asm:396
COS              = $2F4C = 12108          rom.asm:6638
COUNTER          = $02E6 =   742          rom.asm:434
CPDEHL           = $17DB =  6107          rom.asm:3082
CPKEY            = $37A9 = 14249          rom.asm:7747
CPKEY1           = $37C8 = 14280          rom.asm:7764
CPKEY2           = $37B9 = 14265          rom.asm:7754
CPKEY3           = $37C0 = 14272          rom.asm:7757
CPKYEND          = $37D0 = 14288          rom.asm:7769
CPYLIT           = $171E =  5918          rom.asm:2982
CR               = $000D =    13          rom.asm:1939
CRARLP           = $21B6 =  8630          rom.asm:4495
CREARY           = $219B =  8603          rom.asm:4478
CRESTR           = $1C00 =  7168          rom.asm:3677
CRGRETURN        = $08AD =  2221          rom.asm:1308
CRNCLP           = $167F =  5759          rom.asm:2890
CRSDN            = $001F =    31          rom.asm:1953
CRSLFT           = $001C =    28          rom.asm:1950
CRSRGT           = $001D =    29          rom.asm:1951
CRSR_STATE       = $81DD = 33245          rom.asm:2029
CRSUP            = $001E =    30          rom.asm:1952
CRTMST           = $232A =  9002          rom.asm:4729
CRTST            = $2336 =  9014          rom.asm:4740
CRTSTE           = $234C =  9036          rom.asm:4754
CRUNCH           = $1676 =  5750          rom.asm:2886
CS               = $000C =    12          rom.asm:1938
CSTART           = $0EB4 =  3764          rom.asm:2097
CTC_CFG          = $3713 = 14099          rom.asm:7662
CTC_CH0          = $0010 =    16          rom.asm:36
CTC_CH1          = $0011 =    17          rom.asm:37
CTC_CH2          = $0012 =    18          rom.asm:38
CTC_CH3          = $0013 =    19          rom.asm:39
CTLOFG           = $80A5 = 32933          rom.asm:1978
CTRLC            = $0003 =     3          rom.asm:1934
CTRLG            = $0007 =     7          rom.asm:1935
CTRLO            = $000F =    15          rom.asm:1940
CTRLQ            = $0011 =    17          rom.asm:1941
CTRLR            = $0012 =    18          rom.asm:1942
CTRLS            = $0013 =    19          rom.asm:1943
CTRLU            = $0015 =    21          rom.asm:1944
CTSNDC           = $2763 = 10083          rom.asm:5405
CUROPR           = $81AA = 33194          rom.asm:1999
CURPOS           = $8190 = 33168          rom.asm:1990
CURSORDOWN       = $07F5 =  2037          rom.asm:1197
CURSORLEFT       = $075B =  1883          rom.asm:1110
CURSORRIGHT      = $07C0 =  1984          rom.asm:1166
CURSORUP         = $07A7 =  1959          rom.asm:1151
CURSOR_OFF       = $082B =  2091          rom.asm:1230
CURSOR_ON        = $0815 =  2069          rom.asm:1217
CUR_POS          = $81E3 = 33251          rom.asm:1305
DATA             = $1BA7 =  7079          rom.asm:3629
DATABT           = $81EE = 33262          rom.asm:7428
DATFLG           = $8193 = 33171          rom.asm:1993
DATLIN           = $81AE = 33198          rom.asm:2001
DATSNR           = $14F7 =  5367          rom.asm:2662
DC               = $81F5 = 33269          rom.asm:7178
DCBCDE           = $2C2B = 11307          rom.asm:6184
DD               = $0012 =    18          rom.asm:2074
DDERR            = $1506 =  5382          rom.asm:2670
DDMSG            = $124F =  4687          rom.asm:2480
DDPTR            = $1378 =  4984          rom.asm:2507 (unused)
DECLN1           = $379B = 14235          rom.asm:7739
DEC_D            = $04C9 =  1225          rom.asm:705
DEC_E            = $02E4 =   740          rom.asm:433
DEEK             = $3033 = 12339          rom.asm:6741
DEF              = $226E =  8814          rom.asm:4617
DEFFNKS          = $13ED =  5101          rom.asm:2564
DEFSIZ           = $21BE =  8638          rom.asm:4499
DEINT            = $1ABA =  6842          rom.asm:3497
DEL              = $007F =   127          rom.asm:1948
DELCHR           = $174E =  5966          rom.asm:3012
DEPINT           = $1AB4 =  6836          rom.asm:3495
DETHL4           = $2BBA = 11194          rom.asm:6095
DETHLB           = $2BBC = 11196          rom.asm:6096
DIGTXT           = $2D6C = 11628          rom.asm:6377
DIM              = $2079 =  8313          rom.asm:4311
DIMRET           = $2070 =  8304          rom.asm:4306
DINPOS           = $1810 =  6160          rom.asm:3116
DINT             = $2A56 = 10838          rom.asm:5875
DIRMOD           = $3727 = 14119          rom.asm:7672
DIR_PAU          = $305E = 12382          rom.asm:6770 (unused)
DIV              = $2AB3 = 10931          rom.asm:5916
DIV1             = $806B = 32875          rom.asm:1967
DIV10            = $2AA7 = 10919          rom.asm:5911
DIV2             = $806F = 32879          rom.asm:1968
DIV3             = $8073 = 32883          rom.asm:1969
DIV4             = $8076 = 32886          rom.asm:1970
DIVLP            = $2ADA = 10970          rom.asm:5940
DIVSUP           = $806A = 32874          rom.asm:1966
DIV_16_8         = $39EF = 14831          rom.asm:8188
DIV_16_8LP       = $39F2 = 14834          rom.asm:8190
DIV_8_8          = $39DF = 14815          rom.asm:8165
DIV_8_8LOOP      = $39E3 = 14819          rom.asm:8168
DLSZ             = $33CD = 13261          rom.asm:7239
DOAGN            = $1662 =  5730          rom.asm:2876
DOCOM            = $1CCC =  7372          rom.asm:3783
DODEL            = $172E =  5934          rom.asm:2996
DOEBIT           = $2DAC = 11692          rom.asm:6420
DOFN             = $229B =  8859          rom.asm:4645
DOKE             = $303E = 12350          rom.asm:6749
DOSPC            = $1CFA =  7418          rom.asm:3806
DOTAB            = $1CE5 =  7397          rom.asm:3795
DPOINT           = $2C9E = 11422          rom.asm:6253
DRAW             = $3222 = 12834          rom.asm:7060
DRWCRL           = $33E9 = 13289          rom.asm:7254
DTSTR            = $233A =  9018          rom.asm:4743
DVBCDE           = $2AB5 = 10933          rom.asm:5918
DX               = $81F7 = 33271          rom.asm:7058
DXGR             = $331F = 13087          rom.asm:7150
DY               = $81F9 = 33273          rom.asm:7059
DZ               = $0014 =    20          rom.asm:2075
DZERR            = $1500 =  5376          rom.asm:2666
DZMSG            = $1264 =  4708          rom.asm:2481
DZPTR            = $137A =  4986          rom.asm:2508 (unused)
E2               = $81F1 = 33265          rom.asm:7055
ECHDEL           = $1742 =  5954          rom.asm:3005
ECHO_CHAR        = $02BC =   700          rom.asm:410
EDIGIT           = $2CE5 = 11493          rom.asm:6302
EMPTSNDBFR       = $0B82 =  2946          rom.asm:1568
EMPTVRM          = $09C3 =  2499          rom.asm:1418
EMPTYCHABFR      = $01B5 =   437          rom.asm:245
EMPTYG2          = $0560 =  1376          rom.asm:802
EMPTYMC          = $0591 =  1425          rom.asm:828
EMPTYVIDBUF      = $0537 =  1335          rom.asm:781
EMPTY_RAM        = $09CC =  2508          rom.asm:1426
EMPTY_VRAM       = $09B8 =  2488          rom.asm:1411
ENDBUF           = $1725 =  5925          rom.asm:2988
ENDCON           = $2CB1 = 11441          rom.asm:6265
ENDCRL           = $33E5 = 13285          rom.asm:7250
ENDCTRLCK        = $0CC1 =  3265          rom.asm:1746
ENDDIM           = $221D =  8733          rom.asm:4568
ENDDRAW          = $3345 = 13125          rom.asm:7163
ENDINK           = $28AA = 10410          rom.asm:5587
ENDINK2          = $28B3 = 10419          rom.asm:5594 (unused)
ENDINP           = $1CB3 =  7347          rom.asm:3770
ENDNAM           = $209B =  8347          rom.asm:4327
ENDPRG           = $1A56 =  6742          rom.asm:3444
ENDTXT           = $81E7 = 33255          rom.asm:1307
ENDVDPSET        = $0466 =  1126          rom.asm:650
ENFMEM           = $14C3 =  5315          rom.asm:2626
ER               = $81EF = 33263          rom.asm:7054
ER2              = $32C9 = 13001          rom.asm:7120
ERASECLRTBL      = $04E5 =  1253          rom.asm:722
ERRIN            = $1535 =  5429          rom.asm:2694
ERRINT           = $1A7A =  6778          rom.asm:3460
ERRLIN           = $81B7 = 33207          rom.asm:2007
ERRMSG           = $146F =  5231          rom.asm:2577
ERROR            = $1511 =  5393          rom.asm:2678
ERRORS           = $11CC =  4556          rom.asm:2470 (unused)
ERRTBL           = $1366 =  4966          rom.asm:2497
ESC              = $001B =    27          rom.asm:1946
EVAL             = $1E8B =  7819          rom.asm:4010
EVAL1            = $1E8E =  7822          rom.asm:4012
EVAL2            = $1E97 =  7831          rom.asm:4016
EVAL3            = $1E9A =  7834          rom.asm:4017
EVLPAR           = $1F50 =  8016          rom.asm:4112
EVNOT            = $2059 =  8281          rom.asm:4293
EXCUTE           = $19E4 =  6628          rom.asm:3364
EXG2MD           = $0428 =  1064          rom.asm:618
EXITCHAR2VID     = $0716 =  1814          rom.asm:1064
EXITCURSORDOWN   = $0812 =  2066          rom.asm:1211
EXITCURSORLEFT   = $0782 =  1922          rom.asm:1128
EXITCURSORRGHT   = $07F2 =  2034          rom.asm:1191
EXITCURSORUP     = $07BE =  1982          rom.asm:1161
EXITCURSOR_ON    = $0829 =  2089          rom.asm:1226
EXITGM           = $14D7 =  5335          rom.asm:2642
EXITSER          = $36E8 = 14056          rom.asm:7645 (unused)
EXMUL16          = $39D3 = 14803          rom.asm:8136
EXP              = $2E46 = 11846          rom.asm:6507
EXPLP            = $2C90 = 11408          rom.asm:6245
EXPTAB           = $2E86 = 11910          rom.asm:6535
EXPTEN           = $2DBE = 11710          rom.asm:6430
EXTIG            = $1DFA =  7674          rom.asm:3935
EXTXA            = $0210 =   528          rom.asm:302
FANDT            = $1E23 =  7715          rom.asm:3953
FC               = $0008 =     8          rom.asm:2069
FCERR            = $1ACF =  6863          rom.asm:3507
FCMSG            = $1205 =  4613          rom.asm:2475
FCPTR            = $136E =  4974          rom.asm:2502 (unused)
FDTLP            = $1E0A =  7690          rom.asm:3937
FINDEL           = $21F9 =  8697          rom.asm:4540
FINDKEY          = $0CD4 =  3284          rom.asm:1756
FLASHCURSOR      = $0724 =  1828          rom.asm:1077
FLGDIF           = $2B6A = 11114          rom.asm:6037
FLGREL           = $2B71 = 11121          rom.asm:6043
FNARG            = $81C5 = 33221          rom.asm:2014
FNCTAB           = $0F9A =  3994          rom.asm:2193
FNDARY           = $2169 =  8553          rom.asm:4448
FNDBPS           = $3659 = 13913          rom.asm:7566
FNDELP           = $21FE =  8702          rom.asm:4545
FNDEND           = $15F7 =  5623          rom.asm:2806
FNDNUM           = $25FD =  9725          rom.asm:5184
FNDTOK           = $1906 =  6406          rom.asm:3235
FNDVAR           = $20E0 =  8416          rom.asm:4359
FNDWRD           = $16A9 =  5801          rom.asm:2910
FNKEYS           = $80B3 = 32947          rom.asm:1986
FNKEYSORD        = $0D9F =  3487          rom.asm:1862
FNOFST           = $1F7A =  8058          rom.asm:4136
FNRGNM           = $81C3 = 33219          rom.asm:2013
FNTHR            = $20EE =  8430          rom.asm:4367
FNVAL            = $1FA1 =  8097          rom.asm:4158
FOPRND           = $1EC3 =  7875          rom.asm:4038
FOR              = $194B =  6475          rom.asm:3275
FORFLG           = $81B0 = 33200          rom.asm:2002
FORFND           = $197B =  6523          rom.asm:3303
FORSLP           = $195F =  6495          rom.asm:3284
FPADD            = $28C8 = 10440          rom.asm:5605
FPBCDE           = $2BA0 = 11168          rom.asm:6074
FPEXP            = $81CC = 33228          rom.asm:2016
FPINT            = $2C07 = 11271          rom.asm:6161
FPMULT           = $2A03 = 10755          rom.asm:5816
FPREG            = $81C9 = 33225          rom.asm:2015
FPROND           = $2960 = 10592          rom.asm:5706
FPSINT           = $1AAE =  6830          rom.asm:3493
FPTHL            = $2BB7 = 11191          rom.asm:6094
FRE              = $2238 =  8760          rom.asm:4586
FRENUM           = $2254 =  8788          rom.asm:4598
FRGNDCLR         = $81E1 = 33249          rom.asm:2033
FRMEVL           = $1F6C =  8044          rom.asm:4127
FWVER            = $00E0 =   224          rom.asm:125 (unused)
G1MD             = $03A7 =   935          rom.asm:557
G2MD             = $03E3 =   995          rom.asm:588
GARBGE           = $23BB =  9147          rom.asm:4816
GARBLP           = $23BE =  9150          rom.asm:4817
GETCHR           = $1A04 =  6660          rom.asm:3387
GETCMD           = $1564 =  5476          rom.asm:2718
GETHEX           = $3906 = 14598          rom.asm:7947
GETINP           = $3015 = 12309          rom.asm:6721
GETINT           = $2600 =  9728          rom.asm:5185
GETLEN           = $24EE =  9454          rom.asm:5014
GETLIN           = $175F =  5983          rom.asm:3020
GETLN            = $1AD5 =  6869          rom.asm:3511
GETNUM           = $1E79 =  7801          rom.asm:3999
GETNXT           = $16C4 =  5828          rom.asm:2925
GETSTR           = $24B8 =  9400          rom.asm:4980
GETVAR           = $207E =  8318          rom.asm:4314
GM               = $002A =    42          rom.asm:2086
GMERR            = $3549 = 13641          rom.asm:7417
GMMSG            = $131D =  4893          rom.asm:2492
GMNCR            = $17B6 =  6070          rom.asm:3062
GMPRT            = $1390 =  5008          rom.asm:2519 (unused)
GNXARY           = $23F2 =  9202          rom.asm:4842
GOFUNC           = $1FA9 =  8105          rom.asm:4162
GOSUB            = $1B53 =  6995          rom.asm:3580
GOTO             = $1B64 =  7012          rom.asm:3592
GRBARY           = $2412 =  9234          rom.asm:4861
GRBDON           = $2393 =  9107          rom.asm:4791
GRBLP            = $23CC =  9164          rom.asm:4823
GSTRCU           = $24BB =  9403          rom.asm:4981
GSTRDE           = $24BF =  9407          rom.asm:4983
GSTRHL           = $24BE =  9406          rom.asm:4982
GTFLNM           = $24FD =  9469          rom.asm:5024 (unused)
GTFNAM           = $2083 =  8323          rom.asm:4317
GTLNLP           = $1AD8 =  6872          rom.asm:3512
GTSIXD           = $2D36 = 11574          rom.asm:6346
GTVLUS           = $1D76 =  7542          rom.asm:3865
HALF             = $2DDD = 11741          rom.asm:6451
HALFPI           = $2F96 = 12182          rom.asm:6669
HELLOWRLD        = $02D6 =   726          rom.asm:425
HELP             = $3733 = 14131          rom.asm:7683
HEX              = $389A = 14490          rom.asm:7875
HEX1             = $38B2 = 14514          rom.asm:7888
HEX2             = $38B4 = 14516          rom.asm:7890
HEX3             = $38C1 = 14529          rom.asm:7898
HEX4             = $38C3 = 14531          rom.asm:7900
HEXIT            = $391D = 14621          rom.asm:7962
HEXLP            = $38F9 = 14585          rom.asm:7937
HEXLP1           = $38FE = 14590          rom.asm:7939
HEXTFP           = $38ED = 14573          rom.asm:7932
HL2XY            = $067A =  1658          rom.asm:986
HLPERR           = $3749 = 14153          rom.asm:7694
HLPLN            = $80B1 = 32945          rom.asm:1985
HOME             = $0019 =    25          rom.asm:1945
HP               = $0030 =    48          rom.asm:2089
HPMSG            = $135C =  4956          rom.asm:2495
HPPTR            = $1396 =  5014          rom.asm:2522 (unused)
HX               = $0026 =    38          rom.asm:2084
HXERR            = $3926 = 14630          rom.asm:7970
HXMSG            = $1307 =  4871          rom.asm:2490
HXPTR            = $138C =  5004          rom.asm:2517 (unused)
ID               = $0016 =    22          rom.asm:2076
IDMSG            = $1275 =  4725          rom.asm:2482
IDPTR            = $137C =  4988          rom.asm:2509 (unused)
IDTEST           = $22E3 =  8931          rom.asm:4686
IF               = $1C36 =  7222          rom.asm:3710
IFGO             = $1C44 =  7236          rom.asm:3717
IFJMP            = $19EB =  6635          rom.asm:3367
INCHL            = $2BB5 = 11189          rom.asm:6091
INCLEN           = $180C =  6156          rom.asm:3114
INCTMR3          = $023B =   571          rom.asm:344
INDFND           = $14A0 =  5280          rom.asm:2602
INEWLN           = $15BF =  5567          rom.asm:2766
INIT             = $0EBB =  3771          rom.asm:2101
INITAB           = $1398 =  5016          rom.asm:2526
INITBE           = $146F =  5231          rom.asm:2573
INITST           = $399B = 14747          rom.asm:8048
INIT_HW          = $0251 =   593          rom.asm:363
INKEY            = $2874 = 10356          rom.asm:5558
INKEY2           = $288E = 10382          rom.asm:5571
INMSG            = $1476 =  5238          rom.asm:2578
INP              = $25BD =  9661          rom.asm:5153
INPBIN           = $1DC8 =  7624          rom.asm:3909
INPBRK           = $1A53 =  6739          rom.asm:3442
INPORT           = $80A0 = 32928          rom.asm:1974
INPSUB           = $809F = 32927          rom.asm:1973
INPUT            = $1D33 =  7475          rom.asm:3829
INRNG            = $2D3F = 11583          rom.asm:6351
INT              = $2C32 = 11314          rom.asm:6192
INTVAR           = $1633 =  5683          rom.asm:2854
INVSGN           = $2B88 = 11144          rom.asm:6056
ITMSEP           = $1DB9 =  7609          rom.asm:3900
JSTZER           = $2DC8 = 11720          rom.asm:6436
KBDNPT           = $821D = 33309          rom.asm:2048
KBMAP            = $0DA7 =  3495          rom.asm:1865
KBMAP_ALT        = $0E27 =  3623          rom.asm:1885
KBMAP_CTRL       = $0E67 =  3687          rom.asm:1895
KBMAP_SFT        = $0DE7 =  3559          rom.asm:1875
KBTMP            = $821E = 33310          rom.asm:2049
KEY              = $374E = 14158          rom.asm:7699
KEYBOARD         = $0C3F =  3135          rom.asm:1682
KEYCH            = $376B = 14187          rom.asm:7715
KILFOR           = $1E69 =  7785          rom.asm:3990
KILIN            = $1759 =  5977          rom.asm:3017
LASTKEYPRSD      = $8220 = 33312          rom.asm:2051
LCRFLG           = $8191 = 33169          rom.asm:1991
LDCLRTBEX2       = $045D =  1117          rom.asm:643
LDCLRTBMD1       = $03DA =   986          rom.asm:581
LDCOLSTOEMPTY    = $0551 =  1361          rom.asm:792
LDFNKEYCHR       = $0D6D =  3437          rom.asm:1835
LDG1             = $14E4 =  5348          rom.asm:2648
LDG1ND           = $14F5 =  5365          rom.asm:2658
LDKEY            = $37FD = 14333          rom.asm:7793
LDREGVLS         = $09E9 =  2537          rom.asm:1446
LEDLIGHT         = $02E0 =   736          rom.asm:431
LEFT             = $251A =  9498          rom.asm:5042
LEN              = $24EA =  9450          rom.asm:5012
LET              = $1BBE =  7102          rom.asm:3645
LETNUM           = $1C11 =  7185          rom.asm:3687
LETSTR           = $1BD9 =  7129          rom.asm:3658
LF               = $000A =    10          rom.asm:1937
LFRGNM           = $25B3 =  9651          rom.asm:5144
LINEAT           = $80AF = 32943          rom.asm:1984
LINEIN           = $2CF1 = 11505          rom.asm:6312
LINFND           = $15A8 =  5544          rom.asm:2752
LIST             = $1840 =  6208          rom.asm:3148
LISTLP           = $18C3 =  6339          rom.asm:3197
LM80CLOGO        = $0A3C =  2620          rom.asm:1531
LOADCHARSET      = $09F3 =  2547          rom.asm:1455
LOADCLR          = $3160 = 12640          rom.asm:6914
LOADFP           = $2BAE = 11182          rom.asm:6084
LOADLOGOCHRS     = $0511 =  1297          rom.asm:752
LOADMAP          = $0CFA =  3322          rom.asm:1773
LOADNEXTCOL      = $085D =  2141          rom.asm:1257
LOAD_CRSR_POS    = $0656 =  1622          rom.asm:964
LOCATE           = $26CD =  9933          rom.asm:5319
LOG              = $29C2 = 10690          rom.asm:5784
LOGOFONT         = $49FE = 18942          rom.asm:8776
LOGTAB           = $29B5 = 10677          rom.asm:5779
LOKFOR           = $148A =  5258          rom.asm:2585
LOOPST           = $81AC = 33196          rom.asm:2000
LS               = $001C =    28          rom.asm:2079
LSBTMR           = $2231 =  8753          rom.asm:4580
LSMSG            = $12A7 =  4775          rom.asm:2485
LSPTR            = $1382 =  4994          rom.asm:2512 (unused)
LST01            = $186C =  6252          rom.asm:3165
LST01H           = $186F =  6255          rom.asm:3166
LST03            = $18A9 =  6313          rom.asm:3186
LST04            = $1886 =  6278          rom.asm:3174 (unused)
LST05            = $18B7 =  6327          rom.asm:3193
LST06            = $188D =  6285          rom.asm:3176
LST07            = $18E8 =  6376          rom.asm:3217
LST08            = $18E5 =  6373          rom.asm:3216
LSTALL           = $1891 =  6289          rom.asm:3178
LSTBIN           = $81B1 = 33201          rom.asm:2003
LSTCSRSTA        = $81DE = 33246          rom.asm:2030
LSTKEYS          = $37D2 = 14290          rom.asm:7772
LSTLP2           = $18F4 =  6388          rom.asm:3226
LSTLP3           = $18F7 =  6391          rom.asm:3227
LSTRAM           = $8194 = 33172          rom.asm:1994
LSTRND           = $809B = 32923          rom.asm:1972
LTSTND           = $1DD3 =  7635          rom.asm:3914
LVKBRDCHK        = $0D54 =  3412          rom.asm:1816
LVKBRDCHK2       = $0D50 =  3408          rom.asm:1814
LVRXCHA          = $012E =   302          rom.asm:149
LWIDTH           = $80A2 = 32930          rom.asm:1975
MAKINT           = $2603 =  9731          rom.asm:5186
MAKNUM           = $2D5B = 11611          rom.asm:6366
MANLP            = $2C7A = 11386          rom.asm:6237
MATCH            = $16F6 =  5878          rom.asm:2957
MCMD             = $0405 =  1029          rom.asm:603
MEMMSG           = $0F8F =  3983          rom.asm:2182
MID              = $2554 =  9556          rom.asm:5082
MID1             = $2520 =  9504          rom.asm:5046
MIDNUM           = $25B8 =  9656          rom.asm:5147
MINCDE           = $2908 = 10504          rom.asm:5640
MINUS            = $1F58 =  8024          rom.asm:4117
MIXCLRS          = $3189 = 12681          rom.asm:6943
MKTMST           = $2327 =  8999          rom.asm:4728
MLDBLP           = $2C53 = 11347          rom.asm:6213
MLDEBC           = $2C4B = 11339          rom.asm:6208
MLOOP            = $0EE9 =  3817          rom.asm:2119
MLP              = $39C3 = 14787          rom.asm:8125
MLP1             = $39CA = 14794          rom.asm:8129
MLSP10           = $2B48 = 11080          rom.asm:6017
MNGSNDS          = $0BDE =  3038          rom.asm:1622
MNOASK           = $0EE6 =  3814          rom.asm:2118
MO               = $0024 =    36          rom.asm:2083
MOD              = $2A5E = 10846          rom.asm:5885
MOMSG            = $12F7 =  4855          rom.asm:2489
MONOUT           = $398D = 14733          rom.asm:8039
MOPTR            = $138A =  5002          rom.asm:2516 (unused)
MORDT            = $1DDF =  7647          rom.asm:3919
MORINP           = $1768 =  5992          rom.asm:3025
MOVBUF           = $15DE =  5598          rom.asm:2787
MOVCRS           = $062F =  1583          rom.asm:942
MOVDIR           = $16FE =  5886          rom.asm:2965
MOVLP            = $14AF =  5295          rom.asm:2612
MOVSTR           = $14AC =  5292          rom.asm:2609
MOVUP            = $14A9 =  5289          rom.asm:2608
MRPRNT           = $1C56 =  7254          rom.asm:3724
MSGTXT1          = $031A =   794          rom.asm:489
MSGTXT2          = $0343 =   835          rom.asm:491
MSIZE            = $0ED6 =  3798          rom.asm:2112
MUL16            = $39BB = 14779          rom.asm:8117
MUL8LP           = $2A2E = 10798          rom.asm:5839
MULLN2           = $29FA = 10746          rom.asm:5810
MULT             = $2A01 = 10753          rom.asm:5814
MULT8            = $2A25 = 10789          rom.asm:5833
MULTEN           = $2CBC = 11452          rom.asm:6273
MULVAL           = $8231 = 33329          rom.asm:2058
MVCRS2LFT        = $0784 =  1924          rom.asm:1132
MVSTPT           = $1C08 =  7176          rom.asm:3681
NEDMOR           = $1D72 =  7538          rom.asm:3863
NEGAFT           = $2DF3 = 11763          rom.asm:6460
NEW              = $1623 =  5667          rom.asm:2842
NEWCRSRCOORD     = $0638 =  1592          rom.asm:948
NEXITM           = $1D09 =  7433          rom.asm:3815
NEXT             = $1E2E =  7726          rom.asm:3958
NEXT1            = $1E31 =  7729          rom.asm:3959
NF               = $0000 =     0          rom.asm:2065
NFERR            = $1503 =  5379          rom.asm:2668
NFMSG            = $11CC =  4556          rom.asm:2471
NFPTR            = $1366 =  4966          rom.asm:2498 (unused)
NLLCR            = $0000 =     0          rom.asm:1933
NM1              = $262C =  9772          rom.asm:5210
NMI              = $2611 =  9745          rom.asm:5197
NMI2             = $263D =  9789          rom.asm:5218
NMIDINT          = $2648 =  9800          rom.asm:5227
NMIEINT          = $2641 =  9793          rom.asm:5223
NMIFLG           = $80A8 = 32936          rom.asm:1980
NMIINT           = $264B =  9803          rom.asm:5228
NMIUSR           = $8061 = 32865          rom.asm:1962
NMIVR1           = $2657 =  9815          rom.asm:5239
NOBEEP           = $0BB0 =  2992          rom.asm:1591
NOBPDAT          = $0BCC =  3020          rom.asm:1605
NOCHNG           = $16EE =  5870          rom.asm:2952
NOENED           = $2DCB = 11723          rom.asm:6439
NOGD             = $3216 = 12822          rom.asm:7037
NOISUP           = $27E8 = 10216          rom.asm:5473
NOKEYPRSD        = $0CC5 =  3269          rom.asm:1748
NOLIN            = $1A69 =  6761          rom.asm:3453
NOMADD           = $2A3F = 10815          rom.asm:5850
NOMLAD           = $2C61 = 11361          rom.asm:6221
NOPMPT           = $1D4D =  7501          rom.asm:3841
NORMAL           = $2933 = 10547          rom.asm:5675
NOS1             = $2805 = 10245          rom.asm:5486
NOS2             = $2817 = 10263          rom.asm:5498
NOS3             = $282F = 10287          rom.asm:5516
NOSPC            = $16E5 =  5861          rom.asm:2947
NOSUB7           = $3919 = 14617          rom.asm:7958
NOSWAP           = $28E2 = 10466          rom.asm:5621
NOSYSPR          = $2686 =  9862          rom.asm:5268
NOTAMP           = $1F2D =  7981          rom.asm:4098
NOTFULL          = $013D =   317          rom.asm:163
NOTRDWRAP        = $01DD =   477          rom.asm:270
NOTSTR           = $20B6 =  8374          rom.asm:4339
NOTWRAP          = $0149 =   329          rom.asm:169
NOXOR            = $25E3 =  9699          rom.asm:5170
NSCFOR           = $20C6 =  8390          rom.asm:4347
NULFLG           = $80A4 = 32932          rom.asm:1977
NUMASC           = $2D04 = 11524          rom.asm:6322
NXTARY           = $217D =  8573          rom.asm:4460
NXTBYT           = $16D4 =  5844          rom.asm:2937
NXTCHAR          = $0A06 =  2566          rom.asm:1466
NXTCHR           = $1715 =  5909          rom.asm:2977
NXTDAT           = $81C1 = 33217          rom.asm:2012
NXTDTA           = $1BA6 =  7078          rom.asm:3627
NXTITM           = $1D6A =  7530          rom.asm:3858
NXTLN            = $191E =  6430          rom.asm:3248
NXTOPR           = $81B5 = 33205          rom.asm:2006
NXTSTL           = $1BAD =  7085          rom.asm:3632
NXTSTT           = $1BB0 =  7088          rom.asm:3635
OD               = $0006 =     6          rom.asm:2068
ODMSG            = $11F9 =  4601          rom.asm:2474
ODPTR            = $136C =  4972          rom.asm:2501 (unused)
OKMSG            = $147B =  5243          rom.asm:2580
OM               = $000C =    12          rom.asm:2071
OMERR            = $14D2 =  5330          rom.asm:2637
OMMSG            = $1224 =  4644          rom.asm:2477
OMPTR            = $1372 =  4978          rom.asm:2504 (unused)
ON               = $1C18 =  7192          rom.asm:3693
ONGO             = $1C27 =  7207          rom.asm:3701
ONGOLP           = $1C28 =  7208          rom.asm:3702
ONJMP            = $19EC =  6636          rom.asm:3369
OPNPAR           = $1E87 =  7815          rom.asm:4008
OPNQT            = $385E = 14430          rom.asm:7844
OPNQT1           = $3874 = 14452          rom.asm:7854
OPRND            = $1F02 =  7938          rom.asm:4081
OS               = $001A =    26          rom.asm:2078
OSMSG            = $1293 =  4755          rom.asm:2484
OSPTR            = $1380 =  4992          rom.asm:2511 (unused)
OTKLN            = $1756 =  5974          rom.asm:3016
OTPORT           = $8068 = 32872          rom.asm:1965
OUTC             = $17EC =  6124          rom.asm:3097
OUTEXP           = $2DBC = 11708          rom.asm:6429
OUTIT            = $17D0 =  6096          rom.asm:3076
OUTNBS           = $17D3 =  6099          rom.asm:3078
OUTNCR           = $39AA = 14762          rom.asm:8060
OUTSUB           = $8067 = 32871          rom.asm:1964
OUTWRD           = $1910 =  6416          rom.asm:3241
OV               = $000A =    10          rom.asm:2070
OVERR            = $150C =  5388          rom.asm:2674
OVMSG            = $121B =  4635          rom.asm:2476
OVPTR            = $1370 =  4976          rom.asm:2503 (unused)
OVTST1           = $2B3B = 11067          rom.asm:6009
OVTST2           = $2B40 = 11072          rom.asm:6012
OVTST3           = $2B41 = 11073          rom.asm:6013
PADD             = $2CE0 = 11488          rom.asm:6298
PAND             = $1FC2 =  8130          rom.asm:4184
PAND1            = $1FE7 =  8167          rom.asm:4207 (unused)
PARBT            = $81EF = 33263          rom.asm:7429
PASSA            = $2269 =  8809          rom.asm:4613
PAUSE            = $3055 = 12373          rom.asm:6765
PBUFF            = $8224 = 33316          rom.asm:2057
PEEK             = $2693 =  9875          rom.asm:5280
PEND             = $1A4E =  6734          rom.asm:3439
PHLTFP           = $2B9D = 11165          rom.asm:6073
PIO_CA           = $0002 =     2          rom.asm:32 (unused)
PIO_CB           = $0003 =     3          rom.asm:33
PIO_DA           = $0000 =     0          rom.asm:30 (unused)
PIO_DB           = $0001 =     1          rom.asm:31
PKEPRMS          = $26A7 =  9895          rom.asm:5295
PLOT             = $31A9 = 12713          rom.asm:6971
PLTCRL           = $33DC = 13276          rom.asm:7247
PLUCDE           = $296D = 10605          rom.asm:5717
PNORM            = $293B = 10555          rom.asm:5683
PNT2VD           = $0D4D =  3405          rom.asm:1813
POKE             = $26BD =  9917          rom.asm:5305
POPAF            = $23AD =  9133          rom.asm:4806
POPHL            = $24D7 =  9431          rom.asm:4997
POPHRT           = $2A4F = 10831          rom.asm:5864
POPNOK           = $1556 =  5462          rom.asm:2710
POR              = $1FC5 =  8133          rom.asm:4186
POR1             = $1FEC =  8172          rom.asm:4212
POS              = $2266 =  8806          rom.asm:4612
POSINT           = $1AB1 =  6833          rom.asm:3494
POS_CURSOR       = $0625 =  1573          rom.asm:936
POS_TB_CRS_32    = $0958 =  2392          rom.asm:1401
POS_TB_CRS_40    = $0988 =  2440          rom.asm:1405
POUT             = $25C9 =  9673          rom.asm:5158
POWER            = $2E01 = 11777          rom.asm:6468
POWER1           = $2E11 = 11793          rom.asm:6476
POWER2           = $2E2E = 11822          rom.asm:6494
POWERS           = $2DE1 = 11745          rom.asm:6453
PRINT            = $1C5A =  7258          rom.asm:3726
PRITAB           = $11AE =  4526          rom.asm:2438
PRNTCRLF         = $1CBD =  7357          rom.asm:3775
PRNTFNK          = $0D92 =  3474          rom.asm:1853
PRNTFNKEY        = $0D55 =  3413          rom.asm:1818
PRNTHL           = $2CF9 = 11513          rom.asm:6316
PRNTLP           = $1C5D =  7261          rom.asm:3727
PRNTNB           = $1CA0 =  7328          rom.asm:3759
PRNTOK           = $1557 =  5463          rom.asm:2713
PRNTRETURN       = $0937 =  2359          rom.asm:1378
PRNTST           = $1CA4 =  7332          rom.asm:3761
PRNTVIDEO        = $81DF = 33247          rom.asm:2031
PRNUMS           = $2377 =  9079          rom.asm:4775
PROCES           = $1781 =  6017          rom.asm:3036
PROGND           = $81BB = 33211          rom.asm:2009
PROGST           = $8234 = 33332          rom.asm:2059
PROMPT           = $1666 =  5734          rom.asm:2879
PRS              = $2378 =  9080          rom.asm:4776
PRS1             = $237B =  9083          rom.asm:4777
PRSLP            = $2382 =  9090          rom.asm:4780
PRTCHR           = $3827 = 14375          rom.asm:7815
PRTCKEY          = $3876 = 14454          rom.asm:7857
PRTEND           = $3883 = 14467          rom.asm:7864
PRTK1            = $3877 = 14455          rom.asm:7858
PRTK2            = $37E6 = 14310          rom.asm:7784 (unused)
PRTK3            = $380F = 14351          rom.asm:7801
PRTK4            = $37E4 = 14308          rom.asm:7783
PRTNUM           = $81EB = 33259          rom.asm:7426
PSG_DAT          = $0041 =    65          rom.asm:53
PSG_REG          = $0040 =    64          rom.asm:52
PSUB             = $28C3 = 10435          rom.asm:5602
PTCHR1           = $3844 = 14404          rom.asm:7829
PTLN             = $1552 =  5458          rom.asm:2707
PTRLP            = $15EB =  5611          rom.asm:2796
PUTBUF           = $17BC =  6076          rom.asm:3065
PUTCHRBUF        = $0D40 =  3392          rom.asm:1808
PUTCHRBUF1       = $0D87 =  3463          rom.asm:1848
PUTCRSCHR        = $0744 =  1860          rom.asm:1095
PUTCTL           = $17C1 =  6081          rom.asm:3067
PUTFID           = $19C0 =  6592          rom.asm:3341
PXLSET           = $321A = 12826          rom.asm:7041
PXOR             = $1FCA =  8138          rom.asm:4189
PXOR1            = $1FF4 =  8180          rom.asm:4218
QTSTLP           = $233D =  9021          rom.asm:4745
QTSTR            = $2337 =  9015          rom.asm:4741
QUARTR           = $2F9A = 12186          rom.asm:6671
RADIUS           = $81EF = 33263          rom.asm:7175
RAWPRINT         = $0224 =   548          rom.asm:325
READ             = $1D65 =  7525          rom.asm:3855
READFG           = $81B2 = 33202          rom.asm:2004
READKBLN         = $0C2A =  3114          rom.asm:1668
READ_VIDEO_LOC   = $05E9 =  1513          rom.asm:886
READ_VSTAT       = $061E =  1566          rom.asm:929
RECWRD           = $3038 = 12344          rom.asm:6744 (unused)
REDO             = $1D10 =  7440          rom.asm:3819
REM              = $1BA9 =  7081          rom.asm:3630
RESDIV           = $2AED = 10989          rom.asm:5953
RESEED           = $2F38 = 12088          rom.asm:6627
RESET            = $3990 = 14736          rom.asm:8042
RESTMR           = $0315 =   789          rom.asm:483
RESTNL           = $1A29 =  6697          rom.asm:3410
RESTOR           = $1A14 =  6676          rom.asm:3399
RESZER           = $292E = 10542          rom.asm:5671
RETADR           = $212D =  8493          rom.asm:4407
RETINT           = $2B76 = 11126          rom.asm:6045
RETLIN           = $1BA1 =  7073          rom.asm:3624
RETNAD           = $16FA =  5882          rom.asm:2961
RETNUL           = $2130 =  8496          rom.asm:4411
RETNUM           = $1F64 =  8036          rom.asm:4122
RETREL           = $2B68 = 11112          rom.asm:6035
RETURN           = $1B82 =  7042          rom.asm:3608
RG               = $0004 =     4          rom.asm:2067
RGMSG            = $11E4 =  4580          rom.asm:2473
RGPTR            = $136A =  4970          rom.asm:2500 (unused)
RIGHT            = $254A =  9546          rom.asm:5075
RIGHT1           = $251E =  9502          rom.asm:5044
RINPUT           = $80AA = 32938          rom.asm:1982
RLTLP            = $1EA7 =  7847          rom.asm:4024
RND              = $2ED7 = 11991          rom.asm:6574
RND1             = $2F13 = 12051          rom.asm:6605
RND2             = $2F2F = 12079          rom.asm:6623
RNDTAB           = $2F40 = 12096          rom.asm:6634
RNGTST           = $2DCE = 11726          rom.asm:6443
RONDB            = $294F = 10575          rom.asm:5695
RONDUP           = $294E = 10574          rom.asm:5694
ROUND            = $28B6 = 10422          rom.asm:5596
RPT100           = $04F3 =  1267          rom.asm:729
RPT101           = $049A =  1178          rom.asm:677
RPT102           = $049D =  1181          rom.asm:679
RPT103           = $04B3 =  1203          rom.asm:692
RPT104           = $04BB =  1211          rom.asm:696
RPTCL1           = $33A0 = 13216          rom.asm:7217
RPTCRL           = $338D = 13197          rom.asm:7211
RPTCVB1          = $3520 = 13600          rom.asm:7387
RPTCVB2          = $3529 = 13609          rom.asm:7392
RPTDRW           = $32D3 = 13011          rom.asm:7124
RPTEMPTYBUF      = $0557 =  1367          rom.asm:796
RPTEMPTYROW      = $08A1 =  2209          rom.asm:1293
RPTFLL1          = $05BF =  1471          rom.asm:856
RPTKBDRD         = $0C7F =  3199          rom.asm:1712
RPTLDCL          = $316A = 12650          rom.asm:6919
RPTNLLSRC        = $08CB =  2251          rom.asm:1322
RPTNLLSRC2       = $08F6 =  2294          rom.asm:1346
RPTPS            = $3063 = 12387          rom.asm:6773
RPTRSSR          = $3575 = 13685          rom.asm:7453
RPTWLCMBP        = $0BB6 =  2998          rom.asm:1594
RPVOLCG          = $2740 = 10048          rom.asm:5380
RSCALE           = $2CDA = 11482          rom.asm:6296
RST00            = $0000 =     0          rom.asm:75 (unused)
RST08            = $0008 =     8          rom.asm:81 (unused)
RST10            = $0010 =    16          rom.asm:96 (unused)
RST18            = $0018 =    24          rom.asm:107 (unused)
RSTCHRCRS        = $064D =  1613          rom.asm:958
RSTPSG           = $0B8D =  2957          rom.asm:1574
RSTSER1          = $3568 = 13672          rom.asm:7445
RSTSTR           = $256D =  9581          rom.asm:5095
RSTVDPRAMREG     = $09D2 =  2514          rom.asm:1430
RUN              = $1B3F =  6975          rom.asm:3571
RUNCNT           = $19C4 =  6596          rom.asm:3345
RUNFST           = $162F =  5679          rom.asm:2851
RUNLIN           = $1B63 =  7011          rom.asm:3591
RXA              = $01C8 =   456          rom.asm:259
RXA_EXIT         = $01EE =   494          rom.asm:277
RXEND            = $35DD = 13789          rom.asm:7510
RX_CHA_AVAIL     = $0100 =   256          rom.asm:129
SA               = $002E =    46          rom.asm:2088
SAMSG            = $1343 =  4931          rom.asm:2494
SAPTR            = $1394 =  5012          rom.asm:2521 (unused)
SAVEXP           = $292F = 10543          rom.asm:5672
SAVSTP           = $19B7 =  6583          rom.asm:3334
SAVSTR           = $2312 =  8978          rom.asm:4712
SBSCPT           = $213B =  8507          rom.asm:4417
SC               = $002C =    44          rom.asm:2087
SCALE            = $298D = 10637          rom.asm:5749
SCALLP           = $298F = 10639          rom.asm:5750
SCALMI           = $2CA5 = 11429          rom.asm:6258
SCALPL           = $2CBB = 11451          rom.asm:6272
SCERR            = $3722 = 14114          rom.asm:7668
SCERR1           = $371E = 14110          rom.asm:7665
SCMSG            = $132E =  4910          rom.asm:2493
SCNEND           = $2449 =  9289          rom.asm:4902
SCPTLP           = $2141 =  8513          rom.asm:4421
SCPTR            = $1392 =  5010          rom.asm:2520 (unused)
SCREEN           = $3074 = 12404          rom.asm:6792
SCROLLNXTRW      = $084B =  2123          rom.asm:1249
SCROLLUP         = $0832 =  2098          rom.asm:1237
SCR_CURS_X       = $81D8 = 33240          rom.asm:2024
SCR_CURS_Y       = $81D9 = 33241          rom.asm:2025
SCR_CUR_NX       = $81DA = 33242          rom.asm:2026
SCR_CUR_NY       = $81DB = 33243          rom.asm:2027
SCR_MODE         = $81D4 = 33236          rom.asm:2022
SCR_NAM_TB       = $81D6 = 33238          rom.asm:2023
SCR_ORG_CHR      = $81DC = 33244          rom.asm:2028
SCR_SIZE_H       = $81D3 = 33235          rom.asm:2021
SCR_SIZE_W       = $81D2 = 33234          rom.asm:2020
SCVDP            = $30A0 = 12448          rom.asm:6809
SEARCH           = $16C2 =  5826          rom.asm:2923
SEED             = $8078 = 32888          rom.asm:1971
SENDCHRPTRNS     = $0A0A =  2570          rom.asm:1468
SENDSND          = $0BB3 =  2995          rom.asm:1592
SERABITS         = $8223 = 33315          rom.asm:2056
SERBUF_START     = $8000 = 32768          rom.asm:63
SERIAL           = $354E = 13646          rom.asm:7432
SERIALS_EN       = $8222 = 33314          rom.asm:2055
SERLED           = $359E = 13726          rom.asm:7474
SER_BUFSIZE      = $0058 =    88          rom.asm:59
SER_EMPTYSIZE    = $0005 =     5          rom.asm:61
SER_FULLSIZE     = $0050 =    80          rom.asm:60
SETBEEP          = $04FD =  1277          rom.asm:738
SETBRCL          = $3175 = 12661          rom.asm:6927
SETCRSRY         = $070B =  1803          rom.asm:1059
SETCSRCOORDS     = $070C =  1804          rom.asm:1060
SETIO            = $25ED =  9709          rom.asm:5177
SETLIT           = $170C =  5900          rom.asm:2973
SETNAMETABLE     = $05B6 =  1462          rom.asm:851
SETPAR           = $36A6 = 13990          rom.asm:7608
SETPTR           = $15E6 =  5606          rom.asm:2793
SETSNDREG        = $0BD4 =  3028          rom.asm:1609
SETTOP           = $0F0D =  3853          rom.asm:2144
SETVDP           = $3087 = 12423          rom.asm:6800 (unused)
SETVDPADRS       = $05C9 =  1481          rom.asm:865
SET_GFX_MODE     = $09D7 =  2519          rom.asm:1437
SET_GFX_MODE2    = $09DF =  2527          rom.asm:1441
SET_P1           = $3663 = 13923          rom.asm:7570
SFTPRG           = $15B0 =  5552          rom.asm:2756
SGN              = $2B6E = 11118          rom.asm:6042
SGNEXP           = $1FB2 =  8114          rom.asm:4170
SGNRES           = $81CD = 33229          rom.asm:2017
SHOW_LOGO        = $0471 =  1137          rom.asm:658
SHRITE           = $299C = 10652          rom.asm:5758
SHRLP            = $299F = 10655          rom.asm:5760
SHRT1            = $29A3 = 10659          rom.asm:5764
SIGNON           = $0F5E =  3934          rom.asm:2178
SIGNS            = $2BC5 = 11205          rom.asm:6104
SIN              = $2F52 = 12114          rom.asm:6640
SIN1             = $2F82 = 12162          rom.asm:6660
SINTAB           = $2F9E = 12190          rom.asm:6673
SIOBFR           = $81F1 = 33265          rom.asm:7431
SIO_A_DI         = $017C =   380          rom.asm:208
SIO_A_EI         = $0188 =   392          rom.asm:217
SIO_A_SETS       = $02F1 =   753          rom.asm:444
SIO_B_SETS       = $02F7 =   759          rom.asm:450 (unused)
SIO_CA           = $0022 =    34          rom.asm:42
SIO_CB           = $0023 =    35          rom.asm:43
SIO_DA           = $0020 =    32          rom.asm:44
SIO_DB           = $0021 =    33          rom.asm:45 (unused)
SIXDIG           = $2D21 = 11553          rom.asm:6336
SMPVAR           = $23DD =  9181          rom.asm:4830
SMSER1           = $2EB6 = 11958          rom.asm:6552
SN               = $0002 =     2          rom.asm:2066
SND1             = $27AC = 10156          rom.asm:5439
SND2VID          = $181F =  6175          rom.asm:3127
SNDCHRTOBFR      = $0918 =  2328          rom.asm:1362
SNDCLRSET        = $05AC =  1452          rom.asm:842
SNDKEYTOBFR      = $0D2E =  3374          rom.asm:1800
SNDLOGPT         = $0528 =  1320          rom.asm:768
SNDOVR           = $27E1 = 10209          rom.asm:5469
SNDREGCFG        = $0B9A =  2970          rom.asm:1583
SNERR            = $14FD =  5373          rom.asm:2664
SNMSG            = $11DD =  4573          rom.asm:2472
SNPTR            = $1368 =  4968          rom.asm:2499 (unused)
SOUND            = $2757 = 10071          rom.asm:5398
SPC              = $0020 =    32          rom.asm:1947
SPCFST           = $2D12 = 11538          rom.asm:6328
SPCLP            = $1D01 =  7425          rom.asm:3811
SPEC_RX_CONDITON = $0196 =   406          rom.asm:230
SQR              = $2DF8 = 11768          rom.asm:6464
SRCHLIN          = $192C =  6444          rom.asm:3254
SRCHLN           = $1603 =  5635          rom.asm:2815
SRCHLP           = $1606 =  5638          rom.asm:2816
SREG             = $26FF =  9983          rom.asm:5347
SRPT2            = $3598 = 13720          rom.asm:7471
SRTTXT           = $81E5 = 33253          rom.asm:1306
SSTAT            = $2862 = 10338          rom.asm:5547
SSTSA            = $24A5 =  9381          rom.asm:4962
ST               = $001E =    30          rom.asm:2080
STACK            = $813B = 33083          rom.asm:1989
STAKFP           = $2B90 = 11152          rom.asm:6062
STALL            = $1A3D =  6717          rom.asm:3427
STARTB           = $0EAD =  3757          rom.asm:2094
STARTEMPTY       = $05A8 =  1448          rom.asm:840
STKTHS           = $1EEB =  7915          rom.asm:4065
STLOOK           = $8298 = 33432          rom.asm:2060
STMSG            = $12B7 =  4791          rom.asm:2486
STOP             = $1A4C =  6732          rom.asm:3437
STORED           = $1B1C =  6940          rom.asm:3551
STPBT            = $81F0 = 33264          rom.asm:7430
STPOOL           = $2420 =  9248          rom.asm:4867
STPTR            = $1384 =  4996          rom.asm:2513 (unused)
STR              = $2302 =  8962          rom.asm:4705
STR1             = $2308 =  8968          rom.asm:4707
STRADD           = $2423 =  9251          rom.asm:4869
STRBOT           = $81A8 = 33192          rom.asm:1998
STRE2            = $32D0 = 13008          rom.asm:7123 (unused)
STRENT           = $1DBC =  7612          rom.asm:3902
STRPAR           = $36C5 = 14021          rom.asm:7624
STRSPC           = $80AD = 32941          rom.asm:1983
STTLIN           = $1CAB =  7339          rom.asm:3765
SUBCDE           = $28C5 = 10437          rom.asm:5604
SUBPHL           = $28BF = 10431          rom.asm:5600
SUMLP            = $2EBF = 11967          rom.asm:6557
SUMSER           = $2EA7 = 11943          rom.asm:6545
SUPTLZ           = $2DA0 = 11680          rom.asm:6413
SUP_BPS          = $36FD = 14077          rom.asm:7660
SVNAM2           = $209A =  8346          rom.asm:4326
SVSTAD           = $2330 =  9008          rom.asm:4733
SX               = $81F3 = 33267          rom.asm:7056
SY               = $81F5 = 33269          rom.asm:7057
SYS              = $266B =  9835          rom.asm:5256
SYSRET           = $2691 =  9873          rom.asm:5275
TAN              = $2FB3 = 12211          rom.asm:6680
TEMPSTACK        = $818D = 33165          rom.asm:69
TESTALT          = $0CAE =  3246          rom.asm:1737
TESTCTRL         = $0CBB =  3259          rom.asm:1743
TESTOS           = $23AF =  9135          rom.asm:4809
TESTR            = $2391 =  9105          rom.asm:4789
TM               = $0018 =    24          rom.asm:2077
TMERR            = $150F =  5391          rom.asm:2676
TMMSG            = $1284 =  4740          rom.asm:2483
TMPBFR1          = $81E3 = 33251          rom.asm:2035
TMPBFR2          = $81E5 = 33253          rom.asm:2036
TMPBFR3          = $81E7 = 33255          rom.asm:2037
TMPBFR4          = $81E9 = 33257          rom.asm:2038
TMPKEYBFR        = $821F = 33311          rom.asm:2050
TMPSTR           = $81A4 = 33188          rom.asm:1997
TMPTR            = $137E =  4990          rom.asm:2510 (unused)
TMR              = $2221 =  8737          rom.asm:4571
TMRCNT           = $81CE = 33230          rom.asm:2018
TMSTPL           = $8198 = 33176          rom.asm:1996
TMSTPT           = $8196 = 33174          rom.asm:1995
TOPOOL           = $2516 =  9494          rom.asm:5039
TOSTRA           = $24AE =  9390          rom.asm:4971
TRYAGN           = $2D7B = 11643          rom.asm:6386
TSALP            = $24AF =  9391          rom.asm:4972
TSTBIT           = $39A3 = 14755          rom.asm:8053 (unused)
TSTBRK           = $1A2F =  6703          rom.asm:3416
TSTMEM           = $0EFB =  3835          rom.asm:2132
TSTNUM           = $1E7C =  7804          rom.asm:4000
TSTOPL           = $2358 =  9048          rom.asm:4761
TSTRED           = $1FF9 =  8185          rom.asm:4224
TSTREM           = $170F =  5903          rom.asm:2974
TSTSGN           = $2B5F = 11103          rom.asm:6030
TSTSPC           = $1932 =  6450          rom.asm:3261
TSTSTR           = $1E7D =  7805          rom.asm:4001
TTYLIN           = $175F =  5983          rom.asm:3021
TXA              = $01F2 =   498          rom.asm:285
TXA_EXIT         = $020B =   523          rom.asm:299
TXTMD            = $0382 =   898          rom.asm:538 (unused)
TX_EMP           = $0213 =   531          rom.asm:308
TYPE             = $8192 = 33170          rom.asm:1992
UF               = $0022 =    34          rom.asm:2082
UFERR            = $1509 =  5385          rom.asm:2672
UFMSG            = $12E1 =  4833          rom.asm:2488
UFPTR            = $1388 =  5000          rom.asm:2515 (unused)
UL               = $000E =    14          rom.asm:2072
ULERR            = $1B7D =  7037          rom.asm:3605
ULMSG            = $1232 =  4658          rom.asm:2478
ULPTR            = $1374 =  4980          rom.asm:2505 (unused)
UNITY            = $29B1 = 10673          rom.asm:5777
UPDATA           = $1A2A =  6698          rom.asm:3411
USR              = $8064 = 32868          rom.asm:1963
VAL              = $2584 =  9604          rom.asm:5114
VAL1             = $25A2 =  9634          rom.asm:5134
VAL2             = $25AC =  9644          rom.asm:5138
VAL3             = $25AF =  9647          rom.asm:5139
VALIDX           = $3508 = 13576          rom.asm:7364
VALIDY           = $350D = 13581          rom.asm:7370
VAREND           = $81BD = 33213          rom.asm:2010
VDPMODESET       = $0A14 =  2580          rom.asm:1482
VDPMODESET1      = $0A1C =  2588          rom.asm:1491 (unused)
VDPMODESET2      = $0A24 =  2596          rom.asm:1501 (unused)
VDPMODESETEX2    = $0A34 =  2612          rom.asm:1521 (unused)
VDPMODESETMC     = $0A2C =  2604          rom.asm:1511 (unused)
VDP_DAT          = $0030 =    48          rom.asm:48
VDP_SET          = $0032 =    50          rom.asm:49
VIDEOBUFF        = $81EB = 33259          rom.asm:2039
VIDTMP1          = $8213 = 33299          rom.asm:2040
VIDTMP2          = $8215 = 33301          rom.asm:2041
VOLCH            = $274C = 10060          rom.asm:5387
VOLUME           = $271E = 10014          rom.asm:5365
VPEEK            = $269A =  9882          rom.asm:5285
VPOKE            = $26C2 =  9922          rom.asm:5310
VREG             = $283B = 10299          rom.asm:5525
VSTAT            = $2857 = 10327          rom.asm:5540
WAIT             = $25CF =  9679          rom.asm:5161
WAITLP           = $25E4 =  9700          rom.asm:5171
WARM             = $0EAA =  3754          rom.asm:2092
WARMST           = $0F45 =  3909          rom.asm:2171
WIDTH            = $302B = 12331          rom.asm:6735
WLCBPDAT         = $0BC4 =  3012          rom.asm:1604
WLCMBEEP         = $0BAA =  2986          rom.asm:1589
WORDS            = $0FDA =  4058          rom.asm:2230
WORDTB           = $114A =  4426          rom.asm:2341
WRITEBUF         = $0886 =  2182          rom.asm:1278
WRITE_VIDEO_LOC  = $05FE =  1534          rom.asm:903
WRITE_VREG       = $0613 =  1555          rom.asm:920
WRKSPC           = $805E = 32862          rom.asm:1961
WRTSND           = $2826 = 10278          rom.asm:5507
WRTSNDREG        = $0BD9 =  3033          rom.asm:1614
WTSPC            = $1938 =  6456          rom.asm:3264
X1               = $81E3 = 33251          rom.asm:7050
X1GR             = $327F = 12927          rom.asm:7096
X2               = $81EB = 33259          rom.asm:7052
XC               = $81EB = 33259          rom.asm:7173
XI               = $81F1 = 33265          rom.asm:7176
Y1               = $81E5 = 33253          rom.asm:7051
Y1GR             = $32A6 = 12966          rom.asm:7109
Y2               = $81ED = 33261          rom.asm:7053
YC               = $81ED = 33261          rom.asm:7174
YI               = $81F3 = 33267          rom.asm:7177
ZDATA            = $0083 =   131          rom.asm:2405
ZDINT            = $00BE =   190          rom.asm:2425 (unused)
ZDIV             = $00BC =   188          rom.asm:2423 (unused)
ZEND             = $0080 =   128          rom.asm:2403
ZEQUAL           = $00C4 =   196          rom.asm:2428
ZERARY           = $21DC =  8668          rom.asm:4520
ZERBYT           = $147A =  5242          rom.asm:2579
ZEROLP           = $211F =  8479          rom.asm:4398
ZEROSUP          = $3937 = 14647          rom.asm:7979
ZFN              = $00B4 =   180          rom.asm:2414
ZFOR             = $0081 =   129          rom.asm:2404
ZGOSUB           = $008C =   140          rom.asm:2407
ZGOTO            = $0088 =   136          rom.asm:2406
ZGTR             = $00C3 =   195          rom.asm:2427
ZLEFT            = $00E3 =   227          rom.asm:2432
ZLTH             = $00C5 =   197          rom.asm:2429
ZMINUS           = $00BA =   186          rom.asm:2421
ZMOD             = $00BD =   189          rom.asm:2424 (unused)
ZNEW             = $00B1 =   177          rom.asm:2410
ZNOT             = $00B7 =   183          rom.asm:2417
ZONELP           = $1CDA =  7386          rom.asm:3789
ZOR              = $00C2 =   194          rom.asm:2426
ZPLUS            = $00B9 =   185          rom.asm:2420
ZPRINT           = $00AB =   171          rom.asm:2409
ZREM             = $008E =   142          rom.asm:2408
ZSGN             = $00C6 =   198          rom.asm:2431
ZSPC             = $00B5 =   181          rom.asm:2415
ZSTEP            = $00B8 =   184          rom.asm:2418
ZTAB             = $00B2 =   178          rom.asm:2412
ZTHEN            = $00B6 =   182          rom.asm:2416
ZTIMES           = $00BB =   187          rom.asm:2422 (unused)
ZTO              = $00B3 =   179          rom.asm:2413
_end             = $4ABE = 19134          rom.asm:73 (unused)
_size            = $4ABE = 19134          rom.asm:73 (unused)
absHL            = $39D5 = 14805          rom.asm:8149
basicStarted     = $805D = 32861          rom.asm:67
bufWrap          = $0058 =    88          rom.asm:68
initCTC          = $02FB =   763          rom.asm:459
initPSG          = $0B7C =  2940          rom.asm:1565
initVDP          = $035D =   861          rom.asm:518
negHL            = $39D8 = 14808          rom.asm:8151
serBufUsed       = $805C = 32860          rom.asm:66
serInPtr         = $8058 = 32856          rom.asm:64
serRdPtr         = $805A = 32858          rom.asm:65


total time: 0.1252 sec.
no errors
