              	; --------------------------------------
              	; zasm: assemble "rom.asm"
              	; date: 2020-05-24 14:45:02
              	; --------------------------------------


              	; 
              	; ------------------------------------------------------------------------------
              	; LM80C - BOOTLOADER - R3.12
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. Code and computer schematics are released under
              	; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
              	; kind of warranty: you can use them at your own risk.
              	; You are free to use them for any non-commercial use: you are only asked to
              	; maintain the copyright notices, include this advice and the note to the 
              	; attribution of the original version to Leonardo Miliani, if you intend to
              	; redistribuite them.
              	; https://www.leonardomiliani.com
              	; 
              	; Please support me by visiting the following links:
              	; Main project page: https://www.leonardomiliani.com
              	; Schematics and code: https://github.com/leomil72/LM80C
              	; Videos about the computer: https://www.youtube.com/user/leomil72/videos
              	; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
              	; ------------------------------------------------------------------------------
              	
              	; ADDRESS DECODING (bits A6/A5/A4)
              	; 0000xxxx : PIO
              	; 0001xxxx : CTC
              	; 0010xxxx : SIO
              	; 0011xxxx : VDP
              	; 0100xxxx : PSG
              	
              	; label defining for PIO (Parallel Input/Output)
0000:         	PIO_DA          equ %00000000
0001:         	PIO_DB          equ %00000001
0002:         	PIO_CA          equ %00000010
0003:         	PIO_CB          equ %00000011
              	
              	; label defining for CTC (Counter Timer Circuit)
0010:         	CTC_CH0         equ %00010000
0011:         	CTC_CH1         equ %00010001
0012:         	CTC_CH2         equ %00010010
0013:         	CTC_CH3         equ %00010011
              	
              	;label defining for SIO (Serial Input/Output)
0022:         	SIO_CA          equ %00100010
0023:         	SIO_CB          equ %00100011
0020:         	SIO_DA          equ %00100000
0021:         	SIO_DB          equ %00100001
              	
              	;label defining for VDP (Video Display Processor)
0030:         	VDP_DAT         equ %00110000
0032:         	VDP_SET         equ %00110010
              	
              	; label defining for PSG (Programmable Sound Generator)
0040:         	PSG_REG         equ %01000000
0041:         	PSG_DAT         equ %01000001
              	
              	; Interrupt-driven serial I/O interface lead by the Z80 SIO to run modified
              	; NASCOM Basic 4.7 - Full input buffering with incoming data hardware handshaking
              	; Handshake shows full before the buffer is totally filled to allow run-on from the sender
              	
0058:         	SER_BUFSIZE     equ     $58
0050:         	SER_FULLSIZE    equ     $50
0005:         	SER_EMPTYSIZE   equ     $05
              	
8000:         	SERBUF_START    equ     $8000           ; RAM starts here
8058:         	serInPtr        equ     SERBUF_START + SER_BUFSIZE
805A:         	serRdPtr        equ     serInPtr+2
805C:         	serBufUsed      equ     serRdPtr+2
805D:         	basicStarted    equ     serBufUsed+1
0058:         	bufWrap         equ     (SERBUF_START + SER_BUFSIZE) & $FF
818D:         	TEMPSTACK       equ     CURPOS - 3      ; top of BASIC line input buffer so is "free ram" when BASIC resets
              	
              	;------------------------------------------------------------------------------
              	; BASE MEMORY - RESET LOCATION - $0000
              	; the CPU jumps to 0000h after a reset
0000:         	                org     $0000
0000: F3      	RST00:          di                      ; be sure that INTs are disabled
0001: C35A02  	                jp      INIT_HW         ; jump to system initialization
              	
              	;------------------------------------------------------------------------------
              	; send a character over serial
0004: FFFFFFFF	                org     $0008
0008: C3F701  	RST08:          jp      TXA
              	
              	;------------------------------------------------------------------------------
              	; interrupt vector when SIO has a char available in its buffer
000B: FF      	                org     $000C
000C: 0001    	                defw    RX_CHA_AVAIL
              	
              	;------------------------------------------------------------------------------
              	; interrupt vector for SIO special conditions (i.e. buf overrun)
              	                org     $000E
000E: 9B01    	                defw    SPEC_RX_CONDITON
              	
              	;------------------------------------------------------------------------------
              	; receive a character over serial
              	                org     $0010
0010: C3CD01  	RST10:          jp      RXA
              	
              	;------------------------------------------------------------------------------
              	; check serial status
              	
0013: FFFFFFFF	                org     $0018
0017: FF      	
0018: C32402  	RST18:          jp      CKINCHAR
              	
              	;------------------------------------------------------------------------------
              	; interrupt vectors for CTC 
001B: FFFFFFFF	                org     $0040               ; for CH0 Timer - unused
001F: FF...   	
0040: D281    	                defw    CTC0IV
              	                
              	                org     $0042               ; for CH1 Timer - unused
0042: D581    	                defw    CTC1IV
              	                
              	                org     $0044               ; for CH2 timer - unused
0044: D881    	                defw    CTC2IV
              	                
              	                org     $0046               ; for CH3 Timer - used for 100ths/s counter
0046: DB81    	                defw    CTC3IV
              	
              	;------------------------------------------------------------------------------
              	; interrupt routine for NMI
0048: FFFFFFFF	                org     $0066
004C: FF...   	
0066: C36180  	                jp      NMIUSR              ; jump to execute NMI service routine
              	
              	;------------------------------------------------------------------------------
              	
0069: FFFFFFFF	                org     $00A0
006D: FF...   	
00A0: 4C4D3830	                defb    $4C,$4D,$38,$30,$43,$20,$43,$4F
00A4: 4320434F	
00A8: 4C4F5200	                defb    $4C,$4F,$52,$00,$00,$00,$00,$00
00AC: 00000000	
00B0: 434F4D50	                defb    $43,$4F,$4D,$50,$55,$54,$45,$52
00B4: 55544552	
00B8: 20283230	                defb    $20,$28,$32,$30,$32,$30,$29,$00
00BC: 32302900	
00C0: 44657369	                defb    $44,$65,$73,$69,$67,$6E,$65,$64
00C4: 676E6564	
00C8: 20627900	                defb    $20,$62,$79,$00,$00,$00,$00,$00
00CC: 00000000	
00D0: 4C656F6E	                defb    $4C,$65,$6F,$6E,$61,$72,$64,$6F
00D4: 6172646F	
00D8: 204D696C	                defb    $20,$4D,$69,$6C,$69,$61,$6E,$69
00DC: 69616E69	
00E0: 46572033	FWVER:          defm    'FW 3.12',$20,__date__,$20,__time__,$00
00E4: 2E313220	
00E8: 32303230	
00EC: 2D30352D	
00F0: 32342031	
00F4: 343A3435	
00F8: 3A303200	
              	;------------------------------------------------------------------------------
              	; interrupt driven routine to get chars from Z80 SIO
00FC: FFFFFFFF	                org     $0100
0100: F5      	RX_CHA_AVAIL:   push    AF              ; store A
0101: E5      	                push    HL              ; and HL
0102: CD6501  	                call    A_RTS_OFF       ; disable RTS line
0105: DB20    	                in      A,(SIO_DA)      ; read char from RX buffer into A
0107: 322B82  	                ld      (TMPKEYBFR),A   ; store it into the temp key buffer
010A: CD3601  	                call    CHARINTOBFR     ; sub-routine to put the char into the input buffer
010D: D23101  	                jp      NC,LVRXCHA      ; if buffer is full, then leave without doing anything else
0110: 3A2B82  	                ld      A,(TMPKEYBFR)   ; retrieve char
0113: 32EC81  	                ld      (CHR4VID),A     ; write into buffer for video printing
0116: FE0D    	                cp      CR              ; is it RETURN?
0118: CA2001  	                jp      Z,CNTRXCHA      ; yes, continue
011B: FE20    	                cp      $20             ; is it another control char (code < 32)?
011D: DA3101  	                jp      C,LVRXCHA       ; yes, leave w/o printing it on video nor sending back to serial
0120: F5      	CNTRXCHA:       push    AF              ; store char
0121: AF      	                xor     A
0122: 322982  	                ld      (KBDNPT),A      ; a char from serial is like a char printed by BASIC
0125: 3AEB81  	                ld      A,(PRNTVIDEO)   ; load status of print-on-video
0128: FE01    	                cp      $01             ; is the print on video on?
012A: CCAC06  	                call    Z,CHAR2VID      ; yes, print on screen
012D: F1      	                pop     AF              ; retrieve char
012E: CDF701  	                call    TXA             ; send back to serial
0131: E1      	LVRXCHA:        pop     HL              ; retrieve HL
0132: F1      	                pop     AF              ; and A
0133: FB      	                ei                      ; re-enable interrupts
0134: ED4D    	                reti                    ; and exit
              	
              	; put a char into the input buffer, char is into A
              	; this sub is called both from the ISR "RX_CHA_AVAIL" and when
              	; the RETURN key is pressed on the keyboard
0136: F5      	CHARINTOBFR:    push    AF              ; store it
0137: 3A5C80  	                ld      A,(serBufUsed)  ; load buffer size
013A: FE58    	                cp      SER_BUFSIZE     ; if buffer is not full
013C: DA4101  	                jp      C,NOTFULL       ; then store the char
013F: F1      	                pop     AF              ; else drop it
0140: C9      	                ret                     ; and exit
0141: 2A5880  	NOTFULL:        ld      HL,(serInPtr)   ; buffer is not full, can store the char
0144: 23      	                inc     HL              ; load pointer to find first free cell
0145: 7D      	                ld      A,L             ; only check low byte because buffer<256
0146: FE58    	                cp      bufWrap         ; check if the pointer is at the last cell
0148: 2003    	                jr      NZ,NOTWRAP      ; if not then continue
014A: 210080  	                ld      HL,SERBUF_START ; else load the address of the first cell
014D: 225880  	NOTWRAP:        ld      (serInPtr),HL   ; store the new pointer
0150: F1      	                pop     AF              ; then recover the char
0151: 77      	                ld      (HL),A          ; and store it in the appropriate cell
0152: 3A5C80  	                ld      A,(serBufUsed)  ; load the size of the input buffer
0155: 3C      	                inc     A               ; increment it
0156: 325C80  	                ld      (serBufUsed),A  ; and store the new size
0159: FE50    	                cp      SER_FULLSIZE    ; check if input buffer is full
015B: D8      	                ret     C               ; exit if buffer is not full
015C: 3A2E82  	                ld      A,(SERIALS_EN)  ; check if serial 1 is open
015F: 1F      	                rra                     ; bit 0 into Carry: if Carry is 1 then serial 0 is open and...
0160: DC6501  	                call    C,A_RTS_OFF     ; ...stop receiving further chars
0163: AF      	                xor     A               ; clear Carry to set a buffer full condition
0164: C9      	                ret
              	
              	;-------------------------------------------------------------------------------
              	; Z80 SIO MANAGEMENT
              	;-------------------------------------------------------------------------------
              	; disable RTS:
              	; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
0165: F5      	A_RTS_OFF:      push    AF              ; store A
0166: 3E05    	                ld      A,%00000101     ; write into WR0: select WR5
0168: D322    	                out     (SIO_CA),A
016A: 3A2F82  	                ld      A,(SERABITS)    ; load data bits
016D: F628    	                or      %00101000       ; TX enable; RTS disable
016F: D322    	                out     (SIO_CA),A      ; send setting
0171: F1      	                pop     AF              ; retrieve A
0172: C9      	                ret                     ; exit
              	
              	; enable RTS
              	; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
0173: F5      	A_RTS_ON:       push    AF              ; store A
0174: 3E05    	                ld      A,%00000101     ; write into WR0: select WR5
0176: D322    	                out     (SIO_CA),A
0178: 3A2F82  	                ld      A,(SERABITS)    ; load data bits
017B: F62A    	                or      %00101010       ; TX enable; RTS enable
017D: D322    	                out     (SIO_CA),A      ; send setting
017F: F1      	                pop     AF              ; retrieve A
0180: C9      	                ret                     ; return
              	
              	; disable SIO RX channel A
0181: F5      	SIO_A_DI:       push    AF              ; store A
0182: 3E03    	                ld      A,%00000011     ; write into WR0: select WR3
0184: D322    	                out     (SIO_CA),A
0186: 3A2F82  	                ld      A,(SERABITS)    ; load the serial bits; RX disabled; auto enable is OFF
0189: D322    	                out     (SIO_CA),A
018B: F1      	                pop     AF              ; retrieve A
018C: C9      	                ret                     ; return
              	
              	; enable SIO RX channel A
018D: F5      	SIO_A_EI:       push    AF              ; store A
018E: 3E03    	                ld      A,%00000011     ; write into WR0: select WR3
0190: D322    	                out     (SIO_CA),A      ; select register
0192: 3A2F82  	                ld      A,(SERABITS)    ; load the serial data bits
0195: CBC7    	                set     0,A             ; set RX enabled; auto enable is OFF
0197: D322    	                out     (SIO_CA),A      ; send setting to SIO
0199: F1      	                pop     AF              ; retrieve A
019A: C9      	                ret
              	
              	
              	; special SIO condition (i.e., buffer overrun)
              	; if buffer overruns then show an error, empty the RX buffer and send
              	; a break char
019B:         	SPEC_RX_CONDITON:
019B: F5      	                push    AF
019C: E5      	                push    HL
019D: CD6501  	                call    A_RTS_OFF       ; disable RTS
01A0: CD8101  	                call    SIO_A_DI        ; disable RX on ch. A
01A3: 3A2E82  	                ld      A,(SERIALS_EN)  ; load serial status
01A6: CB97    	                res     2,A             ; disable RX on port 1
01A8: 322E82  	                ld      (SERIALS_EN),A  ; store new serial status 
01AB: DB01    	                in      A,(PIO_DB)      ; read status LEDs
01AD: CBE7    	                set     4,A             ; set 5th pin ON
01AF: D301    	                out     (PIO_DB),A      ; send new setting
01B1: 3E30    	                ld      A,%00110000     ; write into WR0: error reset, select WR0
01B3: D322    	                out     (SIO_CA),A      ; send command to SIO
01B5: 3E03    	                ld      A,CTRLC
01B7: CD3601  	                call    CHARINTOBFR     ; send CTRL-C to BASIC
01BA: AF      	EMPTYCHABFR:    xor     A
01BB: D322    	                out     (SIO_CA),A      ; write to WR0, select RR0
01BD: DB22    	                in      A,(SIO_CA)      ; read RR0 register
01BF: E601    	                and     $01             ; check if input buffer if empty
01C1: CAC801  	                jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then leave
01C4: DB20    	                in      A,(SIO_DA)      ; read chars
01C6: 18F2    	                jr      EMPTYCHABFR     ; repeat
01C8: E1      	CHABFREMPTY:    pop     HL
01C9: F1      	                pop     AF
01CA: FB      	                ei                      ; re-enable interrupts
01CB: ED4D    	                reti                    ; return from interrupt
              	
              	;------------------------------------------------------------------------------
              	; retrieve a char from the input buffer
01CD: 3A5C80  	RXA:            ld      A,(serBufUsed)  ; load the buffer size
01D0: A7      	                and     A               ; check if it's 0 (empty)
01D1: CACD01  	                jp      Z,RXA           ; if it's empty, wait for a char
01D4: F3      	                di                      ; disable interrupts
01D5: E5      	                push    HL              ; store HL
01D6: 2A5A80  	                ld      HL,(serRdPtr)   ; load pointer to first available char
01D9: 23      	                inc     HL              ; increment it (go to the next char)
01DA: 7D      	                ld      A,L             ; check if the end of the buffer has been reached
01DB: FE58    	                cp      bufWrap         ; (only check low byte because buffer<256)
01DD: 2003    	                jr      NZ,NOTRDWRAP    ; if not, jump straight
01DF: 210080  	                ld      HL,SERBUF_START ; else reload the starting address of the buffer
01E2: 225A80  	NOTRDWRAP:      ld      (serRdPtr),HL   ; store new pointer to the next char to read
01E5: 3A5C80  	                ld      A,(serBufUsed)  ; load buffer size
01E8: 3D      	                dec     A               ; decrement it
01E9: 325C80  	                ld      (serBufUsed),A  ; and store the new size
01EC: FE05    	                cp      SER_EMPTYSIZE   ; check if input buffer can be considered empty
01EE: 3003    	                jr      NC,RXA_EXIT     ; if not empty yet, then exit
01F0: CD7301  	                call    A_RTS_ON        ; else re-enable receiving chars
01F3: 7E      	RXA_EXIT:       ld      A,(HL)          ; recover the char and return it into A
01F4: E1      	                pop     HL              ; retrieve HL
01F5: FB      	                ei                      ; re-enable interrupts
01F6: C9      	                ret                     ; return
              	
              	;------------------------------------------------------------------------------
              	; sends a char over the serial (trick for INTs from WikiTI)
              	; char is into A
01F7: F5      	TXA:            push    AF              ; store AF
01F8: C5      	                push    BC              ; store BC
01F9: 47      	                ld      B,A             ; store char
01FA: ED57    	                ld      A,I             ; when loading I into A, P/V is set to the value of IFF (P/V is set if INTs enabled)
01FC: EA0102  	                jp      PE,CNTTXA       ; if set, jump over
01FF: ED57    	                ld      A,I             ; if not set, test again to fix "false negative" from interrupt occurring at first test
0201: F5      	CNTTXA:         push    AF              ; store current P/V flag
0202: F3      	                di                      ; disable INTs
0203: 3A2E82  	                ld      A,(SERIALS_EN)  ; load serial status
0206: FE05    	                cp      %00000101       ; check if serial 1 is open and RX/TX is enabled 
0208: 2006    	                jr      NZ,TXA_EXIT     ; no, jump over
020A: 78      	                ld      A,B             ; retrieve char
020B: D320    	                out     (SIO_DA),A      ; send char to the SIO
020D: CD1802  	                call    TX_EMP          ; wait for outgoing char to be sent
0210: F1      	TXA_EXIT:       pop     AF              ; retrieve P/V flag
0211: E21502  	                jp      PO,EXTXA        ; if P is reset, INTs were disabled so we can leave right now
0214: FB      	                ei                      ; INTs were enabled, so re-enable interrupts
0215: C1      	EXTXA:          pop     BC              ; retrieve BC
0216: F1      	                pop     AF              ; retrieve AF
0217: C9      	                ret                     ; return
              	
              	;------------------------------------------------------------------------------
              	; wait until outgoing serial has been sent
0218: 97      	TX_EMP:         sub     A               ; set A to 0
0219: 3C      	                inc     A               ; set A to 1
021A: D322    	                out     (SIO_CA),A      ; write to WR0, select RR1
021C: DB22    	                in      A,(SIO_CA)      ; read RR1 register
021E: CB47    	                bit     0,A             ; check if all chars have been sent
0220: CA1802  	                jp      Z,TX_EMP        ; if not (bit 0 = 0) then retrieve
0223: C9      	                ret                     ; else exit
              	
              	
              	;------------------------------------------------------------------------------
              	; check if there is some chars into the buffer
0224: 3A5C80  	CKINCHAR        ld      A,(serBufUsed)  ; load char in buffer
0227: A7      	                and     A               ; compare to 0
0228: C9      	                ret                     ; return
              	
              	;------------------------------------------------------------------------------
              	; print a text from memory, and terminate when $00 is found
0229: 7E      	RAWPRINT:       ld      A,(HL)          ; load character from memory cell pointed by HL
022A: B7      	                or      A               ; is it $00 (end string)?
022B: C8      	                ret     Z               ; Yes, then return
022C: 32EC81  	                ld      (CHR4VID),A     ; store char
022F: F3      	                di
0230: CDAC06  	                call    CHAR2VID        ; and send it to screen
0233: FB      	                ei
0234: 23      	                inc     HL              ; and select the next one
0235: 18F2    	                jr      RAWPRINT        ; repeat
              	
              	;-------------------------------------------------
              	; Interrupt service routine (ISR) for CH3 timer
              	; this is used to increment the 100ths of a second counter and for cursor flashing
0237: F5      	CH3_TIMER:      push    AF              ; save regs. A,
0238: C5      	                push    BC              ; BC,
0239: D5      	                push    DE              ; DE,
023A: E5      	                push    HL              ; HL
023B: 21CE81  	                ld      HL,TMRCNT       ; load starting address of the timer
023E: 0604    	                ld      B,$04           ; 4 bytes to check
0240: 34      	INCTMR3:        inc     (HL)            ; increment timer
0241: 2003    	                jr      NZ,CHKCRSR      ; if not zero then exit (finished increment)
0243: 23      	                inc     HL              ; if yes, there was an overflow, so increment next byte
0244: 10FA    	                djnz    INCTMR3         ; repeat for 4 bytes
0246: CD4507  	CHKCRSR:        call    FLASHCURSOR     ; call the flashing cursor routine
0249: CDFF0B  	                call    MNGSNDS         ; call the tone managemenet
024C: 3ACE81  	                ld      A,(TMRCNT)      ; check for keyboard management
024F: 1F      	                rra                     ; bit 0 = 1 ?
0250: D4600C  	                call    NC,KEYBOARD     ; no, so read the keyboard inputs
0253: E1      	                pop     HL              ; retrieve HL,
0254: D1      	                pop     DE              ; DE,
0255: C1      	                pop     BC              ; BC,
0256: F1      	                pop     AF              ; and A
0257: FB      	                ei                      ; re-enable interrupts
0258: ED4D    	                reti                    ; exit from ISR
              	
              	;------------------------------------------------------------------------------
              	;------------------------------------------------------------------------------
              	; HARDWARE INITIALISATION
              	; first run - setup HW & SW
              	;
025A: 218D81  	INIT_HW:        ld      HL,TEMPSTACK    ; load temp stack pointer
025D: F9      	                ld      SP,HL           ; set stack to temp stack pointer
025E: 210080  	                ld      HL,SERBUF_START ; set beginning of input buffer
0261: 225880  	                ld      (serInPtr),HL   ; for incoming chars to store into buffer
0264: 225A80  	                ld      (serRdPtr),HL   ; and for chars to be read from buffer
0267: AF      	                xor     A               ; reset A
0268: 325C80  	                ld      (serBufUsed),A  ; actual buffer size is 0
026B: 322E82  	                ld      (SERIALS_EN),A  ; set serial ports status to OFF
026E: CDDF02  	                call    HELLOWRLD       ; little serial blink with LEDs
0271: CD0403  	                call    initCTC         ; configure CTC, then...
0274: CD9D0B  	                call    initPSG         ; ...configure PSG
0277: CD9204  	                call    SHOW_LOGO       ; show computer logo
027A: 1E01    	                ld      E,$01           ; E chooses the video mode: 1:graphics 1
027C: CD7E03  	                call    initVDP         ; set video display
027F: AF      	                xor     A
0280: ED47    	                ld      I,A             ; set high byte of interrupt vectors to point to page 0
0282: ED5E    	                im      2               ; interrupt mode 2
0284: FB      	                ei                      ; enable interrupts
              	                ; print system messages
0285: AF      	                xor     A               ; A=0 so...
0286: 322982  	                ld      (KBDNPT),A      ; ...inputs don't come from keyboard
0289: 3C      	                inc     A               ; A=1...
028A: 32EB81  	                ld      (PRNTVIDEO),A   ; ...to activate the print-on-video
028D: 213A03  	                ld      HL,MSGTXT1      ; sign-on message
0290: CD2902  	                call    RAWPRINT        ; print message
0293: CD3608  	                call    CURSOR_ON       ; enable cursor
0296: 3A5D80  	                ld      A,(basicStarted); check if BASIC is already started
0299: FE59    	                cp      'Y'             ; to see if this is a power-up
029B: 2016    	                jr      NZ,COLDSTART    ; if not, then do a COLD start
029D: 216403  	                ld      HL,MSGTXT2      ; message to choose kind of start
02A0: CD2902  	                call    RAWPRINT        ; print message
02A3: AF      	                xor     A
02A4: 32EB81  	                ld      (PRNTVIDEO),A   ; disable print-on-video
02A7: CDCD01  	CORW:           call    RXA             ; look for a pressed key
02AA: E6DF    	                and     %11011111       ; only UPPERCASE char
02AC: FE43    	                cp      'C'             ; cold start?
02AE: 200B    	                jr      NZ,CHECKWARM    ; no, let's check for warm start
02B0: CDC502  	                call    ECHO_CHAR       ; echoes the char
02B3: 3E59    	COLDSTART:      ld      A,'Y'           ; yes, set the "BASIC started" flag
02B5: 325D80  	                ld      (basicStarted),A
02B8: C3C80E  	                jp      COLD            ; start BASIC COLD
02BB: FE57    	CHECKWARM:      cp      'W'
02BD: 20E8    	                jr      NZ,CORW         ; char not recognized, wait again
02BF: CDC502  	                call    ECHO_CHAR       ; echoes the char
02C2: C3CB0E  	                jp      WARM            ; start BASIC WARM
              	
              	;-------------------------------------------------------------------------------
02C5: 32EC81  	ECHO_CHAR:      ld      (CHR4VID),A     ; set char for video printing
02C8: AF      	                xor     A
02C9: 322982  	                ld      (KBDNPT),A      ; input is not from keyboard
02CC: F3      	                di                      ; disable INTs
02CD: CDAC06  	                call    CHAR2VID        ; echoes back the pressed key,
02D0: 3E0D    	                ld      A,CR            ; then set a CR
02D2: 32EC81  	                ld      (CHR4VID),A     ; set char for video printing
02D5: CDAC06  	                call    CHAR2VID        ; and send it to screen
02D8: FB      	                ei                      ; re-enable INTs
02D9: 3E01    	                ld      A,$01
02DB: 32EB81  	                ld      (PRNTVIDEO),A   ; re-enable video printing
02DE: C9      	                ret                     ; return to caller
              	                
              	;-------------------------------------------------------------------------------
              	; little serial blink with LEDs
02DF: 0E09    	HELLOWRLD:      ld      C,$09           ; 8 LEDs to be turned off + 1 more step to turn off the last LED
02E1: 3ECF    	                ld      A,%11001111     ; set mode 3 (mode control)
02E3: D303    	                out     (PIO_CB),A      ; for PIO port B
02E5: AF      	                xor     A               ; set pins to OUTPUT
02E6: D303    	                out     (PIO_CB),A      ; for port B
02E8: 3C      	                inc     A               ; LSB on
02E9: D301    	LEDLIGHT:       out     (PIO_DB),A      ; turn LEDs on/off for a "Supercar" sequence
02EB: 1E20    	                ld      E,$20           ; little delay
02ED: 0600    	DEC_E:          ld      B,$00           ; count to 256
02EF: 10FE    	COUNTER:        djnz    COUNTER         ; decrement inner counter
02F1: 1D      	                dec     E               ; decrement outer counter
02F2: 20F9    	                jr      NZ,DEC_E        ; finish delay
02F4: CB27    	                sla     A               ; shift reg.A to left 1 bit
02F6: 0D      	                dec     C               ; next LED
02F7: 20F0    	                jr      NZ,LEDLIGHT     ; all LEDs done? no, repeat
02F9: C9      	                ret                     ; return to caller
              	
              	;-------------------------------------------------------------------------------
              	; Z80 SIO default settings for channel A
02FA: 30      	SIO_A_SETS:     defb    %00110000       ; write into WR0: error reset, select WR0
02FB: 18      	                defb    %00011000       ; write into WR0: channel reset
02FC: 04      	                defb    %00000100       ; write into WR0: select WR4
02FD: 44      	                defb    %01000100       ; write into WR4: presc. 16x, 1 stop bit, no parity
02FE: 05      	                defb    %00000101       ; write into WR0: select WR5
02FF: E8      	                defb    %11101000       ; write into WR5: DTR on, TX 8 bits, BREAK off, TX on, RTS off
0300: 01      	SIO_B_SETS:     defb    %00000001       ; write into WR0: select WR1
0301: 04      	                defb    %00000100       ; write into WR1: status affects interrupt vectors
0302: 02      	                defb    %00000010       ; write into WR0: select WR2
0303: 00      	                defb    %00000000       ; write into WR2: set interrupt vector, but bits D3/D2/D1 of this vector
              	                                        ; will be affected by the channel & condition that raised the interrupt
              	                                        ; (see datasheet): in our example, 0x0C for Ch.A receiving A char, 0x0E
              	                                        ; for special conditions
              	;------------------------------------------------------------------------------
              	; Z80 CTC setting up
0304:         	initCTC:
0304: 212E03  	                ld      HL,CTCCONF      ; CTC configuration
0307: 11D281  	                ld      DE,CTC0IV       ; CTC interrupt vector table
030A: 010C00  	                ld      BC,$000C        ; 12 bytes
030D: EDB0    	                ldir                    ; copy data
              	;CH0, CH1, & CH2 disabled
030F: 3E03    	                ld      A,%00000011     ; interrupt off, timer mode, prescaler=16, don't care ext. TRG edge,
              	                                        ; start timer on loading constant, no time constant follows, software reset, command word
0311: D310    	                out     (CTC_CH0),A     ; set CH0
0313: D311    	                out     (CTC_CH1),A     ; set CH1
0315: D312    	                out     (CTC_CH2),A     ; set CH2
              	
              	;init CH3
              	;CH3 divides CPU CLK by 144*256 providing an interrupt signal at 100 Hz (1/100 sec).
              	;f = CPU_CLK/(144*256) => 3,686,400 / ( 36,864 ) => 100Hz
0317: 3EA7    	                ld      A,%10100111     ; interrupt on; timer mode; prescaler=256; don't care ext; automatic trigger;
              	                                        ; time constant follows; cont. operation; command word
0319: D313    	                out     (CTC_CH3),A     ; send to CH3
031B: 3E90    	                ld      A,$90           ; time constant - 90$ (144d)
031D: D313    	                out     (CTC_CH3),A     ; send to CH3
031F: 3E40    	                ld      A,%01000000     ; D7..D3 provide the first part of the int vector (in our case, $0100), followed by
              	                                        ; D2..D1, provided by the CTC (they point to the channel), D0=interrupt word
              	                                        ; so int vector is 01000xx00
0321: D310    	                out     (CTC_CH0),A     ; send to CTC
              	                ; reset cells of 100ths of a second counter
0323: AF      	                xor     A               ; reset A
0324: 21CE81  	                ld      HL,TMRCNT       ; load TMR pointer
0327: 0604    	                ld      B,$04           ; 4 memory cells
0329: 77      	RESTMR:         ld      (HL),A          ; reset n-cell of TMR
032A: 23      	                inc     HL              ; next cell
032B: 10FC    	                djnz    RESTMR          ; repeat for 4 cells
032D: C9      	                ret
              	
032E: FBED4D  	CTCCONF:        defb    $FB,$ED,$4D     ; CTC0 interrupt vector (ei; reti)
0331: FBED4D  	                defb    $FB,$ED,$4D     ; CTC1 interrupt vector (ei; reti)
0334: FBED4D  	                defb    $FB,$ED,$4D     ; CTC2 interrupt vector (ei; reti)
0337: C33702  	                jp      CH3_TIMER       ; CTC3 interrupt vector (sys tick timer)
              	;------------------------------------------------------------------------------
033A: 4C4D3830	MSGTXT1:        defm    "LM80C by Leonardo Miliani",CR
033E: 43206279	
0342: 204C656F	
0346: 6E617264	
034A: 6F204D69	
034E: 6C69616E	
0352: 690D    	
0354: 4669726D	                defm    "Firmware R3.12",CR,0
0358: 77617265	
035C: 2052332E	
0360: 31320D00	
0364: 0D      	MSGTXT2:        defb    CR
0365: 3C433E6F	                defm    "<C>old or <W>arm start? ",0
0369: 6C64206F	
036D: 72203C57	
0371: 3E61726D	
0375: 20737461	
0379: 72743F20	
037D: 00      	
              	; ------------------------------------------------------------------------------
              	; LM80C - VDP ROUTINES - R3.12
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. Code and computer schematics are released under
              	; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
              	; kind of warranty: you can use them at your own risk.
              	; You are free to use them for any non-commercial use: you are only asked to
              	; maintain the copyright notices, include this advice and the note to the 
              	; attribution of the original version to Leonardo Miliani, if you intend to
              	; redistribuite them.
              	; https://www.leonardomiliani.com
              	; 
              	; Please support me by visiting the following links:
              	; Main project page: https://www.leonardomiliani.com
              	; Schematics and code: https://github.com/leomil72/LM80C
              	; Videos about the computer: https://www.youtube.com/user/leomil72/videos
              	; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
              	; ------------------------------------------------------------------------------
              	;
              	;------------------------------------------------------------------------------
              	; VDP INITIALISATION
              	; initialize VDP for a specific graphics mode
              	; INPUT: E -> contains the graphics mode:
              	; 0=text; 1=graphics 1; 2=graphics 2; 3=multicolor; 4=extended graphics 2
037E: D5      	initVDP:        push    DE              ; store E
037F: CDD909  	                call    EMPTY_VRAM      ; reset VRAM
0382: CDF809  	                call    SET_GFX_MODE    ; load register settings
0385: CDED09  	                call    CLR_RAM_REG     ; reset RAM registers
0388: D1      	                pop     DE              ; restore reg. E
0389: AF      	                xor     A               ; reset A
038A: 47      	                ld      B,A             ; reset B (will be used later)
038B: 7B      	                ld      A,E             ; move E into A
038C: 32E081  	                ld      (SCR_MODE),A    ; store screen mode
038F: FE01    	                cp      $01             ; is it graphics 1 (A=1)?
0391: CAC803  	                jp      Z,G1MD          ; yes, jump over
0394: FE02    	                cp      $02             ; is it graphics 2 (A=2)?
0396: CA0404  	                jp      Z,G2MD          ; yes, jump over
0399: FE03    	                cp      $03             ; is it multicolor (A=3)?
039B: CA2604  	                jp      Z,MCMD          ; yes, jump over
039E: FE04    	                cp      $04             ; is it extended graphics 2 (A=4)?
03A0: CA4904  	                jp      Z,EXG2MD        ; yes, jump over; otherwise, it must be $00 so we assume that it's text mode
              	
              	                ; LOAD VDP SETTINGS FOR SELECTED VIDEO MODE:
              	                ; TEXT MODE (G0)
03A3:         	TXTMD:          ; load charset
03A3: 60      	                ld      H,B
03A4: 68      	                ld      L,B             ; HL=first pattern cell $0000
03A5: CD140A  	                call    LOADCHARSET     ; load patterns into VRAM
              	                ; set cursor & video overlay
03A8: AF      	                xor     A               ; reset A
03A9: 32E481  	                ld      (SCR_CURS_X),A  ; set cursor position at X=0
03AC: 32E581  	                ld      (SCR_CURS_Y),A  ; and Y=0
03AF: 3E05    	                ld      A,$05           ; light blue
03B1: 32EE81  	                ld      (BKGNDCLR),A    ; set background/border color
03B4: 3E28    	                ld      A,$28
03B6: 32DE81  	                ld      (SCR_SIZE_W),A  ; screen width = 40 cols
03B9: 3E18    	                ld      A,$18
03BB: 32DF81  	                ld      (SCR_SIZE_H),A  ; screen height = 24 rows
03BE: 110008  	                ld      DE,$0800
03C1: ED53E281	                ld      (SCR_NAM_TB),DE ; set name table address
03C5: C38704  	                jp      ENDVDPSET       ; execute the rest of the video setting
              	
              	                ; GRAPHICS 1 MODE (G1)
03C8:         	G1MD:           ; load pattern table
03C8: 68      	                ld      L,B
03C9: 60      	                ld      H,B             ; HL=first pattern cell $0000
03CA: CD140A  	                call    LOADCHARSET     ; load patterns into VRAM
              	                ; set cursor & video overlay
03CD: AF      	                xor     A               ; position cursor
03CE: 32E481  	                ld      (SCR_CURS_X),A  ; at X=0
03D1: 32E581  	                ld      (SCR_CURS_Y),A  ; and Y=0
03D4: 3E20    	                ld      A,$20
03D6: 32DE81  	                ld      (SCR_SIZE_W),A  ; screen width = 32 cols
03D9: 3E18    	                ld      A,$18
03DB: 32DF81  	                ld      (SCR_SIZE_H),A  ; screen height = 24 rows
03DE: 110018  	                ld      DE,$1800
03E1: ED53E281	                ld      (SCR_NAM_TB),DE ; set name table address
              	                ; load color table
03E5: 210020  	                ld      HL,$2000        ; color table start: $2000
03E8: CDEA05  	                call    SETVDPADRS
03EB: 3E01    	                ld      A,$01           ; foreground color...
03ED: 32ED81  	                ld      (FRGNDCLR),A    ; ...set to black
03F0: 3E0F    	                ld      A,$0F           ; background color...
03F2: 32EE81  	                ld      (BKGNDCLR),A    ; ...set to white
03F5: 3E1F    	                ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
03F7: 0620    	                ld      B,$20           ; 32 bytes of colors
03F9: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
03FB: ED79    	LDCLRTBMD1:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
03FD: 00      	                nop
03FE: 00      	                nop
03FF: 10FA    	                djnz    LDCLRTBMD1      ; repeat for 32 bytes
0401: C38704  	                jp      ENDVDPSET       ; execute the rest of the video setting
              	
              	                ; GRAPHICS 2 MODE (G2)
0404: AF      	G2MD:           xor     A               ; position cursor
0405: 32E481  	                ld      (SCR_CURS_X),A  ; at X=0
0408: 32E581  	                ld      (SCR_CURS_Y),A  ; and Y=0
040B: 32DE81  	                ld      (SCR_SIZE_W),A  ; screen width = 256 pixels (0=256)
040E: 3C      	                inc     A               ; black on...
040F: 32ED81  	                ld      (FRGNDCLR),A    ; ...foreground
0412: 3E0F    	                ld      A,$0F           ; white on...
0414: 32EE81  	                ld      (BKGNDCLR),A    ; ...background
0417: 3EC0    	                ld      A,$C0
0419: 32DF81  	                ld      (SCR_SIZE_H),A  ; screen height = 192 pixels
041C: 110018  	                ld      DE,$1800
041F: ED53E281	                ld      (SCR_NAM_TB),DE ; set name table address
0423: C38704  	                jp      ENDVDPSET       ; execute the rest of the video setting
              	
              	                ; MULTICOLOR MODE (G3)
0426: AF      	MCMD:           xor     A               ; position cursor
0427: 32E481  	                ld      (SCR_CURS_X),A  ; at X=0
042A: 32E581  	                ld      (SCR_CURS_Y),A  ; and Y=0
042D: 3E0F    	                ld      A,$0F           ; white color for...
042F: 32EE81  	                ld      (BKGNDCLR),A    ; ...background and...
0432: 32ED81  	                ld      (FRGNDCLR),A    ; ...foreground (even this is not used in MC)
0435: 3E40    	                ld      A,$40
0437: 32DE81  	                ld      (SCR_SIZE_W),A  ; screen width = 64 blocks
043A: 3E30    	                ld      A,$30
043C: 32DF81  	                ld      (SCR_SIZE_H),A  ; screen height = 48 blocks
043F: 110008  	                ld      DE,$0800
0442: ED53E281	                ld      (SCR_NAM_TB),DE ; set name table address
0446: C38704  	                jp      ENDVDPSET       ; execute the rest of the video setting
              	
              	                ; EXTENDED GRAPHICS 2 (G4)
0449:         	EXG2MD:         ; load pattern table
0449: 60      	                ld      H,B
044A: 68      	                ld      L,B             ; HL=first pattern cell $0000
044B: CD140A  	                call    LOADCHARSET     ; load patterns into VRAM
              	                ; set cursor & video overlay
044E: AF      	                xor     A               ; position cursor
044F: 32E481  	                ld      (SCR_CURS_X),A  ; at X=0
0452: 32E581  	                ld      (SCR_CURS_Y),A  ; and Y=0
0455: 3E20    	                ld      A,$20
0457: 32DE81  	                ld      (SCR_SIZE_W),A  ; screen width = 32 cols
045A: 3E18    	                ld      A,$18
045C: 32DF81  	                ld      (SCR_SIZE_H),A  ; screen height = 24 rows
045F: 110038  	                ld      DE,$3800
0462: ED53E281	                ld      (SCR_NAM_TB),DE ; set name table address
              	                 ; load color table
0466: 210020  	                ld      HL,$2000        ; color table start: $2000
0469: CDEA05  	                call    SETVDPADRS
046C: 3E01    	                ld      A,$01           ; foreground color is...
046E: 32ED81  	                ld      (FRGNDCLR),A    ; ...set to black
0471: 3E0F    	                ld      A,$0F           ; whitefor...
0473: 32EE81  	                ld      (BKGNDCLR),A    ; ...background
0476: 3E1F    	                ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
0478: 1608    	                ld      D,$08           ; 8 pages of 
047A: 0600    	                ld      B,$00           ; 256 bytes of colors (total of 2,048 cells)
047C: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
047E: ED79    	LDCLRTBEX2:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
0480: 00      	                nop
0481: 00      	                nop
0482: 10FA    	                djnz    LDCLRTBEX2      ; repeat for 256 bytes
0484: 15      	                dec     D               ; did we fill up all the cells?
0485: 20F7    	                jr      NZ,LDCLRTBEX2   ; no, repeat
              	                ; LAST VDP SETTINGS
0487: CD4C08  	ENDVDPSET:      call    CURSOR_OFF      ; disable cursor
048A: CD5805  	                call    EMPTYVIDBUF     ; empty video buffer
048D: AF      	                xor     A
048E: 32E881  	                ld      (SCR_ORG_CHR),A ; store byte used tochar used to empty the video buffer
0491: C9      	                ret                     ; return to caller
              	
              	
              	; show initial logo
0492: CDD909  	SHOW_LOGO:      call    EMPTY_VRAM      ; reset VRAM
              	                ; set VDP for G2 mode
0495: 0607    	                ld      B,$07           ; set only the first 7 registers
0497: 111000  	                ld      DE,$0010        ; load settings for G2 mode
049A: CD000A  	                call    SET_GFX_MODE2   ; load register settings
049D: 1601    	                ld      D,$01           ; backdrop color set to black
049F: ED51    	                out     (C),D           ; send data to VDP
04A1: ED79    	                out     (C),A           ; indicate the register to send data to
              	                ; set name table 
04A3: 210018  	                ld      HL,$1800        ; name table address
04A6: CDD705  	                call    SETNAMETABLE    ; set name table (load names into table)
04A9: CD0605  	                call    ERASECLRTBL     ; erase color table (set foreground & background to black)
              	                ; set colors for logo
04AC: 210028  	                ld      HL,$2800        ; 2nd page of color table
04AF: CDEA05  	                call    SETVDPADRS
04B2: 0605    	                ld      B,5             ; 5 bands
04B4: 215305  	                ld      HL,CLRTABLE
04B7: 0E30    	                ld      C,VDP_DAT
04B9: 1E08    	                ld      E,$08           ; 8 pixels each pattern        
04BB: 1640    	RPT101:         ld      D,$40           ; 64 chars each band
04BD: 7E      	                ld      A,(HL)
04BE: ED79    	RPT102:         out     (C),A
04C0: 00      	                nop
04C1: 1D      	                dec     E
04C2: 20FA    	                jr      NZ,RPT102
04C4: 1E08    	                ld      E,$08
04C6: 15      	                dec     D
04C7: 20F5    	                jr      NZ,RPT102
04C9: 23      	                inc     HL
04CA: 10EF    	                djnz    RPT101
              	                ; set pattern table
04CC: 210008  	                ld      HL,$0800        ; address of first cell of 2nd area of pattern table
04CF: 115D0A  	                ld      DE,LM80CLOGO    ; pointer to logo pattern
04D2: 0600    	                ld      B,$00           ; 256 bytes, 8 rows
04D4: CD3205  	RPT103:         call    LOADLOGOCHRS
04D7: 13      	                inc     DE              ; next logo pattern
04D8: 10FA    	                djnz    RPT103
04DA: 0620    	                ld      B,$20           ; repeat for another 2 rows
04DC: CD3205  	RPT104:         call    LOADLOGOCHRS
04DF: 13      	                inc     DE              ; next logo pattern
04E0: 10FA    	                djnz    RPT104
              	                ; show logo/message, play a beep and wait a while
04E2: 0602    	                ld      B,$02
04E4: AF      	                xor     A
04E5: 57      	                ld      D,A             ; 256 times
04E6: 5F      	                ld      E,A             ; x 256 times
04E7: 32EF81  	                ld      (TMPBFR1),A     ; sound flag set to 0
04EA: 00      	DEC_D:          nop                     ; does nothing...
04EB: 00      	                nop
04EC: 00      	                nop
04ED: 00      	                nop
04EE: 00      	                nop
04EF: 00      	                nop
04F0: 1D      	                dec     E               ; decrement E
04F1: 20F7    	                jr      NZ,DEC_D        ; repeat until $00
04F3: 7A      	                ld      A,D
04F4: FE40    	                cp      $40             ; ...equal to 64
04F6: CC1E05  	                call    Z,SETBEEP       ; if yes, start sound
04F9: 15      	                dec     D
04FA: 20EE    	                jr      NZ,DEC_D        ; repeat
04FC: 3AEF81  	                ld      A,(TMPBFR1)
04FF: FE02    	                cp      $02
0501: C42A05  	                call    NZ,BEEPOFF
0504: 10E4    	                djnz    DEC_D
0506:         	ERASECLRTBL:    ; erase color table
0506: 3E11    	                ld      A,$11           ; foreground and background set to black
0508: 160A    	                ld      D,$0A           ; 10 pages
050A: 0600    	                ld      B,$00           ; 256 color cells per page
050C: 210028  	                ld      HL,$2800        ; first cell of 2nd color table
050F: CDEA05  	                call    SETVDPADRS      ; send address
0512: 0E30    	                ld      C,VDP_DAT       ; VDP address for passing data
0514: ED79    	RPT100:         out     (C),A           ; send data
0516: 00      	                nop
0517: 00      	                nop                     ; little delay
0518: 10FA    	                djnz    RPT100          ; repeat for entire page
051A: 15      	                dec     D
051B: 20F7    	                jr      NZ,RPT100       ; repeat for all the pages ($0A00 cells)
051D: C9      	                ret                     ; return to caller
              	
              	; play a beep
051E: 3AEF81  	SETBEEP:        ld      A,(TMPBFR1)     ; check the already-beeped flag?
0521: B7      	                or      A               ; is it 0?
0522: C0      	                ret     NZ              ; no, exit
0523: 3C      	                inc     A               ; flag to 1
0524: 32EF81  	                ld      (TMPBFR1),A     ; set sound
0527: C3CB0B  	                jp      WLCMBEEP        ; play a beep & return
              	
              	; beep off
052A: 3E02    	BEEPOFF:        ld      A,$02           ; flag for sound off
052C: 32EF81  	                ld      (TMPBFR1),A     ; set flag
052F: C3D10B  	                jp      NOBEEP          ; stop beep and return
              	
              	
              	; used to load the chars that will compose the logo of the splash screen
0532: 1A      	LOADLOGOCHRS:   ld      A,(DE)          ; load a pattern char of the logo
0533: 87      	                add     A,A
0534: 87      	                add     A,A
0535: 87      	                add     A,A             ; multiply times 8 to get the offset
0536: C5      	                push    BC
0537: D5      	                push    DE              ; store BC and DE
0538: E5      	                push    HL              ; store VRAM address to write to
0539: 21834B  	                ld      HL,LOGOFONT     ; start of logo font data
053C: 5F      	                ld      E,A
053D: 1600    	                ld      D,$00           ; put offset (A) into DE
053F: 19      	                add     HL,DE           ; get address of pattern data
0540: EB      	                ex      DE,HL           ; move address into DE
0541: E1      	                pop     HL              ; retrieve VRAM address
0542: 0608    	                ld      B,$08           ; 8 bytes per pattern
0544: CDEA05  	                call    SETVDPADRS      ; set VDP address
0547: 0E30    	                ld      C,VDP_DAT
0549: 1A      	SNDLOGPT:       ld      A,(DE)          ; load data from RAM
054A: ED79    	                out     (C),A           ; and send to VRAM
054C: 13      	                inc     DE              ; next byte into RAM
054D: 23      	                inc     HL              ; next byte into VRAM (used in future iterations)
054E: 10F9    	                djnz    SNDLOGPT        ; repeat 8 times
0550: D1      	                pop     DE
0551: C1      	                pop     BC              ; retrieve BC & DE
0552: C9      	                ret                     ; return to caller
              	
0553:         	CLRTABLE:       equ $
0553: 181B1314	                defb    $18,$1B,$13,$14,$1D ; colors of background bands of the logo
0557: 1D      	
              	                
              	; empty video buffer
0558: 3AE081  	EMPTYVIDBUF:    ld      A,(SCR_MODE)    ; check screen mode
055B: FE02    	                cp      $02             ; is it G2 mode?
055D: CA8105  	                jp      Z,EMPTYG2       ; yes, jump over
0560: FE03    	                cp      $03             ; is it MC mode?
0562: CAB205  	                jp      Z,EMPTYMC       ; yes, jump over
0565: 3ADF81  	                ld      A,(SCR_SIZE_H)  ; load height of screen
0568: 47      	                ld      B,A             ; move rows into B
0569: AF      	                xor     A               ; filling char is $00
056A: 2AE281  	                ld      HL,(SCR_NAM_TB) ; load the name table address
056D: CDEA05  	                call    SETVDPADRS      ; send address to VDP
0570: 0E30    	                ld      C,VDP_DAT       ; VDP address for passing data
0572: 5F      	LDCOLSTOEMPTY:  ld      E,A             ; store filling char into E
0573: 3ADE81  	                ld      A,(SCR_SIZE_W)  ; load # of cols to empty into A
0576: 57      	                ld      D,A             ; move A into D
0577: 7B      	                ld      A,E             ; recover filling char
0578: ED79    	RPTEMPTYBUF:    out     (C),A           ; write empty byte into VRAM
057A: 00      	                nop
057B: 15      	                dec     D               ; decr. D
057C: 20FA    	                jr      NZ,RPTEMPTYBUF  ; repeat for the # of cols
057E: 10F2    	                djnz    LDCOLSTOEMPTY   ; repeat for the # of rows
0580: C9      	                ret                     ; return to caller
0581: 2AE281  	EMPTYG2:        ld      HL,(SCR_NAM_TB) ; yes, additional setup for G2 - load G2 name table address (usually $1800)
0584: CDD705  	                call    SETNAMETABLE    ; set name table
0587: 210000  	                ld      HL,$0000        ; set pattern table
058A: CDEA05  	                call    SETVDPADRS      ; send address to VDP
058D: AF      	                xor     A               ; empty pattern
058E: 1618    	                ld      D,$18           ; 6144 ($1800) cell to clean, 24 pages ($18)
0590: 47      	                ld      B,A             ; 256 bytes for page
0591: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
0593: ED79    	CLRG2PTNTBL:    out     (C),A           ; clear pattern
0595: 00      	                nop                     ; little delay
0596: 00      	                nop
0597: 10FA    	                djnz    CLRG2PTNTBL     ; repeat for 1 page
0599: 15      	                dec     D               ; next page
059A: 20F7    	                jr      NZ,CLRG2PTNTBL  ; repeat
059C: 210020  	                ld      HL,$2000        ; load the color table address
059F: CDEA05  	                call    SETVDPADRS      ; send address to VDP
05A2: 3AED81  	                ld      A,(FRGNDCLR)    ; load foreground
05A5: 87      	                add     A,A
05A6: 87      	                add     A,A
05A7: 87      	                add     A,A
05A8: 87      	                add     A,A             ; move to high nibble
05A9: 57      	                ld      D,A             ; store into D
05AA: 3AEE81  	                ld      A,(BKGNDCLR)    ; load background color
05AD: B2      	                or      D               ; combine with background color
05AE: 1618    	                ld      D,$18           ; 6144 ($1800) cells to fill, so 24 pages ($18)
05B0: 1817    	                jr      STARTEMPTY
05B2: 210008  	EMPTYMC:        ld      HL,$0800        ; MC name table
05B5: CDD705  	                call    SETNAMETABLE    ; set name table
05B8: 210000  	                ld      HL,$0000        ; color table address
05BB: CDEA05  	                call    SETVDPADRS      ; send address to VDP
05BE: 3AEE81  	                ld      A,(BKGNDCLR)    ; load background
05C1: 57      	                ld      D,A             ; store into D
05C2: 87      	                add     A,A
05C3: 87      	                add     A,A
05C4: 87      	                add     A,A
05C5: 87      	                add     A,A             ; move to high nibble
05C6: B2      	                or      D               ; set background color for high and low nibble
05C7: 1608    	                ld      D,$08           ; 2048 ($0800) cells to fill, so 8 pages ($08)
05C9: 0E30    	STARTEMPTY:     ld      C,VDP_DAT       ; VDP address for passing data
05CB: 0600    	                ld      B,$00           ; 256 bytes each page ($00=256)
05CD: ED79    	SNDCLRSET:      out     (C),A           ; send color setting
05CF: 00      	                nop                     ; wait a while
05D0: 00      	                nop
05D1: 10FA    	                djnz    SNDCLRSET       ; repeat for 1 page
05D3: 15      	                dec     D               ; have we filled all the pages?
05D4: 20F7    	                jr      NZ,SNDCLRSET    ; no, repeat
05D6: C9      	                ret                     ; return to caller
              	
              	; set name table for G2 mode (patterns from $00 to $FF for each of the 3 areas of the screen)
05D7: CDEA05  	SETNAMETABLE:   call    SETVDPADRS      ; send address to VDP
05DA: 0E30    	                ld      C,VDP_DAT       ; VDP address for passing data
05DC: 1603    	                ld      D,$03           ; 3 pages to fill into VRAM (768 cells)
05DE: AF      	                xor     A               ; starting char name #0 (chars go from 0 to 255)
05DF: 47      	                ld      B,A             ; reset B
05E0: ED79    	RPTFLL1:        out     (C),A           ; send name to VRAM
05E2: 00      	                nop
05E3: 3C      	                inc     A               ; increment # of name
05E4: 10FA    	                djnz    RPTFLL1         ; repeat for 256 cells (1 page)
05E6: 15      	                dec     D               ; did we fill all the pages?
05E7: 20F7    	                jr      NZ,RPTFLL1      ; no, continue
05E9: C9      	                ret                     ; return to caller
              	
              	; set an address into VRAM: address is in HL
05EA: 0E32    	SETVDPADRS:     ld      C,VDP_SET       ; VDP address mode
05EC: CBF4    	                set     6,H             ; set bit #6 of address, to write to VRAM
05EE: ED69    	                out     (C),L           ; send low and...
05F0: ED61    	                out     (C),H           ; ...high byte of the first cell
05F2: C9      	                ret                     ; return to caller
              	
              	; clear the video buffer and position the cursor at 0,0
05F3: CD5805  	CLEARVIDBUF:    call    EMPTYVIDBUF     ; clear video buffer
05F6: AF      	                xor     A               ; reset A
05F7: 32E481  	                ld      (SCR_CURS_X),A  ; cursor X to 0
05FA: 32E581  	                ld      (SCR_CURS_Y),A  ; cursor Y to 0
05FD: C34606  	                jp      POS_CURSOR      ; position cursor & return to caller
              	
              	; HOME: position the cursor at coords. 0,0 
0600: AF      	ATHOME:         xor     A               ; position cursor at 0,0 by storing...
0601: 32E781  	                ld      (SCR_CUR_NY),A  ; ...new Y...
0604: 32E681  	                ld      (SCR_CUR_NX),A  ; ...and new X
0607: C35006  	                jp      MOVCRS          ; move cursor to new location & return to caller
              	
              	; load the char or byte at the VRAM position set by HL
              	; value is returned into A
060A: C5      	READ_VIDEO_LOC: push    BC              ; store BC
060B: 0E32    	                ld      C,VDP_SET       ; VDP setting mode
060D: 44      	                ld      B,H
060E: CBB8    	                res     7,B
0610: CBB0    	                res     6,B
0612: ED69    	                out     (C),L           ; low byte then...
0614: ED41    	                out     (C),B           ; high byte
0616: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
0618: 00      	                nop                     ; wait...
0619: 00      	                nop                     ; ...a while
061A: 00      	                nop
061B: ED78    	                in      A,(C)           ; read byte at current VRAM location
061D: C1      	                pop     BC              ; restore BC
061E: C9      	                ret                     ; return to caller
              	
              	; write a byte at the VRAM position pointed by HL
              	; value is in A
061F: C5      	WRITE_VIDEO_LOC:push    BC              ; store BC
0620: 0E32    	                ld      C,VDP_SET       ; VDP setting mode
0622: 44      	                ld      B,H             ; copy H into B
0623: CBB8    	                res     7,B
0625: CBF0    	                set     6,B             ; write to VRAM
0627: ED69    	                out     (C),L           ; low byte then...
0629: ED41    	                out     (C),B           ; high byte of VRAM address
062B: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
062D: 00      	                nop                     ; wait...
062E: 00      	                nop                     ; ...a while
062F: 00      	                nop
0630: ED79    	                out     (C),A           ; write byte into VRAM
0632: C1      	                pop     BC              ; restore BC
0633: C9      	                ret                     ; return to caller
              	
              	; write a value into a specific VDP register
              	; value is in E, register is in A
0634: C5      	WRITE_VREG:     push    BC              ; store BC
0635: C680    	                add     A,$80           ; set VDP to write to registers
0637: 0E32    	                ld      C,VDP_SET       ; VDP setting mode
0639: ED59    	                out     (C),E           ; send data to VDP
063B: ED79    	                out     (C),A           ; select the destination register
063D: C1      	                pop     BC              ; restore BC
063E: C9      	                ret                     ; return to caller
              	
              	; read VDP status register and return value into A
063F: C5      	READ_VSTAT:     push    BC              ; store BC
0640: 0E32    	                ld      C,VDP_SET       ; VDP register access
0642: ED78    	                in      A,(C)           ; read status register
0644: C1      	                pop     BC              ; restore BC
0645: C9      	                ret                     ; return to caller
              	
              	; position the cursor at the current coordinates, preserving underlying char
0646: CD7706  	POS_CURSOR:     call    LOAD_CRSR_POS   ; load the VRAM address of cursor into HL
0649: CD0A06  	                call    READ_VIDEO_LOC  ; load the current char at the cursor position (return in A)
064C: 32E881  	                ld      (SCR_ORG_CHR),A ; store the current char
064F: C9      	                ret
              	
              	; move cursor to new X,Y coordinates
0650: CD6E06  	MOVCRS:         call    RSTCHRCRS       ; restore the char in the current cursor position
0653: CD5906  	                call    NEWCRSRCOORD    ; set new cursor's coordinates
0656: C34606  	                jp      POS_CURSOR      ; position cursor into new location & return to caller
              	
              	
              	; set new cursor's coordinates:
0659: 3AE681  	NEWCRSRCOORD:   ld      A,(SCR_CUR_NX)  ; load new X
065C: 32E481  	                ld      (SCR_CURS_X),A  ; write new X
065F: 3AE781  	                ld      A,(SCR_CUR_NY)  ; load new Y
0662: 32E581  	                ld      (SCR_CURS_Y),A  ; write new Y
0665: 3EFF    	                ld      A,$FF           ; delete new values
0667: 32E681  	                ld      (SCR_CUR_NX),A  ; of X
066A: 32E781  	                ld      (SCR_CUR_NY),A  ; and Y
066D: C9      	                ret
              	
              	; recover char under the cursor and prints it onto the screen
066E: CD7706  	RSTCHRCRS:      call    LOAD_CRSR_POS   ; recover old cursor position
0671: 3AE881  	                ld      A,(SCR_ORG_CHR) ; recover old char
0674: C31F06  	                jp      WRITE_VIDEO_LOC ; write char into VRAM & return
              	
              	; retrieve cursor position from either current coordinates or next place
              	; return address position into HL
0677: 3AE581  	LOAD_CRSR_POS:  ld      A,(SCR_CURS_Y)  ; load cursor Y
067A: 6F      	                ld      L,A             ; move it into reg.L
067B: AF      	                xor     A               ; reset A
067C: 67      	                ld      H,A             ; reset H
067D: 47      	                ld      B,A             ; reset B
067E: 29      	                add     HL,HL           ; create offset (each address is 2-bytes long so we need to double HL)
067F: 11A909  	                ld      DE,POS_TB_CRS_40; load position table address of cursor for 40 cols
0682: 3ADE81  	                ld      A,(SCR_SIZE_W)  ; load screen width
0685: FE28    	                cp      $28             ; is it 40 cols?
0687: 2803    	                jr      Z,CONT_POS_CURS ; yes, jump over
0689: 117909  	                ld      DE,POS_TB_CRS_32; no, load position table address of cursor for 32 cols
068C: 19      	CONT_POS_CURS:  add     HL,DE           ; the correct starting address of the required row is now into HL
068D: 5E23562B	                ld      DE,(HL)         ; load starting address of the required row into DE
0691: 2AE281  	                ld      HL,(SCR_NAM_TB) ; load starting address of name table
0694: 19      	                add     HL,DE           ; starting address of the current row into name table
0695: 3AE481  	                ld      A,(SCR_CURS_X)  ; load cursor X
0698: 4F      	                ld      C,A             ; transfer A into C
0699: 09      	                add     HL,BC           ; add X offset: now HL contains the address of the current cursor position
069A: C9      	                ret
              	
              	; find X,Y coordinates of a screen address pointed in VRAM by HL
              	; return them into L & A for X,Y
069B: D5      	HL2XY:          push    DE              ; store DE
069C: ED5BE281	                ld      DE,(SCR_NAM_TB) ; load starting address of name table into DE
06A0: AF      	                xor     A               ; clear Carry
06A1: ED52    	                sbc     HL,DE           ; find position relative to screen (from 0,0)
06A3: D1      	                pop     DE
06A4: 3ADE81  	                ld      A,(SCR_SIZE_W)  ; load screen width
06A7: 4F      	                ld      C,A             ; move it into C
06A8: CD743B  	                call    DIV_16_8        ; divide position by C: return Y into L and X into A
06AB: C9      	                ret                     ; return to caller
              	
              	;-------------------------------------------------------------------------------
              	; send current char to video buffer
06AC: F5      	CHAR2VID:       push    AF              ; store AF
06AD: C5      	                push    BC              ; store BC
06AE: D5      	                push    DE              ; store DE
06AF: E5      	                push    HL              ; store HL
06B0: 3AE981  	                ld      A,(CRSR_STATE)  ; store cursor state...
06B3: F5      	                push    AF              ; into stack
06B4: CD4C08  	                call    CURSOR_OFF      ; cursor off
06B7: 3AEC81  	                ld      A,(CHR4VID)     ; recover char
06BA: FE19    	                cp      HOME            ; is it HOME char ($19?)
06BC: 2006    	                jr      NZ,CHKCS        ; no, check over
06BE: CD0006  	                call    ATHOME          ; yes, move the cursor to 0,0
06C1: C33707  	                jp      EXITCHAR2VID    ; exit
06C4: FE0C    	CHKCS:          cp      CS              ; is it the CLEAR char ($0C)?
06C6: 2005    	                jr      NZ,CHKCR        ; no, check over
06C8: CDF305  	                call    CLEARVIDBUF     ; yes, clear video buffer and position cursor at 0,0
06CB: 186A    	                jr      EXITCHAR2VID    ; exit
06CD: FE0D    	CHKCR:          cp      CR              ; is it a carriage return ($0D)?
06CF: 2005    	                jr      NZ,CHKBKSP      ; no, jump over
06D1: CDCE08  	                call    CRGRETURN       ; yes, go to the beginning of the next line
06D4: 1861    	                jr      EXITCHAR2VID    ; exit
06D6: FE08    	CHKBKSP:        cp      BKSP            ; is it the backspace ($08)?
06D8: 2005    	                jr      NZ,CHKCRSLFT    ; no, jump over
06DA: CD6907  	                call    BACKSPACE       ; move cursor left 1 position
06DD: 1858    	                jr      EXITCHAR2VID    ; exit
06DF: FE1C    	CHKCRSLFT:      cp      CRSLFT          ; is it cursor left?
06E1: 2005    	                jr      NZ,CHKCRSUP     ; no, jump over
06E3: CD7C07  	                call    CURSORLEFT      ; move cursor left...
06E6: 184F    	                jr      EXITCHAR2VID    ; ...and exit
06E8: FE1E    	CHKCRSUP:       cp      CRSUP           ; is it cursor up?
06EA: 2005    	                jr      NZ,CHKCRSRGT    ; no, jump over
06EC: CDC807  	                call    CURSORUP        ; move cursor up...
06EF: 1846    	                jr      EXITCHAR2VID    ; ...and exit
06F1: FE1D    	CHKCRSRGT:      cp      CRSRGT          ; is it cursor right?
06F3: 2005    	                jr      NZ,CHKCRSDWN    ; no, jump over
06F5: CDE107  	                call    CURSORRIGHT     ; move cursor right...
06F8: 183D    	                jr      EXITCHAR2VID    ; ...and exit
06FA: FE1F    	CHKCRSDWN:      cp      CRSDN           ; is it cursor down?
06FC: 2005    	                jr      NZ,CHKLF        ; no, jump over
06FE: CD1608  	                call    CURSORDOWN      ; move cursor up...
0701: 1834    	                jr      EXITCHAR2VID    ; ...and exit
0703: FE0A    	CHKLF:          cp      LF              ; is it a line feed ($0A)?
0705: 2830    	                jr      Z,EXITCHAR2VID  ; CURRENTLY WE DON'T PRINT LF, WE JUST USE CR TO SUBSTITUTE CR+LF COMBINATION
0707: CD7706  	                call    LOAD_CRSR_POS   ; recover position of cursor
070A: 3AEC81  	                ld      A,(CHR4VID)     ; recover char to print
070D: CD1F06  	                call    WRITE_VIDEO_LOC ; write A into VRAM at (HL)
0710: 3AE581  	                ld      A,(SCR_CURS_Y)  ; load cursor Y into A
0713: 5F      	                ld      E,A             ; store cursor Y into E
0714: 3AE481  	                ld      A,(SCR_CURS_X)  ; load cursor X
0717: 3C      	                inc     A               ; move 1 step to right
0718: 21DE81  	                ld      HL,SCR_SIZE_W   ; cell that keeps the width of screen
071B: BE      	                cp      (HL)            ; have we reached the most right position?
071C: 200F    	                jr      NZ,SETCSRCOORDS ; no, go over
071E: 1C      	                inc     E               ; yes, increment cursor Y (go to next line)
071F: 7B      	                ld      A,E             ; move cursor Y into A
0720: 21DF81  	                ld      HL,SCR_SIZE_H   ; cell that keeps the height of screen
0723: BE      	                cp      (HL)            ; have we reached the bottom of the screen?
0724: 2006    	                jr      NZ,SETCRSRY     ; no, jump over
0726: D5      	                push    DE
0727: CD5308  	                call    SCROLLUP        ; scroll screen up
072A: D1      	                pop     DE
072B: 1D      	                dec     E               ; decrement 1 row, to set cursor Y on the last line
072C: AF      	SETCRSRY:       xor     A               ; then set cursor X to 0 (go to beginning of line)
072D: 32E481  	SETCSRCOORDS:   ld      (SCR_CURS_X),A  ; store current cursor X
0730: 7B      	                ld      A,E             ; recover Y
0731: 32E581  	                ld      (SCR_CURS_Y),A  ; store current cursor Y
0734: CD4606  	                call    POS_CURSOR      ; position cursor to new location
0737: AF      	EXITCHAR2VID:   xor     A               ; reset char
0738: 32EC81  	                ld      (CHR4VID),A     ; to be sent to screen
073B: F1      	                pop     AF              ; recover cursor state
073C: A7      	                and     A               ; was it off (A=0)?
073D: C43608  	                call    NZ,CURSOR_ON    ; no, set cursor on
0740: E1      	                pop     HL              ; restore HL
0741: D1      	                pop     DE              ; restore DE
0742: C1      	                pop     BC              ; restore BC
0743: F1      	                pop     AF              ; restore AF
0744: C9      	                ret                     ; return to caller
              	
              	; flash the cursor at the current position
              	; (this sub-routine is called by CH3 timer ISR)
0745: 3AE981  	FLASHCURSOR:    ld      A,(CRSR_STATE)  ; now, check the cursor
0748: A7      	                and     A               ; cursor off (A=0)?
0749: C8      	                ret     Z               ; yes, return
074A: 3ACE81  	                ld      A,(TMRCNT)      ; no, load the first byte of the 100ths of A second's counter
074D: E620    	                and     $20             ; check if it's time to flash the cursor (check bit #6)
074F: 21EA81  	                ld      HL,LSTCSRSTA    ; load address of cell that stores the last cursor state
0752: 46      	                ld      B,(HL)          ; load last state
0753: B8      	                cp      B               ; compare current state with last state
0754: C8      	                ret     Z               ; same state, no change required - exit
0755: 77      	                ld      (HL),A          ; save new state
0756: F5      	                push    AF              ; store A (keep state for later use)
0757: CD7706  	                call    LOAD_CRSR_POS   ; load current cursor position into HL
075A: F1      	                pop     AF              ; recover current state
075B: 06FF    	                ld      B,$FF           ; cursor char
075D: FE20    	                cp      $20             ; is the cursor on video (A == $20)?
075F: 2804    	                jr      Z,PUTCRSCHR     ; yes, jump over
0761: 3AE881  	                ld      A,(SCR_ORG_CHR) ; no, load the original char
0764: 47      	                ld      B,A             ; move char into B
0765: 78      	PUTCRSCHR:      ld      A,B             ; recover char from B
0766: C31F06  	                jp      WRITE_VIDEO_LOC ; print cursor/char at the current position & return
              	
              	
              	; delete the char at the left of the cursor
0769: CDA507  	BACKSPACE:      call    MVCRS2LFT       ; prepare to move cursor to left
076C: CD6E06  	                call    RSTCHRCRS       ; restore char under the cursor
076F: CD5906  	                call    NEWCRSRCOORD    ; set new cursor's coordinates
0772: CD7706  	                call    LOAD_CRSR_POS   ; find address of new video cell
0775: AF      	                xor     A               ; null char
0776: CD1F06  	                call    WRITE_VIDEO_LOC ; write into video cell
0779: C34606  	                jp      POS_CURSOR      ; position cursor and return
              	
              	
              	; move cursor to left
077C: F5      	CURSORLEFT:     push    AF              ; store A
077D: 3AE481  	                ld      A,(SCR_CURS_X)  ; load cursor X into A
0780: A7      	                and     A               ; is it at the most left of the screen (X=0)?
0781: 280C    	                jr      Z,CHCKYPOS      ; yes, check Y position
0783: 3D      	                dec     A               ; no, decrement X
0784: 32E681  	                ld      (SCR_CUR_NX),A  ; store new X
0787: 3AE581  	                ld      A,(SCR_CURS_Y)  ; load current cursor Y
078A: 32E781  	                ld      (SCR_CUR_NY),A  ; no move over Y axis
078D: 1811    	                jr      CONTCRSLFT      ; go on moving cursor
078F: 3AE581  	CHCKYPOS:       ld      A,(SCR_CURS_Y)  ; load cursor Y
0792: A7      	                and     A               ; is it at the most top of the screen (Y=0)?
0793: 280E    	                jr      Z,EXITCURSORLEFT; yes, exit doing nothing
0795: 3D      	                dec     A               ; no, decrement Y
0796: 32E781  	                ld      (SCR_CUR_NY),A  ; store new Y
0799: 3ADE81  	                ld      A,(SCR_SIZE_W)  ; load current screen width
079C: 3D      	                dec     A               ; cursor to the most right position (width-0)
079D: 32E681  	                ld      (SCR_CUR_NX),A  ; set new cursor X
07A0: CD5006  	CONTCRSLFT:     call    MOVCRS          ; move cursor into new position
07A3: F1      	EXITCURSORLEFT: pop     AF              ; restore A
07A4: C9      	                ret                     ; return to caller
              	
              	; move cursor 1 position to the left
07A5: 3AE481  	MVCRS2LFT:      ld      A,(SCR_CURS_X)  ; load cursor X into A
07A8: A7      	                and     A               ; is it at the most left of the screen (X=0)?
07A9: 280B    	                jr      Z,CHKYPOS       ; yes, check Y position
07AB: 3D      	                dec     A               ; no, decrement X
07AC: 32E681  	                ld      (SCR_CUR_NX),A  ; store new X
07AF: 3AE581  	                ld      A,(SCR_CURS_Y)  ; load current cursor Y
07B2: 32E781  	                ld      (SCR_CUR_NY),A  ; no move over Y axis
07B5: C9      	                ret                     ; go on moving cursor
07B6: 3AE581  	CHKYPOS:        ld      A,(SCR_CURS_Y)  ; load cursor Y
07B9: A7      	                and     A               ; is it at the most top of the screen (Y=0)?
07BA: 28E7    	                jr      Z,EXITCURSORLEFT; yes, exit doing nothing
07BC: 3D      	                dec     A               ; no, decrement Y
07BD: 32E781  	                ld      (SCR_CUR_NY),A  ; store new Y
07C0: 3ADE81  	                ld      A,(SCR_SIZE_W)  ; load current screen width
07C3: 3D      	                dec     A               ; cursor to the most right position (width-1)
07C4: 32E681  	                ld      (SCR_CUR_NX),A  ; set new cursor X
07C7: C9      	                ret                     ; return to caller
              	
              	; move cursor up
07C8: F5      	CURSORUP:       push    AF              ; store A
07C9: 3AE581  	                ld      A,(SCR_CURS_Y)  ; load cursor Y into A
07CC: A7      	                and     A               ; is it at the most top of the screen (Y=0)?
07CD: 2810    	                jr      Z,EXITCURSORUP  ; yes, exit doing nothing
07CF: 3D      	                dec     A               ; no, decrement Y
07D0: 32E781  	                ld      (SCR_CUR_NY),A  ; store new Y
07D3: 3AE481  	                ld      A,(SCR_CURS_X)  ; load current cursor X
07D6: 32E681  	                ld      (SCR_CUR_NX),A  ; set new cursor X
07D9: CD6E06  	                call    RSTCHRCRS       ; restore char under the cursor and print it
07DC: CD5006  	                call    MOVCRS          ; move cursor into new position
07DF: F1      	EXITCURSORUP:   pop     AF              ; restore A
07E0: C9      	                ret                     ; return to caller
              	
              	
              	; move cursor to right
07E1: F5      	CURSORRIGHT:    push    AF              ; store A
07E2: C5      	                push    BC              ; store B
07E3: 3ADE81  	                ld      A,(SCR_SIZE_W)  ; load current screen width (in text modes it's 32 or 40)
07E6: 3D      	                dec     A               ; decrement it (most right can only be 31 or 39)
07E7: 47      	                ld      B,A             ; move A into B
07E8: 3AE481  	                ld      A,(SCR_CURS_X)  ; load cursor X into A    
07EB: B8      	                cp      B               ; is cursor at the most right position on the screen?
07EC: 300C    	                jr      NC,CHCKYPOS2    ; yes, so jump to check Y position
07EE: 3C      	                inc     A               ; no, so increment X
07EF: 32E681  	                ld      (SCR_CUR_NX),A  ; store new X
07F2: 3AE581  	                ld      A,(SCR_CURS_Y)  ; load current cursor Y
07F5: 32E781  	                ld      (SCR_CUR_NY),A  ; no move over Y axis
07F8: 1813    	                jr      CONTCRSRGT      ; go on moving cursor
07FA: 3ADF81  	CHCKYPOS2:      ld      A,(SCR_SIZE_H)  ; load screen height
07FD: 3D      	                dec     A               ; decrement it (last row can only be 23)
07FE: 47      	                ld      B,A             ; move bottom into B
07FF: 3AE581  	                ld      A,(SCR_CURS_Y)  ; load cursor Y into A
0802: B8      	                cp      B               ; is the cursor at the bottom of the screen?
0803: 300E    	                jr      NC,EXITCURSORRGHT; yes, exit doing nothing
0805: 3C      	                inc     A               ; no, increment Y
0806: 32E781  	                ld      (SCR_CUR_NY),A  ; store new Y
0809: AF      	                xor     A               ; move cursor to top left
080A: 32E681  	                ld      (SCR_CUR_NX),A  ; store new X
080D: CD6E06  	CONTCRSRGT:     call    RSTCHRCRS       ; restore char under the cursor and print it
0810: CD5006  	                call    MOVCRS          ; move cursor into new position
0813: C1      	EXITCURSORRGHT: pop     BC              ; retrieve BC
0814: F1      	                pop     AF              ; restore A
0815: C9      	                ret                     ; return to caller
              	
              	
              	; move cursor down
0816: F5      	CURSORDOWN:     push    AF              ; store A
0817: C5      	                push    BC              ; store B
0818: 3ADF81  	                ld      A,(SCR_SIZE_H)  ; load current screen height (in text modes it's 24)
081B: 3D      	                dec     A               ; decrement it (positions can only vary between 0 and 23)
081C: 47      	                ld      B,A             ; move X into B
081D: 3AE581  	                ld      A,(SCR_CURS_Y)  ; load cursor Y into A             
0820: B8      	                cp      B               ; is current cursor position < 23?
0821: 3010    	                jr      NC,EXITCURSORDOWN; no, exit doing nothing
0823: 3C      	                inc     A               ; yes, increment Y
0824: 32E781  	                ld      (SCR_CUR_NY),A  ; store new Y
0827: 3AE481  	                ld      A,(SCR_CURS_X)  ; load current cursor X
082A: 32E681  	                ld      (SCR_CUR_NX),A  ; set new cursor X
082D: CD6E06  	                call    RSTCHRCRS       ; restore char under the cursor and print it
0830: CD5006  	                call    MOVCRS          ; move cursor into new position
0833: C1      	EXITCURSORDOWN: pop     BC              ; retrieve BC
0834: F1      	                pop     AF              ; retrieve A
0835: C9      	                ret                     ; return to caller
              	
              	
              	; set cursor on (visible on screen)
0836: F5      	CURSOR_ON:      push    AF              ; store AF
0837: 3AE981  	                ld      A,(CRSR_STATE)  ; load cursor state
083A: FE01    	                cp      $01             ; is it on?
083C: 280C    	                jr      Z,EXITCURSOR_ON ; yes, so nothing to do
083E: 3ADF81  	                ld      A,(SCR_SIZE_H)  ; check the video mode
0841: FE30    	                cp      $30             ; graphics 2 or 3 (if value>=48)?
0843: 3005    	                jr      NC,EXITCURSOR_ON; yes, so exit (no cursor in graphics 2 or 3)
0845: 3E01    	                ld      A,$01           ; cursor state ON
0847: 32E981  	                ld      (CRSR_STATE),A  ; set state
084A: F1      	EXITCURSOR_ON:  pop     AF              ; restore AF
084B: C9      	                ret                     ; return to caller
              	
              	; set cursor off (invisible on screen)
084C: F5      	CURSOR_OFF:     push    AF              ; store AF
084D: AF      	                xor     A               ; cursor state OFF
084E: 32E981  	                ld      (CRSR_STATE),A  ; set state
0851: F1      	                pop     AF              ; restore AF
0852: C9      	                ret
              	
              	; scroll the screen 1 row up
0853: AF      	SCROLLUP:       xor     A
0854: 32EB81  	                ld      (PRNTVIDEO),A
0857: 2AE281  	                ld      HL,(SCR_NAM_TB) ; start address of the name table
085A: 221F82  	                ld      (VIDTMP1),HL    ; store address of the destination row (1st row of the screen)
085D: 3ADE81  	                ld      A,(SCR_SIZE_W)  ; load the screen width
0860: 5F      	                ld      E,A             ; move width into E
0861: 1600    	                ld      D,$00           ; reset D
0863: 19      	                add     HL,DE           ; HL now contains the address of the source row (2nd row of the screen)
0864: 222182  	                ld      (VIDTMP2),HL    ; store address of source row
0867: 3ADF81  	                ld      A,(SCR_SIZE_H)  ; load the screen height
086A: 3D      	                dec     A               ; decrement the # of rows: now, A contains the # of rows to be moved
086B: 47      	                ld      B,A             ; move # of rows into B
086C: 3ADE81  	SCROLLNXTRW:    ld      A,(SCR_SIZE_W)  ; (re)load the screen width
086F: 5F      	                ld      E,A             ; move width into E
0870: 2A2182  	                ld      HL,(VIDTMP2)    ; load source address
0873: 0E32    	                ld      C,VDP_SET       ; VDP setting mode
0875: ED69    	                out     (C),L           ; low byte of source
0877: ED61    	                out     (C),H           ; high byte of source
0879: 21F781  	                ld      HL,VIDEOBUFF    ; load address of the first cell of the video buffer
087C: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
087E: ED78    	LOADNEXTCOL:    in      A,(C)           ; load char
0880: 77      	                ld      (HL),A          ; store char
0881: 23      	                inc     HL              ; next cell of the buffer
0882: 1D      	                dec     E               ; count the chars to be read
0883: 20F9    	                jr      NZ,LOADNEXTCOL  ; repeat until we read the entire row
0885: 3ADE81  	                ld      A,(SCR_SIZE_W)  ; reload the screen width
0888: 5F      	                ld      E,A             ; move # of rows into E
0889: 1600    	                ld      D,$00           ; reset D
088B: 2A1F82  	                ld      HL,(VIDTMP1)    ; load address of destination row
088E: E5      	                push    HL              ; store HL
088F: 2A2182  	                ld      HL,(VIDTMP2)    ; current source will be..
0892: 221F82  	                ld      (VIDTMP1),HL    ; ..new destination
0895: 19      	                add     HL,DE           ; address of new
0896: 222182  	                ld      (VIDTMP2),HL    ; source row
0899: E1      	                pop     HL              ; restore address of current destination row
089A: CBF4    	                set     6,H             ; writing mode
089C: 0E32    	                ld      C,VDP_SET       ; VDP setting mode
089E: ED69    	                out     (C),L           ; low byte
08A0: ED61    	                out     (C),H           ; high byte of address
08A2: 21F781  	                ld      HL,VIDEOBUFF    ; video buffer address
08A5: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
08A7: 7E      	WRITEBUF:       ld      A,(HL)          ; load char
08A8: ED79    	                out     (C),A           ; send char
08AA: 23      	                inc     HL              ; increment buffer index
08AB: 1D      	                dec     E               ; next row
08AC: 20F9    	                jr      NZ,WRITEBUF     ; repeat until 0
08AE: 10BC    	                djnz    SCROLLNXTRW     ; repeat for the entire screen
08B0: 3ADE81  	                ld      A,(SCR_SIZE_W)  ; reload screen width
08B3: 47      	                ld      B,A             ; cells to empty into B
08B4: AF      	                xor     A               ; null char
08B5: 0E32    	                ld      C,VDP_SET       ; VDP set mode
08B7: 2A1F82  	                ld      HL,(VIDTMP1)    ; load address of the last row
08BA: CBF4    	                set     6,H             ; writing mode
08BC: ED69    	                out     (C),L           ; low byte then..
08BE: ED61    	                out     (C),H           ; high byte of address
08C0: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
08C2: ED79    	RPTEMPTYROW:    out     (C),A           ; empty cell
08C4: 00      	                nop                     ; delay
08C5: 00      	                nop
08C6: 10FA    	                djnz    RPTEMPTYROW     ; repeat until the last row has been cleaned
08C8: 3E01    	                ld      A,$01
08CA: 32EB81  	                ld      (PRNTVIDEO),A   ; set print-on-video on
08CD: C9      	                ret                     ; return to caller
              	
              	; carriage return: first, it looks for char $00 at the beginning of the line (look for the first null char),
              	; then it starts sendind every char it finds on the screen to the terminal buffer of the BASIC interpreter
              	; until another null char is found. Finally, move to the next line and position the cursor at the beginning
              	; of the row (equivalent to CR+LF), then gets back control to the screen editor to let it interpret the line
81EF:         	CUR_POS         equ     TMPBFR1         ; cursor position
81F1:         	SRTTXT          equ     TMPBFR2         ; start of text line
81F3:         	ENDTXT          equ     TMPBFR3         ; end of text line
08CE:         	CRGRETURN:      ; preliminary: disable cursor if on, and retrieve char under it
08CE: 3AE981  	                ld      A,(CRSR_STATE)  ; recover cursor state
08D1: 32F581  	                ld      (TMPBFR4),A     ; store status
08D4: A7      	                and     A               ; is cursor on?
08D5: C44C08  	                call    NZ,CURSOR_OFF   ; yes, so set cursor off
08D8: CD6E06  	                call    RSTCHRCRS       ; restore char under it
              	                ; first, check if cursor if off, so that we just interpret return as a new line command
08DB: 3A2982  	                ld      A,(KBDNPT)      ; check if input from keyboad
08DE: A7      	                and     A               ; if 0, input is not from keyboard...
08DF: CA5809  	                jp      Z,PRNTRETURN    ; ...so just print a carriage return; otherwise, interpret the return
              	                ; first part: look for the beginning of the text line on screen
08E2: CD7706  	                call    LOAD_CRSR_POS   ; load cursor position into HL
08E5: 22EF81  	                ld      (CUR_POS),HL    ; store it
08E8: ED5BE281	                ld      DE,(SCR_NAM_TB) ; load VRAM address of top-left cell of screen ("home")
08EC: E5      	RPTNLLSRC:      push    HL
08ED: CD353B  	                call    CMP16           ; check if at "home"
08F0: E1      	                pop     HL
08F1: CAFC08  	                jp      Z,CNTNULL       ; yes, exit because there is nothing before
08F4: 2B      	                dec     HL              ; go 1 step back
08F5: CD0A06  	                call    READ_VIDEO_LOC  ; read char of current position
08F8: A7      	                and     A               ; is it $00 (null char)?
08F9: 20F1    	                jr      NZ,RPTNLLSRC    ; no, continue searching
08FB: 23      	                inc     HL              ; move 1 step forward to go back to the last cell with something in
              	                ; second part: look for the ending of the text on screen
08FC: 22F181  	CNTNULL:        ld      (SRTTXT),HL     ; store beginning of text
08FF: 3ADF81  	                ld      A,(SCR_SIZE_H)
0902: 5F      	                ld      E,A             ; load screen height into DE
0903: 3ADE81  	                ld      A,(SCR_SIZE_W)
0906: 6F      	                ld      L,A             ; load screen width into HL
0907: AF      	                xor     A
0908: 67      	                ld      H,A
0909: 57      	                ld      D,A
090A: CD403B  	                call    MUL16           ; multiply HL times DE to get the screen size
090D: ED5BE281	                ld      DE,(SCR_NAM_TB) ; load screen name table start address into DE
0911: 19      	                add     HL,DE           ; get the address...
0912: 2B      	                dec     HL              ; ...of the "last" video cell
0913: EB      	                ex      DE,HL           ; store address into DE
0914: 2AEF81  	                ld      HL,(CUR_POS)    ; retrieve original cursor position
0917: E5      	RPTNLLSRC2:     push    HL
0918: CD353B  	                call    CMP16           ; check if at last position on screen (bottom right corner)
091B: E1      	                pop     HL
091C: CA2609  	                jp      Z,CNTNULL2      ; if yes, exit because these is nothing after
091F: 23      	                inc     HL              ; 1 more step forward
0920: CD0A06  	                call    READ_VIDEO_LOC  ; read char of current position
0923: A7      	                and     A               ; is it $00 (null char)?
0924: 20F1    	                jr      NZ,RPTNLLSRC2   ; no, continue searching
0926: 22F381  	CNTNULL2:       ld      (ENDTXT),HL     ; store ending of text line
0929: ED5BF181	                ld      DE,(SRTTXT)     ; load beginning of text line
092D: A7      	                and     A               ; clear Carry
092E: ED52    	                sbc     HL,DE           ; how many chars?
0930: 2826    	                jr      Z,PRNTRETURN    ; no chars found (HL-DE=0), so just print return & leave
              	                ;---    central part: send the text on the screen to the interpreter
0932: 2AF181  	                ld      HL,(SRTTXT)     ; load beginning of text line
0935: ED5BF381	                ld      DE,(ENDTXT)     ; load ending of text line
0939: CD0A06  	SNDCHRTOBFR:    call    READ_VIDEO_LOC  ; read char
093C: E5      	                push    HL
093D: CD3601  	                call    CHARINTOBFR     ; send char to buffer
0940: E1      	                pop     HL
0941: 23      	                inc     HL              ; go to next char
0942: E5      	                push    HL              ; store HL
0943: CD353B  	                call    CMP16           ; check if DE=HL (finish chars)
0946: E1      	                pop     HL
0947: 20F0    	                jr      NZ,SNDCHRTOBFR  ; no, repeat
0949: 3E0D    	                ld      A,CR            ; yes, so now send carriage return
094B: CD3601  	                call    CHARINTOBFR     ; send to buffer
094E: 2AF381  	                ld      HL,(ENDTXT)     ; recover address of last char of input text
0951: CD9B06  	                call    HL2XY           ; retrieve X,Y from address
0954: 7D      	                ld      A,L             ; move Y into A (we don't need X anymore)
0955: 32E581  	                ld      (SCR_CURS_Y),A  ; store new Y
              	                ;---    final part: go at the beginning of a new line on the screen
0958: AF      	PRNTRETURN:     xor     A               ; move to col 0
0959: 32E481  	                ld      (SCR_CURS_X),A  ; store new X
095C: 3AE581  	                ld      A,(SCR_CURS_Y)  ; load cursor Y into A
095F: 3C      	                inc     A               ; new row
0960: 21DF81  	                ld      HL,SCR_SIZE_H   ; load address of cell that keeps screen height
0963: BE      	                cp      (HL)            ; is the cursor over the bottom of the screen?
0964: 3806    	                jr      C,ADDNEWLINE    ; no, jump over
0966: 3D      	                dec     A               ; yes, so come back 1 row, then...
0967: F5      	                push    AF              ; (store A)
0968: CD5308  	                call    SCROLLUP        ; ...scroll the screen before to...
096B: F1      	                pop     AF              ; (retrieve A)
096C: 32E581  	ADDNEWLINE:     ld      (SCR_CURS_Y),A  ; ...store new Y
096F: 3AF581  	                ld      A,(TMPBFR4)     ; retrieve cursor state
0972: A7      	                and     A               ; was it off (A=0)?
0973: C43608  	                call    NZ,CURSOR_ON    ; no, set cursor on
0976: C34606  	                jp      POS_CURSOR      ; position cursor to new location & return to caller
              	
              	; ------------------------------------------------------------------------------
              	                ; this table contains the values of the offsets to be added to
              	                ; the starting address of the name table to find the correct
              	                ; value of the first cell of the corresponding row
              	                ; (by doing so, it's faster than doing a multipication)
              	                ; table for graphics 1 text mode: 32 cols
0979: 00002000	POS_TB_CRS_32   defw    $0000,$0020,$0040,$0060,$0080,$00A0,$00C0,$00E0
097D: 40006000	
0981: 8000A000	
0985: C000E000	
0989: 00012001	                defw    $0100,$0120,$0140,$0160,$0180,$01A0,$01C0,$01E0
098D: 40016001	
0991: 8001A001	
0995: C001E001	
0999: 00022002	                defw    $0200,$0220,$0240,$0260,$0280,$02A0,$02C0,$02E0
099D: 40026002	
09A1: 8002A002	
09A5: C002E002	
              	                ; table for pure text mode: 40 cols
09A9: 00002800	POS_TB_CRS_40   defw    $0000,$0028,$0050,$0078,$00A0,$00C8,$00F0,$0118
09AD: 50007800	
09B1: A000C800	
09B5: F0001801	
09B9: 40016801	                defw    $0140,$0168,$0190,$01B8,$01E0,$0208,$0230,$0258
09BD: 9001B801	
09C1: E0010802	
09C5: 30025802	
09C9: 8002A802	                defw    $0280,$02A8,$02D0,$02F8,$0320,$0348,$0370,$0398
09CD: D002F802	
09D1: 20034803	
09D5: 70039803	
              	
              	; ------------------------------------------------------------------------------
              	; reset VRAM
09D9: AF      	EMPTY_VRAM:     xor     A               ; reg.A cleared: we fill up VRAM with $00
09DA: 67      	                ld      H,A
09DB: 6F      	                ld      L,A             ; reset HL
09DC: CDEA05  	                call    SETVDPADRS      ; set address of first VRAM cell to $0000
09DF: 0640    	                ld      B,$40           ; $40 pages of RAM...
09E1: 57      	                ld      D,A             ; ...each one with $100 cells (tot. $4000 bytes)
09E2: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
09E4: ED79    	EMPTVRM:        out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
09E6: 14      	                inc     D               ; next cell
09E7: 00      	                nop
09E8: 20FA    	                jr      NZ,EMPTVRM      ; repeat until page is fully cleared
09EA: 10F8    	                djnz    EMPTVRM         ; repeat for $40 pages
09EC: C9      	                ret                     ; return to caller
              	
              	; clear video registers in SRAM
09ED: 21DE81  	CLR_RAM_REG:    ld      HL,SCR_SIZE_W   ; address of first register
09F0: AF      	                xor     A               ; $00 to clean the registers
09F1: 0645    	                ld      B,CHASNDDTN-SCR_SIZE_W; how many bytes (registers) to clean (dinamically calculated)
09F3: 77      	RSTVDPRAMREG:   ld      (HL),A          ; reset register
09F4: 23      	                inc     HL              ; next register
09F5: 10FC    	                djnz    RSTVDPRAMREG    ; repeat
09F7: C9      	                ret                     ; return to caller
              	
              	; ------------------------------------------------------------------------------
              	; set a specific graphics mode, passed into reg. E
09F8: 0608    	SET_GFX_MODE:   ld      B,$08           ; 8 registers means 8 bytes..
09FA: CB23    	                sla     E               ; multiply E by 8..
09FC: CB23    	                sla     E               ; so that reg. E can point..
09FE: CB23    	                sla     E               ; to the correct settings
0A00: 1600    	SET_GFX_MODE2:  ld      D,$00           ; reset D
0A02: 21350A  	                ld      HL,VDPMODESET   ; pointer to register settings | <= here points the SHOW_LOGO sub-routine
0A05: 19      	                add     HL,DE           ; add offset to get the correct set of values for the required mode
0A06: 3E80    	                ld      A,$80           ; start with REG0 ($80+register number)
0A08: 0E32    	                ld      C,VDP_SET       ; VDP set
0A0A: 56      	LDREGVLS:       ld      D,(HL)          ; load register's value
0A0B: ED51    	                out     (C),D           ; send data to VDP
0A0D: ED79    	                out     (C),A           ; indicate the register to send data to
0A0F: 3C      	                inc     A               ; next register
0A10: 23      	                inc     HL              ; next value
0A11: 10F7    	                djnz    LDREGVLS        ; repeat for 8 registers
0A13: C9      	                ret
              	
              	; ------------------------------------------------------------------------------
0A14:         	LOADCHARSET:    ; reg. A contains the video mode
              	                ; reg. HL contains address of pattern table into VRAM
0A14: 0600    	                ld      B,$00           ; 0=256 chars to load (complete charset)
0A16: CBF4    	                set     $06,H           ; add $4000 to address to indicate that we want to write into VRAM
0A18: 0E32    	                ld      C,VDP_SET       ; load VDP address into C
0A1A: ED69    	                out     (C),L           ; send low byte of address
0A1C: ED61    	                out     (C),H           ; send high byte
0A1E: 21833B  	                ld      HL,CHRST68      ; starting address of 6x8 charset into ROM
0A21: A7      	                and     A               ; is it text mode (A=0)?
0A22: 2803    	                jr      Z,NXTCHAR       ; yes, so jump to load chars into VRAM
0A24: 218343  	                ld      HL,CHRST88      ; no, so we change and load the 8x8 charset
0A27: 1608    	NXTCHAR:        ld      D,$08           ; 8 bytes per pattern char
0A29: 0E30    	                ld      C,VDP_DAT       ; VDP data mode
0A2B: 7E      	SENDCHRPTRNS:   ld      A,(HL)          ; load byte to send to VDP
0A2C: ED79    	                out     (C),A           ; write byte into VRAM
0A2E: 23      	                inc     HL              ; inc byte pointer
0A2F: 15      	                dec     D               ; 8 bytes sents (0 char)?
0A30: 20F9    	                jr      NZ,SENDCHRPTRNS ; no, continue
0A32: 10F3    	                djnz    NXTCHAR         ; yes, decrement chars counter and continue for all the chars
0A34: C9      	                ret                     ; return to caller
              	
              	;------------------------------------------------------------------------------
              	; NAME TABLE:       buffer video - contains the chars to be shown on video
              	; PATTERN TABLE:    charset - contains the chars/tiles to be loaded into the name table
              	; COLOR TABLE:      color settings for chars/tiles
              	
              	                ; VDP register settings for a text display
0A35: 00      	VDPMODESET      defb    %00000000       ; reg.0: external video off
0A36: D0      	                defb    %11010000       ; reg.1: 16K VRAM, video on, int. off, text mode (40x24)
0A37: 02      	                defb    $02             ; reg.2: name table set to $0800 ($02x$400)
0A38: 00      	                defb    $00             ; reg.3: not used in text mode
0A39: 00      	                defb    $00             ; reg.4: pattern table set to $0000
0A3A: 00      	                defb    $00             ; reg.5: not used in text mode
0A3B: 00      	                defb    $00             ; reg.6: not used in text mode
0A3C: F5      	                defb    $f5             ; reg.7: white text on light blue background
              	
0A3D:         	VDPMODESET1     ; VDP register settings for a graphics 1 mode
0A3D: 00      	                defb    %00000000       ; reg.0: ext. video off
0A3E: C0      	                defb    %11000000       ; reg.1: 16K Vram; video on, int off, graphics mode 1, sprite size 8x8, sprite magn. 0
0A3F: 06      	                defb    $06             ; reg.2: name table address: $1800
0A40: 80      	                defb    $80             ; reg.3: color table address: $2000
0A41: 00      	                defb    $00             ; reg.4: pattern table address: $0000
0A42: 36      	                defb    $36             ; reg.5: sprite attr. table address: $1B00
0A43: 07      	                defb    $07             ; reg.6: sprite pattern table addr.: $3800
0A44: 05      	                defb    $05             ; reg.7: backdrop color (light blue)
              	
0A45:         	VDPMODESET2     ; VDP register settings for a graphics 2 mode
0A45: 02      	                defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
0A46: C0      	                defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
0A47: 06      	                defb    $06             ; reg.2: name table addr.: $1800
0A48: FF      	                defb    $FF             ; reg.3: color table addr.: $2000
0A49: 03      	                defb    $03             ; reg.4: pattern table addr.: $0000
0A4A: 36      	                defb    $36             ; reg.5: sprite attr. table addr.: $1B00
0A4B: 07      	                defb    $07             ; reg.6: sprite pattern table addr.: $3800
0A4C: 05      	                defb    $05             ; reg.7: backdrop color: light blue
              	
0A4D:         	VDPMODESETMC    ; VDP register settings for a multicolor mode
0A4D: 00      	                defb    %00000000       ; reg.0: ext. video dis.
0A4E: CB      	                defb    %11001011       ; reg.1: 16K VRAM, video on, INT off, multicolor mode, sprite size 8x8, sprite magn. 0
0A4F: 02      	                defb    $02             ; reg.2: name table addr.: $0800
0A50: 00      	                defb    $00             ; reg.3: don't care
0A51: 00      	                defb    $00             ; reg.4: pattern table addr.: $0000
0A52: 36      	                defb    $36             ; reg.5: sprite attr. table addr.: $1B00
0A53: 07      	                defb    $07             ; reg.6: sprite pattern table addr.: $3800
0A54: 0F      	                defb    $0F             ; reg.7: backdrop color (white)
              	
0A55:         	VDPMODESETEX2   ; VDP register settings for an extended graphics 2 mode
0A55: 02      	                defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
0A56: C0      	                defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
0A57: 0E      	                defb    $0E             ; reg.2: name table addr.: $3800
0A58: 9F      	                defb    $9F             ; reg.3: color table addr.: $2000
0A59: 00      	                defb    $00             ; reg.4: pattern table addr.: $0000
0A5A: 76      	                defb    $76             ; reg.5: sprite attr. table addr.: $3B00
0A5B: 03      	                defb    $03             ; reg.6: sprite pattern table addr.: $1800
0A5C: 05      	                defb    $05             ; reg.7: backdrop color: light blue
              	
0A5D:         	LM80CLOGO       ; patterns to compose the splash screen logo
0A5D: 00000000	                defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0A61: 00...   	
0A7D: 00000F0A	                defb    0,0,15,10,11,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0A81: 0B100000	
0A85: 00000000	
0A89: 00...   	
0A9D: 00000D17	                defb    0,0,13,23,0,12,0,0,0,1,0,0,0,20,0,0,6,5,6,21,22,7,6,21,22,7,6,1,1,7,0,0
0AA1: 000C0000	
0AA5: 00010000	
0AA9: 00140000	
0AAD: 06050615	
0AB1: 16070615	
0AB5: 16070601	
0AB9: 01070000	
0ABD: 00000D00	                defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,20,6,1,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
0AC1: 000C0000	
0AC5: 00010000	
0AC9: 00011406	
0ACD: 01050305	
0AD1: 03050305	
0AD5: 03050305	
0AD9: 03050000	
0ADD: 00000D00	                defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,1,1,1,5,9,20,19,8,3,5,19,5,3,5,0,0,0,0
0AE1: 000C0000	
0AE5: 00010000	
0AE9: 00010101	
0AED: 01050914	
0AF1: 13080305	
0AF5: 13050305	
0AF9: 00000000	
0AFD: 00000D00	                defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,8,3,5,6,21,22,7,3,1,22,5,3,5,0,0,0,0
0B01: 000C0000	
0B05: 00010000	
0B09: 00010008	
0B0D: 03050615	
0B11: 16070301	
0B15: 16050305	
0B19: 00000000	
0B1D: 00000D00	                defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
0B21: 000C0000	
0B25: 00010000	
0B29: 00010000	
0B2D: 03050305	
0B31: 03050305	
0B35: 03050305	
0B39: 03050000	
0B3D: 00000D00	                defb    0,0,13,0,0,12,0,0,0,1,4,4,0,1,0,0,3,5,9,20,19,8,9,20,19,8,9,1,1,8,0,0
0B41: 000C0000	
0B45: 00010404	
0B49: 00010000	
0B4D: 03050914	
0B51: 13080914	
0B55: 13080901	
0B59: 01080000	
0B5D: 00000E12	                defb    0,0,14,18,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0B61: 12110000	
0B65: 00000000	
0B69: 00...   	
0B7D: 00000000	                defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; ------------------------------------------------------------------------------
0B81: 00...   	
              	; LM80C - PSG ROUTINES - R3.12
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. Code and computer schematics are released under
              	; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
              	; kind of warranty: you can use them at your own risk.
              	; You are free to use them for any non-commercial use: you are only asked to
              	; maintain the copyright notices, include this advice and the note to the 
              	; attribution of the original version to Leonardo Miliani, if you intend to
              	; redistribuite them.
              	; https://www.leonardomiliani.com
              	; 
              	; Please support me by visiting the following links:
              	; Main project page: https://www.leonardomiliani.com
              	; Schematics and code: https://github.com/leomil72/LM80C
              	; Videos about the computer: https://www.youtube.com/user/leomil72/videos
              	; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
              	; ------------------------------------------------------------------------------
              	;
              	; ------------------------------------------------------------------------------
              	
              	;------------------------------------------------------------------------------
              	; configure the PSG
0B9D: 212382  	initPSG:        ld      HL,CHASNDDTN    ; starting address of sound & keyboard RAM registers
0BA0: 060B    	                ld      B,SERIALS_EN-CHASNDDTN; # of PSG sound & keyboard registers
0BA2: AF      	                xor     A               ; reset A
0BA3: 77      	EMPTSNDBFR:     ld      (HL),A          ; reset RAM register
0BA4: 23      	                inc     HL              ; next register
0BA5: 10FC    	                djnz    EMPTSNDBFR      ; repeat
0BA7: 0610    	CLRPSGREGS:     ld      B,$10           ; 16 registers to set
0BA9: 21BB0B  	                ld      HL,SNDREGCFG    ; starting address of register settings
0BAC: 1600    	                ld      D,$00           ; first register
0BAE: 7A      	RSTPSG:         ld      A,D             ; register value
0BAF: CDF50B  	                call    SETSNDREG       ; select register
0BB2: 7E      	                ld      A,(HL)          ; load value
0BB3: CDFA0B  	                call    WRTSNDREG       ; write to register
0BB6: 14      	                inc     D               ; next register
0BB7: 23      	                inc     HL              ; next value
0BB8: 10F4    	                djnz    RSTPSG          ; repeat for each register
0BBA: C9      	                ret                     ; return to caller
              	
0BBB: 00000000	SNDREGCFG:      defb $00,$00,$00,$00,$00,$00,$00,%10111111
0BBF: 000000BF	
0BC3: 00000000	                defb $00,$00,$00,$00,$00,$00,$ff,$ff
0BC7: 0000FFFF	
              	                ; reg. 7: set I/O ch.A to OUTPUT, I/O ch.B to INPUT; set noise to OFF; set audio to OFF
              	
              	
              	; routine to play a welcome beep on channel C (tone 4010) and to shut it off
0BCB: 21E50B  	WLCMBEEP:       ld      HL,WLCBPDAT     ; data address
0BCE: C3D40B  	                jp      SENDSND
0BD1: 21ED0B  	NOBEEP:         ld      HL,NOBPDAT      ; data address
0BD4: C5      	SENDSND:        push    BC
0BD5: 0604    	                ld      B,$04           ; 4 pairs
0BD7: 7E      	RPTWLCMBP:      ld      A,(HL)          ; read register #
0BD8: CDF50B  	                call    SETSNDREG
0BDB: 23      	                inc     HL              ; next cell
0BDC: 7E      	                ld      A,(HL)          ; read value
0BDD: CDFA0B  	                call    WRTSNDREG
0BE0: 23      	                inc     HL
0BE1: 10F4    	                djnz    RPTWLCMBP       ; repeat
0BE3: C1      	                pop     BC
0BE4: C9      	                ret                     ; return to caller
              	
0BE5: 077B0456	WLCBPDAT:       defb    $07,%01111011,$04,$56,$05,$00,$0A,$0F
0BE9: 05000A0F	
0BED: 04000500	NOBPDAT:        defb    $04,$00,$05,$00,$0A,$00,$07,%01111111
0BF1: 0A00077F	
              	
              	
              	; select register on PSG
0BF5: 0E40    	SETSNDREG:      ld      C,PSG_REG       ; PSG register port
0BF7: ED79    	                out     (C),A           ; set register
0BF9: C9      	                ret                     ; return to caller
              	
              	; send data to PSG
0BFA: 0E41    	WRTSNDREG:      ld      C,PSG_DAT       ; PSG data port
0BFC: ED79    	                out     (C),A           ; send data
0BFE: C9      	                ret                     ; return to caller
              	
              	; manage the sounds' duration: each time this subroutine is called, it
              	; decrements the single sound durations (measured in ms) and eventually
              	; shut off the audio channel whose counter has reached 0.
              	; (this sub-routine is called by CH3 timer ISR)
0BFF: DDE5    	MNGSNDS:        push    IX              ; store IX
0C01: DD212382	                ld      IX,CHASNDDTN    ; starting address of tones duration
0C05: 0603    	                ld      B,$03           ; 3 channels to check
0C07: 2601    	                ld      H,$01           ; mixer channels: A=>bit 1, B=>bit 2, C=>bit 3
0C09: DD5E00  	CHKSNDCH:       ld      E,(IX+0)        ; load LSB into E
0C0C: DD5601  	                ld      D,(IX+1)        ; load MSB into D
0C0F: 7B      	                ld      A,E             ; load E into A
0C10: B2      	                or      D               ; check that DE=0
0C11: 282D    	                jr      Z,CNTCHKSND     ; yes, jump over
0C13: 1B      	                dec     DE              ; no, so decrement DE
0C14: 7B      	                ld      A,E             ; reload E into A...
0C15: DD7300  	                ld      (IX+0),E        ; store new...
0C18: DD7201  	                ld      (IX+1),D        ; ...duration and...
0C1B: B2      	                or      D               ; ...do another check to see if DE=0
0C1C: 2022    	                jr      NZ,CNTCHKSND    ; no, so jump over
              	                                        ; if yes, let's shut down the corresponding channel
              	                                        ; to shut down a tone we set 0 into tone register
              	                                        ; and disable the channel into mixer
0C1E: 3E03    	                ld      A,$03           ; three channels
0C20: 90      	                sub     B               ; find current channel (0->A, 1->B, 2->C)
0C21: 87      	                add     A,A             ; and find first register (A=>0, B=>2, C=>4)
0C22: 0E40    	                ld      C,PSG_REG       ; PSG register selector port
0C24: ED79    	                out     (C),A           ; select first tone register of channel
0C26: 2E00    	                ld      L,$00           ; value 0 into L
0C28: 0E41    	                ld      C,PSG_DAT       ; PSG data selector port
0C2A: ED69    	                out     (C),L           ; write 0 into register
0C2C: 0E40    	                ld      C,PSG_REG       ; PSG register selector port
0C2E: 3C      	                inc     A               ; next tone register
0C2F: ED79    	                out     (C),A           ; select second tone register of channel
0C31: 0E41    	                ld      C,PSG_DAT       ; PSG data selector port
0C33: ED69    	                out     (C),L           ; write 0 into register
0C35: 3E07    	                ld      A,$07           ; mixer register
0C37: 0E40    	                ld      C,PSG_REG       ; PSG register selector port
0C39: ED79    	                out     (C),A           ; set mixer register
0C3B: ED78    	                in      A,(C)           ; load current value
0C3D: B4      	                or      H               ; set off the channel into the mixer (remember that 1=OFF)
0C3E: ED79    	                out     (C),A           ; send new value for the mixer
0C40: DD23    	CNTCHKSND:      inc     IX              ; set for...
0C42: DD23    	                inc     IX              ; ...next channel...
0C44: CB24    	                sla     H               ; shift left H 1 bit
0C46: 10C1    	                djnz    CHKSNDCH        ; repeat for 3 channels
0C48: DDE1    	                pop     IX              ; restore IX
0C4A: C9      	                ret                     ; return to caller
              	
              	; read a specific row of the keyboard matrix, set by A
              	; return read into A
0C4B: C5      	READKBLN:       push    BC
0C4C: 060F    	                ld      B,$0F           ; reg #14
0C4E: 0E40    	                ld      C,PSG_REG       ; PSG register port
0C50: ED41    	                out     (C),B           ; select reg #14
0C52: 0E41    	                ld      C,PSG_DAT       ; PSG data port
0C54: ED79    	                out     (C),A           ; activate the row
0C56: 060E    	                ld      B,$0E           ; register #15 (port B)
0C58: 0E40    	                ld      C,PSG_REG       ; PSG register port
0C5A: ED41    	                out     (C),B           ; select reg. 15 (port B)
0C5C: ED78    	                in      A,(C)           ; read register #15
0C5E: C1      	                pop     BC
0C5F: C9      	                ret
              	
              	; read the keyboard matrix to look for a key pressure
0C60: 0E40    	KEYBOARD:       ld      C,PSG_REG       ; PSG register port
0C62: 0607    	                ld      B,$07           ; set register #7...
0C64: ED41    	                out     (C),B           ; ...to work with
0C66: ED78    	                in      A,(C)           ; read register #7
0C68: CBFF    	                set     7,A             ; port A set to output
0C6A: CBB7    	                res     6,A             ; port B set to input
0C6C: ED41    	                out     (C),B           ; set register #7
0C6E: 0E41    	                ld      C,PSG_DAT       ; PSG data port
0C70: ED79    	                out     (C),A           ; set I/O ports w/o altering the rest of the mixer
              	                ; check special keys (SHIFT/ALT/CTRL)
0C72: 3EFD    	                ld      A,%11111101     ; select SHIFT row
0C74: CD4B0C  	                call    READKBLN        ; read row
0C77: CB5F    	                bit     3,A             ; test if SHIFT key is pressed (4th bit is reset)
0C79: 2005    	                jr      NZ,CHECKALT     ; no, so go on
0C7B: 212D82  	                ld      HL,CONTROLKEYS  ; control key flags
0C7E: 3601    	                ld      (HL),%00000001  ; set SHIFT flag, reset CTRL & ALT flags (currently multiply control keys are NOT supported)
0C80: 3EFE    	CHECKALT:       ld      A,%11111110     ; select ALT row
0C82: CD4B0C  	                call    READKBLN        ; read ALT row
0C85: CB6F    	                bit     5,A             ; test if ALT key is pressed (5th bit is reset)
0C87: 2005    	                jr      NZ,CHECKCTRL    ; no, so go on
0C89: 212D82  	                ld      HL,CONTROLKEYS  ; control key flags
0C8C: 3604    	                ld      (HL),%00000100  ; set ALT flag, reset SHIFT & CTRL flag (currently multiply control keys are NOT supported)
0C8E: 3EFE    	CHECKCTRL:      ld      A,%11111110     ; select CTRL row
0C90: CD4B0C  	                call    READKBLN        ; read CTRL row
0C93: CB57    	                bit     2,A             ; test if CTRL key is pressed (3rd bit is reset)
0C95: 2005    	                jr      NZ,CHECKKBD     ; no, so make a normal reading
0C97: 212D82  	                ld      HL,CONTROLKEYS  ; control key flags
0C9A: 3602    	                ld      (HL),%00000010  ; set CTRL flag, reset SHIFT & ALT flags (currently multiply control keys are NOT supported)
0C9C: 0608    	CHECKKBD:       ld      B,$08           ; 8 lines
0C9E: 3E7F    	                ld      A,%01111111     ; start from the last line of the matrix
0CA0: 160F    	RPTKBDRD:       ld      D,$0F           ; register #14 (port A)
0CA2: 0E40    	                ld      C,PSG_REG       ; PSG register port
0CA4: ED51    	                out     (C),D           ; select reg. #14
0CA6: 0E41    	                ld      C,PSG_DAT       ; PSG data port
0CA8: ED79    	                out     (C),A           ; activate 1 line (active line is grounded, i.e. with a LOW signal)
0CAA: 5F      	                ld      E,A             ; save current line into E
0CAB: 160E    	                ld      D,$0E           ; register #15 (port B)
0CAD: 0E40    	                ld      C,PSG_REG       ; PSG register port
0CAF: ED51    	                out     (C),D           ; select reg. 15 (port B)
0CB1: 00      	                nop
0CB2: ED78    	                in      A,(C)           ; read register #15
0CB4: FEFF    	                cp      $FF             ; is there any line set to 0?
0CB6: 282E    	                jr      Z,NOKEYPRSD     ; no, go to the next row
              	                ; check control keys
0CB8: 322A82  	                ld      (KBTMP),A       ; yes, check if a control key was pressed. First, store current row
0CBB: 78      	                ld      A,B             ; copy current row (B) into A
0CBC: FE02    	                cp      $02             ; is it the row of the SHIFT?
0CBE: 200F    	                jr      NZ,TESTALT      ; no, continue checking the other control keys
0CC0: 3A2A82  	                ld      A,(KBTMP)       ; yes, retrieve current row data
0CC3: CB5F    	                bit     3,A             ; check SHIFT bit line
0CC5: 202E    	                jr      NZ,FINDKEY      ; no SHIFT, continue checking
0CC7: CBDF    	                set     3,A             ; yes, it's the SHIFT. So remove SHIFT bit
0CC9: FEFF    	                cp      $FF             ; after deleting the SHIFT bit, is there any other bit selected?
0CCB: 2028    	                jr      NZ,FINDKEY      ; yes, go to check which one
0CCD: 1817    	                jr      NOKEYPRSD       ; no, go to next row        
0CCF: FE01    	TESTALT:        cp      $01             ; is it the line of ALT & CTRL?
0CD1: 3A2A82  	                ld      A,(KBTMP)       ; retrieve current row data
0CD4: 201F    	                jr      NZ,FINDKEY      ; no, continue
0CD6: CB6F    	                bit     5,A             ; yes, check ALT bit line
0CD8: 2002    	                jr      NZ,TESTCTRL     ; no ALT, continue checking
0CDA: CBEF    	                set     5,A             ; yes, it's the ALT. So remove ALT bit
0CDC: CB57    	TESTCTRL:       bit     2,A             ; check CTRL bit line
0CDE: 2002    	                jr      NZ,ENDCTRLCK    ; no CTRL, continue checking
0CE0: CBD7    	                set     2,A             ; delete CTRL bit flag
0CE2: FEFF    	ENDCTRLCK:      cp      $FF             ; after deleting the ALT & CTRL bits, is there any other bit selected?
0CE4: 200F    	                jr      NZ,FINDKEY      ; yes, go to check which one
0CE6: 7B      	NOKEYPRSD:      ld      A,E             ; no key pressed, load current output port
0CE7: 0F      	                rrca                    ; rotate right by 1
0CE8: 10B6    	                djnz    RPTKBDRD        ; repeat for 8 lines
0CEA: AF      	                xor     A               ; if exit from here, no key has been pressed...
0CEB: 322C82  	                ld      (LASTKEYPRSD),A ; ...so reset the last key cell...
0CEE: 322D82  	                ld      (CONTROLKEYS),A ; ...reset contro key flags...
0CF1: 322982  	                ld      (KBDNPT),A      ; ...no input from keyboard...
0CF4: C9      	                ret                     ; ...and leave
0CF5: 1EFF    	FINDKEY:        ld      E,$FF           ; counter
0CF7: 1C      	CHKLN:          inc     E               ; E goes from 0 to 7
0CF8: CB3F    	                srl     A               ; is the first bit reset? (we're looking for a "0", meaning grounded line)
0CFA: 38FB    	                jr      C,CHKLN         ; no, check next bit
0CFC: 3A2D82  	                ld      A,(CONTROLKEYS) ; load control key flags
0CFF: 21C80D  	                ld      HL,KBMAP        ; normal keymap
0D02: FE01    	                cp      $01             ; SHIFT flag?
0D04: 2005    	                jr      NZ,CHKCTRL      ; no, jump over
0D06: 21080E  	                ld      HL,KBMAP_SFT    ; SHIFT keymap
0D09: 1810    	                jr      LOADMAP         ; and load it
0D0B: FE02    	CHKCTRL:        cp      $02             ; CTRL flag?
0D0D: 2005    	                jr      NZ,CHKALT       ; no, jump over
0D0F: 21880E  	                ld      HL,KBMAP_CTRL   ; CTRL map
0D12: 1807    	                jr      LOADMAP         ; and load it
0D14: FE04    	CHKALT:         cp      $04             ; ALT flag?
0D16: 2003    	                jr      NZ,LOADMAP      ; no, check over
0D18: 21480E  	                ld      HL,KBMAP_ALT    ; ALT map
0D1B: 05      	LOADMAP:        dec     B               ; decrement row # (rows go from 0 to 7)
0D1C: 48      	                ld      C,B             ; move B into C and...
0D1D: CB21    	                sla     C               ; ...multiply it...
0D1F: CB21    	                sla     C               ; ...by 8 to find...
0D21: CB21    	                sla     C               ; ...the current row into the matrix
0D23: 0600    	                ld      B,$00           ; reset B
0D25: 09      	                add     HL,BC           ; find the address of the current row
0D26: 50      	                ld      D,B             ; reset D
0D27: 19      	                add     HL,DE           ; find the current column
0D28: 3A2C82  	                ld      A,(LASTKEYPRSD) ; load the last key pressed
0D2B: BE      	                cp      (HL)            ; is it the same key?
0D2C: 2847    	                jr      Z,LVKBRDCHK     ; yes, so do nothing
0D2E: 7E      	                ld      A,(HL)          ; no, load it...
0D2F: 322C82  	                ld      (LASTKEYPRSD),A ; ...store it...
0D32: 322B82  	                ld      (TMPKEYBFR),A   ; ...insert it into the INKEY buffer...
0D35: 32EC81  	                ld      (CHR4VID),A     ; ...and store char for video
0D38: FE03    	                cp      CTRLC           ; is it RUN/STOP?
0D3A: 2005    	                jr      NZ,CNTKBCK      ; no, jump over
0D3C: CD3601  	                call    CHARINTOBFR     ; yes, send directly to buffer and...
0D3F: 1830    	                jr      LVKBRDCHK2      ; ...leave
0D41: 010008  	CNTKBCK:        ld      BC,$0800        ; 8 FN keys (B), FN key number (C)
0D44: 21C00D  	                ld      HL,FNKEYSORD    ; FN keys codes
0D47: BE      	CHKFNK:         cp      (HL)            ; is it an FN key?
0D48: CA760D  	                jp      Z,PRNTFNKEY     ; yes, jump over
0D4B: 0C      	                inc     C               ; next FN key
0D4C: 23      	                inc     HL              ; next FN key code
0D4D: 10F8    	                djnz    CHKFNK          ; continue for 8 FN keys
0D4F: 3E01    	SNDKEYTOBFR:    ld      A,$01           ; normal key - set input flag
0D51: 322982  	                ld      (KBDNPT),A      ; to keyboard
0D54: 3AEB81  	                ld      A,(PRNTVIDEO)   ; load status of print-on-video
0D57: B7      	                or      A               ; is the print-on-video disabled?
0D58: CA610D  	                jp      Z,PUTCHRBUF     ; yes, so send char to input buffer
0D5B: 3AE981  	                ld      A,(CRSR_STATE)  ; check cursor state
0D5E: B7      	                or      A               ; is it 0 (cursor OFF)?
0D5F: 200D    	                jr      NZ,PNT2VD       ; no, print on screen
0D61: AF      	PUTCHRBUF:      xor     A
0D62: 322982  	                ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
0D65: 3A2B82  	                ld      A,(TMPKEYBFR)   ; retrieve char
0D68: CD3601  	                call    CHARINTOBFR     ; cursor off, so send char to buffer...
0D6B: C3710D  	                jp      LVKBRDCHK2      ; ...and leave
0D6E: CDAC06  	PNT2VD:         call    CHAR2VID        ; send char to video
0D71: AF      	LVKBRDCHK2:     xor     A
0D72: 322D82  	                ld      (CONTROLKEYS),A ; reset control key flags
0D75: C9      	LVKBRDCHK:      ret                     ; return to caller: the current key code is into TMPKEYBFR    
              	                ; manage FN keys          
0D76: 57      	PRNTFNKEY:      ld      D,A             ; copy A into D
0D77: 2AAF80  	                ld      HL,(LINEAT)     ; Get current line number
0D7A: 23      	                inc     HL              ; -1 means direct statement
0D7B: 7C      	                ld      A,H
0D7C: B5      	                or      L
0D7D: 7A      	                ld      A,D             ; retrieve char
0D7E: 20CF    	                jr      NZ,SNDKEYTOBFR  ; indirect mode - just send FN key code to buffer
0D80: 79      	                ld      A,C             ; direct mode, so print text - first, get FN key number
0D81: 87      	                add     A,A
0D82: 87      	                add     A,A
0D83: 87      	                add     A,A
0D84: 87      	                add     A,A             ; FN key number * 16
0D85: 4F      	                ld      C,A             ; move it into C
0D86: 0600    	                ld      B,$00           ; reset B, to get offset
0D88: 21B380  	                ld      HL,FNKEYS       ; load address of FN keys texts
0D8B: 09      	                add     HL,BC           ; get correct text address
0D8C: 0610    	                ld      B,$10           ; 16 chars
0D8E: 7E      	LDFNKEYCHR:     ld      A,(HL)          ; load char
0D8F: A7      	                and     A               ; null char?
0D90: CA710D  	                jp      Z,LVKBRDCHK2    ; yes, so leave
0D93: 57      	                ld      D,A             ; pass char into D
0D94: 3AEB81  	                ld      A,(PRNTVIDEO)   ; load status of print-on-video
0D97: B7      	                or      A               ; is the print-on-video disabled?
0D98: CAA80D  	                jp      Z,PUTCHRBUF1    ; yes, so send char to input buffer
0D9B: 3AE981  	                ld      A,(CRSR_STATE)  ; check cursor state
0D9E: B7      	                or      A               ; is it 0 (cursor OFF)?
0D9F: C4B30D  	                call    NZ,PRNTFNK      ; no, print on screen
0DA2: 23      	CNTFNK:         inc     HL              ; next char
0DA3: 10E9    	                djnz    LDFNKEYCHR      ; repeat for max. 16 chars
0DA5: C3710D  	                jp      LVKBRDCHK2      ; leave
0DA8: AF      	PUTCHRBUF1:     xor     A
0DA9: 322982  	                ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
0DAC: 7A      	                ld      A,D             ; retrieve char
0DAD: CD3601  	                call    CHARINTOBFR     ; cursor off, so send char to buffer...
0DB0: C3A20D  	                jp      CNTFNK          ; jump over
0DB3: 7A      	PRNTFNK:        ld      A,D             ; recover char
0DB4: 32EC81  	                ld      (CHR4VID),A     ; store char for printing
0DB7: 3E01    	                ld      A,$01           ; normal key - set input flag
0DB9: 322982  	                ld      (KBDNPT),A      ; to keyboard
0DBC: CDAC06  	                call    CHAR2VID        ; print on screen
0DBF: C9      	                ret                     ; return to caller
              	
              	
              	;-----------------------------------------------------------------------
0DC0: 01020405	FNKEYSORD:      defb 1,2,4,5,6,22,23,24                 ; order of FN Keys
0DC4: 06161718	
              	;-----------------------------------------------------------------------
              	; key codes
0DC8: 31190E03	KBMAP:          defb '1',25,14,3,' ',16,'q','2'         ; 25=HOME  14=CTRL  3=RUN/STOP 16=C=
0DCC: 20107132	
0DD0: 33776114	                defb '3','w','a',20,'z','s','e','4'     ; 20=SHIFT
0DD4: 7A736534	
0DD8: 35726478	                defb '5','r','d','x','c','f','t','6'
0DDC: 63667436	
0DE0: 37796776	                defb '7','y','g','v','b','h','u','8'
0DE4: 62687538	
0DE8: 39696A6E	                defb '9','i','j','n','m','k','o','0'
0DEC: 6D6B6F30	
0DF0: 1F706C2C	                defb 31,'p','l',',','.',':','-',30      ; 31=CURSOR DOWN  30=CURSOR UP
0DF4: 2E3A2D1E	
0DF8: 1C2A3B2F	                defb 28,'*',';','/',27,'=','+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
0DFC: 1B3D2B1D	
0E00: 080DFC40	                defb 8,13,252,'@',1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=£  1=F1  2=F2  4=F3  24=HELP
0E04: 01020418	
              	
              	; shifted codes - not all the keys have the shifted version
0E08: 210C0E03	KBMAP_SFT:      defb '!',12,14,3,' ',16,'Q',34          ; 12=CLEAR  14=CTRL  3=RUN/STOP 16=C=   34="
0E0C: 20105122	
0E10: 23574114	                defb '#','W','A',20,'Z','S','E','$'     ; 20=SHIFT
0E14: 5A534524	
0E18: 25524458	                defb '%','R','D','X','C','F','T','&'
0E1C: 43465426	
0E20: 27594756	                defb 39,'Y','G','V','B','H','U','('     ; 39='
0E24: 42485528	
0E28: 29494A4E	                defb ')','I','J','N','M','K','O',94     ; 94=^
0E2C: 4D4B4F5E	
0E30: 1F504C3C	                defb 31,'P','L','<','>','[','_',30      ; 31=CURSOR DOWN  30=CURSOR UP
0E34: 3E5B5F1E	
0E38: 1C2A5D3F	                defb 28,'*',']','?',27,198,'+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
0E3C: 1BC62B1D	
0E40: 080DD340	                defb 8,13,211,'@',5,6,22,23             ; 211=€  5=F4  6=F5  22=F6  23=F7
0E44: 05061617	
              	
              	; ALT (C=) codes - not all the keys have the alt-ed version
0E48: 310C0E03	KBMAP_ALT:      defb '1',12,14,3,' ',16,222,196         ; 12=CLEAR  14=CTRL  3=RUN/STOP  16=C=  34="
0E4C: 2010DEC4	
0E50: 33DD8514	                defb '3',221,133,20,131,130,165,'4'     ; 20=SHIFT
0E54: 8382A534	
0E58: 35A2A684	                defb '5',162,166,132,157,163,168,'6'
0E5C: 9DA3A836	
0E60: 37ABA9A1	                defb '7',171,169,161,158,172,213,'8'    ;
0E64: 9EACD538	
0E68: 39D6D89F	                defb '9',214,216,159,160,215,135,195    ;
0E6C: A0D787C3	
0E70: 1F888AC1	                defb 31,136,138,193,192,123,144,30      ; 31=CURSOR DOWN  123={  30=CURSOR UP
0E74: C07B901E	
0E78: 1C8F7DFE	                defb 28,143,125,254,27,209,148,29       ; 28=CURSOR LEFT  125=}  27=ESCAPE  29=CURSOR RIGHT
0E7C: 1BD1941D	
0E80: 080DE089	                defb 8,13,224,137,5,6,22,23             ; 8=DEL(backspace)  13=RETURN  252=£  5=F4  6=F5  22=F6  23=F7
0E84: 05061617	
              	
              	; CTRL codes - not all the keys have the control-ed version
0E88: 31190E03	KBMAP_CTRL:     defb '1',25,14,3,' ',16,154,'2'         ; 25=HOME  14=CTRL  3=RUN/STOP  16=C=
0E8C: 20109A32	
0E90: 339C9514	                defb '3',156,149,20,152,150,153,'4'     ; 20=SHIFT
0E94: 98969934	
0E98: 359BB097	                defb '5',155,176,151,177,175,165,'6'
0E9C: B1AFA536	
0EA0: 37A6A8B2	                defb '7',166,168,178,179,169,167,'8'
0EA4: B3A9A738	
0EA8: 39B8AAAC	                defb '9',184,170,172,171,181,164,'0'
0EAC: ABB5A430	
0EB0: 1FA3AD2C	                defb 31,163,173,',','.',':',186,30      ; 31=CURSOR DOWN  30=CURSOR UP
0EB4: 2E3ABA1E	
0EB8: 1CE13B2F	                defb 28,225,';','/',27,212,185,29       ; 28=CURSOR LEFT  27=ESCAPE  212=π  29=CURSOR RIGHT
0EBC: 1BD4B91D	
0EC0: 080DBDA2	                defb 8,13,189,162,1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=£  1=F1  2=F2  4=F3  24=HELP; ------------------------------------------------------------------------------
0EC4: 01020418	
              	; LM80C BASIC - R3.12
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. Code and computer schematics are released under
              	; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
              	; kind of warranty: you can use them at your own risk.
              	; You are free to use them for any non-commercial use: you are only asked to
              	; maintain the copyright notices, include this advice and the note to the 
              	; attribution of the original version to Leonardo Miliani, if you intend to
              	; redistribuite them.
              	; https://www.leonardomiliani.com
              	; 
              	; Please support me by visiting the following links:
              	; Main project page: https://www.leonardomiliani.com
              	; Schematics and code: https://github.com/leomil72/LM80C
              	; Videos about the computer: https://www.youtube.com/user/leomil72/videos
              	; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
              	; ------------------------------------------------------------------------------
              	; NASCOM BASIC versions:
              	; 4.7  - original version by NASCOM
              	; 4.7b - modified version by Grant Searle (additional commands & functions)
              	; 4.8  - modified by Leonardo Miliani (new commands/functions)
              	
              	
              	;------------------------------------------------------------------------------
              	;  B A S I C
              	;------------------------------------------------------------------------------
              	
              	; GENERAL EQUATES
              	
0000:         	NLLCR           equ     $00             ; null char (used as space/empty char in video prints)
0003:         	CTRLC           equ     $03             ; Control "C"
0007:         	CTRLG           equ     $07             ; Control "G"
0008:         	BKSP            equ     $08             ; Back space
000A:         	LF              equ     $0A             ; Line feed
000C:         	CS              equ     $0C             ; Clear screen
000D:         	CR              equ     $0D             ; Carriage return
000F:         	CTRLO           equ     $0F             ; Control "O"
0011:         	CTRLQ           equ     $11             ; Control "Q"
0012:         	CTRLR           equ     $12             ; Control "R"
0013:         	CTRLS           equ     $13             ; Control "S"
0015:         	CTRLU           equ     $15             ; Control "U"
0019:         	HOME            equ     $19             ; Home (cursor at 0,0)
001B:         	ESC             equ     $1B             ; Escape
0020:         	SPC             equ     $20             ; Space
007F:         	DEL             equ     $7F             ; Delete
              	; cursor ASCII codes
001C:         	CRSLFT          equ     $1C             ; cursor left
001D:         	CRSRGT          equ     $1D             ; cursor right
001E:         	CRSUP           equ     $1E             ; cursor up
001F:         	CRSDN           equ     $1F             ; cursor down
              	
              	
              	; BASIC WORK SPACE LOCATIONS
              	; BY STARTING FROM $8045 THE INTERPRETER ALLOCATES THE FOLLOWING RAM CELLS
              	; TO STORE IMPORTANT VALUES USED FOR SOME SPECIFIC FUNCTIONS:
              	; THEY CAN BE VECTOR (ADDRESSES) FUNCTIONS, SYSTEM DATAS (I.E. VARIABLES)
              	; AND SO ON. THE FIRST CELLS ARE FILLED WITH VALUES STORED INTO ROM AT $(INITAB) ADDRESS
805E:         	WRKSPC          equ     basicStarted+$01; (3) BASIC Work space
8061:         	NMIUSR          equ     WRKSPC+$03      ; (3) NMI exit point routine
8064:         	USR             equ     NMIUSR+$03      ; (3) "USR (x)" jump  <-- in $8065/8066 the user can store the address of a specific machine language routine
8067:         	OUTSUB          equ     USR+$03         ; (1) "out p,n"
8068:         	OTPORT          equ     OUTSUB+$01      ; (2) Port (p)
806A:         	DIVSUP          equ     OTPORT+$02      ; (1) Division support routine
806B:         	DIV1            equ     DIVSUP+$01      ; (4) <- Values
806F:         	DIV2            equ     DIV1+$04        ; (4) <-   to
8073:         	DIV3            equ     DIV2+$04        ; (3) <-   be
8076:         	DIV4            equ     DIV3+$03        ; (2) <-inserted
8078:         	SEED            equ     DIV4+$02        ; (35) Random number seed  <-- starting address of a seed table
809B:         	LSTRND          equ     SEED+$23        ; (4) Last random number
809F:         	INPSUB          equ     LSTRND+$04      ; (1) #INP (x)" Routine
80A0:         	INPORT          equ     INPSUB+$01      ; (2) PORT (x)
80A2:         	LWIDTH          equ     INPORT+$02      ; (1) Terminal width
80A3:         	COMMAN          equ     LWIDTH+$01      ; (1) Width for commas
80A4:         	NULFLG          equ     COMMAN+$01      ; (1) Null after input byte flag
80A5:         	CTLOFG          equ     NULFLG+$01      ; (1) Control "O" flag
80A6:         	CHKSUM          equ     CTLOFG+$01      ; (2) Array load/save check sum
80A8:         	NMIFLG          equ     CHKSUM+$02      ; (1) Flag for NMI break routine
80A9:         	BRKFLG          equ     NMIFLG+$01      ; (1) Break flag
80AA:         	RINPUT          equ     BRKFLG+$01      ; (3) Input reflection
80AD:         	STRSPC          equ     RINPUT+$03      ; (2) Bottom of string space
80AF:         	LINEAT          equ     STRSPC+$02      ; (2) Current line number
80B1:         	HLPLN           equ     LINEAT+$02      ; (2) Current line with errors
80B3:         	FNKEYS          equ     HLPLN+$02       ; (128) text of FN keys
8133:         	BASTXT          equ     FNKEYS+$80      ; (3) Pointer to start of program   <-- actually this is the last value pre-filled by the firmware at startup
8136:         	BUFFER          equ     BASTXT+$03      ; (5) Input buffer
813B:         	STACK           equ     BUFFER+$05      ; (85) Initial stack
8190:         	CURPOS          equ     STACK+$55       ; (1) Character position on line
8191:         	LCRFLG          equ     CURPOS+$01      ; (1) Locate/Create flag
8192:         	TYPE            equ     LCRFLG+$01      ; (1) Data type flag
8193:         	DATFLG          equ     TYPE+$01        ; (1) Literal statement flag
8194:         	LSTRAM          equ     DATFLG+$01      ; (2) Last available RAM
8196:         	TMSTPT          equ     LSTRAM+$02      ; (2) Temporary string pointer
8198:         	TMSTPL          equ     TMSTPT+$02      ; (12) Temporary string pool
81A4:         	TMPSTR          equ     TMSTPL+$0C      ; (4) Temporary string
81A8:         	STRBOT          equ     TMPSTR+$04      ; (2) Bottom of string space
81AA:         	CUROPR          equ     STRBOT+$02      ; (2) Current operator in EVAL
81AC:         	LOOPST          equ     CUROPR+$02      ; (2) First statement of loop
81AE:         	DATLIN          equ     LOOPST+$02      ; (2) Line of current DATA item
81B0:         	FORFLG          equ     DATLIN+$02      ; (1) "FOR" loop flag
81B1:         	LSTBIN          equ     FORFLG+$01      ; (1) Last byte entered
81B2:         	READFG          equ     LSTBIN+$01      ; (1) Read/Input flag
81B3:         	BRKLIN          equ     READFG+$01      ; (2) Line of break
81B5:         	NXTOPR          equ     BRKLIN+$02      ; (2) Next operator in EVAL
81B7:         	ERRLIN          equ     NXTOPR+$02      ; (2) Line of error
81B9:         	CONTAD          equ     ERRLIN+$02      ; (2) Where to CONTinue
81BB:         	PROGND          equ     CONTAD+$02      ; (2) End of program
81BD:         	VAREND          equ     PROGND+$02      ; (2) End of variables
81BF:         	ARREND          equ     VAREND+$02      ; (2) End of arrays
81C1:         	NXTDAT          equ     ARREND+$02      ; (2) Next data item
81C3:         	FNRGNM          equ     NXTDAT+$02      ; (2) Name of FN argument
81C5:         	FNARG           equ     FNRGNM+$02      ; (4) FN argument value
81C9:         	FPREG           equ     FNARG+$04       ; (3) Floating point register
81CC:         	FPEXP           equ     FPREG+$03       ; (1) Floating point exponent
81CD:         	SGNRES          equ     FPEXP+$01       ; (1) Sign of result
81CE:         	TMRCNT          equ     SGNRES+$01      ; (4) TMR counter for 1/100 seconds
81D2:         	CTC0IV          equ     TMRCNT+$04      ; (3) CTC0 interrupt vector
81D5:         	CTC1IV          equ     CTC0IV+$03      ; (3) CTC1 interrupt vector
81D8:         	CTC2IV          equ     CTC1IV+$03      ; (3) CTC2 interrupt vector
81DB:         	CTC3IV          equ     CTC2IV+$03      ; (3) CTC3 interrupt vector
              	; - - - - - - - - - - - - - - - - - - -   VIDEO REGISTERS - FROM HERE...
81DE:         	SCR_SIZE_W      equ     CTC3IV+$03      ; (1) screen width (it can be either 40 chars or 32 chars/bytes)
81DF:         	SCR_SIZE_H      equ     SCR_SIZE_W+$01  ; (1) screen height (it can be 24/48/192: 24 for text, 48 for MC, 192 for graphics)
81E0:         	SCR_MODE        equ     SCR_SIZE_H+$01  ; (1) screen mode (0=text, 1=G1, 2=G2, 3=MC, 4=ExG2)
81E2:         	SCR_NAM_TB      equ     SCR_MODE+$02    ; (2) video name table address
81E4:         	SCR_CURS_X      equ     SCR_NAM_TB+$02  ; (1) cursor X
81E5:         	SCR_CURS_Y      equ     SCR_CURS_X+$01  ; (1) cursor Y
81E6:         	SCR_CUR_NX      equ     SCR_CURS_Y+$01  ; (1) new cursor X position
81E7:         	SCR_CUR_NY      equ     SCR_CUR_NX+$01  ; (1) new cursor Y position
81E8:         	SCR_ORG_CHR     equ     SCR_CUR_NY+$01  ; (1) original char positioned under the cursor
81E9:         	CRSR_STATE      equ     SCR_ORG_CHR+$01 ; (1) state of cursor (1=on, 0=off)
81EA:         	LSTCSRSTA       equ     CRSR_STATE+$01  ; (1) last cursor state
81EB:         	PRNTVIDEO       equ     LSTCSRSTA+$01   ; (1) print on video buffer (1=on / 0=off) set to off on graphic only modes
81EC:         	CHR4VID         equ     PRNTVIDEO+$01   ; (1) char for video buffer
81ED:         	FRGNDCLR        equ     CHR4VID+$01     ; (1) foreground color as set by SCREEN or COLOR commands
81EE:         	BKGNDCLR        equ     FRGNDCLR+$01    ; (1) background color as set by SCREEN or COLOR commands
81EF:         	TMPBFR1         equ     BKGNDCLR+$01    ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81F1:         	TMPBFR2         equ     TMPBFR1+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81F3:         	TMPBFR3         equ     TMPBFR2+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81F5:         	TMPBFR4         equ     TMPBFR3+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81F7:         	VIDEOBUFF       equ     TMPBFR4+$02     ; (40) buffer used for video scrolling and other purposes
821F:         	VIDTMP1         equ     VIDEOBUFF+$28   ; (2) temporary video word
8221:         	VIDTMP2         equ     VIDTMP1+$02     ; (2) temporary video word
              	; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO VPD OUT OF THIS RANGE,
              	                                        ; OTHERWISE YOU WILL HAVE TO CHECK THE POINTER IN "CLR_RAM_REG" FUNCTION
              	; - - - - - - - - - - - - - - - - - - -   SOUND & KEYBOARD REGISTERS - FROM HERE...
8223:         	CHASNDDTN       equ     VIDTMP2+$02     ; (2) sound Ch.A duration (1/100s)
8225:         	CHBSNDDTN       equ     CHASNDDTN+$02   ; (2) sound Ch.B duration (1/100s)
8227:         	CHCSNDDTN       equ     CHBSNDDTN+$02   ; (2) sound Ch.C duration (1/100s)
8229:         	KBDNPT          equ     CHCSNDDTN+$02   ; (1) temp cell used to flag if input comes from keyboard
822A:         	KBTMP           equ     KBDNPT+$01      ; (1) temp cell used by keyboard scanner
822B:         	TMPKEYBFR       equ     KBTMP+$01       ; (1) temp buffer for last key pressed
822C:         	LASTKEYPRSD     equ     TMPKEYBFR+$01   ; (1) last key code pressed
822D:         	CONTROLKEYS     equ     LASTKEYPRSD+$01 ; (1) flags for control keys (bit#0=SHIFT; bit#1=CTRL; bit#2=C=)
              	; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO PSG OUT OF THIS RANGE,
              	                                        ; OTHERWISE YOU WILL HAVE TO CHANGE THE POINTER IN "initPSG" FUNCTION
822E:         	SERIALS_EN      equ     CONTROLKEYS+$01 ; (1) serial ports status: bit 0 for Port1(A), bit 1 for Port2(B): 0=OFF, 1=ON
822F:         	SERABITS        equ     SERIALS_EN+$01  ; (1) serial port A data bits
8230:         	PBUFF           equ     SERABITS+$01    ; (13) Number print buffer
823D:         	MULVAL          equ     PBUFF+$0D       ; (3) Multiplier
8240:         	PROGST          equ     MULVAL+$03      ; (100) Start of program text area
82A4:         	STLOOK          equ     PROGST+$64      ; Start of memory test
              	
              	; BASIC ERROR CODE VALUES
              	; These values act as an offset to point to the error message into the error table
              	; must be incremented by 2 because they point to a word address jump
0000:         	NF              equ     $00             ; NEXT without FOR
0002:         	SN              equ     $02             ; Syntax error
0004:         	RG              equ     $04             ; RETURN without GOSUB
0006:         	OD              equ     $06             ; Out of DATA
0008:         	FC              equ     $08             ; Function call error
000A:         	OV              equ     $0A             ; Overflow
000C:         	OM              equ     $0C             ; Out of memory
000E:         	UL              equ     $0E             ; Undefined line number
0010:         	BS              equ     $10             ; Bad subscript
0012:         	DD              equ     $12             ; Re-Dimensioned array
0014:         	DZ              equ     $14             ; Division by zero (/0)
0016:         	ID              equ     $16             ; Illegal direct
0018:         	TM              equ     $18             ; Type mis-match
001A:         	OS              equ     $1A             ; Out of string space
001C:         	LS              equ     $1C             ; String too long
001E:         	ST              equ     $1E             ; String formula too complex
0020:         	CN              equ     $20             ; Can't continue
0022:         	UF              equ     $22             ; Undefined FN function
0024:         	MO              equ     $24             ; Missing operand
0026:         	HX              equ     $26             ; HEX error
0028:         	BN              equ     $28             ; BIN error
002A:         	GM              equ     $2A             ; No Graphics Mode
002C:         	SC              equ     $2C             ; Serial configuration
002E:         	SA              equ     $2E             ; Serial port already open
0030:         	HP              equ     $30             ; HELP call
              	
0EC8: C3CE0E  	COLD:   jp      STARTB          ; Jump for cold start
0ECB: C3660F  	WARM:   jp      WARMST          ; Jump for warm start
              	
0ECE: C3D50E  	STARTB: jp      CSTART          ; Jump to initialise
0ED1: E81A    	        defw    DEINT           ; Get integer -32768 to 32767
0ED3: 8C22    	        defw    ABPASS          ; Return integer in AB
0ED5: 215E80  	CSTART: ld      HL,WRKSPC       ; Start of workspace RAM
0ED8: F9      	        ld      SP,HL           ; Set up a temporary stack
0ED9: C3203B  	        jp      INITST          ; Go to initialise
              	
0EDC: 21C813  	INIT:   ld      HL,INITAB       ; Initialise workspace
0EDF: 01DA00  	        ld      BC,INITBE-INITAB+3; Bytes to copy
0EE2: 115E80  	        ld      DE,WRKSPC       ; Into workspace RAM
0EE5: EDB0    	        ldir                    ; Copy data
0EE7: EB      	        ex      DE,HL           ; Copy DE into HL
0EE8: F9      	        ld      SP,HL           ; Temporary stack
0EE9: CD7916  	        call    CLREG           ; Clear registers and stack
0EEC: CDEB1C  	        call    PRNTCRLF        ; Output CRLF
0EEF: 328F81  	        ld      (BUFFER+88+1),A ; Mark end of buffer
0EF2: 324082  	        ld      (PROGST),A      ; Initialise program area
0EF5: 1810    	        jr      MNOASK          ; usually, don't ask for memory top (only when there are errors)
0EF7: 21B00F  	MSIZE:  ld      HL,MEMMSG       ; Point to message
0EFA: CDAA23  	        call    PRS             ; Output "Memory size"
0EFD: CD9616  	        call    PROMPT          ; Get input with '?'
0F00: CD321A  	        call    GETCHR          ; Get next character
0F03: B7      	        or      A               ; Set flags
0F04: C21C0F  	        jp      NZ,TSTMEM       ; If number - Test if RAM there
0F07: 21A482  	MNOASK: ld      HL,STLOOK       ; Point to start of RAM
0F0A: 23      	MLOOP:  inc     HL              ; Next byte
0F0B: 7C      	        ld      A,H             ; Above address FFFF ?
0F0C: B5      	        or      L
0F0D: CA2E0F  	        jp      Z,SETTOP        ; Yes - 64K RAM
0F10: 7E      	        ld      A,(HL)          ; Get contents
0F11: 47      	        ld      B,A             ; Save it
0F12: 2F      	        cpl                     ; Flip all bits
0F13: 77      	        ld      (HL),A          ; Put it back
0F14: BE      	        cp      (HL)            ; RAM there if same
0F15: 70      	        ld      (HL),B          ; Restore old contents
0F16: CA0A0F  	        jp      Z,MLOOP         ; If RAM - test next byte
0F19: C32E0F  	        jp      SETTOP          ; Top of RAM found
              	
0F1C: CD021B  	TSTMEM: call    ATOH            ; Get high memory into DE
0F1F: B7      	        or      A               ; Set flags on last byte
0F20: C22D15  	        jp      NZ,SNERR        ; ?SN Error if bad character
0F23: EB      	        ex      DE,HL           ; Address into HL
0F24: 2B      	        dec     HL              ; Back one byte
0F25: 3ED9    	        ld      A,%11011001     ; Test byte
0F27: 46      	        ld      B,(HL)          ; Get old contents
0F28: 77      	        ld      (HL),A          ; Load test byte
0F29: BE      	        cp      (HL)            ; RAM there if same
0F2A: 70      	        ld      (HL),B          ; Restore old contents
0F2B: C2F70E  	        jp      NZ,MSIZE        ; Ask again if no RAM
              	
0F2E: 2B      	SETTOP: dec     HL              ; Back one byte
0F2F: 11A382  	        ld      DE,STLOOK-1     ; See if enough RAM
0F32: CD0918  	        call    CPDEHL          ; Compare DE with HL
0F35: DAF70E  	        jp      C,MSIZE         ; Ask again if not enough RAM
0F38: 119CFF  	        ld      DE,0-100        ; 100 Bytes string space
0F3B: 229481  	        ld      (LSTRAM),HL     ; Save last available RAM
0F3E: 19      	        add     HL,DE           ; Allocate string space
0F3F: 22AD80  	        ld      (STRSPC),HL     ; Save string space
0F42: CD5416  	        call    CLRPTR          ; Clear program area
0F45: 2AAD80  	        ld      HL,(STRSPC)     ; Get end of memory
0F48: 11EFFF  	        ld      DE,0-17         ; Offset for free bytes
0F4B: 19      	        add     HL,DE           ; Adjust HL
0F4C: 114082  	        ld      DE,PROGST       ; Start of program text
0F4F: 7D      	        ld      A,L             ; Get LSB
0F50: 93      	        sub     E               ; Adjust it
0F51: 6F      	        ld      L,A             ; Re-save
0F52: 7C      	        ld      A,H             ; Get MSB
0F53: 9A      	        sbc     A,D             ; Adjust it
0F54: 67      	        ld      H,A             ; Re-save
0F55: E5      	        push    HL              ; Save bytes free
0F56: 217F0F  	        ld      HL,SIGNON       ; Sign-on message
0F59: CDAA23  	        call    PRS             ; Output string
0F5C: E1      	        pop     HL              ; Get bytes free back
0F5D: CD3E2D  	        call    PRNTHL          ; Output amount of free memory
0F60: 21720F  	        ld      HL,BFREE        ; " Bytes free" message
0F63: CDAA23  	        call    PRS             ; Output string
              	
0F66: 313B81  	WARMST: ld      SP,STACK        ; Temporary stack
0F69: CD7916  	BRKRET: call    CLREG           ; Clear registers and stack
0F6C: CD3608  	        call    CURSOR_ON       ; enable cursor
0F6F: C38715  	        jp      PRNTOK          ; Go to get command line
              	
0F72: 20427974	BFREE:  defb    " Bytes free",CR,0
0F76: 65732066	
0F7A: 7265650D	
0F7E: 00      	
              	
0F7F: 5A383020	SIGNON: defb    "Z80 BASIC Ver 4.8",CR
0F83: 42415349	
0F87: 43205665	
0F8B: 7220342E	
0F8F: 380D    	
0F91: 436F7079	        defb    "Copyright ",251," 1978"
0F95: 72696768	
0F99: 7420FB20	
0F9D: 31393738	
0FA1: 20627920	        defb    " by Microsoft",CR,0
0FA5: 4D696372	
0FA9: 6F736F66	
0FAD: 740D00  	
              	
0FB0: 4D656D6F	MEMMSG: defb    "Memory top",0
0FB4: 72792074	
0FB8: 6F7000  	
              	
              	; The following list reports all the functions supported by the interpreter.
              	; To add a custom function, the user must first insert the reserved word here,
              	; then into the list of the reserved words below, and finally must increment the
              	; ZSGN token value and all the following ones after ZSGN by 1 for every added
              	; function.
              	
              	; FUNCTION ADDRESS TABLE (this is a sort of offset table)
              	; this list must be coherent with the tokens' functions list. This means that every
              	; entry here must have the corresponding entry in the tokens list.
0FBB: B32B    	FNCTAB: defw    SGN
0FBD: 5422    	        defw    TMR         ; added by Leonardo Miliani
0FBF: 772C    	        defw    INT
0FC1: C92B    	        defw    ABS
0FC3: 6480    	        defw    USR
0FC5: 6A22    	        defw    FRE
0FC7: EF25    	        defw    INP
0FC9: 9822    	        defw    POS
0FCB: 3D2E    	        defw    SQR
0FCD: 1C2F    	        defw    RND
0FCF: 072A    	        defw    LOG
0FD1: 8B2E    	        defw    EXP
0FD3: 912F    	        defw    COS
0FD5: 972F    	        defw    SIN
0FD7: F82F    	        defw    TAN
0FD9: 0D30    	        defw    ATN
0FDB: CB26    	        defw    PEEK
0FDD: 7830    	        defw    DEEK
0FDF: D226    	        defw    VPEEK       ; added by Leonardo Miliani
0FE1: 9C28    	        defw    VSTAT       ; added by Leonardo Miliani
0FE3: A728    	        defw    SSTAT       ; added by Leonardo Miliani
0FE5: B928    	        defw    INKEY       ; added by Leonardo Miliani
0FE7: D432    	        defw    POINT       ; added by Leonardo Miliani
0FE9: 1C25    	        defw    LEN
0FEB: 3423    	        defw    STR
0FED: B625    	        defw    VAL
0FEF: 2B25    	        defw    ASC
0FF1: 3C25    	        defw    CHR
0FF3: 1F3A    	        defw    HEX         ; added by Grant Searle
0FF5: B03A    	        defw    BIN         ; added by Grant Searle
0FF7: 4C25    	        defw    LEFT
0FF9: 7C25    	        defw    RIGHT
0FFB: 8625    	        defw    MID
              	
              	; RESERVED WORD LIST
              	; Here are all the reserved words used by the interpreter
              	; To add custom functions/commands, the user must insert the keyword
              	; in this list, following the schematic
0FFD: C54E44  	WORDS:  defb    'E'+$80,"ND"            ; from here the list contains the COMMANDS
1000: C64F52  	        defb    'F'+$80,"OR"
1003: CE455854	        defb    'N'+$80,"EXT"
1007: C4415441	        defb    'D'+$80,"ATA"
100B: C94E5055	        defb    'I'+$80,"NPUT"
100F: 54      	
1010: C4494D  	        defb    'D'+$80,"IM"
1013: D2454144	        defb    'R'+$80,"EAD"
1017: CC4554  	        defb    'L'+$80,"ET"
101A: C74F544F	        defb    'G'+$80,"OTO"
101E: D2554E  	        defb    'R'+$80,"UN"
1021: C946    	        defb    'I'+$80,"F"
1023: D2455354	        defb    'R'+$80,"ESTORE"
1027: 4F5245  	
102A: C74F5355	        defb    'G'+$80,"OSUB"
102E: 42      	
102F: D2455455	        defb    'R'+$80,"ETURN"
1033: 524E    	
1035: D2454D  	        defb    'R'+$80,"EM"
1038: D3544F50	        defb    'S'+$80,"TOP"
103C: CF5554  	        defb    'O'+$80,"UT"
103F: CF4E    	        defb    'O'+$80,"N"
1041: CE554C4C	        defb    'N'+$80,"ULL"
1045: D7414954	        defb    'W'+$80,"AIT"
1049: C44546  	        defb    'D'+$80,"EF"
104C: D04F4B45	        defb    'P'+$80,"OKE"
1050: C44F4B45	        defb    'D'+$80,"OKE"
1054: D6504F4B	        defb    'V'+$80,"POKE"          ; added by Leonardo Miliani
1058: 45      	
1059: D3524547	        defb    'S'+$80,"REG"           ; added by Leonardo Miliani
105D: D6524547	        defb    'V'+$80,"REG"           ; added by Leonardo Miliani
1061: D3435245	        defb    'S'+$80,"CREEN"         ; changed by Leonardo Miliani
1065: 454E    	
1067: CC4F4341	        defb    'L'+$80,"OCATE"         ; added by Leonardo Miliani
106B: 5445    	
106D: D34F554E	        defb    'S'+$80,"OUND"          ; added by Leonardo Miliani
1071: 44      	
1072: D64F4C55	        defb    'V'+$80,"OLUME"         ; added by Leonardo Miliani
1076: 4D45    	
1078: D0415553	        defb    'P'+$80,"AUSE"          ; added by Leonardo Miliani
107C: 45      	
107D: C34F4C4F	        defb    'C'+$80,"OLOR"          ; added by Leonardo Miliani
1081: 52      	
1082: D04C4F54	        defb    'P'+$80,"LOT"           ; added by Leonardo Miliani
1086: C4524157	        defb    'D'+$80,"RAW"           ; added by Leonardo Miliani
108A: C3495243	        defb    'C'+$80,"IRCLE"         ; added by Leonardo Miliani
108E: 4C45    	
1090: D3455249	        defb    'S'+$80,"ERIAL"         ; added by Leonardo Miliani
1094: 414C    	
1096: C8454C50	        defb    'H'+$80,"ELP"           ; changed by Leonardo Miliani - was LINES
109A: C34C53  	        defb    'C'+$80,"LS"            ; restored command
109D: CB4559  	        defb    'K'+$80,"EY"            ; added by Leonardo Miliani
10A0: CE4D49  	        defb    'N'+$80,"MI"            ; added by Leonardo Miliani
10A3: C7505249	        defb    'G'+$80,"PRINT"         ; added by Leonardo Miliani
10A7: 4E54    	
10A9: D7494454	        defb    'W'+$80,"IDTH"
10AD: 48      	
10AE: D35953  	        defb    'S'+$80,"YS"            ; added by Leonardo Miliani
10B1: D2455345	        defb    'R'+$80,"ESET"          ; changed by Leonardo Miliani
10B5: 54      	
10B6: D052494E	        defb    'P'+$80,"RINT"
10BA: 54      	
10BB: C34F4E54	        defb    'C'+$80,"ONT"
10BF: CC495354	        defb    'L'+$80,"IST"
10C3: C34C4541	        defb    'C'+$80,"LEAR"
10C7: 52      	
10C8: C34C4F41	        defb    'C'+$80,"LOAD"
10CC: 44      	
10CD: C3534156	        defb    'C'+$80,"SAVE"
10D1: 45      	
10D2: CE4557  	        defb    'N'+$80,"EW"
10D5: D4414228	        defb    'T'+$80,"AB("
10D9: D44F    	        defb    'T'+$80,"O"
10DB: C64E    	        defb    'F'+$80,"N"
10DD: D3504328	        defb    'S'+$80,"PC("
10E1: D448454E	        defb    'T'+$80,"HEN"
10E5: CE4F54  	        defb    'N'+$80,"OT"
10E8: D3544550	        defb    'S'+$80,"TEP"
              	        ; from here: operators
10EC: AB      	        defb    '+'+$80
10ED: AD      	        defb    '-'+$80
10EE: AA      	        defb    '*'+$80
10EF: AF      	        defb    '/'+$80
10F0: A5      	        defb    '%'+$80
10F1: A3      	        defb    '#'+$80
10F2: DE      	        defb    '^'+$80
10F3: C14E44  	        defb    'A'+$80,"ND"
10F6: D84F52  	        defb    'X'+$80,"OR"
10F9: CF52    	        defb    'O'+$80,"R"
10FB: BE      	        defb    '>'+$80
10FC: BD      	        defb    '='+$80
10FD: BC      	        defb    '<'+$80
              	
              	        ; from here there are the tokens' FUNCTIONS list
              	        ; this list must be coherent with the functions list above
10FE: D3474E  	        defb    'S'+$80,"GN"
1101: D44D52  	        defb    'T'+$80,"MR"            ; added by Leonardo Miliani
1104: C94E54  	        defb    'I'+$80,"NT"
1107: C14253  	        defb    'A'+$80,"BS"
110A: D55352  	        defb    'U'+$80,"SR"
110D: C65245  	        defb    'F'+$80,"RE"
1110: C94E50  	        defb    'I'+$80,"NP"
1113: D04F53  	        defb    'P'+$80,"OS"
1116: D35152  	        defb    'S'+$80,"QR"
1119: D24E44  	        defb    'R'+$80,"ND"
111C: CC4F47  	        defb    'L'+$80,"OG"
111F: C55850  	        defb    'E'+$80,"XP"
1122: C34F53  	        defb    'C'+$80,"OS"
1125: D3494E  	        defb    'S'+$80,"IN"
1128: D4414E  	        defb    'T'+$80,"AN"
112B: C1544E  	        defb    'A'+$80,"TN"
112E: D045454B	        defb    'P'+$80,"EEK"
1132: C445454B	        defb    'D'+$80,"EEK"
1136: D6504545	        defb    'V'+$80,"PEEK"          ; added by Leonardo Miliani
113A: 4B      	
113B: D6535441	        defb    'V'+$80,"STAT"          ; added by Leonardo Miliani
113F: 54      	
1140: D3535441	        defb    'S'+$80,"STAT"          ; added by Leonardo Miliani
1144: 54      	
1145: C94E4B45	        defb    'I'+$80,"NKEY"          ; added by Leonardo Miliani
1149: 59      	
114A: D04F494E	        defb    'P'+$80,"OINT"          ; added by Leonardo Miliani
114E: 54      	
114F: CC454E  	        defb    'L'+$80,"EN"
1152: D3545224	        defb    'S'+$80,"TR$"
1156: D6414C  	        defb    'V'+$80,"AL"
1159: C15343  	        defb    'A'+$80,"SC"
115C: C3485224	        defb    'C'+$80,"HR$"
1160: C8455824	        defb    'H'+$80,"EX$"           ; added by Grant Searle
1164: C2494E24	        defb    'B'+$80,"IN$"           ; added by Grant Searle
1168: CC454654	        defb    'L'+$80,"EFT$"
116C: 24      	
116D: D2494748	        defb    'R'+$80,"IGHT$"
1171: 5424    	
1173: CD494424	        defb    'M'+$80,"ID$"
1177: 80      	        defb    $80                     ; End-of-list marker
              	
              	; KEYWORD ADDRESS TABLE
              	; this list must be coherent with the commands'
              	; tokens list above
1178: 7C1A    	WORDTB: defw    PEND
117A: 7919    	        defw    FOR
117C: 5C1E    	        defw    NEXT
117E: D51B    	        defw    DATA
1180: 611D    	        defw    INPUT
1182: AC20    	        defw    DIM
1184: 931D    	        defw    READ
1186: EC1B    	        defw    LET
1188: 921B    	        defw    GOTO
118A: 6D1B    	        defw    RUN
118C: 641C    	        defw    IF
118E: 421A    	        defw    RESTOR
1190: 811B    	        defw    GOSUB
1192: B01B    	        defw    RETURN
1194: D71B    	        defw    REM
1196: 7A1A    	        defw    STOP
1198: FB25    	        defw    POUT
119A: 461C    	        defw    ON
119C: D71B    	        defw    REM         ; removed - was NULL
119E: 0126    	        defw    WAIT
11A0: A022    	        defw    DEF
11A2: F526    	        defw    POKE
11A4: 8330    	        defw    DOKE
11A6: FA26    	        defw    VPOKE       ; added by Leonardo Miliani
11A8: 3727    	        defw    SREG        ; added by Leonardo Miliani
11AA: 8028    	        defw    VREG        ; added by Leonardo Miliani
11AC: B930    	        defw    SCREEN      ; mod function: now it sets up a graphics mode (Leonardo Miliani)
11AE: 0527    	        defw    LOCATE      ; added by Leonardo Miliani
11B0: 8F27    	        defw    SOUND       ; added by Leonardo Miliani
11B2: 5627    	        defw    VOLUME      ; added by Leonardo Miliani
11B4: 9A30    	        defw    PAUSE       ; added by Leonardo Miliani
11B6: 3431    	        defw    COLOR       ; added by Leonardo Miliani
11B8: 1333    	        defw    PLOT        ; added by Leonardo Miliani
11BA: 9233    	        defw    DRAW        ; added by Leonardo Miliani
11BC: B934    	        defw    CIRCLE      ; added by Leonardo Miliani
11BE: BE36    	        defw    SERIAL      ; added by Leonardo Miliani
11C0: B938    	        defw    HELP        ; changed by Leonardo Miliani - was LINES
11C2: 5C30    	        defw    CLS
11C4: D438    	        defw    KEY         ; added by Leonardo Miliani
11C6: 4326    	        defw    NMI         ; added by Leonardo Miliani
11C8: EE31    	        defw    GPRINT      ; added by Leonardo Miliani
11CA: 7030    	        defw    WIDTH
11CC: 9D26    	        defw    SYS
11CE: 153B    	        defw    RESET       ; new behaviour: now it resets the system
11D0: 881C    	        defw    PRINT
11D2: AE1A    	        defw    CONT
11D4: 6E18    	        defw    LIST
11D6: 271B    	        defw    CLEAR
11D8: D71B    	        defw    REM         ; not implemented (was CLOAD)
11DA: D71B    	        defw    REM         ; not implemented (was CSAVE)
11DC: 5316    	        defw    NEW
              	
              	; RESERVED WORD TOKEN VALUES
              	; if you add a function or command you must increment by 1
              	; the values below. Pay attention that you must increment only the
              	; values AFTER the position where you entered the function/command word
              	; in the "Reserver word list" above. I.E.: VPOKE has been added between
              	; DOKE and SCREEN, and since REM is the reserved work listed below
              	; that is before the point where VPOKE has been entered, every entry
              	; after REM has been incremented.
              	; Another example: when TMR has been added, since it's a function, every
              	; entry after & included ZSGN must be checked (read below)
              	
0080:         	ZEND    equ     $80             ; END        <-- from here, there are the commands
0081:         	ZFOR    equ     $81             ; FOR
0083:         	ZDATA   equ     $83             ; DATA
0088:         	ZGOTO   equ     $88             ; GOTO
008C:         	ZGOSUB  equ     $8C             ; GOSUB
008E:         	ZREM    equ     $8E             ; REM
00AC:         	ZPRINT  equ     $AC             ; PRINT
00B2:         	ZNEW    equ     $B2             ; NEW
              	
00B3:         	ZTAB    equ     $B3             ; TAB
00B4:         	ZTO     equ     $B4             ; TO
00B5:         	ZFN     equ     $B5             ; FN
00B6:         	ZSPC    equ     $B6             ; SPC
00B7:         	ZTHEN   equ     $B7             ; THEN
00B8:         	ZNOT    equ     $B8             ; NOT
00B9:         	ZSTEP   equ     $B9             ; STEP
              	
00BA:         	ZPLUS   equ     $BA             ; +         <-- from here, there are the math operators
00BB:         	ZMINUS  equ     $BB             ; -
00BC:         	ZTIMES  equ     $BC             ; *
00BD:         	ZDIV    equ     $BD             ; /
00BE:         	ZMOD    equ     $BE             ; %
00BF:         	ZDINT   equ     $BF             ; #
00C3:         	ZOR     equ     $C3             ; OR
00C4:         	ZGTR    equ     $C4             ; >
00C5:         	ZEQUAL  equ     $C5             ; M
00C6:         	ZLTH    equ     $C6             ; <
              	
00C7:         	ZSGN    equ     $C7             ; SGN       <-- from here, there are the functions
00DD:         	ZPOINT  equ     $DD             ; ZPOINT    <-- if the user enters a custom function, between
              	                                ;               SGN and POINT, he/she must increment this pointer by 1
00E5:         	ZLEFT   equ     $E5             ; LEFT$     <-- if the user enters a custom function anywhere,
              	                                ;               he/she must increment this pointer by 1
              	
              	; ARITHMETIC PRECEDENCE TABLE
              	; in the formulas below, <last> is a number stored into the stack that must be retrieved
              	; with POP BC, POP DE; FPREG is a f.p. number store into the RAM register FPREG
11DE: 79      	PRITAB: defb    $79             ; Precedence value
11DF: 252D    	        defw    PADD            ; FPREG = <last> + FPREG
              	
11E1: 79      	        defb    $79             ; Precedence value
11E2: 0829    	        defw    PSUB            ; FPREG = <last> - FPREG
              	
11E4: 7C      	        defb    $7C             ; Precedence value
11E5: 462A    	        defw    MULT            ; PPREG = <last> * FPREG
              	
11E7: 7C      	        defb    $7C             ; Precedence value
11E8: F82A    	        defw    DIV             ; FPREG = <last> / FPREG
              	
11EA: 7C      	        defb    $7C             ; Precedence value
11EB: A32A    	        defw    MOD             ; FPREG = INT(<last>)-(INT(FPREG)*INT(<last>/FPREG))
              	
11ED: 7C      	        defb    $7C             ; precedence value
11EE: 9B2A    	        defw    DINT            ; FPREG = INT(<last> / FPREG )
              	
11F0: 7F      	        defb    $7F             ; Precedence value
11F1: 462E    	        defw    POWER           ; FPREG = <last> ^ FPREG
              	
11F3: 50      	        defb    $50             ; Precedence value
11F4: F51F    	        defw    PAND            ; FPREG = <last> AND FPREG
              	
11F6: 4A      	        defb    $4A             ; Precedence value
11F7: FD1F    	        defw    PXOR            ; FPREG = <last> XOR FPREG
              	
11F9: 46      	        defb    $46             ; Precedence value
11FA: F81F    	        defw    POR             ; FPREG = <last> OR FPREG
              	
              	; BASIC ERROR CODE LIST
              	
11FC:         	ERRORS  equ $
11FC: 4E455854	NFMSG:  defb    "NEXT Without FOR",0
1200: 20576974	
1204: 686F7574	
1208: 20464F52	
120C: 00      	
120D: 53796E74	SNMSG:  defb    "Syntax",0
1211: 617800  	
1214: 52455455	RGMSG:  defb    "RETURN without GOSUB",0
1218: 524E2077	
121C: 6974686F	
1220: 75742047	
1224: 4F535542	
1228: 00      	
1229: 4F757420	ODMSG:  defb    "Out of DATA",0
122D: 6F662044	
1231: 41544100	
1235: 496C6C65	FCMSG:  defb    "Illegal Function Call",0
1239: 67616C20	
123D: 46756E63	
1241: 74696F6E	
1245: 2043616C	
1249: 6C00    	
124B: 4F766572	OVMSG:  defb    "Overflow",0
124F: 666C6F77	
1253: 00      	
1254: 4F757420	OMMSG:  defb    "Out of Memory",0
1258: 6F66204D	
125C: 656D6F72	
1260: 7900    	
1262: 556E6465	ULMSG:  defb    "Undefined Line",0
1266: 66696E65	
126A: 64204C69	
126E: 6E6500  	
1271: 42616420	BSMSG:  defb    "Bad Subscript",0
1275: 53756273	
1279: 63726970	
127D: 7400    	
127F: 52652D44	DDMSG:  defb    "Re-Dimensioned Array",0
1283: 696D656E	
1287: 73696F6E	
128B: 65642041	
128F: 72726179	
1293: 00      	
1294: 44697669	DZMSG:  defb    "Division by Zero",0
1298: 73696F6E	
129C: 20627920	
12A0: 5A65726F	
12A4: 00      	
12A5: 496C6C65	IDMSG:  defb    "Illegal Direct",0
12A9: 67616C20	
12AD: 44697265	
12B1: 637400  	
12B4: 54797065	TMMSG:  defb    "Type Mis-match",0
12B8: 204D6973	
12BC: 2D6D6174	
12C0: 636800  	
12C3: 4F757420	OSMSG:  defb    "Out of String Space",0
12C7: 6F662053	
12CB: 7472696E	
12CF: 67205370	
12D3: 61636500	
12D7: 53747269	LSMSG:  defb    "String Too Long",0
12DB: 6E672054	
12DF: 6F6F204C	
12E3: 6F6E6700	
12E7: 53747269	STMSG:  defb    "String Formula Too Complex",0
12EB: 6E672046	
12EF: 6F726D75	
12F3: 6C612054	
12F7: 6F6F2043	
12FB: 6F6D706C	
12FF: 657800  	
1302: 43616E27	CNMSG:  defb    "Can't Continue",0
1306: 7420436F	
130A: 6E74696E	
130E: 756500  	
1311: 556E6465	UFMSG:  defb    "Undefined FN Function",0
1315: 66696E65	
1319: 6420464E	
131D: 2046756E	
1321: 6374696F	
1325: 6E00    	
1327: 4D697373	MOMSG:  defb    "Missing Operand",0
132B: 696E6720	
132F: 4F706572	
1333: 616E6400	
1337: 48455820	HXMSG:  defb    "HEX Format",0
133B: 466F726D	
133F: 617400  	
1342: 42494E20	BNMSG:  defb    "BIN Format",0
1346: 466F726D	
134A: 617400  	
134D: 4E6F2047	GMMSG:  defb    "No Graphics Mode",0
1351: 72617068	
1355: 69637320	
1359: 4D6F6465	
135D: 00      	
135E: 53657269	SCMSG:  defb    "Serial Configuration",0
1362: 616C2043	
1366: 6F6E6669	
136A: 67757261	
136E: 74696F6E	
1372: 00      	
1373: 53657269	SAMSG:  defb    "Serial Port Already Open",0
1377: 616C2050	
137B: 6F727420	
137F: 416C7265	
1383: 61647920	
1387: 4F70656E	
138B: 00      	
138C: 48454C50	HPMSG:  defb    "HELP Call",0
1390: 2043616C	
1394: 6C00    	
              	
1396:         	ERRTBL  equ $
1396: FC11    	NFPTR   defw    NFMSG
1398: 0D12    	SNPTR   defw    SNMSG
139A: 1412    	RGPTR   defw    RGMSG
139C: 2912    	ODPTR   defw    ODMSG
139E: 3512    	FCPTR   defw    FCMSG
13A0: 4B12    	OVPTR   defw    OVMSG
13A2: 5412    	OMPTR   defw    OMMSG
13A4: 6212    	ULPTR   defw    ULMSG
13A6: 7112    	BSPTR   defw    BSMSG
13A8: 7F12    	DDPTR   defw    DDMSG
13AA: 9412    	DZPTR   defw    DZMSG
13AC: A512    	IDPTR   defw    IDMSG
13AE: B412    	TMPTR   defw    TMMSG
13B0: C312    	OSPTR   defw    OSMSG
13B2: D712    	LSPTR   defw    LSMSG
13B4: E712    	STPTR   defw    STMSG
13B6: 0213    	CNPTR   defw    CNMSG
13B8: 1113    	UFPTR   defw    UFMSG
13BA: 2713    	MOPTR   defw    MOMSG
13BC: 3713    	HXPTR   defw    HXMSG
13BE: 4213    	BNPTR   defw    BNMSG
13C0: 4D13    	GMPRT   defw    GMMSG
13C2: 5E13    	SCPTR   defw    SCMSG
13C4: 7313    	SAPTR   defw    SAMSG
13C6: 8C13    	HPPTR   defw    HPMSG
              	
              	; INITIALISATION TABLE -------------------------------------------------------
              	; these values are copied into RAM at startup
13C8: C3660F  	INITAB: jp      WARMST          ; Warm start jump
13CB: ED4500  	        defb    $ED,$45,$00     ; RETN + NOP for default NMI service routine
13CE: C3FD1A  	        jp      FCERR           ; "USR (X)" jump (Set to Error)
13D1: D300    	        out     (0),A           ; "out p,n" skeleton
13D3: C9      	        ret
13D4: D600    	        sub     $00             ; Division support routine
13D6: 6F      	        ld      L,A
13D7: 7C      	        ld      A,H
13D8: DE00    	        sbc     A,$00
13DA: 67      	        ld      H,A
13DB: 78      	        ld      A,B
13DC: DE00    	        sbc     A,$00
13DE: 47      	        ld      B,A
13DF: 3E00    	        ld      A,$00
13E1: C9      	        ret
13E2: 000000  	        defb    $00,$00,$00     ; Random number seed table used by RND
13E5: 354ACA99	        defb    $35,$4A,$CA,$99 ;-2.65145E+07
13E9: 391C7698	        defb    $39,$1C,$76,$98 ; 1.61291E+07
13ED: 2295B398	        defb    $22,$95,$B3,$98 ;-1.17691E+07
13F1: 0ADD4798	        defb    $0A,$DD,$47,$98 ; 1.30983E+07
13F5: 53D19999	        defb    $53,$D1,$99,$99 ;-2-01612E+07
13F9: 0A1A9F98	        defb    $0A,$1A,$9F,$98 ;-1.04269E+07
13FD: 65BCCD98	        defb    $65,$BC,$CD,$98 ;-1.34831E+07
1401: D6773E98	        defb    $D6,$77,$3E,$98 ; 1.24825E+07
1405: 52C74F80	        defb    $52,$C7,$4F,$80 ; Last random number
1409: DB00    	        in      A,($00)         ; INP (x) skeleton
140B: C9      	        ret
140C: FF      	        defb    $FF             ; Terminal width (255 = no auto CRLF)
140D: 1C      	        defb    $1C             ; Width for commas (3 columns)
140E: 00      	        defb    $00             ; No nulls after input bytes
140F: 00      	        defb    $00             ; Output enabled (^O off)
1410: 0000    	        defw    $00             ; Array load/save check sum
1412: 00      	        defb    $00             ; Break not by NMI
1413: 00      	        defb    $00             ; Break flag
1414: C38F17  	        jp      TTYLIN          ; Input reflection (set to TTY)
1417: A482    	        defw    STLOOK          ; Temp string space
1419: FEFF    	        defw    -2              ; Current line number (cold)
141B: FFFF    	        defw    -1              ; Current line with errors (no errors)
141D: 4C495354	DEFFNKS:defm    "LIST",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 1
1421: 0D000000	
1425: 00000000	
1429: 00000000	
142D: 52554E0D	        defm    "RUN",13,0,0,0,0,0,0,0,0,0,0,0,0    ; KEY 2
1431: 00000000	
1435: 00...   	
143D: 53435245	        defm    "SCREEN1",13,0,0,0,0,0,0,0,0        ; KEY 3
1441: 454E310D	
1445: 00000000	
1449: 00000000	
144D: 434F4C4F	        defm    "COLOR1,15,5",13,0,0,0,0            ; KEY 4
1451: 52312C31	
1455: 352C350D	
1459: 00000000	
145D: 53455249	        defm    "SERIAL1,38400",13,0,0              ; KEY 5
1461: 414C312C	
1465: 33383430	
1469: 300D0000	
146D: 53435245	        defm    "SCREEN2",13,0,0,0,0,0,0,0,0        ; KEY 6
1471: 454E320D	
1475: 00000000	
1479: 00000000	
147D: 434F4E54	        defm    "CONT",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 7
1481: 0D000000	
1485: 00000000	
1489: 00000000	
148D: 48454C50	        defm    "HELP",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 8 (HELP KEY)
1491: 0D000000	
1495: 00000000	
1499: 00000000	
149D: 4182    	        defw    PROGST+1        ; Start of program text
149F:         	INITBE:
              	
              	; END OF INITIALISATION TABLE ---------------------------------------------------
              	
149F: 20457272	ERRMSG: defb    " Error",0
14A3: 6F7200  	
14A6: 20696E20	INMSG:  defb    " in ",0
14AA: 00      	
14AA:         	ZERBYT  equ     $-1             ; A zero byte
14AB: 4F6B0D00	OKMSG:  defb    "Ok",CR,0,0
14AF: 00      	
14B0: 42726561	BRKMSG: defb    "Break",0
14B4: 6B00    	
              	
14B6: 210400  	BAKSTK: ld      HL,$04          ; Look for "FOR" block with
14B9: 39      	        add     HL,SP           ; same index as specified
14BA: 7E      	LOKFOR: ld      A,(HL)          ; Get block ID
14BB: 23      	        inc     HL              ; Point to index address
14BC: FE81    	        cp      ZFOR            ; Is it a "FOR" token
14BE: C0      	        ret     NZ              ; No - exit
14BF: 4E      	        ld      C,(HL)          ; BC = Address of "FOR" index
14C0: 23      	        inc     HL
14C1: 46      	        ld      B,(HL)
14C2: 23      	        inc     HL              ; Point to sign of STEP
14C3: E5      	        push    HL              ; Save pointer to sign
14C4: 69      	        ld      L,C             ; HL = address of "FOR" index
14C5: 60      	        ld      H,B
14C6: 7A      	        ld      A,D             ; See if an index was specified
14C7: B3      	        or      E               ; DE = 0 if no index specified
14C8: EB      	        ex      DE,HL           ; Specified index into HL
14C9: CAD014  	        jp      Z,INDFND        ; Skip if no index given
14CC: EB      	        ex      DE,HL           ; Index back into DE
14CD: CD0918  	        call    CPDEHL          ; Compare index with one given
14D0: 010D00  	INDFND: ld      BC,16-3         ; Offset to next block
14D3: E1      	        pop     HL              ; Restore pointer to sign
14D4: C8      	        ret     Z               ; Return if block found
14D5: 09      	        add     HL,BC           ; Point to next block
14D6: C3BA14  	        jp      LOKFOR          ; Keep on looking
              	
14D9: CDF314  	MOVUP:  call    ENFMEM          ; See if enough memory
14DC: C5      	MOVSTR: push    BC              ; Save end of source
14DD: E3      	        ex      (SP),HL         ; Swap source and dest" end
14DE: C1      	        pop     BC              ; Get end of destination
14DF: CD0918  	MOVLP:  call    CPDEHL          ; See if list moved
14E2: 7E      	        ld      A,(HL)          ; Get byte
14E3: 02      	        ld      (BC),A          ; Move it
14E4: C8      	        ret     Z               ; Exit if all done
14E5: 0B      	        dec     BC              ; Next byte to move to
14E6: 2B      	        dec     HL              ; Next byte to move
14E7: C3DF14  	        jp      MOVLP           ; Loop until all bytes moved
              	
14EA: E5      	CHKSTK: push    HL              ; Save code string address
14EB: 2ABF81  	        ld      HL,(ARREND)     ; Lowest free memory
14EE: 0600    	        ld      B,$00           ; BC = Number of levels to test
14F0: 09      	        add     HL,BC           ; 2 Bytes for each level
14F1: 09      	        add     HL,BC
14F2: 3E      	        defb    $3E             ; Skip "push HL"
14F3: E5      	ENFMEM: push    HL              ; Save code string address
14F4: 3ED0    	        ld      A,$D0           ; LOW -48 ; 48 Bytes minimum RAM
14F6: 95      	        sub     L
14F7: 6F      	        ld      L,A
14F8: 3EFF    	        ld      A,$FF           ; HIGH (-48) ; 48 Bytes minimum RAM
14FA: 9C      	        sbc     A,H
14FB: DA0215  	        jp      C,OMERR         ; Not enough - ?OM Error
14FE: 67      	        ld      H,A
14FF: 39      	        add     HL,SP           ; Test if stack is overflowed
1500: E1      	        pop     HL              ; Restore code string address
1501: D8      	        ret     C               ; Return if enough memory
1502: 1E0C    	OMERR:  ld      E,OM            ; ?OM Error
1504: C34115  	        jp      ERROR
              	
              	
              	; if in graphics mode, return to text (called by "NOLIN" and "ERROR")
1507: F5      	EXITGM: push    AF              ; store AF
1508: 3AE081  	        ld      A,(SCR_MODE)    ; check screen mode
150B: FE02    	        cp      $02             ; G2?
150D: CA1415  	        jp      Z,LDG1          ; yes, back to G1
1510: FE03    	        cp      $03             ; G3?
1512: 2011    	        jr      NZ,LDG1ND       ; no, so return
1514: E5      	LDG1:   push    HL              ; store HL
1515: D5      	        push    DE              ; store DE
1516: 110100  	        ld      DE,$0001        ; sprites set to defaults, G1 mode
1519: F3      	        di                      ; disable INTs
151A: CD7E03  	        call    initVDP         ; initialize VDP with mode pointed by E
151D: FB      	        ei                      ; re-enable INTs
151E: 3E01    	        ld      A,$01           ; activate the...
1520: 32EB81  	        ld      (PRNTVIDEO),A   ; ...video buffer...
1523: D1      	        pop     DE              ; retrieve DE
1524: E1      	        pop     HL              ; retrieve HL
1525: F1      	LDG1ND: pop     AF              ; retrieve AF
1526: C9      	        ret                     ; return to caller
              	
              	
1527: 2AAE81  	DATSNR: ld      HL,(DATLIN)     ; Get line of current DATA item
152A: 22AF80  	        ld      (LINEAT),HL     ; Save as current line
152D: 1E02    	SNERR:  ld      E,SN            ; ?SN Error
152F: 01      	        defb    $01             ; Skip "ld E,DZ"
1530: 1E14    	DZERR:  ld      E,DZ            ; ?/0 Error
1532: 01      	        defb    $01             ; Skip "ld E,NF"
1533: 1E00    	NFERR:  ld      E,NF            ; ?NF Error
1535: 01      	        defb    $01             ; Skip "ld E,DD"
1536: 1E12    	DDERR:  ld      E,DD            ; ?DD Error
1538: 01      	        defb    $01             ; Skip "ld E,UF"
1539: 1E22    	UFERR:  ld      E,UF            ; ?UF Error
153B: 01      	        defb    $01             ; Skip "ld E,OV
153C: 1E0A    	OVERR:  ld      E,OV            ; ?OV Error
153E: 01      	        defb    $01             ; Skip "ld E,TM"
153F: 1E18    	TMERR:  ld      E,TM            ; ?TM Error
              	
1541: CD7916  	ERROR:  call    CLREG           ; Clear registers and stack
1544: CD0715  	        call    EXITGM          ; exit from graphic modes
1547: 32A580  	        ld      (CTLOFG),A      ; Enable output (A is 0)
154A: CD3608  	        call    CURSOR_ON       ; enable cursor
154D: CDD91C  	        call    STTLIN          ; Start new line
1550: 219613  	        ld      HL,ERRTBL       ; Point to error codes
1553: 57      	        ld      D,A             ; D = 0 (A is 0)
1554: 3E3F    	        ld      A,'?'
1556: CD1A18  	        call    OUTC            ; Output '?'
1559: 19      	        add     HL,DE           ; Offset to correct error code
155A: 5E      	        ld      E,(HL)          ; load pointer to error message
155B: 23      	        inc     HL              ; by loading LSB,
155C: 56      	        ld      D,(HL)          ; then MSB
155D: 626B    	        ld      HL,DE           ; load pointer to HL
155F: CDAA23  	        call    PRS             ; Output error message
1562: 219F14  	        ld      HL,ERRMSG       ; "Error" message
1565: CDAA23  	ERRIN:  call    PRS             ; Output message
1568: 2AAF80  	        ld      HL,(LINEAT)     ; Get line of error
156B: 11FEFF  	        ld      DE,-2           ; Cold start error if -2
156E: CD0918  	        call    CPDEHL          ; See if cold start error
1571: CAD50E  	        jp      Z,CSTART        ; Cold start error - Restart
1574: 7C      	        ld      A,H             ; Was it a direct error?
1575: A5      	        and     L               ; Line = -1 if direct error
1576: 3C      	        inc     A
1577: CA8215  	        jp      Z,PTLN          ; Yes, jump over
157A: E5      	        push    HL              ; indirect mode - store HL
157B: 2AAF80  	        ld      HL,(LINEAT)     ; copy current line number
157E: 22B180  	        ld      (HLPLN),HL      ; save in HELP line register
1581: E1      	        pop     HL              ; retrieve HL
1582: C4362D  	PTLN:   call    NZ,LINEIN       ; No - output line of error
              	
1585: 3E      	        defb    $3E             ; Skip "pop BC"
1586: C1      	POPNOK: pop     BC              ; Drop address in input buffer
              	
              	; run into direct mode: print OK and get command
1587: AF      	PRNTOK: xor     A               ; Output "Ok" and get command
1588: 32A580  	        ld      (CTLOFG),A      ; Enable output
158B: CDD91C  	        call    STTLIN          ; Start new line
158E: 21AB14  	        ld      HL,OKMSG        ; "Ok" message
1591: CDAA23  	        call    PRS             ; Output "Ok"
1594: CD3608  	GETCMD: call    CURSOR_ON       ; enable cursor
1597: 21FFFF  	        ld      HL,-1           ; Flag direct mode
159A: 22AF80  	        ld      (LINEAT),HL     ; Save as current line
159D: CD8F17  	        call    GETLIN          ; Get an input line
15A0: DA9415  	        jp      C,GETCMD        ; Get line again if break
15A3: CD321A  	        call    GETCHR          ; Get first character
15A6: 17      	        rla                     ; 8th bit is copied into carry and original carry is copied into bit 0)
15A7: DA2D15  	        jp      C,SNERR         ; if char >=128 (8th bit set) then raise an error
15AA: 1F      	        rra                     ; recover original char and Carry
15AB: 3C      	        inc     A               ; Test if end of line
15AC: 3D      	        dec     A               ; Without affecting Carry
15AD: CA9415  	        jp      Z,GETCMD        ; Nothing entered - Get another
15B0: F5      	        push    AF              ; Save Carry status
15B1: CD4C08  	        call    CURSOR_OFF      ; cursor disabled
15B4: CD021B  	        call    ATOH            ; Get line number into DE
15B7: D5      	        push    DE              ; Save line number
15B8: CDA616  	        call    CRUNCH          ; Tokenise rest of line
15BB: 47      	        ld      B,A             ; Length of tokenised line
15BC: D1      	        pop     DE              ; Restore line number
15BD: F1      	        pop     AF              ; Restore Carry
15BE: D2121A  	        jp      NC,EXCUTE       ; No line number - Direct mode
15C1: D5      	        push    DE              ; Save line number
15C2: C5      	        push    BC              ; Save length of tokenised line
15C3: AF      	        xor     A
15C4: 32B181  	        ld      (LSTBIN),A      ; Clear last byte input
15C7: CD321A  	        call    GETCHR          ; Get next character
15CA: B7      	        or      A               ; Set flags
15CB: F5      	        push    AF              ; And save them
15CC: CD3316  	        call    SRCHLN          ; Search for line number in DE
15CF: DAD815  	        jp      C,LINFND        ; Jump if line found
15D2: F1      	        pop     AF              ; Get status
15D3: F5      	        push    AF              ; And re-save
15D4: CAAB1B  	        jp      Z,ULERR         ; Nothing after number - Error
15D7: B7      	        or      A               ; Clear Carry
15D8: C5      	LINFND: push    BC              ; Save address of line in prog
15D9: D2EF15  	        jp      NC,INEWLN       ; Line not found - Insert new
15DC: EB      	        ex      DE,HL           ; Next line address in DE
15DD: 2ABB81  	        ld      HL,(PROGND)     ; End of program
15E0: 1A      	SFTPRG: ld      A,(DE)          ; Shift rest of program down
15E1: 02      	        ld      (BC),A
15E2: 03      	        inc     BC              ; Next destination
15E3: 13      	        inc     DE              ; Next source
15E4: CD0918  	        call    CPDEHL          ; All done?
15E7: C2E015  	        jp      NZ,SFTPRG       ; More to do
15EA: 60      	        ld      H,B             ; HL - New end of program
15EB: 69      	        ld      L,C
15EC: 22BB81  	        ld      (PROGND),HL     ; Update end of program
              	
15EF: D1      	INEWLN: pop     DE              ; Get address of line,
15F0: F1      	        pop     AF              ; Get status
15F1: CA1616  	        jp      Z,SETPTR        ; No text - Set up pointers
15F4: 2ABB81  	        ld      HL,(PROGND)     ; Get end of program
15F7: E3      	        ex      (SP),HL         ; Get length of input line
15F8: C1      	        pop     BC              ; End of program to BC
15F9: 09      	        add     HL,BC           ; Find new end
15FA: E5      	        push    HL              ; Save new end
15FB: CDD914  	        call    MOVUP           ; Make space for line
15FE: E1      	        pop     HL              ; Restore new end
15FF: 22BB81  	        ld      (PROGND),HL     ; Update end of program pointer
1602: EB      	        ex      DE,HL           ; Get line to move up in HL
1603: 74      	        ld      (HL),H          ; Save MSB
1604: D1      	        pop     DE              ; Get new line number
1605: 23      	        inc     HL              ; Skip pointer
1606: 23      	        inc     HL
1607: 73      	        ld      (HL),E          ; Save LSB of line number
1608: 23      	        inc     HL
1609: 72      	        ld      (HL),D          ; Save MSB of line number
160A: 23      	        inc     HL              ; To first byte in line
160B: 113681  	        ld      DE,BUFFER       ; Copy buffer to program
160E: 1A      	MOVBUF: ld      A,(DE)          ; Get source
160F: 77      	        ld      (HL),A          ; Save destinations
1610: 23      	        inc     HL              ; Next source
1611: 13      	        inc     DE              ; Next destination
1612: B7      	        or      A               ; Done?
1613: C20E16  	        jp      NZ,MOVBUF       ; No - Repeat
1616: CD5F16  	SETPTR: call    RUNFST          ; Set line pointers
1619: 23      	        inc     HL              ; To LSB of pointer
161A: EB      	        ex      DE,HL           ; Address to DE
161B: 62      	PTRLP:  ld      H,D             ; Address to HL
161C: 6B      	        ld      L,E
161D: 7E      	        ld      A,(HL)          ; Get LSB of pointer
161E: 23      	        inc     HL              ; To MSB of pointer
161F: B6      	        or      (HL)            ; Compare with MSB pointer
1620: CA9415  	        jp      Z,GETCMD        ; Get command line if end
1623: 23      	        inc     HL              ; To LSB of line number
1624: 23      	        inc     HL              ; Skip line number
1625: 23      	        inc     HL              ; Point to first byte in line
1626: AF      	        xor     A               ; Looking for 00 byte
1627: BE      	FNDEND: cp      (HL)            ; Found end of line?
1628: 23      	        inc     HL              ; Move to next byte
1629: C22716  	        jp      NZ,FNDEND       ; No - Keep looking
162C: EB      	        ex      DE,HL           ; Next line address to HL
162D: 73      	        ld      (HL),E          ; Save LSB of pointer
162E: 23      	        inc     HL
162F: 72      	        ld      (HL),D          ; Save MSB of pointer
1630: C31B16  	        jp      PTRLP           ; Do next line
              	
1633: 2A3381  	SRCHLN: ld      HL,(BASTXT)     ; Start of program text
1636: 44      	SRCHLP: ld      B,H             ; BC = Address to look at
1637: 4D      	        ld      C,L
1638: 7E      	        ld      A,(HL)          ; Get address of next line
1639: 23      	        inc     HL
163A: B6      	        or      (HL)            ; End of program found?
163B: 2B      	        dec     HL
163C: C8      	        ret     Z               ; Yes - Line not found
163D: 23      	        inc     HL
163E: 23      	        inc     HL
163F: 7E      	        ld      A,(HL)          ; Get LSB of line number
1640: 23      	        inc     HL
1641: 66      	        ld      H,(HL)          ; Get MSB of line number
1642: 6F      	        ld      L,A
1643: CD0918  	        call    CPDEHL          ; Compare with line in DE
1646: 60      	        ld      H,B             ; HL = Start of this line
1647: 69      	        ld      L,C
1648: 7E      	        ld      A,(HL)          ; Get LSB of next line address
1649: 23      	        inc     HL
164A: 66      	        ld      H,(HL)          ; Get MSB of next line address
164B: 6F      	        ld      L,A             ; Next line to HL
164C: 3F      	        ccf
164D: C8      	        ret     Z               ; Lines found - Exit
164E: 3F      	        ccf
164F: D0      	        ret     NC              ; Line not found,at line after
1650: C33616  	        jp      SRCHLP          ; Keep looking
              	
1653: C0      	NEW:    ret     NZ              ; Return if any more on line
1654: 2A3381  	CLRPTR: ld      HL,(BASTXT)     ; Point to start of program
1657: AF      	        xor     A               ; Set program area to empty
1658: 77      	        ld      (HL),A          ; Save LSB = 00
1659: 23      	        inc     HL
165A: 77      	        ld      (HL),A          ; Save MSB = 00
165B: 23      	        inc     HL
165C: 22BB81  	        ld      (PROGND),HL     ; Set program end
              	
165F: 2A3381  	RUNFST: ld      HL,(BASTXT)     ; Clear all variables
1662: 2B      	        dec     HL
              	
1663: 22B381  	INTVAR: ld      (BRKLIN),HL     ; Initialise RUN variables
1666: 2A9481  	        ld      HL,(LSTRAM)     ; Get end of RAM
1669: 22A881  	        ld      (STRBOT),HL     ; Clear string space
166C: AF      	        xor     A
166D: CD421A  	        call    RESTOR          ; Reset DATA pointers
1670: 2ABB81  	        ld      HL,(PROGND)     ; Get end of program
1673: 22BD81  	        ld      (VAREND),HL     ; Clear variables
1676: 22BF81  	        ld      (ARREND),HL     ; Clear arrays
              	
1679: C1      	CLREG:  pop     BC              ; Save return address
167A: 2AAD80  	        ld      HL,(STRSPC)     ; Get end of working RAM
167D: F9      	        ld      SP,HL           ; Set stack
167E: 219881  	        ld      HL,TMSTPL       ; Temporary string pool
1681: 229681  	        ld      (TMSTPT),HL     ; Reset temporary string ptr
1684: AF      	        xor     A               ; A = 00
1685: 6F      	        ld      L,A             ; HL = 0000
1686: 67      	        ld      H,A
1687: 22B981  	        ld      (CONTAD),HL     ; No CONTinue
168A: 32B081  	        ld      (FORFLG),A      ; Clear FOR flag
168D: 22C381  	        ld      (FNRGNM),HL     ; Clear FN argument
1690: E5      	        push    HL              ; HL = 0000
1691: C5      	        push    BC              ; Put back return
1692: 2AB381  	DOAGN:  ld      HL,(BRKLIN)     ; Get address of code to RUN
1695: C9      	        ret                     ; Return to execution driver
              	
1696: 3E3F    	PROMPT: ld      A,'?'           ; '?'
1698: CD1A18  	        call    OUTC            ; Output character
169B: 3E00    	        ld      A,NLLCR         ; null char
169D: CD1A18  	        call    OUTC            ; Output character
16A0: CD3608  	        call    CURSOR_ON       ; enable cursor
16A3: C3AA80  	        jp      RINPUT          ; Get input line
              	
16A6: AF      	CRUNCH: xor     A               ; Tokenise line @ HL to BUFFER
16A7: 329381  	        ld      (DATFLG),A      ; Reset literal flag
16AA: 0E05    	        ld      C,2+3           ; 2 byte number and 3 nulls
16AC: 113681  	        ld      DE,BUFFER       ; Start of input buffer
16AF: 7E      	CRNCLP: ld      A,(HL)          ; Get byte
16B0: FE20    	        cp      SPC             ; Is it a space?
16B2: CA2E17  	        jp      Z,MOVDIR        ; Yes - Copy direct
16B5: 47      	        ld      B,A             ; Save character
16B6: FE22    	        cp      22H             ; '"'             ; Is it a quote?
16B8: CA4E17  	        jp      Z,CPYLIT        ; Yes - Copy literal string
16BB: B7      	        or      A               ; Is it end of buffer?
16BC: CA5517  	        jp      Z,ENDBUF        ; Yes - End buffer
16BF: 3A9381  	        ld      A,(DATFLG)      ; Get data type
16C2: B7      	        or      A               ; Literal?
16C3: 7E      	        ld      A,(HL)          ; Get byte to copy
16C4: C22E17  	        jp      NZ,MOVDIR       ; Literal - Copy direct
16C7: FE3F    	        cp      '?'             ; Is it '?' short for PRINT
16C9: 3EAC    	        ld      A,ZPRINT        ; "PRINT" token
16CB: CA2E17  	        jp      Z,MOVDIR        ; Yes - replace it
16CE: 7E      	        ld      A,(HL)          ; Get byte again
16CF: FE30    	        cp      '0'             ; Is it less than '0'
16D1: DAD916  	        jp      C,FNDWRD        ; Yes - Look for reserved words
16D4: FE3C    	        cp      $3C  ;60; ";"+1       ; Is it "0123456789:;" ?
16D6: DA2E17  	        jp      C,MOVDIR        ; Yes - copy it direct
16D9: D5      	FNDWRD: push    DE              ; Look for reserved words
16DA: 11FC0F  	        ld      DE,WORDS-1      ; Point to table
16DD: C5      	        push    BC              ; Save count
16DE: 012A17  	        ld      BC,RETNAD       ; Where to return to
16E1: C5      	        push    BC              ; Save return address
16E2: 067F    	        ld      B,ZEND-1        ; First token value -1
16E4: 7E      	        ld      A,(HL)          ; Get byte
16E5: FE61    	        cp      'a'             ; Less than 'a' ?
16E7: DAF216  	        jp      C,SEARCH        ; Yes - search for words
16EA: FE7B    	        cp      'z'+1           ; Greater than 'z' ?
16EC: D2F216  	        jp      NC,SEARCH       ; Yes - search for words
16EF: E65F    	        and     %01011111       ; Force upper case
16F1: 77      	        ld      (HL),A          ; Replace byte
16F2: 4E      	SEARCH: ld      C,(HL)          ; Search for a word
16F3: EB      	        ex      DE,HL
16F4: 23      	GETNXT: inc     HL              ; Get next reserved word
16F5: B6      	        or      (HL)            ; Start of word?
16F6: F2F416  	        jp      P,GETNXT        ; No - move on
16F9: 04      	        inc     B               ; Increment token value
16FA: 7E      	        ld      A,(HL)          ; Get byte from table
16FB: E67F    	        and     %01111111       ; Strip bit 7
16FD: C8      	        ret     Z               ; Return if end of list
16FE: B9      	        cp      C               ; Same character as in buffer?
16FF: C2F416  	        jp      NZ,GETNXT       ; No - get next word
1702: EB      	        ex      DE,HL
1703: E5      	        push    HL              ; Save start of word
              	
1704: 13      	NXTBYT: inc     DE              ; Look through rest of word
1705: 1A      	        ld      A,(DE)          ; Get byte from table
1706: B7      	        or      A               ; End of word ?
1707: FA2617  	        jp      M,MATCH         ; Yes - Match found
170A: 4F      	        ld      C,A             ; Save it
170B: 78      	        ld      A,B             ; Get token value
170C: FE88    	        cp      ZGOTO           ; Is it "GOTO" token ?
170E: C21517  	        jp      NZ,NOSPC        ; No - Don't allow spaces
1711: CD321A  	        call    GETCHR          ; Get next character
1714: 2B      	        dec     HL              ; Cancel increment from GETCHR
1715: 23      	NOSPC:  inc     HL              ; Next byte
1716: 7E      	        ld      A,(HL)          ; Get byte
1717: FE61    	        cp      'a'             ; Less than 'a' ?
1719: DA1E17  	        jp      C,NOCHNG        ; Yes - don't change
171C: E65F    	        and     %01011111       ; Make upper case
171E: B9      	NOCHNG: cp      C               ; Same as in buffer ?
171F: CA0417  	        jp      Z,NXTBYT        ; Yes - keep testing
1722: E1      	        pop     HL              ; Get back start of word
1723: C3F216  	        jp      SEARCH          ; Look at next word
              	
1726: 48      	MATCH:  ld      C,B             ; Word found - Save token value
1727: F1      	        pop     AF              ; Throw away return
1728: EB      	        ex      DE,HL
1729: C9      	        ret                     ; Return to "RETNAD"
172A: EB      	RETNAD: ex      DE,HL           ; Get address in string
172B: 79      	        ld      A,C             ; Get token value
172C: C1      	        pop     BC              ; Restore buffer length
172D: D1      	        pop     DE              ; Get destination address
172E: 23      	MOVDIR: inc     HL              ; Next source in buffer
172F: 12      	        ld      (DE),A          ; Put byte in buffer
1730: 13      	        inc     DE              ; Move up buffer
1731: 0C      	        inc     C               ; Increment length of buffer
1732: D63A    	        sub     ':'             ; End of statement?
1734: CA3C17  	        jp      Z,SETLIT        ; Jump if multi-statement line
1737: FE49    	        cp      ZDATA-$3A       ; Is it DATA statement ?
1739: C23F17  	        jp      NZ,TSTREM       ; No - see if REM
173C: 329381  	SETLIT: ld      (DATFLG),A      ; Set literal flag
173F: D654    	TSTREM: sub     ZREM-$3A        ; Is it REM?
1741: C2AF16  	        jp      NZ,CRNCLP       ; No - Leave flag
1744: 47      	        ld      B,A             ; Copy rest of buffer
1745: 7E      	NXTCHR: ld      A,(HL)          ; Get byte
1746: B7      	        or      A               ; End of line ?
1747: CA5517  	        jp      Z,ENDBUF        ; Yes - Terminate buffer
174A: B8      	        cp      B               ; End of statement ?
174B: CA2E17  	        jp      Z,MOVDIR        ; Yes - Get next one
174E: 23      	CPYLIT: inc     HL              ; Move up source string
174F: 12      	        ld      (DE),A          ; Save in destination
1750: 0C      	        inc     C               ; Increment length
1751: 13      	        inc     DE              ; Move up destination
1752: C34517  	        jp      NXTCHR          ; Repeat
              	
1755: 213581  	ENDBUF: ld      HL,BUFFER-1     ; Point to start of buffer
1758: 12      	        ld      (DE),A          ; Mark end of buffer (A = 00)
1759: 13      	        inc     DE
175A: 12      	        ld      (DE),A          ; A = 00
175B: 13      	        inc     DE
175C: 12      	        ld      (DE),A          ; A = 00
175D: C9      	        ret
              	
175E: 3AA480  	DODEL:  ld      A,(NULFLG)      ; Get null flag status
1761: B7      	        or      A               ; Is it zero?
1762: 3E00    	        ld      A,$00           ; Zero A - Leave flags
1764: 32A480  	        ld      (NULFLG),A      ; Zero null flag
1767: C27217  	        jp      NZ,ECHDEL       ; Set - Echo it
176A: 05      	        dec     B               ; Decrement length
176B: CA8F17  	        jp      Z,GETLIN        ; Get line again if empty
176E: CD1A18  	        call    OUTC            ; Output null character
1771: 3E      	        defb    $3E             ; Skip "dec B"
1772: 05      	ECHDEL: dec     B               ; Count bytes in buffer
1773: 2B      	        dec     HL              ; Back space buffer
1774: CA8617  	        jp      Z,OTKLN         ; No buffer - Try again
1777: 7E      	        ld      A,(HL)          ; Get deleted byte
1778: CD1A18  	        call    OUTC            ; Echo it
177B: C39817  	        jp      MORINP          ; Get more input
              	
177E: 05      	DELCHR: dec     B               ; Count bytes in buffer
177F: 2B      	        dec     HL              ; Back space buffer
1780: CD1A18  	        call    OUTC            ; Output character in A
1783: C29817  	        jp      NZ,MORINP       ; Not end - Get more
1786: CD1A18  	OTKLN:  call    OUTC            ; Output character in A
1789: CDEB1C  	KILIN:  call    PRNTCRLF        ; Output CRLF
178C: C38F17  	        jp      TTYLIN          ; Get line again
              	
178F:         	GETLIN:
178F: 213681  	TTYLIN: ld      HL,BUFFER       ; Get a line by character
1792: 0601    	        ld      B,$01           ; Set buffer as empty
1794: AF      	        xor     A
1795: 32A480  	        ld      (NULFLG),A      ; Clear null flag
1798: CD5B18  	MORINP: call    CLOTST          ; Get character and test ^O
179B: 4F      	        ld      C,A             ; Save character in C
179C: FE7F    	        cp      DEL             ; Delete character?
179E: CA5E17  	        jp      Z,DODEL         ; Yes - Process it
17A1: 3AA480  	        ld      A,(NULFLG)      ; Get null flag
17A4: B7      	        or      A               ; Test null flag status
17A5: CAB117  	        jp      Z,PROCES        ; Reset - Process character
17A8: 3E00    	        ld      A,$00           ; Set a null
17AA: CD1A18  	        call    OUTC            ; Output null
17AD: AF      	        xor     A               ; Clear A
17AE: 32A480  	        ld      (NULFLG),A      ; Reset null flag
17B1: 79      	PROCES: ld      A,C             ; Get character
17B2: FE07    	        cp      CTRLG           ; Bell?
17B4: CAF117  	        jp      Z,PUTCTL        ; Yes - Save it
17B7: FE03    	        cp      CTRLC           ; Is it control "C"?
17B9: CCE617  	        call    Z,GMNCR         ; Yes - exit from graphic mode & Output CRLF
17BC: 37      	        scf                     ; Flag break
17BD: C8      	        ret     Z               ; Return if control "C"
17BE: FE0D    	        cp      CR              ; Is it enter?
17C0: CAE11C  	        jp      Z,ENDINP        ; Yes - Terminate input
17C3: FE15    	        cp      CTRLU           ; Is it control "U"?
17C5: CA8917  	        jp      Z,KILIN         ; Yes - Get another line
17C8: FE08    	        cp      BKSP            ; Is it backspace?
17CA: CA7E17  	        jp      Z,DELCHR        ; Yes - Delete character
17CD: FE12    	        cp      CTRLR           ; Is it control "R"?
17CF: C2EC17  	        jp      NZ,PUTBUF       ; No - Put in buffer
17D2: C5      	        push    BC              ; Save buffer length
17D3: D5      	        push    DE              ; Save DE
17D4: E5      	        push    HL              ; Save buffer address
17D5: 3600    	        ld      (HL),$00        ; Mark end of buffer
17D7: CD2F3B  	        call    OUTNCR          ; Output and do CRLF
17DA: 213681  	        ld      HL,BUFFER       ; Point to buffer start
17DD: CDAA23  	        call    PRS             ; Output buffer
17E0: E1      	        pop     HL              ; Restore buffer address
17E1: D1      	        pop     DE              ; Restore DE
17E2: C1      	        pop     BC              ; Restore buffer length
17E3: C39817  	        jp      MORINP          ; Get another character
17E6: CD0715  	GMNCR:  call    EXITGM          ; exit from graphic mode
17E9: C3EB1C  	        jp      PRNTCRLF        ; output CRLF
              	
17EC: FE20    	PUTBUF: cp      SPC             ; Is it a control code?
17EE: DA9817  	        jp      C,MORINP        ; Yes - Ignore
17F1: 78      	PUTCTL: ld      A,B             ; Get number of bytes in buffer
17F2: FE59    	        cp      $58+$01         ; Test for line overflow
17F4: 3E08    	        ld      A,BKSP          ; Set a bell
17F6: D20318  	        jp      NC,OUTNBS       ; Ring bell if buffer full
17F9: 79      	        ld      A,C             ; Get character
17FA: 71      	        ld      (HL),C          ; Save in buffer
17FB: 32B181  	        ld      (LSTBIN),A      ; Save last input byte
17FE: 23      	        inc     HL              ; Move up buffer
17FF: 04      	        inc     B               ; Increment length
1800: C39817  	OUTIT:  jp      MORINP          ; Get another character
              	
1803: CD1A18  	OUTNBS: call    OUTC            ; Output bell and back over it
              	        ;ld      A,BKSP          ; send back space
              	        ;call    OUTC            ;
1806: C30018  	        jp      OUTIT           ; get more chars
              	
1809: 7C      	CPDEHL: ld      A,H             ; Get H
180A: 92      	        sub     D               ; Compare with D
180B: C0      	        ret     NZ              ; Different - Exit
180C: 7D      	        ld      A,L             ; Get L
180D: 93      	        sub     E               ; Compare with E
180E: C9      	        ret                     ; Return status
              	
180F: 7E      	CHKSYN: ld      A,(HL)          ; Check syntax of character
1810: E3      	        ex      (SP),HL         ; Address of test byte
1811: BE      	        cp      (HL)            ; Same as in code string?
1812: 23      	        inc     HL              ; Return address
1813: E3      	        ex      (SP),HL         ; Put it back
1814: CA321A  	        jp      Z,GETCHR        ; Yes - Get next character
1817: C32D15  	        jp      SNERR           ; Different - ?SN Error
              	
181A: F5      	OUTC:   push    AF              ; Save character
181B: 3AA580  	        ld      A,(CTLOFG)      ; Get control "O" flag
181E: B7      	        or      A               ; Is it set?
181F: C2DF23  	        jp      NZ,POPAF        ; Yes - don't output
1822: F1      	        pop     AF              ; Restore character
1823: C5      	        push    BC              ; Save buffer length
1824: F5      	        push    AF              ; Save character
1825: FE20    	        cp      SPC             ; Is it a control code?
1827: DA3E18  	        jp      C,DINPOS        ; Yes - Don't inc POS(X)
182A: 3AA280  	        ld      A,(LWIDTH)      ; Get line width
182D: 47      	        ld      B,A             ; To B
182E: 3A9081  	        ld      A,(CURPOS)      ; Get cursor position
1831: 04      	        inc     B               ; Width 255?
1832: CA3A18  	        jp      Z,INCLEN        ; Yes - No width limit
1835: 05      	        dec     B               ; Restore width
1836: B8      	        cp      B               ; At end of line?
1837: CCEB1C  	        call    Z,PRNTCRLF      ; Yes - output CRLF
183A: 3C      	INCLEN: inc     A               ; Move on one character
183B: 329081  	        ld      (CURPOS),A      ; Save new position
183E: AF      	DINPOS: xor     A
183F: 322982  	        ld      (KBDNPT),A      ; set flag for no char from keyboard
1842: F1      	        pop     AF              ; Restore character
1843: C1      	        pop     BC              ; Restore buffer length
1844: F5      	        push    AF
1845: CD4D18  	        call    SND2VID         ; send char to video
1848: F1      	        pop     AF
1849: CD123B  	        call    MONOUT          ; send char to serial if enabled
184C: C9      	        ret
              	
              	; print char to video if cursor is on
184D: 32EC81  	SND2VID:ld      (CHR4VID),A     ; store A
1850: 3AEB81  	        ld      A,(PRNTVIDEO)   ; check print-on-video
1853: B7      	        or      A               ; is it off?
1854: C8      	        ret     Z               ; yes, so return
1855: F3      	        di                      ; disable INTs
1856: CDAC06  	        call    CHAR2VID        ; cursor is on, so print char on screen
1859: FB      	        ei                      ; re-enable INTs
185A: C9      	        ret                     ; return to caller
              	
185B: CD5A30  	CLOTST: call    GETINP          ; Get input character
185E: FE0F    	        cp      CTRLO           ; Is it control "O"?
1860: C0      	        ret     NZ              ; No don't flip flag
1861: 3AA580  	        ld      A,(CTLOFG)      ; Get flag
1864: 2F      	        cpl                     ; Flip it
1865: 32A580  	        ld      (CTLOFG),A      ; Put it back
1868: A7      	        and     A               ; is output enabled?
1869: CC3608  	        call    Z,CURSOR_ON     ; yes, so cursor on
186C: AF      	        xor     A               ; Null character
186D: C9      	        ret
              	
              	; LIST: list the program stored into memory
186E: C1      	LIST:   pop     BC              ; rubbish - not needed (legacy from original call of LIST)
186F: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
1870: CD321A  	        call    GETCHR          ; Get next character
1873: CABF18  	        jp      Z,LSTALL        ; list all if nothing follows
1876: FEBB    	        cp      ZMINUS          ; is it '-'?
1878: 2020    	        jr      NZ,LST01        ; no, look for a line number
187A: 110000  	        ld      DE,$0000        ; yes, set search from 0
187D: CD5A19  	        call    SRCHLIN         ; find address of line number
1880: ED43EF81	        ld      (TMPBFR1),BC    ; store address of starting line
1884: CD0F18  	        call    CHKSYN          ; skip '-'
1887: BB      	        defb    ZMINUS
1888: CD021B  	        call    ATOH            ; now, look for another number (ASCII number to DE)
188B: CD5A19  	        call    SRCHLIN         ; find address of line number
188E: ED43F181	        ld      (TMPBFR2),BC    ; store address of ending line
1892: ED4BEF81	        ld      BC,(TMPBFR1)    ; retrieve address of starting line
1896: C5      	        push    BC              ; store address of line for later use
1897: C3F118  	        jp      LISTLP          ; go listing
189A: CD021B  	LST01:  call    ATOH            ; get a line number (ASCII number to DE)
189D: CD5A19  	LST01H: call    SRCHLIN         ; find address of line number
18A0: ED43EF81	        ld      (TMPBFR1),BC    ; store address of starting line
18A4: ED43F181	        ld      (TMPBFR2),BC    ; same address for ending line (we'll change later if needed)
18A8: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
18A9: CD321A  	        call    GETCHR          ; Get next character
18AC: CABB18  	        jp      Z,LST06         ; nothing follows, so ending & starting lines are the same
18AF: FEBB    	        cp      ZMINUS          ; is it '-'?
18B1: CAD718  	        jp      Z,LST03         ; yes, read ending line
18B4: CD5A19  	LST04:  call    SRCHLIN         ; find address of line number
18B7: ED43F181	        ld      (TMPBFR2),BC    ; set address of ending line
18BB: C5      	LST06:  push    BC              ; store address for later use
18BC: C3F118  	        jp      LISTLP          ; jump to list
18BF: 11F9FF  	LSTALL  ld      DE,65529        ; set ending line to max. allowed line number
18C2: CD5A19  	        call    SRCHLIN         ; get address of last line
18C5: ED43F181	        ld      (TMPBFR2),BC    ; store it
18C9: 110000  	        ld      DE,$0000        ; set start to first line in memory
18CC: CD5A19  	        call    SRCHLIN         ; get address of first line
18CF: ED43EF81	        ld      (TMPBFR1),BC    ; store it
18D3: C5      	        push    BC              ; store address of starting line for later use
18D4: C3F118  	        jp      LISTLP          ; start printing
18D7: CD0F18  	LST03:  call    CHKSYN          ; skip '-'
18DA: BB      	        defb    ZMINUS
18DB: CD021B  	        call    ATOH            ; look for another number (return into DE)
18DE: 7A      	        ld      A,D
18DF: B3      	        or      E               ; is line=0?
18E0: 2003    	        jr      NZ,LST05        ; no, jump over
18E2: 11F9FF  	        ld      DE,65529        ; yes set last valid line number
18E5: CD5A19  	LST05:  call    SRCHLIN         ; find address of line number
18E8: ED43F181	        ld      (TMPBFR2),BC    ; store address of ending line
18EC: ED4BEF81	        ld      BC,(TMPBFR1)    ; retrieve address of starting line
18F0: C5      	        push    BC              ; store it for later use
18F1: E1      	LISTLP: pop     HL              ; Restore address of line
18F2: 4E      	        ld      C,(HL)          ; Get LSB of next line
18F3: 23      	        inc     HL
18F4: 46      	        ld      B,(HL)          ; Get MSB of next line
18F5: 23      	        inc     HL
18F6: 78      	        ld      A,B             ; BC = 0 (End of program)?
18F7: B1      	        or      C
18F8: CA8715  	        jp      Z,PRNTOK        ; Yes - Go to command mode
18FB: CD5D1A  	        call    TSTBRK          ; Test for break key
18FE: CD6019  	        call    TSTSPC          ; test for space
1901: C5      	        push    BC              ; Save address of next line
1902: 3AE481  	        ld      A,(SCR_CURS_X)  ; load current X pos of cursor
1905: A7      	        and     A               ; is it at the beginning of a new line?
1906: 200B    	        jr      NZ,LST08        ; No, jump over
1908: 3E0D    	        ld      A,CR            ; yes, so just send a CR
190A: CD123B  	        call    MONOUT          ; to serial if it's open
190D: AF      	        xor     A               ; then, set cursor
190E: 329081  	        ld      (CURPOS),A      ; to position 0
1911: 1803    	        jr      LST07           ; and continue
1913: CDEB1C  	LST08:  call    PRNTCRLF        ; output CRLF
1916: 5E      	LST07:  ld      E,(HL)          ; Get LSB of line number
1917: 23      	        inc     HL
1918: 56      	        ld      D,(HL)          ; Get MSB of line number
1919: 23      	        inc     HL
191A: E5      	        push    HL              ; Save address of line start
191B: EB      	        ex      DE,HL           ; Line number to HL
191C: CD3E2D  	        call    PRNTHL          ; Output line number in decimal
191F: 3E20    	        ld      A,SPC           ; Space after line number
1921: E1      	        pop     HL              ; Restore start of line address
1922: CD1A18  	LSTLP2: call    OUTC            ; Output character in A
1925: 7E      	LSTLP3: ld      A,(HL)          ; Get next byte in line
1926: B7      	        or      A               ; End of line?
1927: 23      	        inc     HL              ; To next byte in line
1928: CA4C19  	        jp      Z,NXTLN         ; Yes - check next line
192B: F22219  	        jp      P,LSTLP2        ; No token - output it
192E: D67F    	        sub     ZEND-1          ; Find and output word
1930: 4F      	        ld      C,A             ; Token offset+1 to C
1931: 11FD0F  	        ld      DE,WORDS        ; Reserved word list
1934: 1A      	FNDTOK: ld      A,(DE)          ; Get character in list
1935: 13      	        inc     DE              ; Move on to next
1936: B7      	        or      A               ; Is it start of word?
1937: F23419  	        jp      P,FNDTOK        ; No - Keep looking for word
193A: 0D      	        dec     C               ; Count words
193B: C23419  	        jp      NZ,FNDTOK       ; Not there - keep looking
193E: E67F    	OUTWRD: and     %01111111       ; Strip bit 7
1940: CD1A18  	        call    OUTC            ; Output character
1943: 1A      	        ld      A,(DE)          ; Get next character
1944: 13      	        inc     DE              ; Move on to next
1945: B7      	        or      A               ; Is it end of word?
1946: F23E19  	        jp      P,OUTWRD        ; No - output the rest
1949: C32519  	        jp      LSTLP3          ; Next byte in line
194C: D1      	NXTLN:  pop     DE              ; recover address of current line
194D: 2AF181  	        ld      HL,(TMPBFR2)    ; address of last line to print
1950: CD353B  	        call    CMP16           ; check if current line is over last printable line
1953: DA8715  	        jp      C,PRNTOK        ; finish - leave & print OK
1956: D5      	        push    DE              ; store address of current line
1957: C3F118  	        jp      LISTLP          ; continue listing
195A: E5      	SRCHLIN:push    HL              ; store HL (this is needed because HL store the pointer to the input buffer)
195B: CD3316  	        call    SRCHLN          ; search for line number in DE
195E: E1      	        pop     HL              ; retrieve HL
195F: C9      	        ret                     ; return to caller
              	
              	; during LISTing, check if PAUSE is pressed, then pause listing and
              	; wait for another pressing of PAUSE to continue or CTRL-C/BREAK to exit
1960: 3A2B82  	TSTSPC: ld      A,(TMPKEYBFR)   ; Get input character
1963: FE20    	        cp      SPC             ; Is it SPACE?
1965: C0      	        ret     NZ              ; No, return
1966: CD5A30  	WTSPC   call    GETINP          ; Yes, stop listing and wait for another space or BREAK
1969: FE20    	        cp      SPC             ; is it SPACE?
196B: 2005    	        jr      NZ,CNTWTSP      ; no, continue
196D: AF      	        xor     A
196E: 322B82  	        ld      (TMPKEYBFR),A   ; reset key
1971: C9      	        ret                     ; return to caller
1972: FE03    	CNTWTSP:cp      CTRLC           ; is it CTRL-C/BREAK?
1974: 20F0    	        jr      NZ,WTSPC        ; no, loop
1976: C3690F  	        jp      BRKRET          ; exit and output "Ok"
              	
              	
1979: 3E64    	FOR:    ld      A,$64           ; Flag "FOR" assignment
197B: 32B081  	        ld      (FORFLG),A      ; Save "FOR" flag
197E: CDEC1B  	        call    LET             ; Set up initial index
1981: C1      	        pop     BC              ; Drop RETurn address
1982: E5      	        push    HL              ; Save code string address
1983: CDD51B  	        call    DATA            ; Get next statement address
1986: 22AC81  	        ld      (LOOPST),HL     ; Save it for start of loop
1989: 210200  	        ld      HL,$0002        ; Offset for "FOR" block
198C: 39      	        add     HL,SP           ; Point to it
198D: CDBA14  	FORSLP: call    LOKFOR          ; Look for existing "FOR" block
1990: D1      	        pop     DE              ; Get code string address
1991: C2A919  	        jp      NZ,FORFND       ; No nesting found
1994: 09      	        add     HL,BC           ; Move into "FOR" block
1995: D5      	        push    DE              ; Save code string address
1996: 2B      	        dec     HL
1997: 56      	        ld      D,(HL)          ; Get MSB of loop statement
1998: 2B      	        dec     HL
1999: 5E      	        ld      E,(HL)          ; Get LSB of loop statement
199A: 23      	        inc     HL
199B: 23      	        inc     HL
199C: E5      	        push    HL              ; Save block address
199D: 2AAC81  	        ld      HL,(LOOPST)     ; Get address of loop statement
19A0: CD0918  	        call    CPDEHL          ; Compare the FOR loops
19A3: E1      	        pop     HL              ; Restore block address
19A4: C28D19  	        jp      NZ,FORSLP       ; Different FORs - Find another
19A7: D1      	        pop     DE              ; Restore code string address
19A8: F9      	        ld      SP,HL           ; Remove all nested loops
              	
19A9: EB      	FORFND: ex      DE,HL           ; Code string address to HL
19AA: 0E08    	        ld      C,$08
19AC: CDEA14  	        call    CHKSTK          ; Check for 8 levels of stack
19AF: E5      	        push    HL              ; Save code string address
19B0: 2AAC81  	        ld      HL,(LOOPST)     ; Get first statement of loop
19B3: E3      	        ex      (SP),HL         ; Save and restore code string
19B4: E5      	        push    HL              ; Re-save code string address
19B5: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line number
19B8: E3      	        ex      (SP),HL         ; Save and restore code string
19B9: CDAA1E  	        call    TSTNUM          ; Make sure it's a number
19BC: CD0F18  	        call    CHKSYN          ; Make sure "TO" is next
19BF: B4      	        defb    ZTO             ; "TO" token
19C0: CDA71E  	        call    GETNUM          ; Get "TO" expression value
19C3: E5      	        push    HL              ; Save code string address
19C4: CDF02B  	        call    BCDEFP          ; Move "TO" value to BCDE
19C7: E1      	        pop     HL              ; Restore code string address
19C8: C5      	        push    BC              ; Save "TO" value in block
19C9: D5      	        push    DE
19CA: 010081  	        ld      BC,$8100        ; BCDE - 1 (default STEP)
19CD: 51      	        ld      D,C             ; C=0
19CE: 5A      	        ld      E,D             ; D=0
19CF: 7E      	        ld      A,(HL)          ; Get next byte in code string
19D0: FEB9    	        cp      ZSTEP           ; See if "STEP" is stated
19D2: 3E01    	        ld      A,$01           ; Sign of step = 1
19D4: C2E519  	        jp      NZ,SAVSTP       ; No STEP given - Default to 1
19D7: CD321A  	        call    GETCHR          ; Jump over "STEP" token
19DA: CDA71E  	        call    GETNUM          ; Get step value
19DD: E5      	        push    HL              ; Save code string address
19DE: CDF02B  	        call    BCDEFP          ; Move STEP to BCDE
19E1: CDA42B  	        call    TSTSGN          ; Test sign of FPREG
19E4: E1      	        pop     HL              ; Restore code string address
19E5: C5      	SAVSTP: push    BC              ; Save the STEP value in block
19E6: D5      	        push    DE
19E7: F5      	        push    AF              ; Save sign of STEP
19E8: 33      	        inc     SP              ; Don't save flags
19E9: E5      	        push    HL              ; Save code string address
19EA: 2AB381  	        ld      HL,(BRKLIN)     ; Get address of index variable
19ED: E3      	        ex      (SP),HL         ; Save and restore code string
19EE: 0681    	PUTFID: ld      B,ZFOR          ; "FOR" block marker
19F0: C5      	        push    BC              ; Save it
19F1: 33      	        inc     SP              ; Don't save C
              	
19F2: CD5D1A  	RUNCNT: call    TSTBRK          ; Execution driver - Test break
19F5: 22B381  	        ld      (BRKLIN),HL     ; Save code address for break
19F8: 7E      	        ld      A,(HL)          ; Get next byte in code string
19F9: FE3A    	        cp      ':'             ; Multi statement line?
19FB: CA121A  	        jp      Z,EXCUTE        ; Yes - Execute it
19FE: B7      	        or      A               ; End of line?
19FF: C22D15  	        jp      NZ,SNERR        ; No - Syntax error
1A02: 23      	        inc     HL              ; Point to address of next line
1A03: 7E      	        ld      A,(HL)          ; Get LSB of line pointer
1A04: 23      	        inc     HL
1A05: B6      	        or      (HL)            ; Is it zero (End of prog)?
1A06: CA841A  	        jp      Z,ENDPRG        ; Yes - Terminate execution
1A09: 23      	        inc     HL              ; Point to line number
1A0A: 5E      	        ld      E,(HL)          ; Get LSB of line number
1A0B: 23      	        inc     HL
1A0C: 56      	        ld      D,(HL)          ; Get MSB of line number
1A0D: EB      	        ex      DE,HL           ; Line number to HL
1A0E: 22AF80  	        ld      (LINEAT),HL     ; Save as current line number
1A11: EB      	        ex      DE,HL           ; Line number back to DE
1A12: CD321A  	EXCUTE: call    GETCHR          ; Get key word
1A15: 11F219  	        ld      DE,RUNCNT       ; Where to RETurn to
1A18: D5      	        push    DE              ; Save for RETurn
1A19: C8      	IFJMP:  ret     Z               ; Go to RUNCNT if end of STMT
              	
1A1A: D680    	ONJMP:  sub     ZEND            ; Is it a token?
1A1C: DAEC1B  	        jp      C,LET           ; No - try to assign it
1A1F: FE33    	        cp      ZNEW+1-ZEND     ; END to NEW ?
1A21: D22D15  	        jp      NC,SNERR        ; Not a key word - ?SN Error
1A24: 07      	        rlca                    ; Double it
1A25: 4F      	        ld      C,A             ; BC = Offset into table
1A26: 0600    	        ld      B,0
1A28: EB      	        ex      DE,HL           ; Save code string address
1A29: 217811  	        ld      HL,WORDTB       ; Keyword address table
1A2C: 09      	        add     HL,BC           ; Point to routine address
1A2D: 4E      	        ld      C,(HL)          ; Get LSB of routine address
1A2E: 23      	        inc     HL
1A2F: 46      	        ld      B,(HL)          ; Get MSB of routine address
1A30: C5      	        push    BC              ; Save routine address
1A31: EB      	        ex      DE,HL           ; Restore code string address
              	
              	; get a char from input buffer: exit with NC if character found is
              	; not a number; exit with Z if nothing found; char is into A
1A32: 23      	GETCHR: inc     HL              ; Point to next character
1A33: 7E      	        ld      A,(HL)          ; Get next code string byte
1A34: FE3A    	        cp      ':'             ; Z if ':'
1A36: D0      	        ret     NC              ; NC if > "9"
1A37: FE20    	        cp      SPC
1A39: CA321A  	        jp      Z,GETCHR        ; Skip over spaces
1A3C: FE30    	        cp      '0'
1A3E: 3F      	        ccf                     ; NC if < '0'
1A3F: 3C      	        inc     A               ; Test for zero - Leave carry
1A40: 3D      	        dec     A               ; Z if Null
1A41: C9      	        ret
              	
1A42: EB      	RESTOR: ex      DE,HL           ; Save code string address
1A43: 2A3381  	        ld      HL,(BASTXT)     ; Point to start of program
1A46: CA571A  	        jp      Z,RESTNL        ; Just RESTORE - reset pointer
1A49: EB      	        ex      DE,HL           ; Restore code string address
1A4A: CD021B  	        call    ATOH            ; Get line number to DE
1A4D: E5      	        push    HL              ; Save code string address
1A4E: CD3316  	        call    SRCHLN          ; Search for line number in DE
1A51: 60      	        ld      H,B             ; HL = Address of line
1A52: 69      	        ld      L,C
1A53: D1      	        pop     DE              ; Restore code string address
1A54: D2AB1B  	        jp      NC,ULERR        ; ?UL Error if not found
1A57: 2B      	RESTNL: dec     HL              ; Byte before DATA statement
1A58: 22C181  	UPDATA: ld      (NXTDAT),HL     ; Update DATA pointer
1A5B: EB      	        ex      DE,HL           ; Restore code string address
1A5C: C9      	        ret
              	
              	
1A5D: DF      	TSTBRK: rst     $18             ; Check input status
1A5E: C8      	        ret     Z               ; No key, go back
1A5F: D7      	        rst     $10             ; Get the key into A
1A60: FE1B    	        cp      ESC             ; Escape key?
1A62: 2811    	        jr      Z,BRK           ; Yes, break
1A64: FE03    	        cp      CTRLC           ; <Ctrl-C>
1A66: 280D    	        jr      Z,BRK           ; Yes, break
1A68: FE13    	        cp      CTRLS           ; Stop scrolling?
1A6A: C0      	        ret     NZ              ; Other key, ignore
              	
              	
1A6B: D7      	STALL:  rst     $10             ; Wait for key
1A6C: FE11    	        cp      CTRLQ           ; Resume scrolling?
1A6E: C8      	        ret     Z               ; Release the chokehold
1A6F: FE03    	        cp      CTRLC           ; Second break?
1A71: 2807    	        jr      Z,STOP          ; Break during hold exits prog
1A73: 18F6    	        jr      STALL           ; Loop until <Ctrl-Q> or <brk>
              	
1A75: 3EFF    	BRK:    ld      A,$FF           ; Set BRKFLG
1A77: 32A980  	        ld      (BRKFLG),A      ; Store it
              	
1A7A: C0      	STOP:   ret     NZ              ; Exit if anything else
1A7B: F6      	        defb    $F6             ; Flag "STOP"
1A7C: C0      	PEND:   ret     NZ              ; Exit if anything else
1A7D: 22B381  	        ld      (BRKLIN),HL     ; Save point of break
1A80: 21      	        defb    $21             ; Skip "OR 11111111B"
1A81: F6FF    	INPBRK: or      %11111111       ; Flag "Break" wanted
1A83: C1      	        pop     BC              ; Return not needed and more
1A84: 2AAF80  	ENDPRG: ld      HL,(LINEAT)     ; Get current line number
1A87: F5      	        push    AF              ; Save STOP / END status
1A88: 7D      	        ld      A,L             ; Is it direct break?
1A89: A4      	        and     H
1A8A: 3C      	        inc     A               ; Line is -1 if direct break
1A8B: CA971A  	        jp      Z,NOLIN         ; Yes - No line number
1A8E: 22B781  	        ld      (ERRLIN),HL     ; Save line of break
1A91: 2AB381  	        ld      HL,(BRKLIN)     ; Get point of break
1A94: 22B981  	        ld      (CONTAD),HL     ; Save point to CONTinue
1A97: AF      	NOLIN:  xor     A
1A98: 32A580  	        ld      (CTLOFG),A      ; Enable output
1A9B: CDD91C  	        call    STTLIN          ; Start a new line
1A9E: F1      	        pop     AF              ; Restore STOP / END status
1A9F: 21B014  	        ld      HL,BRKMSG       ; "Break" message
1AA2: C2A81A  	        jp      NZ,ERRINT       ; "in line" wanted?
1AA5: C38715  	        jp      PRNTOK          ; Go to command mode
1AA8: CD0715  	ERRINT: call    EXITGM          ; exit from graphics mode
1AAB: C36515  	        jp      ERRIN           ; print message
              	
              	
1AAE: 21FFFF  	CONT:   ld      HL,-1           ; reset...
1AB1: 22B180  	        ld      (HLPLN),HL      ; ...HELP line register
1AB4: 2AB981  	        ld      HL,(CONTAD)     ; Get CONTinue address
1AB7: 7C      	        ld      A,H             ; Is it zero?
1AB8: B5      	        or      L
1AB9: 1E20    	        ld      E,CN            ; ?CN Error
1ABB: CA4115  	        jp      Z,ERROR         ; Yes - output "?CN Error"
1ABE: EB      	        ex      DE,HL           ; Save code string address
1ABF: 2AB781  	        ld      HL,(ERRLIN)     ; Get line of last break
1AC2: 22AF80  	        ld      (LINEAT),HL     ; Set up current line number
1AC5: EB      	        ex      DE,HL           ; Restore code string address
1AC6: C9      	        ret                     ; CONTinue where left off
              	
1AC7: E5      	ACCSUM: push    HL              ; Save address in array
1AC8: 2AA680  	        ld      HL,(CHKSUM)     ; Get check sum
1ACB: 0600    	        ld      B,$00           ; BC - Value of byte
1ACD: 4F      	        ld      C,A
1ACE: 09      	        add     HL,BC           ; Add byte to check sum
1ACF: 22A680  	        ld      (CHKSUM),HL     ; Re-save check sum
1AD2: E1      	        pop     HL              ; Restore address in array
1AD3: C9      	        ret
              	
1AD4: 7E      	CHKLTR: ld      A,(HL)          ; Get byte
1AD5: FE41    	        cp      'A'             ; < 'a' ?
1AD7: D8      	        ret     C               ; Carry set if not letter
1AD8: FE5B    	        cp      'Z'+1           ; > 'z' ?
1ADA: 3F      	        ccf
1ADB: C9      	        ret                     ; Carry set if not letter
              	
1ADC: CD321A  	FPSINT: call    GETCHR          ; Get next character
1ADF: CDA71E  	POSINT: call    GETNUM          ; Get integer 0 to 32767
1AE2: CDA42B  	DEPINT: call    TSTSGN          ; Test sign of FPREG
1AE5: FAFD1A  	        jp      M,FCERR         ; Negative - ?FC Error
1AE8: 3ACC81  	DEINT:  ld      A,(FPEXP)       ; Get integer value to DE
1AEB: FE90    	        cp      $80+$10         ; Exponent in range (16 bits)?
1AED: DA4C2C  	        jp      C,FPINT         ; Yes - convert it
1AF0: 018090  	        ld      BC,$9080        ; BCDE = -32768
1AF3: 110000  	        ld      DE,$0000
1AF6: E5      	        push    HL              ; Save code string address
1AF7: CD1F2C  	        call    CMPNUM          ; Compare FPREG with BCDE
1AFA: E1      	        pop     HL              ; Restore code string address
1AFB: 51      	        ld      D,C             ; MSB to D
1AFC: C8      	        ret     Z               ; Return if in range
1AFD: 1E08    	FCERR:  ld      E,FC            ; ?FC Error
1AFF: C34115  	        jp      ERROR           ; Output error-
              	
1B02: 2B      	ATOH:   dec     HL              ; ASCII number to DE binary
1B03: 110000  	GETLN:  ld      DE,$0000        ; Get number to DE
1B06: CD321A  	GTLNLP: call    GETCHR          ; Get next character
1B09: D0      	        ret     NC              ; Exit if not a digit
1B0A: E5      	        push    HL              ; Save code string address
1B0B: F5      	        push    AF              ; Save digit
1B0C: 219819  	        ld      HL,65529/10     ; Largest number 65529
1B0F: CD0918  	        call    CPDEHL          ; Number in range?
1B12: DA2D15  	        jp      C,SNERR         ; No - ?SN Error
1B15: 62      	        ld      H,D             ; HL = Number
1B16: 6B      	        ld      L,E
1B17: 19      	        add     HL,DE           ; Times 2
1B18: 29      	        add     HL,HL           ; Times 4
1B19: 19      	        add     HL,DE           ; Times 5
1B1A: 29      	        add     HL,HL           ; Times 10
1B1B: F1      	        pop     AF              ; Restore digit
1B1C: D630    	        sub     '0'             ; Make it 0 to 9
1B1E: 5F      	        ld      E,A             ; DE = Value of digit
1B1F: 1600    	        ld      D,0
1B21: 19      	        add     HL,DE           ; Add to number
1B22: EB      	        ex      DE,HL           ; Number to DE
1B23: E1      	        pop     HL              ; Restore code string address
1B24: C3061B  	        jp      GTLNLP          ; Go to next character
              	
1B27: CA6316  	CLEAR:  jp      Z,INTVAR        ; Just "CLEAR" Keep parameters
1B2A: CDDF1A  	        call    POSINT          ; Get integer 0 to 32767 to DE
1B2D: 2B      	        dec     HL              ; Cancel increment
1B2E: CD321A  	        call    GETCHR          ; Get next character
1B31: E5      	        push    HL              ; Save code string address
1B32: 2A9481  	        ld      HL,(LSTRAM)     ; Get end of RAM
1B35: CA4A1B  	        jp      Z,STORED        ; No value given - Use stored
1B38: E1      	        pop     HL              ; Restore code string address
1B39: CD0F18  	        call    CHKSYN          ; Check for comma
1B3C: 2C      	        defb    ','
1B3D: D5      	        push    DE              ; Save number
1B3E: CDDF1A  	        call    POSINT          ; Get integer 0 to 32767
1B41: 2B      	        dec     HL              ; Cancel increment
1B42: CD321A  	        call    GETCHR          ; Get next character
1B45: C22D15  	        jp      NZ,SNERR        ; ?SN Error if more on line
1B48: E3      	        ex      (SP),HL         ; Save code string address
1B49: EB      	        ex      DE,HL           ; Number to DE
1B4A: 7D      	STORED: ld      A,L             ; Get LSB of new RAM top
1B4B: 93      	        sub     E               ; Subtract LSB of string space
1B4C: 5F      	        ld      E,A             ; Save LSB
1B4D: 7C      	        ld      A,H             ; Get MSB of new RAM top
1B4E: 9A      	        sbc     A,D             ; Subtract MSB of string space
1B4F: 57      	        ld      D,A             ; Save MSB
1B50: DA0215  	        jp      C,OMERR         ; ?OM Error if not enough mem
1B53: E5      	        push    HL              ; Save RAM top
1B54: 2ABB81  	        ld      HL,(PROGND)     ; Get program end
1B57: 012800  	        ld      BC,$28          ; 40 Bytes minimum working RAM
1B5A: 09      	        add     HL,BC           ; Get lowest address
1B5B: CD0918  	        call    CPDEHL          ; Enough memory?
1B5E: D20215  	        jp      NC,OMERR        ; No - ?OM Error
1B61: EB      	        ex      DE,HL           ; RAM top to HL
1B62: 22AD80  	        ld      (STRSPC),HL     ; Set new string space
1B65: E1      	        pop     HL              ; End of memory to use
1B66: 229481  	        ld      (LSTRAM),HL     ; Set new top of RAM
1B69: E1      	        pop     HL              ; Restore code string address
1B6A: C36316  	        jp      INTVAR          ; Initialise variables
              	
1B6D: E5      	RUN:    push    HL              ; store HL
1B6E: 21FFFF  	        ld      HL,-1           ; reset...
1B71: 22B180  	        ld      (HLPLN),HL      ; ...HELP line register
1B74: E1      	        pop     HL              ; retrieve HL
1B75: CA5F16  	        jp      Z,RUNFST        ; RUN from start if just RUN
1B78: CD6316  	        call    INTVAR          ; Initialise variables
1B7B: 01F219  	        ld      BC,RUNCNT       ; Execution driver loop
1B7E: C3911B  	        jp      RUNLIN          ; RUN from line number
              	
1B81: 0E03    	GOSUB:  ld      C,$03           ; 3 Levels of stack needed
1B83: CDEA14  	        call    CHKSTK          ; Check for 3 levels of stack
1B86: C1      	        pop     BC              ; Get return address
1B87: E5      	        push    HL              ; Save code string for RETURN
1B88: E5      	        push    HL              ; And for GOSUB routine
1B89: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line
1B8C: E3      	        ex      (SP),HL         ; Into stack - Code string out
1B8D: 3E8C    	        ld      A,ZGOSUB        ; "GOSUB" token
1B8F: F5      	        push    AF              ; Save token
1B90: 33      	        inc     SP              ; Don't save flags
              	
1B91: C5      	RUNLIN: push    BC              ; Save return address
1B92: CD021B  	GOTO:   call    ATOH            ; ASCII number to DE binary
1B95: CDD71B  	        call    REM             ; Get end of line
1B98: E5      	        push    HL              ; Save end of line
1B99: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line
1B9C: CD0918  	        call    CPDEHL          ; Line after current?
1B9F: E1      	        pop     HL              ; Restore end of line
1BA0: 23      	        inc     HL              ; Start of next line
1BA1: DC3616  	        call    C,SRCHLP        ; Line is after current line
1BA4: D43316  	        call    NC,SRCHLN       ; Line is before current line
1BA7: 60      	        ld      H,B             ; Set up code string address
1BA8: 69      	        ld      L,C
1BA9: 2B      	        dec     HL              ; Incremented after
1BAA: D8      	        ret     C               ; Line found
1BAB: 1E0E    	ULERR:  ld      E,UL            ; ?UL Error
1BAD: C34115  	        jp      ERROR           ; Output error message
              	
1BB0: C0      	RETURN: ret     NZ              ; Return if not just RETURN
1BB1: 16FF    	        ld      D,-1            ; Flag "GOSUB" search
1BB3: CDB614  	        call    BAKSTK          ; Look "GOSUB" block
1BB6: F9      	        ld      SP,HL           ; Kill all FORs in subroutine
1BB7: FE8C    	        cp      ZGOSUB          ; Test for "GOSUB" token
1BB9: 1E04    	        ld      E,RG            ; ?RG Error
1BBB: C24115  	        jp      NZ,ERROR        ; Error if no "GOSUB" found
1BBE: E1      	        pop     HL              ; Get RETURN line number
1BBF: 22AF80  	        ld      (LINEAT),HL     ; Save as current
1BC2: 23      	        inc     HL              ; Was it from direct statement?
1BC3: 7C      	        ld      A,H
1BC4: B5      	        or      L               ; Return to line
1BC5: C2CF1B  	        jp      NZ,RETLIN       ; No - Return to line
1BC8: 3AB181  	        ld      A,(LSTBIN)      ; Any INPUT in subroutine?
1BCB: B7      	        or      A               ; If so buffer is corrupted
1BCC: C28615  	        jp      NZ,POPNOK       ; Yes - Go to command mode
1BCF: 21F219  	RETLIN: ld      HL,RUNCNT       ; Execution driver loop
1BD2: E3      	        ex      (SP),HL         ; Into stack - Code string out
1BD3: 3E      	        defb    $3E             ; Skip "pop HL"
1BD4: E1      	NXTDTA: pop     HL              ; Restore code string address
              	
1BD5: 013A    	DATA:   defb    $01,$3A         ; ':' End of statement
1BD7: 0E00    	REM:    ld      C,$00           ; 00  End of statement
1BD9: 0600    	        ld      B,$00
1BDB: 79      	NXTSTL: ld      A,C             ; Statement and byte
1BDC: 48      	        ld      C,B
1BDD: 47      	        ld      B,A             ; Statement end byte
1BDE: 7E      	NXTSTT: ld      A,(HL)          ; Get byte
1BDF: B7      	        or      A               ; End of line?
1BE0: C8      	        ret     Z               ; Yes - Exit
1BE1: B8      	        cp      B               ; End of statement?
1BE2: C8      	        ret     Z               ; Yes - Exit
1BE3: 23      	        inc     HL              ; Next byte
1BE4: FE22    	        cp      $22             ; '"'             ; Literal string?
1BE6: CADB1B  	        jp      Z,NXTSTL        ; Yes - Look for another '"'
1BE9: C3DE1B  	        jp      NXTSTT          ; Keep looking
              	
1BEC: CDB120  	LET:    call    GETVAR          ; Get variable name
1BEF: CD0F18  	        call    CHKSYN          ; Make sure "=" follows
1BF2: C5      	        defb    ZEQUAL          ; "=" token
1BF3: D5      	        push    DE              ; Save address of variable
1BF4: 3A9281  	        ld      A,(TYPE)        ; Get data type
1BF7: F5      	        push    AF              ; Save type
1BF8: CDB91E  	        call    EVAL            ; Evaluate expression
1BFB: F1      	        pop     AF              ; Restore type
1BFC: E3      	        ex      (SP),HL         ; Save code - Get var addr
1BFD: 22B381  	        ld      (BRKLIN),HL     ; Save address of variable
1C00: 1F      	        rra                     ; Adjust type
1C01: CDAC1E  	        call    CHKTYP          ; Check types are the same
1C04: CA3F1C  	        jp      Z,LETNUM        ; Numeric - Move value
1C07: E5      	LETSTR: push    HL              ; Save address of string var
1C08: 2AC981  	        ld      HL,(FPREG)      ; Pointer to string entry
1C0B: E5      	        push    HL              ; Save it on stack
1C0C: 23      	        inc     HL              ; Skip over length
1C0D: 23      	        inc     HL
1C0E: 5E      	        ld      E,(HL)          ; LSB of string address
1C0F: 23      	        inc     HL
1C10: 56      	        ld      D,(HL)          ; MSB of string address
1C11: 2A3381  	        ld      HL,(BASTXT)     ; Point to start of program
1C14: CD0918  	        call    CPDEHL          ; Is string before program?
1C17: D22E1C  	        jp      NC,CRESTR       ; Yes - Create string entry
1C1A: 2AAD80  	        ld      HL,(STRSPC)     ; Point to string space
1C1D: CD0918  	        call    CPDEHL          ; Is string literal in program?
1C20: D1      	        pop     DE              ; Restore address of string
1C21: D2361C  	        jp      NC,MVSTPT       ; Yes - Set up pointer
1C24: 21A481  	        ld      HL,TMPSTR       ; Temporary string pool
1C27: CD0918  	        call    CPDEHL          ; Is string in temporary pool?
1C2A: D2361C  	        jp      NC,MVSTPT       ; No - Set up pointer
1C2D: 3E      	        defb    $3E             ; Skip "pop DE"
1C2E: D1      	CRESTR: pop     DE              ; Restore address of string
1C2F: CD0B25  	        call    BAKTMP          ; Back to last tmp-str entry
1C32: EB      	        ex      DE,HL           ; Address of string entry
1C33: CD4423  	        call    SAVSTR          ; Save string in string area
1C36: CD0B25  	MVSTPT: call    BAKTMP          ; Back to last tmp-str entry
1C39: E1      	        pop     HL              ; Get string pointer
1C3A: CDFF2B  	        call    DETHL4          ; Move string pointer to var
1C3D: E1      	        pop     HL              ; Restore code string address
1C3E: C9      	        ret
              	
1C3F: E5      	LETNUM: push    HL              ; Save address of variable
1C40: CDFC2B  	        call    FPTHL           ; Move value to variable
1C43: D1      	        pop     DE              ; Restore address of variable
1C44: E1      	        pop     HL              ; Restore code string address
1C45: C9      	        ret
              	
1C46: CD3226  	ON:     call    GETINT          ; Get integer 0-255
1C49: 7E      	        ld      A,(HL)          ; Get "GOTO" or "GOSUB" token
1C4A: 47      	        ld      B,A             ; Save in B
1C4B: FE8C    	        cp      ZGOSUB          ; "GOSUB" token?
1C4D: CA551C  	        jp      Z,ONGO          ; Yes - Find line number
1C50: CD0F18  	        call    CHKSYN          ; Make sure it's "GOTO"
1C53: 88      	        defb    ZGOTO           ; "GOTO" token
1C54: 2B      	        dec     HL              ; Cancel increment
1C55: 4B      	ONGO:   ld      C,E             ; Integer of branch value
1C56: 0D      	ONGOLP: dec     C               ; Count branches
1C57: 78      	        ld      A,B             ; Get "GOTO" or "GOSUB" token
1C58: CA1A1A  	        jp      Z,ONJMP         ; Go to that line if right one
1C5B: CD031B  	        call    GETLN           ; Get line number to DE
1C5E: FE2C    	        cp      ','             ; Another line number?
1C60: C0      	        ret     NZ              ; No - Drop through
1C61: C3561C  	        jp      ONGOLP          ; Yes - loop
              	
1C64: CDB91E  	IF:     call    EVAL            ; Evaluate expression
1C67: 7E      	        ld      A,(HL)          ; Get token
1C68: FE88    	        cp      ZGOTO           ; "GOTO" token?
1C6A: CA721C  	        jp      Z,IFGO          ; Yes - Get line
1C6D: CD0F18  	        call    CHKSYN          ; Make sure it's "THEN"
1C70: B7      	        defb    ZTHEN           ; "THEN" token
1C71: 2B      	        dec     HL              ; Cancel increment
1C72: CDAA1E  	IFGO:   call    TSTNUM          ; Make sure it's numeric
1C75: CDA42B  	        call    TSTSGN          ; Test state of expression
1C78: CAD71B  	        jp      Z,REM           ; False - Drop through
1C7B: CD321A  	        call    GETCHR          ; Get next character
1C7E: DA921B  	        jp      C,GOTO          ; Number - GOTO that line
1C81: C3191A  	        jp      IFJMP           ; Otherwise do statement
              	
1C84: 2B      	MRPRNT: dec     HL              ; dec 'cos GETCHR INCs
1C85: CD321A  	        call    GETCHR          ; Get next character
1C88: CAEB1C  	PRINT:  jp      Z,PRNTCRLF      ; CRLF if just PRINT
1C8B: C8      	PRNTLP: ret     Z               ; End of list - Exit
1C8C: FEB3    	        cp      ZTAB            ; "TAB(" token?
1C8E: CA131D  	        jp      Z,DOTAB         ; Yes - Do TAB routine
1C91: FEB6    	        cp      ZSPC            ; "SPC(" token?
1C93: CA131D  	        jp      Z,DOTAB         ; Yes - Do SPC routine
1C96: E5      	        push    HL              ; Save code string address
1C97: FE2C    	        cp      ','             ; Comma?
1C99: CAFA1C  	        jp      Z,DOCOM         ; Yes - Move to next zone
1C9C: FE3B    	        cp      ';'             ; Semi-colon?
1C9E: CA371D  	        jp      Z,NEXITM        ; Do semi-colon routine
1CA1: C1      	        pop     BC              ; Code string address to BC
1CA2: CDB91E  	        call    EVAL            ; Evaluate expression
1CA5: E5      	        push    HL              ; Save code string address
1CA6: 3A9281  	        ld      A,(TYPE)        ; Get variable type
1CA9: B7      	        or      A               ; Is it a string variable?
1CAA: C2D21C  	        jp      NZ,PRNTST       ; Yes - Output string contents
1CAD: CD492D  	        call    NUMASC          ; Convert number to text
1CB0: CD6823  	        call    CRTST           ; Create temporary string
1CB3: 3600    	        ld      (HL),NLLCR      ; Followed by a NULL char (was SPC, space)
1CB5: 2AC981  	        ld      HL,(FPREG)      ; Get length of output
1CB8: 34      	        inc     (HL)            ; Plus 1 for the space
1CB9: 2AC981  	        ld      HL,(FPREG)      ; < Not needed >
1CBC: 3AA280  	        ld      A,(LWIDTH)      ; Get width of line
1CBF: 47      	        ld      B,A             ; To B
1CC0: 04      	        inc     B               ; Width 255 (No limit)?
1CC1: CACE1C  	        jp      Z,PRNTNB        ; Yes - Output number string
1CC4: 04      	        inc     B               ; Adjust it
1CC5: 3A9081  	        ld      A,(CURPOS)      ; Get cursor position
1CC8: 86      	        add     A,(HL)          ; Add length of string
1CC9: 3D      	        dec     A               ; Adjust it
1CCA: B8      	        cp      B               ; Will output fit on this line?
1CCB: D4EB1C  	        call    NC,PRNTCRLF     ; No - CRLF first
1CCE: CDAD23  	PRNTNB: call    PRS1            ; Output string at (HL)
1CD1: AF      	        xor     A               ; Skip call by setting 'z' flag
1CD2: C4AD23  	PRNTST: call    NZ,PRS1         ; Output string at (HL)
1CD5: E1      	        pop     HL              ; Restore code string address
1CD6: C3841C  	        jp      MRPRNT          ; See if more to PRINT
              	
1CD9: 3A9081  	STTLIN: ld      A,(CURPOS)      ; Make sure on new line
1CDC: B7      	        or      A               ; Already at start?
1CDD: C8      	        ret     Z               ; Yes - Do nothing
1CDE: C3EB1C  	        jp      PRNTCRLF        ; Start a new line
              	
1CE1: AF      	ENDINP: xor     A
1CE2: 322982  	        ld      (KBDNPT),A      ; char is not from keyboard
1CE5: 77      	        ld      (HL),A          ; Mark end of buffer
1CE6: 213581  	        ld      HL,BUFFER-1     ; Point to buffer
1CE9: 180A    	        jr      CNTEND
1CEB: 3E0D    	PRNTCRLF:ld     A,CR            ; Load a CR
1CED: CD1A18  	        call    OUTC            ; Output character
1CF0: 3E0A    	        ld      A,LF            ; Load a LF
1CF2: CD1A18  	        call    OUTC            ; Output character
1CF5: AF      	CNTEND: xor     A               ; Set to position 0
1CF6: 329081  	        ld      (CURPOS),A      ; Store it
1CF9: C9      	        ret                     ; return to caller
              	
1CFA: 3AA380  	DOCOM:  ld      A,(COMMAN)      ; Get comma width
1CFD: 47      	        ld      B,A             ; Save in B
1CFE: 3A9081  	        ld      A,(CURPOS)      ; Get current position
1D01: B8      	        cp      B               ; Within the limit?
1D02: D4EB1C  	        call    NC,PRNTCRLF     ; No - output CRLF
1D05: D2371D  	        jp      NC,NEXITM       ; Get next item
1D08: D60E    	ZONELP: sub     $0E             ; Next zone of 14 characters
1D0A: D2081D  	        jp      NC,ZONELP       ; Repeat if more zones
1D0D: 2F      	        cpl                     ; Number of null chars to output
1D0E: 0E00    	        ld      C,NLLCR         ; null char
1D10: C32D1D  	        jp      ASPCS           ; Output them
              	
1D13: F5      	DOTAB:  push    AF              ; Save token
1D14: CD2F26  	        call    FNDNUM          ; Evaluate expression
1D17: CD0F18  	        call    CHKSYN          ; Make sure ")" follows
1D1A: 29      	        defb    ')'
1D1B: 2B      	        dec     HL              ; Back space on to ")"
1D1C: F1      	        pop     AF              ; Restore token
1D1D: 0E00    	        ld      C,NLLCR         ; for SPC we use NULL char (was SPACE)
1D1F: D6B6    	        sub     ZSPC            ; Was it "SPC(" ?
1D21: E5      	        push    HL              ; Save code string address
1D22: CA281D  	        jp      Z,DOSPC         ; Yes - Do 'E' spaces
1D25: 3AE481  	        ld      A,(SCR_CURS_X)  ; Get current X position
1D28: 2F      	DOSPC:  cpl                     ; Number of spaces to print to
1D29: 83      	        add     A,E             ; Total number to print
1D2A: D2371D  	        jp      NC,NEXITM       ; TAB < Current POS(X)
1D2D: 3C      	ASPCS:  inc     A               ; Output A spaces
1D2E: 47      	        ld      B,A             ; Save number to print
1D2F: 79      	SPCLP:  ld      A,C             ; char to print
1D30: CD1A18  	        call    OUTC            ; Output character in A
1D33: 05      	        dec     B               ; Count them
1D34: C22F1D  	        jp      NZ,SPCLP        ; Repeat if more
1D37: E1      	NEXITM: pop     HL              ; Restore code string address
1D38: CD321A  	        call    GETCHR          ; Get next character
1D3B: C38B1C  	        jp      PRNTLP          ; More to print
              	
1D3E: 3F526564	REDO:   defb    "?Redo from start",CR,0
1D42: 6F206672	
1D46: 6F6D2073	
1D4A: 74617274	
1D4E: 0D00    	
              	
1D50: 3AB281  	BADINP: ld      A,(READFG)      ; READ or INPUT?
1D53: B7      	        or      A
1D54: C22715  	        jp      NZ,DATSNR       ; READ - ?SN Error
1D57: C1      	        pop     BC              ; Throw away code string addr
1D58: 213E1D  	        ld      HL,REDO         ; "Redo from start" message
1D5B: CDAA23  	        call    PRS             ; Output string
1D5E: C39216  	        jp      DOAGN           ; Do last INPUT again
              	
1D61: CD1523  	INPUT:  call    IDTEST          ; Test for illegal direct
1D64: 7E      	        ld      A,(HL)          ; Get character after "INPUT"
1D65: FE22    	        cp      $22             ; '"' ; Is there a prompt string?
1D67: 3E00    	        ld      A,$00           ; Clear A and leave flags
1D69: 32A580  	        ld      (CTLOFG),A      ; Enable output
1D6C: C27B1D  	        jp      NZ,NOPMPT       ; No prompt - get input
1D6F: CD6923  	        call    QTSTR           ; Get string terminated by '"'
1D72: CD0F18  	        call    CHKSYN          ; Check for ';' after prompt
1D75: 3B      	        defb    ";"
1D76: E5      	        push    HL              ; Save code string address
1D77: CDAD23  	        call    PRS1            ; Output prompt string
1D7A: 3E      	        defb    $3E             ; Skip "push HL"
1D7B: E5      	NOPMPT: push    HL              ; Save code string address
1D7C: CD9616  	        call    PROMPT          ; Get input with "? " prompt
1D7F: C1      	        pop     BC              ; Restore code string address
1D80: DA811A  	        jp      C,INPBRK        ; Break pressed - Exit
1D83: 23      	        inc     HL              ; Next byte
1D84: 7E      	        ld      A,(HL)          ; Get it
1D85: B7      	        or      A               ; End of line?
1D86: 2B      	        dec     HL              ; Back again
1D87: C5      	        push    BC              ; Re-save code string address
1D88: CD4C08  	        call    CURSOR_OFF      ; disable cursor
1D8B: CAD41B  	        jp      Z,NXTDTA        ; Yes - Find next DATA stmt
1D8E: 362C    	        ld      (HL),','        ; Store comma as separator
1D90: C3981D  	        jp      NXTITM          ; Get next item
              	
1D93: E5      	READ:   push    HL              ; Save code string address
1D94: 2AC181  	        ld      HL,(NXTDAT)     ; Next DATA statement
1D97: F6      	        defb    $F6             ; Flag "READ"
1D98: AF      	NXTITM: xor     A               ; Flag "INPUT"
1D99: 32B281  	        ld      (READFG),A      ; Save "READ"/"INPUT" flag
1D9C: E3      	        ex      (SP),HL         ; Get code str' , Save pointer
1D9D: C3A41D  	        jp      GTVLUS          ; Get values
              	
1DA0: CD0F18  	NEDMOR: call    CHKSYN          ; Check for comma between items
1DA3: 2C      	        defb    ','
1DA4: CDB120  	GTVLUS: call    GETVAR          ; Get variable name
1DA7: E3      	        ex      (SP),HL         ; Save code str" , Get pointer
1DA8: D5      	        push    DE              ; Save variable address
1DA9: 7E      	        ld      A,(HL)          ; Get next "INPUT"/"DATA" byte
1DAA: FE2C    	        cp      ','             ; Comma?
1DAC: CACC1D  	        jp      Z,ANTVLU        ; Yes - Get another value
1DAF: 3AB281  	        ld      A,(READFG)      ; Is it READ?
1DB2: B7      	        or      A
1DB3: C2381E  	        jp      NZ,FDTLP        ; Yes - Find next DATA stmt
1DB6: 3E3F    	        ld      A,'?'           ; More INPUT needed
1DB8: CD1A18  	        call    OUTC            ; Output character
1DBB: CD9616  	        call    PROMPT          ; Get INPUT with prompt
1DBE: D1      	        pop     DE              ; Variable address
1DBF: C1      	        pop     BC              ; Code string address
1DC0: DA811A  	        jp      C,INPBRK        ; Break pressed
1DC3: 23      	        inc     HL              ; Point to next DATA byte
1DC4: 7E      	        ld      A,(HL)          ; Get byte
1DC5: B7      	        or      A               ; Is it zero (No input) ?
1DC6: 2B      	        dec     HL              ; Back space INPUT pointer
1DC7: C5      	        push    BC              ; Save code string address
1DC8: CAD41B  	        jp      Z,NXTDTA        ; Find end of buffer
1DCB: D5      	        push    DE              ; Save variable address
1DCC: 3A9281  	ANTVLU: ld      A,(TYPE)        ; Check data type
1DCF: B7      	        or      A               ; Is it numeric?
1DD0: CAF61D  	        jp      Z,INPBIN        ; Yes - Convert to binary
1DD3: CD321A  	        call    GETCHR          ; Get next character
1DD6: 57      	        ld      D,A             ; Save input character
1DD7: 47      	        ld      B,A             ; Again
1DD8: FE22    	        cp      $22             ; '"'     ; Start of literal sting?
1DDA: CAEA1D  	        jp      Z,STRENT        ; Yes - Create string entry
1DDD: 3AB281  	        ld      A,(READFG)      ; "READ" or "INPUT" ?
1DE0: B7      	        or      A
1DE1: 57      	        ld      D,A             ; Save 00 if "INPUT"
1DE2: CAE71D  	        jp      Z,ITMSEP        ; "INPUT" - End with 00
1DE5: 163A    	        ld      D,':'           ; "DATA" - End with 00 or ':'
1DE7: 062C    	ITMSEP: ld      B,','           ; Item separator
1DE9: 2B      	        dec     HL              ; Back space for DTSTR
1DEA: CD6C23  	STRENT: call    DTSTR           ; Get string terminated by D
1DED: EB      	        ex      DE,HL           ; String address to DE
1DEE: 21011E  	        ld      HL,LTSTND       ; Where to go after LETSTR
1DF1: E3      	        ex      (SP),HL         ; Save HL , get input pointer
1DF2: D5      	        push    DE              ; Save address of string
1DF3: C3071C  	        jp      LETSTR          ; Assign string to variable
              	
1DF6: CD321A  	INPBIN: call    GETCHR          ; Get next character
1DF9: CDAB2C  	        call    ASCTFP          ; Convert ASCII to FP number
1DFC: E3      	        ex      (SP),HL         ; Save input ptr, Get var addr
1DFD: CDFC2B  	        call    FPTHL           ; Move FPREG to variable
1E00: E1      	        pop     HL              ; Restore input pointer
1E01: 2B      	LTSTND: dec     HL              ; dec 'cos GETCHR INCs
1E02: CD321A  	        call    GETCHR          ; Get next character
1E05: CA0D1E  	        jp      Z,MORDT         ; End of line - More needed?
1E08: FE2C    	        cp      ','             ; Another value?
1E0A: C2501D  	        jp      NZ,BADINP       ; No - Bad input
1E0D: E3      	MORDT:  ex      (SP),HL         ; Get code string address
1E0E: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
1E0F: CD321A  	        call    GETCHR          ; Get next character
1E12: C2A01D  	        jp      NZ,NEDMOR       ; More needed - Get it
1E15: D1      	        pop     DE              ; Restore DATA pointer
1E16: 3AB281  	        ld      A,(READFG)      ; "READ" or "INPUT" ?
1E19: B7      	        or      A
1E1A: EB      	        ex      DE,HL           ; DATA pointer to HL
1E1B: C2581A  	        jp      NZ,UPDATA       ; Update DATA pointer if "READ"
1E1E: D5      	        push    DE              ; Save code string address
1E1F: B6      	        or      (HL)            ; More input given?
1E20: 21281E  	        ld      HL,EXTIG        ; "?Extra ignored" message
1E23: C4AA23  	        call    NZ,PRS          ; Output string if extra given
1E26: E1      	        pop     HL              ; Restore code string address
1E27: C9      	        ret
              	
1E28: 3F457874	EXTIG:  defb    "?Extra ignored",CR,0
1E2C: 72612069	
1E30: 676E6F72	
1E34: 65640D00	
              	
1E38: CDD51B  	FDTLP:  call    DATA            ; Get next statement
1E3B: B7      	        or      A               ; End of line?
1E3C: C2511E  	        jp      NZ,FANDT        ; No - See if DATA statement
1E3F: 23      	        inc     HL
1E40: 7E      	        ld      A,(HL)          ; End of program?
1E41: 23      	        inc     HL
1E42: B6      	        or      (HL)            ; 00 00 Ends program
1E43: 1E06    	        ld      E,OD            ; ?OD Error
1E45: CA4115  	        jp      Z,ERROR         ; Yes - Out of DATA
1E48: 23      	        inc     HL
1E49: 5E      	        ld      E,(HL)          ; LSB of line number
1E4A: 23      	        inc     HL
1E4B: 56      	        ld      D,(HL)          ; MSB of line number
1E4C: EB      	        ex      DE,HL
1E4D: 22AE81  	        ld      (DATLIN),HL     ; Set line of current DATA item
1E50: EB      	        ex      DE,HL
1E51: CD321A  	FANDT:  call    GETCHR          ; Get next character
1E54: FE83    	        cp      ZDATA           ; "DATA" token
1E56: C2381E  	        jp      NZ,FDTLP        ; No "DATA" - Keep looking
1E59: C3CC1D  	        jp      ANTVLU          ; Found - Convert input
              	
1E5C: 110000  	NEXT:   ld      DE,$0000        ; In case no index given
1E5F: C4B120  	NEXT1:  call    NZ,GETVAR       ; Get index address
1E62: 22B381  	        ld      (BRKLIN),HL     ; Save code string address
1E65: CDB614  	        call    BAKSTK          ; Look for "FOR" block
1E68: C23315  	        jp      NZ,NFERR        ; No "FOR" - ?NF Error
1E6B: F9      	        ld      SP,HL           ; Clear nested loops
1E6C: D5      	        push    DE              ; Save index address
1E6D: 7E      	        ld      A,(HL)          ; Get sign of STEP
1E6E: 23      	        inc     HL
1E6F: F5      	        push    AF              ; Save sign of STEP
1E70: D5      	        push    DE              ; Save index address
1E71: CDE22B  	        call    PHLTFP          ; Move index value to FPREG
1E74: E3      	        ex      (SP),HL         ; Save address of TO value
1E75: E5      	        push    HL              ; Save address of index
1E76: CDFE28  	        call    ADDPHL          ; Add STEP to index value
1E79: E1      	        pop     HL              ; Restore address of index
1E7A: CDFC2B  	        call    FPTHL           ; Move value to index variable
1E7D: E1      	        pop     HL              ; Restore address of TO value
1E7E: CDF32B  	        call    LOADFP          ; Move TO value to BCDE
1E81: E5      	        push    HL              ; Save address of line of FOR
1E82: CD1F2C  	        call    CMPNUM          ; Compare index with TO value
1E85: E1      	        pop     HL              ; Restore address of line num
1E86: C1      	        pop     BC              ; Address of sign of STEP
1E87: 90      	        sub     B               ; Compare with expected sign
1E88: CDF32B  	        call    LOADFP          ; BC = Loop stmt,DE = Line num
1E8B: CA971E  	        jp      Z,KILFOR        ; Loop finished - Terminate it
1E8E: EB      	        ex      DE,HL           ; Loop statement line number
1E8F: 22AF80  	        ld      (LINEAT),HL     ; Set loop line number
1E92: 69      	        ld      L,C             ; Set code string to loop
1E93: 60      	        ld      H,B
1E94: C3EE19  	        jp      PUTFID          ; Put back "FOR" and continue
              	
1E97: F9      	KILFOR: ld      SP,HL           ; Remove "FOR" block
1E98: 2AB381  	        ld      HL,(BRKLIN)     ; Code string after "NEXT"
1E9B: 7E      	        ld      A,(HL)          ; Get next byte in code string
1E9C: FE2C    	        cp      ','             ; More NEXTs ?
1E9E: C2F219  	        jp      NZ,RUNCNT       ; No - Do next statement
1EA1: CD321A  	        call    GETCHR          ; Position to index name
1EA4: CD5F1E  	        call    NEXT1           ; Re-enter NEXT routine
              	; < will not RETurn to here , Exit to RUNCNT or Loop >
              	
1EA7: CDB91E  	GETNUM: call    EVAL            ; Get a numeric expression
1EAA: F6      	TSTNUM: defb    $F6             ; Clear carry (numeric)
1EAB: 37      	TSTSTR: scf                     ; Set carry (string)
1EAC: 3A9281  	CHKTYP: ld      A,(TYPE)        ; Check types match
1EAF: 8F      	        adc     A,A             ; Expected + actual
1EB0: B7      	        or      A               ; Clear carry , set parity
1EB1: E8      	        ret     PE              ; Even parity - Types match
1EB2: C33F15  	        jp      TMERR           ; Different types - Error
              	
1EB5: CD0F18  	OPNPAR: call    CHKSYN          ; Make sure "(" follows
1EB8: 28      	        defb    '('
1EB9: 2B      	EVAL:   dec     HL              ; Evaluate expression & save
1EBA: 1600    	        ld      D,$00           ; Precedence value
1EBC: D5      	EVAL1:  push    DE              ; Save precedence
1EBD: 0E01    	        ld      C,$01
1EBF: CDEA14  	        call    CHKSTK          ; Check for 1 level of stack
1EC2: CD301F  	        call    OPRND           ; Get next expression value
1EC5: 22B581  	EVAL2:  ld      (NXTOPR),HL     ; Save address of next operator
1EC8: 2AB581  	EVAL3:  ld      HL,(NXTOPR)     ; Restore address of next opr
1ECB: C1      	        pop     BC              ; Precedence value and operator
1ECC: 78      	        ld      A,B             ; Get precedence value
1ECD: FE78    	        cp      $78             ; "AND", "OR", or "XOR" ?
1ECF: D4AA1E  	        call    NC,TSTNUM       ; No - Make sure it's a number
1ED2: 7E      	        ld      A,(HL)          ; Get next operator / function
1ED3: 1600    	        ld      D,$00           ; Clear Last relation
1ED5: D6C4    	RLTLP:  sub     ZGTR            ; ">" Token
1ED7: DAF11E  	        jp      C,FOPRND        ; + - * / ^ AND OR XOR - Test it
1EDA: FE03    	        cp      ZLTH+1-ZGTR     ; < = >
1EDC: D2F11E  	        jp      NC,FOPRND       ; Function - Call it
1EDF: FE01    	        cp      ZEQUAL-ZGTR     ; "="
1EE1: 17      	        rla                     ; <- Test for legal
1EE2: AA      	        xor     D               ; <- combinations of < = >
1EE3: BA      	        cp      D               ; <- by combining last token
1EE4: 57      	        ld      D,A             ; <- with current one
1EE5: DA2D15  	        jp      C,SNERR         ; Error if "<<' '==" or ">>"
1EE8: 22AA81  	        ld      (CUROPR),HL     ; Save address of current token
1EEB: CD321A  	        call    GETCHR          ; Get next character
1EEE: C3D51E  	        jp      RLTLP           ; Treat the two as one
              	
1EF1: 7A      	FOPRND: ld      A,D             ; < = > found ?
1EF2: B7      	        or      A
1EF3: C22C20  	        jp      NZ,TSTRED       ; Yes - Test for reduction
1EF6: 7E      	        ld      A,(HL)          ; Get operator token
1EF7: 22AA81  	        ld      (CUROPR),HL     ; Save operator address
1EFA: D6BA    	        sub     ZPLUS           ; Operator or function?
1EFC: D8      	        ret     C               ; Neither - Exit
1EFD: FE0A    	        cp      ZOR+1-ZPLUS     ; Is it + - * / ^ AND XOR OR ?
1EFF: D0      	        ret     NC              ; No - Exit
1F00: 5F      	        ld      E,A             ; Coded operator
1F01: 3A9281  	        ld      A,(TYPE)        ; Get data type
1F04: 3D      	        dec     A               ; FF = numeric , 00 = string
1F05: B3      	        or      E               ; Combine with coded operator
1F06: 7B      	        ld      A,E             ; Get coded operator
1F07: CAA024  	        jp      Z,CONCAT        ; String concatenation
1F0A: 07      	        rlca                    ; Times 2
1F0B: 83      	        add     A,E             ; Times 3
1F0C: 5F      	        ld      E,A             ; To DE (D is 0)
1F0D: 21DE11  	        ld      HL,PRITAB       ; Precedence table
1F10: 19      	        add     HL,DE           ; To the operator concerned
1F11: 78      	        ld      A,B             ; Last operator precedence
1F12: 56      	        ld      D,(HL)          ; Get evaluation precedence
1F13: BA      	        cp      D               ; Compare with eval precedence
1F14: D0      	        ret     NC              ; Exit if higher precedence
1F15: 23      	        inc     HL              ; Point to routine address
1F16: CDAA1E  	        call    TSTNUM          ; Make sure it's a number
              	
1F19: C5      	STKTHS: push    BC              ; Save last precedence & token
1F1A: 01C81E  	        ld      BC,EVAL3        ; Where to go on prec' break
1F1D: C5      	        push    BC              ; Save on stack for return
1F1E: 43      	        ld      B,E             ; Save operator
1F1F: 4A      	        ld      C,D             ; Save precedence
1F20: CDD52B  	        call    STAKFP          ; Move value to stack
1F23: 58      	        ld      E,B             ; Restore operator
1F24: 51      	        ld      D,C             ; Restore precedence
1F25: 4E      	        ld      C,(HL)          ; Get LSB of routine address
1F26: 23      	        inc     HL
1F27: 46      	        ld      B,(HL)          ; Get MSB of routine address
1F28: 23      	        inc     HL
1F29: C5      	        push    BC              ; Save routine address
1F2A: 2AAA81  	        ld      HL,(CUROPR)     ; Address of current operator
1F2D: C3BC1E  	        jp      EVAL1           ; Loop until prec' break
              	
1F30: AF      	OPRND:  xor     A               ; Get operand routine
1F31: 329281  	        ld      (TYPE),A        ; Set numeric expected
1F34: CD321A  	        call    GETCHR          ; Get next character
1F37: 1E24    	        ld      E,MO            ; ?MO Error
1F39: CA4115  	        jp      Z,ERROR         ; No operand - Error
1F3C: DAAB2C  	        jp      C,ASCTFP        ; Number - Get value
1F3F: CDD41A  	        call    CHKLTR          ; See if a letter
1F42: D2971F  	        jp      NC,CONVAR       ; Letter - Find variable
1F45: FE26    	        cp      '&'             ; &H = HEX, &B = BINARY
1F47: 2012    	        jr      NZ,NOTAMP
1F49: CD321A  	        call    GETCHR          ; Get next character
1F4C: FE48    	        cp      'H'             ; Hex number indicated? [function added]
1F4E: CA723A  	        jp      Z,HEXTFP        ; Convert Hex to FPREG
1F51: FE42    	        cp      'B'             ; Binary number indicated? [function added]
1F53: CAE23A  	        jp      Z,BINTFP        ; Convert Bin to FPREG
1F56: 1E02    	        ld      E,SN            ; If neither then a ?SN Error
1F58: CA4115  	        jp      Z,ERROR         ;
1F5B: FEBA    	NOTAMP: cp      ZPLUS           ; '+' Token ?
1F5D: CA301F  	        jp      Z,OPRND         ; Yes - Look for operand
1F60: FE2E    	        cp      '.'             ; '.' ?
1F62: CAAB2C  	        jp      Z,ASCTFP        ; Yes - Create FP number
1F65: FEBB    	        cp      ZMINUS          ; '-' Token ?
1F67: CA861F  	        jp      Z,MINUS         ; Yes - Do minus
1F6A: FE22    	        cp      $22             ; '"'             ; Literal string ?
1F6C: CA6923  	        jp      Z,QTSTR         ; Get string terminated by '"'
1F6F: FEB8    	        cp      ZNOT            ; "NOT" Token ?
1F71: CA8C20  	        jp      Z,EVNOT         ; Yes - Eval NOT expression
1F74: FEB5    	        cp      ZFN             ; "FN" Token ?
1F76: CACD22  	        jp      Z,DOFN          ; Yes - Do FN routine
1F79: D6C7    	        sub     ZSGN            ; Is it a function?
1F7B: D2A81F  	        jp      NC,FNOFST       ; Yes - Evaluate function
1F7E: CDB51E  	EVLPAR: call    OPNPAR          ; Evaluate expression in "()"
1F81: CD0F18  	        call    CHKSYN          ; Make sure ")" follows
1F84: 29      	        defb    ')'
1F85: C9      	        ret
              	
1F86: 167D    	MINUS:  ld      D,$7D           ; '-' precedence
1F88: CDBC1E  	        call    EVAL1           ; Evaluate until prec' break
1F8B: 2AB581  	        ld      HL,(NXTOPR)     ; Get next operator address
1F8E: E5      	        push    HL              ; Save next operator address
1F8F: CDCD2B  	        call    INVSGN          ; Negate value
1F92: CDAA1E  	RETNUM: call    TSTNUM          ; Make sure it's a number
1F95: E1      	        pop     HL              ; Restore next operator address
1F96: C9      	        ret
              	
1F97: CDB120  	CONVAR: call    GETVAR          ; Get variable address to DE
1F9A: E5      	FRMEVL: push    HL              ; Save code string address
1F9B: EB      	        ex      DE,HL           ; Variable address to HL
1F9C: 22C981  	        ld      (FPREG),HL      ; Save address of variable
1F9F: 3A9281  	        ld      A,(TYPE)        ; Get type
1FA2: B7      	        or      A               ; Numeric?
1FA3: CCE22B  	        call    Z,PHLTFP        ; Yes - Move contents to FPREG
1FA6: E1      	        pop     HL              ; Restore code string address
1FA7: C9      	        ret
              	
1FA8: 0600    	FNOFST: ld      B,$00           ; Get address of function
1FAA: 07      	        rlca                    ; Double function offset
1FAB: 4F      	        ld      C,A             ; BC = Offset in function table
1FAC: C5      	        push    BC              ; Save adjusted token value
1FAD: CD321A  	        call    GETCHR          ; Get next character
1FB0: 79      	        ld      A,C             ; Get adjusted token value
1FB1: FE2C    	        cp      2*(ZPOINT-ZSGN) ; "POINT" token?
1FB3: CAD432  	        jp      Z,POINT         ; Yes, do "POINT"
1FB6: FE3B    	        cp      2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
1FB8: DAD41F  	        jp      C,FNVAL         ; No - Do function
1FBB: CDB51E  	        call    OPNPAR          ; Evaluate expression  (X,...
1FBE: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
1FC1: 2C      	        defb    ','
1FC2: CDAB1E  	        call    TSTSTR          ; Make sure it's a string
1FC5: EB      	        ex      DE,HL           ; Save code string address
1FC6: 2AC981  	        ld      HL,(FPREG)      ; Get address of string
1FC9: E3      	        ex      (SP),HL         ; Save address of string
1FCA: E5      	        push    HL              ; Save adjusted token value
1FCB: EB      	        ex      DE,HL           ; Restore code string address
1FCC: CD3226  	        call    GETINT          ; Get integer 0-255
1FCF: EB      	        ex      DE,HL           ; Save code string address
1FD0: E3      	        ex      (SP),HL         ; Save integer,HL = adj' token
1FD1: C3DC1F  	        jp      GOFUNC          ; Jump to string function
              	
1FD4: CD7E1F  	FNVAL:  call    EVLPAR          ; Evaluate expression
1FD7: E3      	        ex      (SP),HL         ; HL = Adjusted token value
1FD8: 11921F  	        ld      DE,RETNUM       ; Return number from function
1FDB: D5      	        push    DE              ; Save on stack
1FDC: 01BB0F  	GOFUNC: ld      BC,FNCTAB       ; Function routine addresses
1FDF: 09      	        add     HL,BC           ; Point to right address
1FE0: 4E      	        ld      C,(HL)          ; Get LSB of address
1FE1: 23      	        inc     HL              ;
1FE2: 66      	        ld      H,(HL)          ; Get MSB of address
1FE3: 69      	        ld      L,C             ; Address to HL
1FE4: E9      	        jp      (HL)            ; Jump to function
              	
1FE5: 15      	SGNEXP: dec     D               ; Dee to flag negative exponent
1FE6: FEBB    	        cp      ZMINUS          ; '-' token ?
1FE8: C8      	        ret     Z               ; Yes - Return
1FE9: FE2D    	        cp      '-'             ; '-' ASCII ?
1FEB: C8      	        ret     Z               ; Yes - Return
1FEC: 14      	        inc     D               ; Inc to flag positive exponent
1FED: FE2B    	        cp      '+'             ; '+' ASCII ?
1FEF: C8      	        ret     Z               ; Yes - Return
1FF0: FEBA    	        cp      ZPLUS           ; '+' token ?
1FF2: C8      	        ret     Z               ; Yes - Return
1FF3: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
1FF4: C9      	        ret                     ; Return "NZ"
              	
              	; execute OR, AND, and XOR operations
1FF5: AF      	PAND:   xor     A               ; for AND, Z=1
1FF6: 1807    	        jr      CNTLGC          
1FF8: AF      	POR     xor     A               ; for OR, Z=0, S=1
1FF9: D601    	        sub     $01
1FFB: 1802    	        jr      CNTLGC
1FFD: AF      	PXOR:   xor     A               ; for XOR, Z=0, S=0
1FFE: 3C      	        inc     A
1FFF: F5      	CNTLGC: push    AF              ; store operand's flags
2000: CDAA1E  	        call    TSTNUM          ; Make sure it's a number
2003: CDE81A  	        call    DEINT           ; Get integer -32768 to 32767
2006: F1      	        pop     AF              ; retrieve operand's flags
2007: EB      	        ex      DE,HL           ; <- Get last
2008: C1      	        pop     BC              ; <-  value
2009: E3      	        ex      (SP),HL         ; <-  from
200A: EB      	        ex      DE,HL           ; <-  stack
200B: CDE52B  	        call    FPBCDE          ; Move last value to FPREG
200E: F5      	        push    AF              ; store operand's flags
200F: CDE81A  	        call    DEINT           ; Get integer -32768 to 32767
2012: F1      	        pop     AF              ; retrieve operand's flags
2013: C1      	        pop     BC              ; Get value
2014: 79      	        ld      A,C             ; Get LSB
2015: 218B22  	        ld      HL,ACPASS       ; Address of save AC as current
2018: 2005    	        jr      NZ,POR1         ; if X/OR, jump over
201A: A3      	PAND1:  and     E               ; "AND" LSBs
201B: 4F      	        ld      C,A             ; Save LSB
201C: 78      	        ld      A,B             ; Get MSB
201D: A2      	        and     D               ; "AND" MSBs
201E: E9      	        jp      (HL)            ; Save AC as current (ACPASS)
201F: F22720  	POR1:   jp      P,PXOR1         ; if S=0, jump to XOR
2022: B3      	        or      E               ; "OR" LSBs
2023: 4F      	        ld      C,A             ; Save LSB
2024: 78      	        ld      A,B             ; Get MSB
2025: B2      	        or      D               ; "OR" MSBs
2026: E9      	        jp      (HL)            ; Save AC as current (ACPASS)
2027: AB      	PXOR1:  xor     E               ; "XOR" LSBs
2028: 4F      	        ld      C,A             ; Save LSB
2029: 78      	        ld      A,B             ; Get MSB
202A: AA      	        xor     D               ; "XOR" MSBs
202B: E9      	        jp      (HL)            ; Save AC as current (ACPASS) 
              	
202C: 213E20  	TSTRED: ld      HL,CMPLOG       ; Logical compare routine
202F: 3A9281  	        ld      A,(TYPE)        ; Get data type
2032: 1F      	        rra                     ; Carry set = string
2033: 7A      	        ld      A,D             ; Get last precedence value
2034: 17      	        rla                     ; Times 2 plus carry
2035: 5F      	        ld      E,A             ; To E
2036: 1664    	        ld      D,$64           ; Relational precedence
2038: 78      	        ld      A,B             ; Get current precedence
2039: BA      	        cp      D               ; Compare with last
203A: D0      	        ret     NC              ; Eval if last was rel' or log'
203B: C3191F  	        jp      STKTHS          ; Stack this one and get next
              	
203E: 4020    	CMPLOG: defw    CMPLG1          ; Compare two values / strings
2040: 79      	CMPLG1: ld      A,C             ; Get data type
2041: B7      	        or      A
2042: 1F      	        rra
2043: C1      	        pop     BC              ; Get last expression to BCDE
2044: D1      	        pop     DE
2045: F5      	        push    AF              ; Save status
2046: CDAC1E  	        call    CHKTYP          ; Check that types match
2049: 218220  	        ld      HL,CMPRES       ; Result to comparison
204C: E5      	        push    HL              ; Save for RETurn
204D: CA1F2C  	        jp      Z,CMPNUM        ; Compare values if numeric
2050: AF      	        xor     A               ; Compare two strings
2051: 329281  	        ld      (TYPE),A        ; Set type to numeric
2054: D5      	        push    DE              ; Save string name
2055: CDED24  	        call    GSTRCU          ; Get current string
2058: 7E      	        ld      A,(HL)          ; Get length of string
2059: 23      	        inc     HL
205A: 23      	        inc     HL
205B: 4E      	        ld      C,(HL)          ; Get LSB of address
205C: 23      	        inc     HL
205D: 46      	        ld      B,(HL)          ; Get MSB of address
205E: D1      	        pop     DE              ; Restore string name
205F: C5      	        push    BC              ; Save address of string
2060: F5      	        push    AF              ; Save length of string
2061: CDF124  	        call    GSTRDE          ; Get second string
2064: CDF32B  	        call    LOADFP          ; Get address of second string
2067: F1      	        pop     AF              ; Restore length of string 1
2068: 57      	        ld      D,A             ; Length to D
2069: E1      	        pop     HL              ; Restore address of string 1
206A: 7B      	CMPSTR: ld      A,E             ; Bytes of string 2 to do
206B: B2      	        or      D               ; Bytes of string 1 to do
206C: C8      	        ret     Z               ; Exit if all bytes compared
206D: 7A      	        ld      A,D             ; Get bytes of string 1 to do
206E: D601    	        sub     $01
2070: D8      	        ret     C               ; Exit if end of string 1
2071: AF      	        xor     A
2072: BB      	        cp      E               ; Bytes of string 2 to do
2073: 3C      	        inc     A
2074: D0      	        ret     NC              ; Exit if end of string 2
2075: 15      	        dec     D               ; Count bytes in string 1
2076: 1D      	        dec     E               ; Count bytes in string 2
2077: 0A      	        ld      A,(BC)          ; Byte in string 2
2078: BE      	        cp      (HL)            ; Compare to byte in string 1
2079: 23      	        inc     HL              ; Move up string 1
207A: 03      	        inc     BC              ; Move up string 2
207B: CA6A20  	        jp      Z,CMPSTR        ; Same - Try next bytes
207E: 3F      	        ccf                     ; Flag difference (">" or "<")
207F: C3AF2B  	        jp      FLGDIF          ; "<" gives -1 , ">" gives +1
              	
2082: 3C      	CMPRES: inc     A               ; Increment current value
2083: 8F      	        adc     A,A             ; Double plus carry
2084: C1      	        pop     BC              ; Get other value
2085: A0      	        and     B               ; Combine them
2086: C6FF    	        add     A,-1            ; Carry set if different
2088: 9F      	        sbc     A,A             ; 00 - Equal , FF - Different
2089: C3B62B  	        jp      FLGREL          ; Set current value & continue
              	
208C: 165A    	EVNOT:  ld      D,$5A           ; Precedence value for "NOT"
208E: CDBC1E  	        call    EVAL1           ; Eval until precedence break
2091: CDAA1E  	        call    TSTNUM          ; Make sure it's a number
2094: CDE81A  	        call    DEINT           ; Get integer -32768 - 32767
2097: 7B      	        ld      A,E             ; Get LSB
2098: 2F      	        cpl                     ; Invert LSB
2099: 4F      	        ld      C,A             ; Save "NOT" of LSB
209A: 7A      	        ld      A,D             ; Get MSB
209B: 2F      	        cpl                     ; Invert MSB
209C: CD8B22  	        call    ACPASS          ; Save AC as current
209F: C1      	        pop     BC              ; Clean up stack
20A0: C3C81E  	        jp      EVAL3           ; Continue evaluation
              	
20A3: 2B      	DIMRET: dec     HL              ; dec 'cos GETCHR INCs
20A4: CD321A  	        call    GETCHR          ; Get next character
20A7: C8      	        ret     Z               ; End of DIM statement
20A8: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
20AB: 2C      	        defb    ','
20AC: 01A320  	DIM:    ld      BC,DIMRET       ; Return to "DIMRET"
20AF: C5      	        push    BC              ; Save on stack
20B0: F6      	        defb    $F6             ; Flag "Create" variable
20B1: AF      	GETVAR: xor     A               ; Find variable address,to DE
20B2: 329181  	        ld      (LCRFLG),A      ; Set locate / create flag
20B5: 46      	        ld      B,(HL)          ; Get First byte of name
20B6: CDD41A  	GTFNAM: call    CHKLTR          ; See if a letter
20B9: DA2D15  	        jp      C,SNERR         ; ?SN Error if not a letter
20BC: AF      	        xor     A
20BD: 4F      	        ld      C,A             ; Clear second byte of name
20BE: 329281  	        ld      (TYPE),A        ; Set type to numeric
20C1: CD321A  	        call    GETCHR          ; Get next character
20C4: DACD20  	        jp      C,SVNAM2        ; Numeric - Save in name
20C7: CDD41A  	        call    CHKLTR          ; See if a letter
20CA: DADA20  	        jp      C,CHARTY        ; Not a letter - Check type
20CD: 4F      	SVNAM2: ld      C,A             ; Save second byte of name
20CE: CD321A  	ENDNAM: call    GETCHR          ; Get next character
20D1: DACE20  	        jp      C,ENDNAM        ; Numeric - Get another
20D4: CDD41A  	        call    CHKLTR          ; See if a letter
20D7: D2CE20  	        jp      NC,ENDNAM       ; Letter - Get another
20DA: D624    	CHARTY: sub     '$'             ; String variable?
20DC: C2E920  	        jp      NZ,NOTSTR       ; No - Numeric variable
20DF: 3C      	        inc     A               ; A = 1 (string type)
20E0: 329281  	        ld      (TYPE),A        ; Set type to string
20E3: 0F      	        rrca                    ; A = 80H , Flag for string
20E4: 81      	        add     A,C             ; 2nd byte of name has bit 7 on
20E5: 4F      	        ld      C,A             ; Resave second byte on name
20E6: CD321A  	        call    GETCHR          ; Get next character
20E9: 3AB081  	NOTSTR: ld      A,(FORFLG)      ; Array name needed ?
20EC: 3D      	        dec     A
20ED: CA9621  	        jp      Z,ARLDSV        ; Yes - Get array name
20F0: F2F920  	        jp      P,NSCFOR        ; No array with "FOR" or "FN"
20F3: 7E      	        ld      A,(HL)          ; Get byte again
20F4: D628    	        sub     '('             ; Subscripted variable?
20F6: CA6E21  	        jp      Z,SBSCPT        ; Yes - Sort out subscript
              	
20F9: AF      	NSCFOR: xor     A               ; Simple variable
20FA: 32B081  	        ld      (FORFLG),A      ; Clear "FOR" flag
20FD: E5      	        push    HL              ; Save code string address
20FE: 50      	        ld      D,B             ; DE = Variable name to find
20FF: 59      	        ld      E,C
2100: 2AC381  	        ld      HL,(FNRGNM)     ; FN argument name
2103: CD0918  	        call    CPDEHL          ; Is it the FN argument?
2106: 11C581  	        ld      DE,FNARG        ; Point to argument value
2109: CA942A  	        jp      Z,POPHRT        ; Yes - Return FN argument value
210C: 2ABD81  	        ld      HL,(VAREND)     ; End of variables
210F: EB      	        ex      DE,HL           ; Address of end of search
2110: 2ABB81  	        ld      HL,(PROGND)     ; Start of variables address
2113: CD0918  	FNDVAR: call    CPDEHL          ; End of variable list table?
2116: CA2C21  	        jp      Z,CFEVAL        ; Yes - Called from EVAL?
2119: 79      	        ld      A,C             ; Get second byte of name
211A: 96      	        sub     (HL)            ; Compare with name in list
211B: 23      	        inc     HL              ; Move on to first byte
211C: C22121  	        jp      NZ,FNTHR        ; Different - Find another
211F: 78      	        ld      A,B             ; Get first byte of name
2120: 96      	        sub     (HL)            ; Compare with name in list
2121: 23      	FNTHR:  inc     HL              ; Move on to LSB of value
2122: CA6021  	        jp      Z,RETADR        ; Found - Return address
2125: 23      	        inc     HL              ; <- Skip
2126: 23      	        inc     HL              ; <- over
2127: 23      	        inc     HL              ; <- F.P.
2128: 23      	        inc     HL              ; <- value
2129: C31321  	        jp      FNDVAR          ; Keep looking
              	
212C: E1      	CFEVAL: pop     HL              ; Restore code string address
212D: E3      	        ex      (SP),HL         ; Get return address
212E: D5      	        push    DE              ; Save address of variable
212F: 119A1F  	        ld      DE,FRMEVL       ; Return address in EVAL
2132: CD0918  	        call    CPDEHL          ; Called from EVAL ?
2135: D1      	        pop     DE              ; Restore address of variable
2136: CA6321  	        jp      Z,RETNUL        ; Yes - Return null variable
2139: E3      	        ex      (SP),HL         ; Put back return
213A: E5      	        push    HL              ; Save code string address
213B: C5      	        push    BC              ; Save variable name
213C: 010600  	        ld      BC,$0006        ; 2 byte name plus 4 byte data
213F: 2ABF81  	        ld      HL,(ARREND)     ; End of arrays
2142: E5      	        push    HL              ; Save end of arrays
2143: 09      	        add     HL,BC           ; Move up 6 bytes
2144: C1      	        pop     BC              ; Source address in BC
2145: E5      	        push    HL              ; Save new end address
2146: CDD914  	        call    MOVUP           ; Move arrays up
2149: E1      	        pop     HL              ; Restore new end address
214A: 22BF81  	        ld      (ARREND),HL     ; Set new end address
214D: 60      	        ld      H,B             ; End of variables to HL
214E: 69      	        ld      L,C
214F: 22BD81  	        ld      (VAREND),HL     ; Set new end address
              	
2152: 2B      	ZEROLP: dec     HL              ; Back through to zero variable
2153: 3600    	        ld      (HL),$00        ; Zero byte in variable
2155: CD0918  	        call    CPDEHL          ; Done them all?
2158: C25221  	        jp      NZ,ZEROLP       ; No - Keep on going
215B: D1      	        pop     DE              ; Get variable name
215C: 73      	        ld      (HL),E          ; Store second character
215D: 23      	        inc     HL
215E: 72      	        ld      (HL),D          ; Store first character
215F: 23      	        inc     HL
2160: EB      	RETADR: ex      DE,HL           ; Address of variable in DE
2161: E1      	        pop     HL              ; Restore code string address
2162: C9      	        ret
              	
2163: 32CC81  	RETNUL: ld      (FPEXP),A       ; Set result to zero
2166: 21AA14  	        ld      HL,ZERBYT       ; Also set a null string
2169: 22C981  	        ld      (FPREG),HL      ; Save for EVAL
216C: E1      	        pop     HL              ; Restore code string address
216D: C9      	        ret
              	
216E: E5      	SBSCPT: push    HL              ; Save code string address
216F: 2A9181  	        ld      HL,(LCRFLG)     ; Locate/Create and Type
2172: E3      	        ex      (SP),HL         ; Save and get code string
2173: 57      	        ld      D,A             ; Zero number of dimensions
2174: D5      	SCPTLP: push    DE              ; Save number of dimensions
2175: C5      	        push    BC              ; Save array name
2176: CDDC1A  	        call    FPSINT          ; Get subscript (0-32767)
2179: C1      	        pop     BC              ; Restore array name
217A: F1      	        pop     AF              ; Get number of dimensions
217B: EB      	        ex      DE,HL
217C: E3      	        ex      (SP),HL         ; Save subscript value
217D: E5      	        push    HL              ; Save LCRFLG and TYPE
217E: EB      	        ex      DE,HL
217F: 3C      	        inc     A               ; Count dimensions
2180: 57      	        ld      D,A             ; Save in D
2181: 7E      	        ld      A,(HL)          ; Get next byte in code string
2182: FE2C    	        cp      ','             ; Comma (more to come)?
2184: CA7421  	        jp      Z,SCPTLP        ; Yes - More subscripts
2187: CD0F18  	        call    CHKSYN          ; Make sure ")" follows
218A: 29      	        defb    ')'
218B: 22B581  	        ld      (NXTOPR),HL     ; Save code string address
218E: E1      	        pop     HL              ; Get LCRFLG and TYPE
218F: 229181  	        ld      (LCRFLG),HL     ; Restore Locate/create & type
2192: 1E00    	        ld      E,$00           ; Flag not CSAVE* or CLOAD*
2194: D5      	        push    DE              ; Save number of dimensions (D)
2195: 11      	        defb    $11             ; Skip "push HL" and "push AF'
              	
2196: E5      	ARLDSV: push    HL              ; Save code string address
2197: F5      	        push    AF              ; A = 00 , Flags set = Z,N
2198: 2ABD81  	        ld      HL,(VAREND)     ; Start of arrays
219B: 3E      	        defb    $3E             ; Skip "add HL,DE"
219C: 19      	FNDARY: add     HL,DE           ; Move to next array start
219D: EB      	        ex      DE,HL
219E: 2ABF81  	        ld      HL,(ARREND)     ; End of arrays
21A1: EB      	        ex      DE,HL           ; Current array pointer
21A2: CD0918  	        call    CPDEHL          ; End of arrays found?
21A5: CACE21  	        jp      Z,CREARY        ; Yes - Create array
21A8: 7E      	        ld      A,(HL)          ; Get second byte of name
21A9: B9      	        cp      C               ; Compare with name given
21AA: 23      	        inc     HL              ; Move on
21AB: C2B021  	        jp      NZ,NXTARY       ; Different - Find next array
21AE: 7E      	        ld      A,(HL)          ; Get first byte of name
21AF: B8      	        cp      B               ; Compare with name given
21B0: 23      	NXTARY: inc     HL              ; Move on
21B1: 5E      	        ld      E,(HL)          ; Get LSB of next array address
21B2: 23      	        inc     HL
21B3: 56      	        ld      D,(HL)          ; Get MSB of next array address
21B4: 23      	        inc     HL
21B5: C29C21  	        jp      NZ,FNDARY       ; Not found - Keep looking
21B8: 3A9181  	        ld      A,(LCRFLG)      ; Found Locate or Create it?
21BB: B7      	        or      A
21BC: C23615  	        jp      NZ,DDERR        ; Create - ?DD Error
21BF: F1      	        pop     AF              ; Locate - Get number of dim'ns
21C0: 44      	        ld      B,H             ; BC Points to array dim'ns
21C1: 4D      	        ld      C,L
21C2: CA942A  	        jp      Z,POPHRT        ; Jump if array load/save
21C5: 96      	        sub     (HL)            ; Same number of dimensions?
21C6: CA2C22  	        jp      Z,FINDEL        ; Yes - Find element
21C9: 1E10    	BSERR:  ld      E,BS            ; ?BS Error
21CB: C34115  	        jp      ERROR           ; Output error
              	
21CE: 110400  	CREARY: ld      DE,$0004        ; 4 Bytes per entry
21D1: F1      	        pop     AF              ; Array to save or 0 dim'ns?
21D2: CAFD1A  	        jp      Z,FCERR         ; Yes - ?FC Error
21D5: 71      	        ld      (HL),C          ; Save second byte of name
21D6: 23      	        inc     HL
21D7: 70      	        ld      (HL),B          ; Save first byte of name
21D8: 23      	        inc     HL
21D9: 4F      	        ld      C,A             ; Number of dimensions to C
21DA: CDEA14  	        call    CHKSTK          ; Check if enough memory
21DD: 23      	        inc     HL              ; Point to number of dimensions
21DE: 23      	        inc     HL
21DF: 22AA81  	        ld      (CUROPR),HL     ; Save address of pointer
21E2: 71      	        ld      (HL),C          ; Set number of dimensions
21E3: 23      	        inc     HL
21E4: 3A9181  	        ld      A,(LCRFLG)      ; Locate of Create?
21E7: 17      	        rla                     ; Carry set = Create
21E8: 79      	        ld      A,C             ; Get number of dimensions
21E9: 010B00  	CRARLP: ld      BC,10+1         ; Default dimension size 10
21EC: D2F121  	        jp      NC,DEFSIZ       ; Locate - Set default size
21EF: C1      	        pop     BC              ; Get specified dimension size
21F0: 03      	        inc     BC              ; Include zero element
21F1: 71      	DEFSIZ: ld      (HL),C          ; Save LSB of dimension size
21F2: 23      	        inc     HL
21F3: 70      	        ld      (HL),B          ; Save MSB of dimension size
21F4: 23      	        inc     HL
21F5: F5      	        push    AF              ; Save num' of dim'ns an status
21F6: E5      	        push    HL              ; Save address of dim'n size
21F7: CD902C  	        call    MLDEBC          ; Multiply DE by BC to find
21FA: EB      	        ex      DE,HL           ; amount of mem needed (to DE)
21FB: E1      	        pop     HL              ; Restore address of dimension
21FC: F1      	        pop     AF              ; Restore number of dimensions
21FD: 3D      	        dec     A               ; Count them
21FE: C2E921  	        jp      NZ,CRARLP       ; Do next dimension if more
2201: F5      	        push    AF              ; Save locate/create flag
2202: 42      	        ld      B,D             ; MSB of memory needed
2203: 4B      	        ld      C,E             ; LSB of memory needed
2204: EB      	        ex      DE,HL
2205: 19      	        add     HL,DE           ; Add bytes to array start
2206: DA0215  	        jp      C,OMERR         ; Too big - Error
2209: CDF314  	        call    ENFMEM          ; See if enough memory
220C: 22BF81  	        ld      (ARREND),HL     ; Save new end of array
              	
220F: 2B      	ZERARY: dec     HL              ; Back through array data
2210: 3600    	        ld      (HL),$00        ; Set array element to zero
2212: CD0918  	        call    CPDEHL          ; All elements zeroed?
2215: C20F22  	        jp      NZ,ZERARY       ; No - Keep on going
2218: 03      	        inc     BC              ; Number of bytes + 1
2219: 57      	        ld      D,A             ; A=0
221A: 2AAA81  	        ld      HL,(CUROPR)     ; Get address of array
221D: 5E      	        ld      E,(HL)          ; Number of dimensions
221E: EB      	        ex      DE,HL           ; To HL
221F: 29      	        add     HL,HL           ; Two bytes per dimension size
2220: 09      	        add     HL,BC           ; Add number of bytes
2221: EB      	        ex      DE,HL           ; Bytes needed to DE
2222: 2B      	        dec     HL
2223: 2B      	        dec     HL
2224: 73      	        ld      (HL),E          ; Save LSB of bytes needed
2225: 23      	        inc     HL
2226: 72      	        ld      (HL),D          ; Save MSB of bytes needed
2227: 23      	        inc     HL
2228: F1      	        pop     AF              ; Locate / Create?
2229: DA5022  	        jp      C,ENDDIM        ; A is 0 , End if create
222C: 47      	FINDEL: ld      B,A             ; Find array element
222D: 4F      	        ld      C,A
222E: 7E      	        ld      A,(HL)          ; Number of dimensions
222F: 23      	        inc     HL
2230: 16      	        defb    $16             ; Skip "pop HL"
2231: E1      	FNDELP: pop     HL              ; Address of next dim' size
2232: 5E      	        ld      E,(HL)          ; Get LSB of dim'n size
2233: 23      	        inc     HL
2234: 56      	        ld      D,(HL)          ; Get MSB of dim'n size
2235: 23      	        inc     HL
2236: E3      	        ex      (SP),HL         ; Save address - Get index
2237: F5      	        push    AF              ; Save number of dim'ns
2238: CD0918  	        call    CPDEHL          ; Dimension too large?
223B: D2C921  	        jp      NC,BSERR        ; Yes - ?BS Error
223E: E5      	        push    HL              ; Save index
223F: CD902C  	        call    MLDEBC          ; Multiply previous by size
2242: D1      	        pop     DE              ; Index supplied to DE
2243: 19      	        add     HL,DE           ; Add index to pointer
2244: F1      	        pop     AF              ; Number of dimensions
2245: 3D      	        dec     A               ; Count them
2246: 44      	        ld      B,H             ; MSB of pointer
2247: 4D      	        ld      C,L             ; LSB of pointer
2248: C23122  	        jp      NZ,FNDELP       ; More - Keep going
224B: 29      	        add     HL,HL           ; 4 Bytes per element
224C: 29      	        add     HL,HL
224D: C1      	        pop     BC              ; Start of array
224E: 09      	        add     HL,BC           ; Point to element
224F: EB      	        ex      DE,HL           ; Address of element to DE
2250: 2AB581  	ENDDIM: ld      HL,(NXTOPR)     ; Got code string address
2253: C9      	        ret
              	
              	
              	; returns the value of the 32-bit system tick counter as
              	; two 16-bit words
2254: CDAA1E  	TMR:    call    TSTNUM          ; Make sure it's a number
2257: CDE81A  	        call    DEINT           ; Get integer (-32768 to 32767)
225A: 2ACE81  	        ld      HL,(TMRCNT)     ; load the LSBytes of timer
225D: 7B      	        ld      A,E
225E: B2      	        or      D               ; is it 0?
225F: CA6522  	        jp      Z,ENDTMR        ; yes, jump over
2262: 2AD081  	        ld      HL,(TMRCNT+2)   ; load the MSBytes of timer
2265: 45      	ENDTMR: ld      B,L             ; move bytes...
2266: 7C      	        ld      A,H             ; ...into AB
2267: C38C22  	        jp      ABPASS          ; return word into AB
              	
              	
              	; returns the free space for BASIC or into the string pool
226A: 2ABF81  	FRE:    ld      HL,(ARREND)     ; Start of free memory
226D: EB      	        ex      DE,HL           ; To DE
226E: 210000  	        ld      HL,$0000        ; End of free memory
2271: 39      	        add     HL,SP           ; Current stack value
2272: 3A9281  	        ld      A,(TYPE)        ; Dummy argument type
2275: B7      	        or      A
2276: CA8622  	        jp      Z,FRENUM        ; Numeric - Free variable space
2279: CDED24  	        call    GSTRCU          ; Current string to pool
227C: CDED23  	        call    GARBGE          ; Garbage collection
227F: 2AAD80  	        ld      HL,(STRSPC)     ; Bottom of string space in use
2282: EB      	        ex      DE,HL           ; To DE
2283: 2AA881  	        ld      HL,(STRBOT)     ; Bottom of string space
2286: 7D      	FRENUM: ld      A,L             ; Get LSB of end
2287: 93      	        sub     E               ; Subtract LSB of beginning
2288: 4F      	        ld      C,A             ; Save difference if C
2289: 7C      	        ld      A,H             ; Get MSB of end
228A: 9A      	        sbc     A,D             ; Subtract MSB of beginning
228B: 41      	ACPASS: ld      B,C             ; Return integer AC
228C: 50      	ABPASS: ld      D,B             ; Return integer AB
228D: 1E00    	        ld      E,$00
228F: 219281  	        ld      HL,TYPE         ; Point to type
2292: 73      	        ld      (HL),E          ; Set type to numeric
2293: 0690    	        ld      B,$80+$10       ; 16 bit integer
2295: C3BB2B  	        jp      RETINT          ; Return the integer
              	
              	; returns the X position of the cursor during a print
2298: 3A9081  	POS:    ld      A,(CURPOS)      ; Get cursor position
229B: 47      	PASSA:  ld      B,A             ; Put A into AB
229C: AF      	        xor     A               ; Zero A
229D: C38C22  	        jp      ABPASS          ; Return integer AB
              	
22A0: CD2323  	DEF:    call    CHEKFN          ; Get "FN" and name
22A3: CD1523  	        call    IDTEST          ; Test for illegal direct
22A6: 01D51B  	        ld      BC,DATA         ; To get next statement
22A9: C5      	        push    BC              ; Save address for RETurn
22AA: D5      	        push    DE              ; Save address of function ptr
22AB: CD0F18  	        call    CHKSYN          ; Make sure "(" follows
22AE: 28      	        defb    '('
22AF: CDB120  	        call    GETVAR          ; Get argument variable name
22B2: E5      	        push    HL              ; Save code string address
22B3: EB      	        ex      DE,HL           ; Argument address to HL
22B4: 2B      	        dec     HL
22B5: 56      	        ld      D,(HL)          ; Get first byte of arg name
22B6: 2B      	        dec     HL
22B7: 5E      	        ld      E,(HL)          ; Get second byte of arg name
22B8: E1      	        pop     HL              ; Restore code string address
22B9: CDAA1E  	        call    TSTNUM          ; Make sure numeric argument
22BC: CD0F18  	        call    CHKSYN          ; Make sure ")" follows
22BF: 29      	        defb    ')'
22C0: CD0F18  	        call    CHKSYN          ; Make sure "=" follows
22C3: C5      	        defb    ZEQUAL          ; "=" token
22C4: 44      	        ld      B,H             ; Code string address to BC
22C5: 4D      	        ld      C,L
22C6: E3      	        ex      (SP),HL         ; Save code str , Get FN ptr
22C7: 71      	        ld      (HL),C          ; Save LSB of FN code string
22C8: 23      	        inc     HL
22C9: 70      	        ld      (HL),B          ; Save MSB of FN code string
22CA: C36223  	        jp      SVSTAD          ; Save address and do function
              	
22CD: CD2323  	DOFN:   call    CHEKFN          ; Make sure FN follows
22D0: D5      	        push    DE              ; Save function pointer address
22D1: CD7E1F  	        call    EVLPAR          ; Evaluate expression in "()"
22D4: CDAA1E  	        call    TSTNUM          ; Make sure numeric result
22D7: E3      	        ex      (SP),HL         ; Save code str , Get FN ptr
22D8: 5E      	        ld      E,(HL)          ; Get LSB of FN code string
22D9: 23      	        inc     HL
22DA: 56      	        ld      D,(HL)          ; Get MSB of FN code string
22DB: 23      	        inc     HL
22DC: 7A      	        ld      A,D             ; And function DEFined?
22DD: B3      	        or      E
22DE: CA3915  	        jp      Z,UFERR         ; No - ?UF Error
22E1: 7E      	        ld      A,(HL)          ; Get LSB of argument address
22E2: 23      	        inc     HL
22E3: 66      	        ld      H,(HL)          ; Get MSB of argument address
22E4: 6F      	        ld      L,A             ; HL = Arg variable address
22E5: E5      	        push    HL              ; Save it
22E6: 2AC381  	        ld      HL,(FNRGNM)     ; Get old argument name
22E9: E3      	        ex      (SP),HL         ; Save old , Get new
22EA: 22C381  	        ld      (FNRGNM),HL     ; Set new argument name
22ED: 2AC781  	        ld      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
22F0: E5      	        push    HL              ; Save it
22F1: 2AC581  	        ld      HL,(FNARG)      ; Get MSB,EXP of old arg value
22F4: E5      	        push    HL              ; Save it
22F5: 21C581  	        ld      HL,FNARG        ; HL = Value of argument
22F8: D5      	        push    DE              ; Save FN code string address
22F9: CDFC2B  	        call    FPTHL           ; Move FPREG to argument
22FC: E1      	        pop     HL              ; Get FN code string address
22FD: CDA71E  	        call    GETNUM          ; Get value from function
2300: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
2301: CD321A  	        call    GETCHR          ; Get next character
2304: C22D15  	        jp      NZ,SNERR        ; Bad character in FN - Error
2307: E1      	        pop     HL              ; Get MSB,EXP of old arg
2308: 22C581  	        ld      (FNARG),HL      ; Restore it
230B: E1      	        pop     HL              ; Get LSB,NLSB of old arg
230C: 22C781  	        ld      (FNARG+2),HL    ; Restore it
230F: E1      	        pop     HL              ; Get name of old arg
2310: 22C381  	        ld      (FNRGNM),HL     ; Restore it
2313: E1      	        pop     HL              ; Restore code string address
2314: C9      	        ret
              	
2315: E5      	IDTEST: push    HL              ; Save code string address
2316: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line number
2319: 23      	        inc     HL              ; -1 means direct statement
231A: 7C      	        ld      A,H
231B: B5      	        or      L
231C: E1      	        pop     HL              ; Restore code string address
231D: C0      	        ret     NZ              ; Return if in program
231E: 1E16    	        ld      E,ID            ; ?ID Error
2320: C34115  	        jp      ERROR
              	
2323: CD0F18  	CHEKFN: call    CHKSYN          ; Make sure FN follows
2326: B5      	        defb    ZFN             ; "FN" token
2327: 3E80    	        ld      A,$80
2329: 32B081  	        ld      (FORFLG),A      ; Flag FN name to find
232C: B6      	        or      (HL)            ; FN name has bit 7 set
232D: 47      	        ld      B,A             ; in first byte of name
232E: CDB620  	        call    GTFNAM          ; Get FN name
2331: C3AA1E  	        jp      TSTNUM          ; Make sure numeric function
              	
2334: CDAA1E  	STR:    call    TSTNUM          ; Make sure it's a number
2337: CD492D  	        call    NUMASC          ; Turn number into text
233A: CD6823  	STR1:   call    CRTST           ; Create string entry for it
233D: CDED24  	        call    GSTRCU          ; Current string to pool
2340: 014825  	        ld      BC,TOPOOL       ; Save in string pool
2343: C5      	        push    BC              ; Save address on stack
              	
2344: 7E      	SAVSTR: ld      A,(HL)          ; Get string length
2345: 23      	        inc     HL
2346: 23      	        inc     HL
2347: E5      	        push    HL              ; Save pointer to string
2348: CDC323  	        call    TESTR           ; See if enough string space
234B: E1      	        pop     HL              ; Restore pointer to string
234C: 4E      	        ld      C,(HL)          ; Get LSB of address
234D: 23      	        inc     HL
234E: 46      	        ld      B,(HL)          ; Get MSB of address
234F: CD5C23  	        call    CRTMST          ; Create string entry
2352: E5      	        push    HL              ; Save pointer to MSB of addr
2353: 6F      	        ld      L,A             ; Length of string
2354: CDE024  	        call    TOSTRA          ; Move to string area
2357: D1      	        pop     DE              ; Restore pointer to MSB
2358: C9      	        ret
              	
2359: CDC323  	MKTMST: call    TESTR           ; See if enough string space
235C: 21A481  	CRTMST: ld      HL,TMPSTR       ; Temporary string
235F: E5      	        push    HL              ; Save it
2360: 77      	        ld      (HL),A          ; Save length of string
2361: 23      	        inc     HL
2362: 23      	SVSTAD: inc     HL
2363: 73      	        ld      (HL),E          ; Save LSB of address
2364: 23      	        inc     HL
2365: 72      	        ld      (HL),D          ; Save MSB of address
2366: E1      	        pop     HL              ; Restore pointer
2367: C9      	        ret
              	
2368: 2B      	CRTST:  dec     HL              ; dec - INCed after
2369: 0622    	QTSTR:  ld      B,$22           ; '"'           ; Terminating quote
236B: 50      	        ld      D,B             ; Quote to D
236C: E5      	DTSTR:  push    HL              ; Save start
236D: 0EFF    	        ld      C,-1            ; Set counter to -1
236F: 23      	QTSTLP: inc     HL              ; Move on
2370: 7E      	        ld      A,(HL)          ; Get byte
2371: 0C      	        inc     C               ; Count bytes
2372: B7      	        or      A               ; End of line?
2373: CA7E23  	        jp      Z,CRTSTE        ; Yes - Create string entry
2376: BA      	        cp      D               ; Terminator D found?
2377: CA7E23  	        jp      Z,CRTSTE        ; Yes - Create string entry
237A: B8      	        cp      B               ; Terminator B found?
237B: C26F23  	        jp      NZ,QTSTLP       ; No - Keep looking
237E: FE22    	CRTSTE: cp      $22             ; '"'             ; End with '"'?
2380: CC321A  	        call    Z,GETCHR        ; Yes - Get next character
2383: E3      	        ex      (SP),HL         ; Starting quote
2384: 23      	        inc     HL              ; First byte of string
2385: EB      	        ex      DE,HL           ; To DE
2386: 79      	        ld      A,C             ; Get length
2387: CD5C23  	        call    CRTMST          ; Create string entry
238A: 11A481  	TSTOPL: ld      DE,TMPSTR       ; Temporary string
238D: 2A9681  	        ld      HL,(TMSTPT)     ; Temporary string pool pointer
2390: 22C981  	        ld      (FPREG),HL      ; Save address of string ptr
2393: 3E01    	        ld      A,$01
2395: 329281  	        ld      (TYPE),A        ; Set type to string
2398: CDFF2B  	        call    DETHL4          ; Move string to pool
239B: CD0918  	        call    CPDEHL          ; Out of string pool?
239E: 229681  	        ld      (TMSTPT),HL     ; Save new pointer
23A1: E1      	        pop     HL              ; Restore code string address
23A2: 7E      	        ld      A,(HL)          ; Get next code byte
23A3: C0      	        ret     NZ              ; Return if pool OK
23A4: 1E1E    	        ld      E,ST            ; ?ST Error
23A6: C34115  	        jp      ERROR           ; String pool overflow
              	
23A9: 23      	PRNUMS: inc     HL              ; Skip leading space
23AA: CD6823  	PRS:    call    CRTST           ; Create string entry for it
23AD: CDED24  	PRS1:   call    GSTRCU          ; Current string to pool
23B0: CDF32B  	        call    LOADFP          ; Move string block to BCDE
23B3: 1C      	        inc     E               ; Length + 1
23B4: 1D      	PRSLP:  dec     E               ; Count characters
23B5: C8      	        ret     Z               ; End of string
23B6: 0A      	        ld      A,(BC)          ; Get byte to output
23B7: CD1A18  	        call    OUTC            ; Output character in A
23BA: FE0D    	        cp      CR              ; Return?
23BC: CCF51C  	        call    Z,CNTEND        ; Yes - Position cursor to 0
23BF: 03      	        inc     BC              ; Next byte in string
23C0: C3B423  	        jp      PRSLP           ; More characters to output
              	
23C3: B7      	TESTR:  or      A               ; Test if enough room
23C4: 0E      	        defb    $0E             ; No garbage collection done
23C5: F1      	GRBDON: pop     AF              ; Garbage collection done
23C6: F5      	        push    AF              ; Save status
23C7: 2AAD80  	        ld      HL,(STRSPC)     ; Bottom of string space in use
23CA: EB      	        ex      DE,HL           ; To DE
23CB: 2AA881  	        ld      HL,(STRBOT)     ; Bottom of string area
23CE: 2F      	        cpl                     ; Negate length (Top down)
23CF: 4F      	        ld      C,A             ; -Length to BC
23D0: 06FF    	        ld      B,-1            ; BC = -ve length of string
23D2: 09      	        add     HL,BC           ; Add to bottom of space in use
23D3: 23      	        inc     HL              ; Plus one for 2's complement
23D4: CD0918  	        call    CPDEHL          ; Below string RAM area?
23D7: DAE123  	        jp      C,TESTOS        ; Tidy up if not done else err
23DA: 22A881  	        ld      (STRBOT),HL     ; Save new bottom of area
23DD: 23      	        inc     HL              ; Point to first byte of string
23DE: EB      	        ex      DE,HL           ; Address to DE
23DF: F1      	POPAF:  pop     AF              ; Throw away status push
23E0: C9      	        ret
              	
23E1: F1      	TESTOS: pop     AF              ; Garbage collect been done?
23E2: 1E1A    	        ld      E,OS            ; ?OS Error
23E4: CA4115  	        jp      Z,ERROR         ; Yes - Not enough string space
23E7: BF      	        cp      A               ; Flag garbage collect done
23E8: F5      	        push    AF              ; Save status
23E9: 01C523  	        ld      BC,GRBDON       ; Garbage collection done
23EC: C5      	        push    BC              ; Save for RETurn
23ED: 2A9481  	GARBGE: ld      HL,(LSTRAM)     ; Get end of RAM pointer
23F0: 22A881  	GARBLP: ld      (STRBOT),HL     ; Reset string pointer
23F3: 210000  	        ld      HL,$0000
23F6: E5      	        push    HL              ; Flag no string found
23F7: 2AAD80  	        ld      HL,(STRSPC)     ; Get bottom of string space
23FA: E5      	        push    HL              ; Save bottom of string space
23FB: 219881  	        ld      HL,TMSTPL       ; Temporary string pool
23FE: EB      	GRBLP:  ex      DE,HL
23FF: 2A9681  	        ld      HL,(TMSTPT)     ; Temporary string pool pointer
2402: EB      	        ex      DE,HL
2403: CD0918  	        call    CPDEHL          ; Temporary string pool done?
2406: 01FE23  	        ld      BC,GRBLP        ; Loop until string pool done
2409: C25224  	        jp      NZ,STPOOL       ; No - See if in string area
240C: 2ABB81  	        ld      HL,(PROGND)     ; Start of simple variables
240F: EB      	SMPVAR: ex      DE,HL
2410: 2ABD81  	        ld      HL,(VAREND)     ; End of simple variables
2413: EB      	        ex      DE,HL
2414: CD0918  	        call    CPDEHL          ; All simple strings done?
2417: CA2524  	        jp      Z,ARRLP         ; Yes - Do string arrays
241A: 7E      	        ld      A,(HL)          ; Get type of variable
241B: 23      	        inc     HL
241C: 23      	        inc     HL
241D: B7      	        or      A               ; "S" flag set if string
241E: CD5524  	        call    STRADD          ; See if string in string area
2421: C30F24  	        jp      SMPVAR          ; Loop until simple ones done
              	
2424: C1      	GNXARY: pop     BC              ; Scrap address of this array
2425: EB      	ARRLP:  ex      DE,HL
2426: 2ABF81  	        ld      HL,(ARREND)     ; End of string arrays
2429: EB      	        ex      DE,HL
242A: CD0918  	        call    CPDEHL          ; All string arrays done?
242D: CA7B24  	        jp      Z,SCNEND        ; Yes - Move string if found
2430: CDF32B  	        call    LOADFP          ; Get array name to BCDE
2433: 7B      	        ld      A,E             ; Get type of array
2434: E5      	        push    HL              ; Save address of num of dim'ns
2435: 09      	        add     HL,BC           ; Start of next array
2436: B7      	        or      A               ; Test type of array
2437: F22424  	        jp      P,GNXARY        ; Numeric array - Ignore it
243A: 22AA81  	        ld      (CUROPR),HL     ; Save address of next array
243D: E1      	        pop     HL              ; Get address of num of dim'ns
243E: 4E      	        ld      C,(HL)          ; BC = Number of dimensions
243F: 0600    	        ld      B,$00
2441: 09      	        add     HL,BC           ; Two bytes per dimension size
2442: 09      	        add     HL,BC
2443: 23      	        inc     HL              ; Plus one for number of dim'ns
2444: EB      	GRBARY: ex      DE,HL
2445: 2AAA81  	        ld      HL,(CUROPR)     ; Get address of next array
2448: EB      	        ex      DE,HL
2449: CD0918  	        call    CPDEHL          ; Is this array finished?
244C: CA2524  	        jp      Z,ARRLP         ; Yes - Get next one
244F: 014424  	        ld      BC,GRBARY       ; Loop until array all done
2452: C5      	STPOOL: push    BC              ; Save return address
2453: F680    	        or      $80             ; Flag string type
2455: 7E      	STRADD: ld      A,(HL)          ; Get string length
2456: 23      	        inc     HL
2457: 23      	        inc     HL
2458: 5E      	        ld      E,(HL)          ; Get LSB of string address
2459: 23      	        inc     HL
245A: 56      	        ld      D,(HL)          ; Get MSB of string address
245B: 23      	        inc     HL
245C: F0      	        ret     P               ; Not a string - Return
245D: B7      	        or      A               ; Set flags on string length
245E: C8      	        ret     Z               ; Null string - Return
245F: 44      	        ld      B,H             ; Save variable pointer
2460: 4D      	        ld      C,L
2461: 2AA881  	        ld      HL,(STRBOT)     ; Bottom of new area
2464: CD0918  	        call    CPDEHL          ; String been done?
2467: 60      	        ld      H,B             ; Restore variable pointer
2468: 69      	        ld      L,C
2469: D8      	        ret     C               ; String done - Ignore
246A: E1      	        pop     HL              ; Return address
246B: E3      	        ex      (SP),HL         ; Lowest available string area
246C: CD0918  	        call    CPDEHL          ; String within string area?
246F: E3      	        ex      (SP),HL         ; Lowest available string area
2470: E5      	        push    HL              ; Re-save return address
2471: 60      	        ld      H,B             ; Restore variable pointer
2472: 69      	        ld      L,C
2473: D0      	        ret     NC              ; Outside string area - Ignore
2474: C1      	        pop     BC              ; Get return , Throw 2 away
2475: F1      	        pop     AF              ;
2476: F1      	        pop     AF              ;
2477: E5      	        push    HL              ; Save variable pointer
2478: D5      	        push    DE              ; Save address of current
2479: C5      	        push    BC              ; Put back return address
247A: C9      	        ret                     ; Go to it
              	
247B: D1      	SCNEND: pop     DE              ; Addresses of strings
247C: E1      	        pop     HL              ;
247D: 7D      	        ld      A,L             ; HL = 0 if no more to do
247E: B4      	        or      H
247F: C8      	        ret     Z               ; No more to do - Return
2480: 2B      	        dec     HL
2481: 46      	        ld      B,(HL)          ; MSB of address of string
2482: 2B      	        dec     HL
2483: 4E      	        ld      C,(HL)          ; LSB of address of string
2484: E5      	        push    HL              ; Save variable address
2485: 2B      	        dec     HL
2486: 2B      	        dec     HL
2487: 6E      	        ld      L,(HL)          ; HL = Length of string
2488: 2600    	        ld      H,$00
248A: 09      	        add     HL,BC           ; Address of end of string+1
248B: 50      	        ld      D,B             ; String address to DE
248C: 59      	        ld      E,C
248D: 2B      	        dec     HL              ; Last byte in string
248E: 44      	        ld      B,H             ; Address to BC
248F: 4D      	        ld      C,L
2490: 2AA881  	        ld      HL,(STRBOT)     ; Current bottom of string area
2493: CDDC14  	        call    MOVSTR          ; Move string to new address
2496: E1      	        pop     HL              ; Restore variable address
2497: 71      	        ld      (HL),C          ; Save new LSB of address
2498: 23      	        inc     HL
2499: 70      	        ld      (HL),B          ; Save new MSB of address
249A: 69      	        ld      L,C             ; Next string area+1 to HL
249B: 60      	        ld      H,B
249C: 2B      	        dec     HL              ; Next string area address
249D: C3F023  	        jp      GARBLP          ; Look for more strings
              	
24A0: C5      	CONCAT: push    BC              ; Save prec' opr & code string
24A1: E5      	        push    HL              ;
24A2: 2AC981  	        ld      HL,(FPREG)      ; Get first string
24A5: E3      	        ex      (SP),HL         ; Save first string
24A6: CD301F  	        call    OPRND           ; Get second string
24A9: E3      	        ex      (SP),HL         ; Restore first string
24AA: CDAB1E  	        call    TSTSTR          ; Make sure it's a string
24AD: 7E      	        ld      A,(HL)          ; Get length of second string
24AE: E5      	        push    HL              ; Save first string
24AF: 2AC981  	        ld      HL,(FPREG)      ; Get second string
24B2: E5      	        push    HL              ; Save second string
24B3: 86      	        add     A,(HL)          ; Add length of second string
24B4: 1E1C    	        ld      E,LS            ; ?LS Error
24B6: DA4115  	        jp      C,ERROR         ; String too long - Error
24B9: CD5923  	        call    MKTMST          ; Make temporary string
24BC: D1      	        pop     DE              ; Get second string to DE
24BD: CDF124  	        call    GSTRDE          ; Move to string pool if needed
24C0: E3      	        ex      (SP),HL         ; Get first string
24C1: CDF024  	        call    GSTRHL          ; Move to string pool if needed
24C4: E5      	        push    HL              ; Save first string
24C5: 2AA681  	        ld      HL,(TMPSTR+2)   ; Temporary string address
24C8: EB      	        ex      DE,HL           ; To DE
24C9: CDD724  	        call    SSTSA           ; First string to string area
24CC: CDD724  	        call    SSTSA           ; Second string to string area
24CF: 21C51E  	        ld      HL,EVAL2        ; Return to evaluation loop
24D2: E3      	        ex      (SP),HL         ; Save return,get code string
24D3: E5      	        push    HL              ; Save code string address
24D4: C38A23  	        jp      TSTOPL          ; To temporary string to pool
              	
24D7: E1      	SSTSA:  pop     HL              ; Return address
24D8: E3      	        ex      (SP),HL         ; Get string block,save return
24D9: 7E      	        ld      A,(HL)          ; Get length of string
24DA: 23      	        inc     HL
24DB: 23      	        inc     HL
24DC: 4E      	        ld      C,(HL)          ; Get LSB of string address
24DD: 23      	        inc     HL
24DE: 46      	        ld      B,(HL)          ; Get MSB of string address
24DF: 6F      	        ld      L,A             ; Length to L
24E0: 2C      	TOSTRA: inc     L               ; inc - DECed after
24E1: 2D      	TSALP:  dec     L               ; Count bytes moved
24E2: C8      	        ret     Z               ; End of string - Return
24E3: 0A      	        ld      A,(BC)          ; Get source
24E4: 12      	        ld      (DE),A          ; Save destination
24E5: 03      	        inc     BC              ; Next source
24E6: 13      	        inc     DE              ; Next destination
24E7: C3E124  	        jp      TSALP           ; Loop until string moved
              	
24EA: CDAB1E  	GETSTR: call    TSTSTR          ; Make sure it's a string
24ED: 2AC981  	GSTRCU: ld      HL,(FPREG)      ; Get current string
24F0: EB      	GSTRHL: ex      DE,HL           ; Save DE
24F1: CD0B25  	GSTRDE: call    BAKTMP          ; Was it last tmp-str?
24F4: EB      	        ex      DE,HL           ; Restore DE
24F5: C0      	        ret     NZ              ; No - Return
24F6: D5      	        push    DE              ; Save string
24F7: 50      	        ld      D,B             ; String block address to DE
24F8: 59      	        ld      E,C
24F9: 1B      	        dec     DE              ; Point to length
24FA: 4E      	        ld      C,(HL)          ; Get string length
24FB: 2AA881  	        ld      HL,(STRBOT)     ; Current bottom of string area
24FE: CD0918  	        call    CPDEHL          ; Last one in string area?
2501: C20925  	        jp      NZ,POPHL        ; No - Return
2504: 47      	        ld      B,A             ; Clear B (A=0)
2505: 09      	        add     HL,BC           ; Remove string from str' area
2506: 22A881  	        ld      (STRBOT),HL     ; Save new bottom of str' area
2509: E1      	POPHL:  pop     HL              ; Restore string
250A: C9      	        ret
              	
250B: 2A9681  	BAKTMP: ld      HL,(TMSTPT)     ; Get temporary string pool top
250E: 2B      	        dec     HL              ; Back
250F: 46      	        ld      B,(HL)          ; Get MSB of address
2510: 2B      	        dec     HL              ; Back
2511: 4E      	        ld      C,(HL)          ; Get LSB of address
2512: 2B      	        dec     HL              ; Back
2513: 2B      	        dec     HL              ; Back
2514: CD0918  	        call    CPDEHL          ; String last in string pool?
2517: C0      	        ret     NZ              ; Yes - Leave it
2518: 229681  	        ld      (TMSTPT),HL     ; Save new string pool top
251B: C9      	        ret
              	
251C: 019B22  	LEN:    ld      BC,PASSA        ; To return integer A
251F: C5      	        push    BC              ; Save address
2520: CDEA24  	GETLEN: call    GETSTR          ; Get string and its length
2523: AF      	        xor     A
2524: 57      	        ld      D,A             ; Clear D
2525: 329281  	        ld      (TYPE),A        ; Set type to numeric
2528: 7E      	        ld      A,(HL)          ; Get length of string
2529: B7      	        or      A               ; Set status flags
252A: C9      	        ret
              	
252B: 019B22  	ASC:    ld      BC,PASSA        ; To return integer A
252E: C5      	        push    BC              ; Save address
252F: CD2025  	GTFLNM: call    GETLEN          ; Get length of string
2532: CAFD1A  	        jp      Z,FCERR         ; Null string - Error
2535: 23      	        inc     HL
2536: 23      	        inc     HL
2537: 5E      	        ld      E,(HL)          ; Get LSB of address
2538: 23      	        inc     HL
2539: 56      	        ld      D,(HL)          ; Get MSB of address
253A: 1A      	        ld      A,(DE)          ; Get first byte of string
253B: C9      	        ret
              	
253C: 3E01    	CHR:    ld      A,$01           ; One character string
253E: CD5923  	        call    MKTMST          ; Make a temporary string
2541: CD3526  	        call    MAKINT          ; Make it integer A
2544: 2AA681  	        ld      HL,(TMPSTR+2)   ; Get address of string
2547: 73      	        ld      (HL),E          ; Save character
2548: C1      	TOPOOL: pop     BC              ; Clean up stack
2549: C38A23  	        jp      TSTOPL          ; Temporary string to pool
              	
254C: CDE525  	LEFT:   call    LFRGNM          ; Get number and ending ")"
254F: AF      	        xor     A               ; Start at first byte in string
2550: E3      	RIGHT1: ex      (SP),HL         ; Save code string,Get string
2551: 4F      	        ld      C,A             ; Starting position in string
2552: E5      	MID1:   push    HL              ; Save string block address
2553: 7E      	        ld      A,(HL)          ; Get length of string
2554: B8      	        cp      B               ; Compare with number given
2555: DA5A25  	        jp      C,ALLFOL        ; All following bytes required
2558: 78      	        ld      A,B             ; Get new length
2559: 11      	        defb    $11             ; Skip "ld C,0"
255A: 0E00    	ALLFOL: ld      C,$00           ; First byte of string
255C: C5      	        push    BC              ; Save position in string
255D: CDC323  	        call    TESTR           ; See if enough string space
2560: C1      	        pop     BC              ; Get position in string
2561: E1      	        pop     HL              ; Restore string block address
2562: E5      	        push    HL              ; And re-save it
2563: 23      	        inc     HL
2564: 23      	        inc     HL
2565: 46      	        ld      B,(HL)          ; Get LSB of address
2566: 23      	        inc     HL
2567: 66      	        ld      H,(HL)          ; Get MSB of address
2568: 68      	        ld      L,B             ; HL = address of string
2569: 0600    	        ld      B,$00           ; BC = starting address
256B: 09      	        add     HL,BC           ; Point to that byte
256C: 44      	        ld      B,H             ; BC = source string
256D: 4D      	        ld      C,L
256E: CD5C23  	        call    CRTMST          ; Create a string entry
2571: 6F      	        ld      L,A             ; Length of new string
2572: CDE024  	        call    TOSTRA          ; Move string to string area
2575: D1      	        pop     DE              ; Clear stack
2576: CDF124  	        call    GSTRDE          ; Move to string pool if needed
2579: C38A23  	        jp      TSTOPL          ; Temporary string to pool
              	
257C: CDE525  	RIGHT:  call    LFRGNM          ; Get number and ending ")"
257F: D1      	        pop     DE              ; Get string length
2580: D5      	        push    DE              ; And re-save
2581: 1A      	        ld      A,(DE)          ; Get length
2582: 90      	        sub     B               ; Move back N bytes
2583: C35025  	        jp      RIGHT1          ; Go and get sub-string
              	
2586: EB      	MID:    ex      DE,HL           ; Get code string address
2587: 7E      	        ld      A,(HL)          ; Get next byte ',' or ")"
2588: CDEA25  	        call    MIDNUM          ; Get number supplied
258B: 04      	        inc     B               ; Is it character zero?
258C: 05      	        dec     B
258D: CAFD1A  	        jp      Z,FCERR         ; Yes - Error
2590: C5      	        push    BC              ; Save starting position
2591: 1EFF    	        ld      E,$FF           ; All of string
2593: FE29    	        cp      ')'             ; Any length given?
2595: CA9F25  	        jp      Z,RSTSTR        ; No - Rest of string
2598: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
259B: 2C      	        defb    ','
259C: CD3226  	        call    GETINT          ; Get integer 0-255
259F: CD0F18  	RSTSTR: call    CHKSYN          ; Make sure ")" follows
25A2: 29      	        defb    ')'
25A3: F1      	        pop     AF              ; Restore starting position
25A4: E3      	        ex      (SP),HL         ; Get string,save code string
25A5: 015225  	        ld      BC,MID1         ; Continuation of MID$ routine
25A8: C5      	        push    BC              ; Save for return
25A9: 3D      	        dec     A               ; Starting position-1
25AA: BE      	        cp      (HL)            ; Compare with length
25AB: 0600    	        ld      B,$00           ; Zero bytes length
25AD: D0      	        ret     NC              ; Null string if start past end
25AE: 4F      	        ld      C,A             ; Save starting position-1
25AF: 7E      	        ld      A,(HL)          ; Get length of string
25B0: 91      	        sub     C               ; Subtract start
25B1: BB      	        cp      E               ; Enough string for it?
25B2: 47      	        ld      B,A             ; Save maximum length available
25B3: D8      	        ret     C               ; Truncate string if needed
25B4: 43      	        ld      B,E             ; Set specified length
25B5: C9      	        ret                     ; Go and create string
              	
25B6: CD2025  	VAL:    call    GETLEN          ; Get length of string
25B9: CA7329  	        jp      Z,RESZER        ; Result zero
25BC: 5F      	        ld      E,A             ; Save length
25BD: 23      	        inc     HL
25BE: 23      	        inc     HL
25BF: 7E      	        ld      A,(HL)          ; Get LSB of address
25C0: 23      	        inc     HL
25C1: 66      	        ld      H,(HL)          ; Get MSB of address
25C2: 6F      	        ld      L,A             ; HL = String address
25C3: E5      	        push    HL              ; Save string address
25C4: 19      	        add     HL,DE
25C5: 46      	        ld      B,(HL)          ; Get end of string+1 byte
25C6: 72      	        ld      (HL),D          ; Zero it to terminate
25C7: E3      	        ex      (SP),HL         ; Save string end,get start
25C8: C5      	        push    BC              ; Save end+1 byte
25C9: 7E      	        ld      A,(HL)          ; Get starting byte
25CA: FE24    	        cp      '$'             ; Hex number indicated? [function added]
25CC: C2D425  	        jp      NZ,VAL1
25CF: CD723A  	        call    HEXTFP          ; Convert Hex to FPREG
25D2: 180D    	        jr      VAL3
25D4: FE25    	VAL1:   cp      '%'             ; Binary number indicated? [function added]
25D6: C2DE25  	        jp      NZ,VAL2
25D9: CDE23A  	        call    BINTFP          ; Convert Bin to FPREG
25DC: 1803    	        jr      VAL3
25DE: CDAB2C  	VAL2:   call    ASCTFP          ; Convert ASCII string to FP
25E1: C1      	VAL3:   pop     BC              ; Restore end+1 byte
25E2: E1      	        pop     HL              ; Restore end+1 address
25E3: 70      	        ld      (HL),B          ; Put back original byte
25E4: C9      	        ret
              	
25E5: EB      	LFRGNM: ex      DE,HL           ; Code string address to HL
25E6: CD0F18  	        call    CHKSYN          ; Make sure ")" follows
25E9: 29      	        defb    ')'
25EA: C1      	MIDNUM: pop     BC              ; Get return address
25EB: D1      	        pop     DE              ; Get number supplied
25EC: C5      	        push    BC              ; Re-save return address
25ED: 43      	        ld      B,E             ; Number to B
25EE: C9      	        ret
              	
25EF: CD3526  	INP:    call    MAKINT          ; Make it integer A
25F2: 32A080  	        ld      (INPORT),A      ; Set input port
25F5: CD9F80  	        call    INPSUB          ; Get input from port
25F8: C39B22  	        jp      PASSA           ; Return integer A
              	
25FB: CD1F26  	POUT:   call    SETIO           ; Set up port number
25FE: C36780  	        jp      OUTSUB          ; Output data and return
              	
2601: CD1F26  	WAIT:   call    SETIO           ; Set up port number
2604: F5      	        push    AF              ; Save AND mask
2605: 1E00    	        ld      E,$00           ; Assume zero if none given
2607: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
2608: CD321A  	        call    GETCHR          ; Get next character
260B: CA1526  	        jp      Z,NOXOR         ; No XOR byte given
260E: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
2611: 2C      	        defb    ','
2612: CD3226  	        call    GETINT          ; Get integer 0-255 to XOR with
2615: C1      	NOXOR:  pop     BC              ; Restore AND mask
2616: CD9F80  	WAITLP: call    INPSUB          ; Get input
2619: AB      	        xor     E               ; Flip selected bits
261A: A0      	        and     B               ; Result non-zero?
261B: CA1626  	        jp      Z,WAITLP        ; No = keep waiting
261E: C9      	        ret
              	
261F: CD3226  	SETIO:  call    GETINT          ; Get integer 0-255
2622: 32A080  	        ld      (INPORT),A      ; Set input port
2625: 326880  	        ld      (OTPORT),A      ; Set output port
2628: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
262B: 2C      	        defb    ','
262C: C33226  	        jp      GETINT          ; Get integer 0-255 and return
              	
262F: CD321A  	FNDNUM: call    GETCHR          ; Get next character
2632: CDA71E  	GETINT: call    GETNUM          ; Get a number from 0 to 255
2635: CDE21A  	MAKINT: call    DEPINT          ; Make sure value 0 - 255
2638: 7A      	        ld      A,D             ; Get MSB of number
2639: B7      	        or      A               ; Zero?
263A: C2FD1A  	        jp      NZ,FCERR        ; No - Error
263D: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
263E: CD321A  	        call    GETCHR          ; Get next character
2641: 7B      	        ld      A,E             ; Get number to A
2642: C9      	        ret
              	
              	
              	; activate a Non-Maskable Interrupt hooked to VDP interrupt signal
2643: CDA71E  	NMI:    call    GETNUM          ; Get memory address
2646: CDE81A  	        call    DEINT           ; get integer -32768 to 32767
2649: 7B      	        ld      A,E             ; check if address is 0
264A: B2      	        or      D
264B: 2011    	        jr      NZ,NM1          ; no, so jump over
264D: F3      	        di                      ; disable INTs
264E: CD7A26  	        call    NMIDINT         ; disable VDP INT
2651: E5      	        push    HL              ; store HL
2652: 21ED45  	        ld      HL,$45ED        ; these are the op-codes for "RETN"
2655: 226180  	        ld      (NMIUSR),HL     ; store RETN
2658: AF      	        xor     A
2659: 326380  	        ld      (NMIUSR+2),A    ; "NOP"
265C: 1811    	        jr      NMI2            ; execute the last part of code
265E: E5      	NM1:    push    HL              ; store current HL
265F: EB      	        ex      DE,HL           ; move address argument into HL
2660: F3      	        di                      ; disable INTs
2661: CD7A26  	        call    NMIDINT         ; disable VDP INT, if enabled
2664: 3EC3    	        ld      A,$C3           ; "jp" instruction
2666: 326180  	        ld      (NMIUSR),A      ; store it
2669: 226280  	        ld      (NMIUSR+1),HL   ; store address
266C: CD7326  	        call    NMIEINT         ; re-enable VDP INT
266F: FB      	NMI2:   ei                      ; re-enable INTS
2670: 00      	        nop                     ; wait for INTs
2671: E1      	        pop    HL               ; retrieve HL
2672: C9      	        ret                     ; return to caller
              	; enable VDP INT
2673: CD8926  	NMIEINT:call    NMIVR1          ; load default VReg #1 setting
2676: F620    	        or      %00100000       ; enable VDP INT
2678: 1803    	        jr      NMIINT          ; rest of code is shared
              	; disable VDP INT
267A: CD8926  	NMIDINT:call    NMIVR1          ; load default VReg #1 setting
267D: D5      	NMIINT: push    DE              ; store DE
267E: 5F      	        ld      E,A             ; move value into E
267F: 3E01    	        ld      A,$01           ; VREG #1
2681: F3      	        di                      ; disable INTs
2682: CD3406  	        call    WRITE_VREG      ; disable VDP INT
2685: FB      	        ei                      ; re-enable INTs
2686: 00      	        nop                     ; wait for INTs being enabled
2687: D1      	        pop     DE              ; retrieve DE
2688: C9      	        ret                     ; return to caller
              	
              	; load VREG #1 setting for current screen mode and return it into A
2689: E5      	NMIVR1: push    HL              ; store HL
268A: D5      	        push    DE              ; store DE
268B: 3AE081  	        ld      A,(SCR_MODE)    ; check screen mode
268E: 87      	        add     A,A             ; multiply A by 8...
268F: 87      	        add     A,A             ; ...so that reg. A can points..
2690: 87      	        add     A,A             ; to the correct settings
2691: 3C      	        inc     A               ; need to change VREG 1
2692: 5F      	        ld      E,A             ; copy A into E
2693: 1600    	        ld      D,$00           ; reset D
2695: 21350A  	        ld      HL,VDPMODESET   ; pointer to register #1 setting...
2698: 19      	        add     HL,DE           ; ...for current screen mode
2699: 7E      	        ld      A,(HL)          ; load current setting
269A: D1      	        pop     DE              ; retrieve DE
269B: E1      	        pop     HL              ; retrieve HL
269C: C9      	        ret                     ; return to caller
              	
              	; execute a machine language routine, eventually passing a param into A
269D: CDA71E  	SYS:    call    GETNUM          ; Get memory address
26A0: CDE81A  	        call    DEINT           ; Get integer -32768 to 32767
26A3: ED53F181	        ld      (TMPBFR2),DE    ; store user routine's address
26A7: AF      	        xor     A               ; reset A
26A8: 32EF81  	        ld      (TMPBFR1),A     ; store into temp buffer
26AB: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
26AC: CD321A  	        call    GETCHR          ; check next character
26AF: 280A    	        jr      Z,NOSYSPR       ; jump if nothing follows
26B1: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
26B4: 2C      	        defb    ','
26B5: CD3226  	        call    GETINT          ; get byte value (0~255) if something follows
26B8: 32EF81  	        ld      (TMPBFR1),A     ; store into temp buffer
26BB: 3AEF81  	NOSYSPR:ld      A,(TMPBFR1)     ; recover A
26BE: ED5BF181	        ld      DE,(TMPBFR2)    ; recover user routine's address
26C2: E5      	        push    HL              ; save code string address
26C3: EB      	        ex      DE,HL           ; move user routine's address into HL
26C4: 11C926  	        ld      DE,SYSRET       ; set point of return after the user routine
26C7: D5      	        push    DE              ; store into stack
26C8: E9      	        jp      (HL)            ; call user routine
26C9: E1      	SYSRET: pop     HL              ; retrieve code string address
26CA: C9      	        ret                     ; return to caller
              	
              	
              	; read the contents of a byte from RAM
26CB: CDE81A  	PEEK:   call    DEINT           ; Get memory address into DE
26CE: 1A      	        ld      A,(DE)          ; Read value of memory cell
26CF: C39B22  	        jp      PASSA           ; Return into A
              	
              	; read the contents of a byte from VRAM
26D2: CDE81A  	VPEEK:  call    DEINT           ; Get VRAM address into DE
26D5: EB      	        ex      DE,HL           ; Copy param into HL
26D6: F3      	        di                      ; Disable interrupts
26D7: CD0A06  	        call    READ_VIDEO_LOC  ; Read data from VRAM at address HL
26DA: FB      	        ei                      ; Re-enable interrupts
26DB: EB      	        ex      DE,HL           ; Restore HL
26DC: C39B22  	        jp      PASSA           ; Return value into A
              	
              	; recover params for POKE/VPOKE commands
              	; returns address into DE and byte to be written into A
26DF: CDA71E  	PKEPRMS:call    GETNUM          ; Get memory address
26E2: CDE81A  	        call    DEINT           ; Get integer -32768 to 32767
26E5: ED53EF81	        ld      (TMPBFR1),DE    ; Store DE into a temp. buffer
26E9: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
26EC: 2C      	        defb    ','
26ED: CD3226  	        call    GETINT          ; Get integer 0-255
26F0: ED5BEF81	        ld      DE,(TMPBFR1)    ; Restore memory address
26F4: C9      	        ret                     ; Return to caller
              	
              	; write a byte into SRAM
26F5: CDDF26  	POKE:   call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
26F8: 12      	        ld      (DE),A          ; Load it into memory
26F9: C9      	        ret
              	
              	; write a byte into VRAM
26FA: CDDF26  	VPOKE:  call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
26FD: EB      	        ex      DE,HL           ; Copy address into HL
26FE: F3      	        di                      ; Disable interrupts
26FF: CD1F06  	        call    WRITE_VIDEO_LOC ; write data into VRAM at address HL
2702: FB      	        ei                      ; Re-enable interrupts
2703: EB      	        ex      DE,HL           ; Restore HL
2704: C9      	        ret                     ; Return to caller
              	
              	; position the cursor at a specific X,Y location onto screen
2705: CD3226  	LOCATE: call    GETINT          ; get the first param into A
2708: E5      	        push    HL              ; store HL
2709: 21DE81  	        ld      HL,SCR_SIZE_W   ; load address of screen width
270C: 5E      	        ld      E,(HL)          ; load screen width into E
270D: E1      	        pop     HL              ; restore HL
270E: BB      	        cp      E               ; compare witdh with param
270F: D2FD1A  	        jp      NC,FCERR        ; value over the width of the screen, exit with Illegal F.C. error
2712: 32EF81  	        ld      (TMPBFR1),A     ; Store X into a temp. buffer
2715: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
2718: 2C      	        defb    ','
2719: CD3226  	        call    GETINT          ; Get the second param into A
271C: E5      	        push    HL              ; store HL
271D: 21DF81  	        ld      HL,SCR_SIZE_H   ; load address of screen width
2720: 5E      	        ld      E,(HL)          ; load screen width into A
2721: E1      	        pop     HL              ; restore HL
2722: BB      	        cp      E               ; compare witdh with param
2723: D2FD1A  	        jp      NC,FCERR        ; value over the height of the screen, exit with Illegal F.C. error
2726: 32E781  	        ld      (SCR_CUR_NY),A  ; store new Y
2729: 3AEF81  	        ld      A,(TMPBFR1)     ; recover the new X
272C: 32E681  	        ld      (SCR_CUR_NX),A  ; store new X
272F: E5      	        push    HL              ; store HL
2730: F3      	        di                      ; disable INTs
2731: CD5006  	        call    MOVCRS          ; move cursor to new location
2734: FB      	        ei                      ; re-enable INTs
2735: E1      	        pop     HL              ; restore HL
2736: C9      	        ret                     ; return to caller
              	
              	; write a byte into one of the PSG registers
2737: CD3226  	SREG:   call    GETINT          ; Get register number back into A
273A: FE10    	        cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
273C: D2FD1A  	        jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
273F: 32EF81  	        ld      (TMPBFR1),A     ; Store A into a temp. buffer
2742: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
2745: 2C      	        defb    ','
2746: CD3226  	        call    GETINT          ; get second value (0-255), returned into A
2749: 5F      	        ld      E,A             ; store value into E
274A: 3AEF81  	        ld      A,(TMPBFR1)     ; recover VDP register and store into D
274D: 0E40    	        ld      C,PSG_REG       ; output port to access PSG registers
274F: ED79    	        out     (C),A           ; send register # to PSG
2751: 0E41    	        ld      C,PSG_DAT       ; output port to send data to PSG
2753: ED59    	        out     (C),E           ; send byte to write into selected register
2755: C9      	        ret                     ; return to caller
              	
              	; VOLUME ch,vol
              	; set the volume for the audio channels
              	; "ch" is 1~3 for corresponding channel, or 0 for all; "vol" is 0~15 (0=OFF, 15=MAX)
2756: CD3226  	VOLUME: call    GETINT          ; get integer 0-255 (recover channel)
2759: FE04    	        cp      $04             ; check if it's in the range 0~3
275B: D2FD1A  	        jp      NC,FCERR        ; if not, exit with Illegal function call error
275E: 32EF81  	        ld      (TMPBFR1),A     ; Store A into a temp. buffer
2761: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
2764: 2C      	        defb    ','
2765: CD3226  	        call    GETINT          ; get integer 0-255 (recover channel)
2768: FE10    	        cp      $10             ; check if it's in the range 0~15
276A: D2FD1A  	        jp      NC,FCERR        ; if not, exit with Illegal funcion call
276D: 57      	        ld      D,A             ; store volume into D
276E: 3AEF81  	        ld      A,(TMPBFR1)     ; retrieve channel
2771: A7      	        and     A               ; is it 0? (0=every channel)
2772: 2010    	        jr      NZ,VOLCH        ; no, jump over
2774: 0603    	        ld      B,$03           ; yes, set every channel
2776: 1E08    	        ld      E,$08           ; register volume of first channel
2778: 0E40    	RPVOLCG:ld      C,PSG_REG       ; PSG register port
277A: ED59    	        out     (C),E           ; set register #
277C: 0E41    	        ld      C,PSG_DAT       ; PSG data port
277E: ED51    	        out     (C),D           ; send volume
2780: 1C      	        inc     E               ; next register
2781: 10F5    	        djnz    RPVOLCG         ; repeat for each channel
2783: C9      	        ret                     ; return to caller
2784: 0E40    	VOLCH:  ld      C,PSG_REG       ; PSG register port
2786: C607    	        add     $07             ; add 7 to A so that we have the correct register (1->8, 2->9, 3->10)
2788: ED79    	        out     (C),A           ; set register
278A: 0E41    	        ld      C,PSG_DAT       ; PSG data port
278C: ED51    	        out     (C),D           ; send volume level
278E: C9      	        ret                     ; return to caller
              	
              	; SOUND ch,tone,dur
              	; play a tone or noise of "tone" frequency from selected channel "ch" for duration "dur"
              	; "ch" is 1~6 (0=means sound OFF,1~3 for tone, 4~6 for noise) / "tone" is 1~4,095 (0=means no tone) /
              	; "dur" is 1~16383 h.o.s.,0.001~163s (0=means non-stop tone)
278F: CD3226  	SOUND:  call    GETINT          ; get integer 0-255 (recover channel)
2792: A7      	        and     A               ; is it zero?
2793: 2006    	        jr      NZ,CTSNDC       ; no, continue with checking of params
2795: E5      	        push    HL              ; store HL
2796: CDA70B  	        call    CLRPSGREGS      ; yes, it's zero, so reset PSG registers to shut down every sound
2799: E1      	        pop     HL              ; retrieve HL
279A: C9      	        ret                     ; return to caller
279B: 32EF81  	CTSNDC: ld      (TMPBFR1),A     ; no, continue by storing A into a temp. buffer
279E: FE04    	        cp      $04             ; is channel >3?
27A0: D22028  	        jp      NC,NOISUP       ; Yes - check to see if it's a noise channel
27A3: CD0F18  	        call    CHKSYN          ; No, continue checking by making sure ',' follows
27A6: 2C      	        defb    ','
27A7: CDA71E  	        call    GETNUM          ; Get tone frequency
27AA: CDE81A  	        call    DEINT           ; Get integer -32768 to 32767
27AD: ED53F181	        ld      (TMPBFR2),DE    ; Store frequency
27B1: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
27B4: 2C      	        defb    ','
27B5: CDA71E  	        call    GETNUM          ; Get duration
27B8: CDE81A  	        call    DEINT           ; Get integer -32768 to 32767
27BB: ED53F381	        ld      (TMPBFR3),DE    ; Store duration
              	                                ; CHECK CHANNEL
27BF: 3AEF81  	        ld      A,(TMPBFR1)     ; recover channel
27C2: FE01    	        cp      $01             ; is channel <1?
27C4: DAFD1A  	        jp      C,FCERR         ; Yes - Illegal function call error
              	                                ; CHECK FREQUENCY
27C7: ED5BF181	        ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
27CB: 7A      	        ld      A,D             ; move D into A and check if it is in the range 0~4095...
27CC: FE10    	        cp      $10             ; ...so D must not be greater than $0F (15)
27CE: D2FD1A  	        jp      NC,FCERR        ; if not in the range, exit with an Illegal function call error
              	                                ; CHECK DURATION
27D1: ED5BF381	        ld      DE,(TMPBFR3)    ; restore duration from temp buffer
27D5: 7A      	        ld      A,D             ; check if it is in the range 0~16383...
27D6: E6C0    	        and     $C0             ; ...(15th & 14th bits must not be set)
27D8: C2FD1A  	        jp      NZ,FCERR        ; if not in the range, exit with an Illegal function call error
              	                                ;
              	                                ; SET TONE:
              	                                ; let's start by setting up the channel
27DB: 3AEF81  	        ld      A,(TMPBFR1)     ; restore channel value
27DE: FE03    	        cp      $03             ; is it 3?
27E0: 2002    	        jr      NZ,SND1         ; no, jump over
27E2: 3E04    	        ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
27E4: 2F      	SND1:   cpl                     ; complement of A - this is used later to set on the channel into the mixer
27E5: CD6B28  	        call    WRTSND          ; enable line into mixer of channel stored in A
              	                                ; SET FREQUENCY
              	                                ; we simply get frequency and subtract from 4096. The result
              	                                ; is put into register pair of the corresponding freq tone channel
27E8: ED5BF181	        ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
27EC: E5      	        push    HL              ; store HL (it will be used by the subroutine)
27ED: 210010  	        ld      HL,$1000        ; load 4096 into HL
27F0: A7      	        and     A               ; reset C flag
27F1: ED52    	        sbc     HL,DE           ; subtract freq from HL - now the frequency is inverted, so we will send the low as high and vice-versa
27F3: 3AEF81  	        ld      A,(TMPBFR1)     ; restore channel value
27F6: 3D      	        dec     A               ; set A into the range 0~2
27F7: 87      	        add     A,A             ; double A to find the register pair that correspond to the channel (A->0,1 / B->2,3, C->4,5)
27F8: 0E40    	        ld      C,PSG_REG       ; PSG register port
27FA: ED79    	        out     (C),A           ; select first register of the pair
27FC: 0E41    	        ld      C,PSG_DAT       ; PSG data port
27FE: ED69    	        out     (C),L           ; send high byte
2800: 0E40    	        ld      C,PSG_REG       ; PSG register support
2802: 3C      	        inc     A               ; second register of the pair
2803: ED79    	        out     (C),A           ; select register
2805: 0E41    	        ld      C,PSG_DAT       ; PSG data port
2807: ED61    	        out     (C),H           ; send low byte
2809: ED5BF381	        ld      DE,(TMPBFR3)    ; recover duration
280D: 3AEF81  	        ld      A,(TMPBFR1)     ; recover channel value
2810: 3D      	        dec     A               ; set channel into the range 0~2
2811: 87      	        add     A,A             ; double A to find the correct offset
2812: 212382  	        ld      HL,CHASNDDTN    ; set duration into...
2815: 85      	        add     A,L             ; ...the proper...
2816: 3001    	        jr      NC,SNDOVR       ; (is there a rest? no, jump over
2818: 24      	        inc     H               ; yes, increment H)
2819: 6F      	SNDOVR: ld      L,A             ; ...register pair...
281A: 7323722B	        ld      (HL),DE         ; ...and store the value
281E: E1      	        pop     HL              ; retrieve HL
281F: C9      	        ret                     ; Return to caller
2820: FE07    	NOISUP: cp      $07             ; is channel in range 4 to 6 (for a noise)?
2822: D2FD1A  	        jp      NC,FCERR        ; no, so ILLEGAL FUNCTION CALL
2825: CD0F18  	        call    CHKSYN          ; yes, continue checking by making sure ',' follows
2828: 2C      	        defb    ','
2829: CD3226  	        call    GETINT          ; get integer 0-255 (frequency)
282C: FE20    	        cp      $20             ; make sure it's in range 0~31
282E: D2FD1A  	        jp      NC,FCERR        ; no, so Illegal function call
2831: 32F181  	        ld      (TMPBFR2),A     ; store freq.
2834: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
2835: CD321A  	        call    GETCHR          ; check that nothing follows
2838: C22D15  	        jp      NZ,SNERR        ; error if no empty line
283B: 3AF181  	        ld      A,(TMPBFR2)     ; retrieve freq.
283E: 5F      	        ld      E,A             ; store freq into E
283F: 3AEF81  	        ld      A,(TMPBFR1)     ; retrieve channel
2842: D603    	        sub     $03             ; subtract 3 to get channel in range 1~3
2844: FE03    	        cp      $03             ; is it 3?
2846: 2002    	        jr      NZ,NOS1         ; no, jump over
2848: 3E04    	        ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
284A: 87      	NOS1:   add     A,A
284B: 87      	        add     A,A
284C: 87      	        add     A,A             ; let's move A 3 bits to left
284D: 47      	        ld      B,A             ; store channel into B
284E: 7B      	        ld      A,E             ; check if
284F: A7      	        and     A               ; freq is 0 (means that noise reproduction must be halted)
2850: 200A    	        jr      NZ,NOS2         ; no, so jump over
2852: 3E07    	        ld      A,$07           ; mixer register
2854: CDF50B  	        call    SETSNDREG       ; set mixer register
2857: ED78    	        in      A,(C)           ; load current mixer value
2859: B0      	        or      B               ; disable noise
285A: 1818    	        jr      NOS3            ; continue over
285C: 78      	NOS2:   ld      A,B             ; recover channel
285D: 2F      	        cpl                     ; complement of A - this is used to set on the channel into the mixer
285E: CD6B28  	        call    WRTSND          ; enable line into mixer of channel stored in A
2861: 3E06    	        ld      A,$06           ; write into noise register
2863: CDF50B  	        call    SETSNDREG       ; set register into PSG
2866: 7B      	        ld      A,E             ; load value for noise frequency
2867: CDFA0B  	        call    WRTSNDREG       ; write data into register $06
286A: C9      	        ret
              	        ; enable line into mixer of channel stored in A
286B: 47      	WRTSND: ld      B,A             ; move channel into B
286C: 3E07    	        ld      A,$07           ; mixer register
286E: CDF50B  	        call    SETSNDREG       ; set mixer register
2871: ED78    	        in      A,(C)           ; load current value
2873: A0      	        and     B               ; set on the channel into the mixer (remember that 0=ON)
              	                                ; example: if channel is A (1), complement of 1 is 254 (11111110). So, 255 (in case
              	                                ; the register is still unchanged after reset) is 11111111 and
              	                                ; 11111111 AND 11111110 is equal to 11111110
              	                                ; 11111001 AND 11111110 is equal to 11111000 (in case channels B & C are ON)
2874: 47      	NOS3:   ld      B,A
2875: 3E07    	        ld      A,$07
2877: CDF50B  	        call    SETSNDREG
287A: 78      	        ld      A,B
287B: 00      	        nop
287C: CDFA0B  	        call    WRTSNDREG       ; send new value for the mixer
287F: C9      	        ret                     ; return to caller
              	
              	; write a byte into one of the VDP registers
2880: CD3226  	VREG:   call    GETINT          ; Get register number back into A
2883: FE08    	        cp      $08             ; check if value is equal or greater than 8 (VDP registers are only 8, from 0 to 7)
2885: D2FD1A  	        jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
2888: 32EF81  	        ld      (TMPBFR1),A     ; Store A into a temp. buffer
288B: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
288E: 2C      	        defb    ','
288F: CD3226  	        call    GETINT          ; get value (0-255)
2892: 5F      	        ld      E,A             ; store value into E
2893: 3AEF81  	        ld      A,(TMPBFR1)     ; recover VDP register and store into A
2896: F3      	        di                      ; disable INTs
2897: CD3406  	        call    WRITE_VREG      ; write value into VDP register
289A: FB      	        ei                      ; re-enable INTs
289B: C9      	        ret                     ; return to caller
              	
              	; read the VDP status register and return it into A
289C: CDE81A  	VSTAT:  call    DEINT           ; Get integer -32768 to 32767 (Note: we do NOT use it)
289F: F3      	        di                      ; disable INTs
28A0: CD3F06  	        call    READ_VSTAT      ; read VDP register status
28A3: FB      	        ei                      ; re-enable INTs
28A4: C39B22  	        jp      PASSA           ; Return integer A
              	
              	; read from PSG register and return it into A
28A7: CDE81A  	SSTAT:  call    DEINT           ; get integer -32768 to 32767
28AA: 7B      	        ld      A,E             ; consider LSB
28AB: FE10    	        cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
28AD: D2FD1A  	        jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
28B0: 0E40    	        ld      C,PSG_REG       ; output port to set PSG register
28B2: ED79    	        out     (C),A           ; send register to read from
28B4: ED78    	        in      A,(C)           ; read register's contents and store into A
28B6: C39B22  	        jp      PASSA           ; return A
              	
              	; read the temp key buffer and return the value of the current key being pressed
              	; can wait for the number of 100thds of second before to return
28B9: CD1523  	INKEY:  call    IDTEST          ; Test for illegal direct
28BC: CDE81A  	        call    DEINT           ; get number param (100thds of second to wait)
28BF: C5      	        push    BC              ; store BC
28C0: 3ACE81  	        ld      A,(TMRCNT)      ; Load current value of system timer
28C3: 47      	        ld      B,A             ; move it into B
28C4: 3ACE81  	CMP_A:  ld      A,(TMRCNT)      ; make a little delay of 1/100 sec...
28C7: B8      	        cp      B               ; ...to let the sniffer collect...
28C8: 20FA    	        jr      NZ,CMP_A        ; ...at least 1 char before to continue
28CA: 7A      	        ld      A,D             ; check the param
28CB: AB      	        xor     E               ; if DE<>0 then...
28CC: 2005    	        jr      NZ,INKEY2       ; ...jump over...
28CE: 3A2B82  	        ld      A,(TMPKEYBFR)   ; ...else read the buffer and...
28D1: 181C    	        jr      ENDINK          ; ...return it
28D3: 7A      	INKEY2: ld      A,D             ; check if param>1023
28D4: FE04    	        cp      $04             ; to do this we check if MSB>3
28D6: D2FD1A  	        jp      NC,FCERR        ; if MSB >=4 then error
28D9: 3ACE81  	        ld      A,(TMRCNT)      ; Load current value of system timer
28DC: 47      	        ld      B,A             ; move it into B
28DD: 3A2B82  	CHKINK: ld      A,(TMPKEYBFR)   ; load current value
28E0: A7      	        and     A               ; is it 0?
28E1: 200C    	        jr      NZ,ENDINK       ; no, so we can return it
28E3: 3ACE81  	        ld      A,(TMRCNT)      ; load current value of system timer
28E6: B8      	        cp      B               ; is it the same value?
28E7: 28F4    	        jr      Z,CHKINK        ; yes, so read again
28E9: 47      	        ld      B,A             ; store new value
28EA: 1B      	        dec     DE              ; no, decrement timer
28EB: 7A      	        ld      A,D             ; check if zero reached
28EC: B3      	        or      E               ; by ORing D and E
28ED: 20EE    	        jr      NZ,CHKINK       ; if not 0, repeat
28EF: C1      	ENDINK: pop     BC              ; restore BC
28F0: F5      	        push    AF              ; store A
28F1: F3      	        di                      ; disable INTs
28F2: AF      	        xor     A               ; clear the...
28F3: 322B82  	        ld      (TMPKEYBFR),A   ; ...TMP KEY buffer for the next read
28F6: FB      	        ei                      ; re-enable INTs
28F7: F1      	        pop     AF              ; retrieve A
28F8: C39B22  	ENDINK2:jp      PASSA           ; return A as ASCII value
              	
28FB: 21222E  	ROUND:  ld      HL,HALF         ; Add 0.5 to FPREG
28FE: CDF32B  	ADDPHL: call    LOADFP          ; Load FP at (HL) to BCDE
2901: C30D29  	        jp      FPADD           ; Add BCDE to FPREG
              	
2904: CDF32B  	SUBPHL: call    LOADFP          ; FPREG = -FPREG + number at HL
2907: 21      	        defb    $21             ; Skip "pop BC" and "pop DE"
2908: C1      	PSUB:   pop     BC              ; Get FP number from stack
2909: D1      	        pop     DE
290A: CDCD2B  	SUBCDE: call    INVSGN          ; Negate FPREG
290D: 78      	FPADD:  ld      A,B             ; Get FP exponent
290E: B7      	        or      A               ; Is number zero?
290F: C8      	        ret     Z               ; Yes - Nothing to add
2910: 3ACC81  	        ld      A,(FPEXP)       ; Get FPREG exponent
2913: B7      	        or      A               ; Is this number zero?
2914: CAE52B  	        jp      Z,FPBCDE        ; Yes - Move BCDE to FPREG
2917: 90      	        sub     B               ; BCDE number larger?
2918: D22729  	        jp      NC,NOSWAP       ; No - Don't swap them
291B: 2F      	        cpl                     ; Two's complement
291C: 3C      	        inc     A               ;  FP exponent
291D: EB      	        ex      DE,HL
291E: CDD52B  	        call    STAKFP          ; Put FPREG on stack
2921: EB      	        ex      DE,HL
2922: CDE52B  	        call    FPBCDE          ; Move BCDE to FPREG
2925: C1      	        pop     BC              ; Restore number from stack
2926: D1      	        pop     DE
2927: FE19    	NOSWAP: cp      24+1            ; Second number insignificant?
2929: D0      	        ret     NC              ; Yes - First number is result
292A: F5      	        push    AF              ; Save number of bits to scale
292B: CD0A2C  	        call    SIGNS           ; Set MSBs & sign of result
292E: 67      	        ld      H,A             ; Save sign of result
292F: F1      	        pop     AF              ; Restore scaling factor
2930: CDD229  	        call    SCALE           ; Scale BCDE to same exponent
2933: B4      	        or      H               ; Result to be positive?
2934: 21C981  	        ld      HL,FPREG        ; Point to FPREG
2937: F24D29  	        jp      P,MINCDE        ; No - Subtract FPREG from CDE
293A: CDB229  	        call    PLUCDE          ; Add FPREG to CDE
293D: D29329  	        jp      NC,RONDUP       ; No overflow - Round it up
2940: 23      	        inc     HL              ; Point to exponent
2941: 34      	        inc     (HL)            ; Increment it
2942: CA3C15  	        jp      Z,OVERR         ; Number overflowed - Error
2945: 2E01    	        ld      L,$01           ; 1 bit to shift right
2947: CDE829  	        call    SHRT1           ; Shift result right
294A: C39329  	        jp      RONDUP          ; Round it up
              	
294D: AF      	MINCDE: xor     A               ; Clear A and carry
294E: 90      	        sub     B               ; Negate exponent
294F: 47      	        ld      B,A             ; Re-save exponent
2950: 7E      	        ld      A,(HL)          ; Get LSB of FPREG
2951: 9B      	        sbc     A, E            ; Subtract LSB of BCDE
2952: 5F      	        ld      E,A             ; Save LSB of BCDE
2953: 23      	        inc     HL
2954: 7E      	        ld      A,(HL)          ; Get NMSB of FPREG
2955: 9A      	        sbc     A,D             ; Subtract NMSB of BCDE
2956: 57      	        ld      D,A             ; Save NMSB of BCDE
2957: 23      	        inc     HL
2958: 7E      	        ld      A,(HL)          ; Get MSB of FPREG
2959: 99      	        sbc     A,C             ; Subtract MSB of BCDE
295A: 4F      	        ld      C,A             ; Save MSB of BCDE
295B: DCBE29  	CONPOS: call    C,COMPL         ; Overflow - Make it positive
              	
295E: 68      	BNORM:  ld      L,B             ; L = Exponent
295F: 63      	        ld      H,E             ; H = LSB
2960: AF      	        xor     A
2961: 47      	BNRMLP: ld      B,A             ; Save bit count
2962: 79      	        ld      A,C             ; Get MSB
2963: B7      	        or      A               ; Is it zero?
2964: C28029  	        jp      NZ,PNORM        ; No - Do it bit at a time
2967: 4A      	        ld      C,D             ; MSB = NMSB
2968: 54      	        ld      D,H             ; NMSB= LSB
2969: 65      	        ld      H,L             ; LSB = VLSB
296A: 6F      	        ld      L,A             ; VLSB= 0
296B: 78      	        ld      A,B             ; Get exponent
296C: D608    	        sub     $08             ; Count 8 bits
296E: FEE0    	        cp      -24-8           ; Was number zero?
2970: C26129  	        jp      NZ,BNRMLP       ; No - Keep normalising
2973: AF      	RESZER: xor     A               ; Result is zero
2974: 32CC81  	SAVEXP: ld      (FPEXP),A       ; Save result as zero
2977: C9      	        ret
              	
2978: 05      	NORMAL: dec     B               ; Count bits
2979: 29      	        add     HL,HL           ; Shift HL left
297A: 7A      	        ld      A,D             ; Get NMSB
297B: 17      	        rla                     ; Shift left with last bit
297C: 57      	        ld      D,A             ; Save NMSB
297D: 79      	        ld      A,C             ; Get MSB
297E: 8F      	        adc     A,A             ; Shift left with last bit
297F: 4F      	        ld      C,A             ; Save MSB
2980: F27829  	PNORM:  jp      P,NORMAL        ; Not done - Keep going
2983: 78      	        ld      A,B             ; Number of bits shifted
2984: 5C      	        ld      E,H             ; Save HL in EB
2985: 45      	        ld      B,L
2986: B7      	        or      A               ; Any shifting done?
2987: CA9329  	        jp      Z,RONDUP        ; No - Round it up
298A: 21CC81  	        ld      HL,FPEXP        ; Point to exponent
298D: 86      	        add     A,(HL)          ; Add shifted bits
298E: 77      	        ld      (HL),A          ; Re-save exponent
298F: D27329  	        jp      NC,RESZER       ; Underflow - Result is zero
2992: C8      	        ret     Z               ; Result is zero
2993: 78      	RONDUP: ld      A,B             ; Get VLSB of number
2994: 21CC81  	RONDB:  ld      HL,FPEXP        ; Point to exponent
2997: B7      	        or      A               ; Any rounding?
2998: FCA529  	        call    M,FPROND        ; Yes - Round number up
299B: 46      	        ld      B,(HL)          ; B = Exponent
299C: 23      	        inc     HL
299D: 7E      	        ld      A,(HL)          ; Get sign of result
299E: E680    	        and     %10000000       ; Only bit 7 needed
29A0: A9      	        xor     C               ; Set correct sign
29A1: 4F      	        ld      C,A             ; Save correct sign in number
29A2: C3E52B  	        jp      FPBCDE          ; Move BCDE to FPREG
              	
29A5: 1C      	FPROND: inc     E               ; Round LSB
29A6: C0      	        ret     NZ              ; Return if ok
29A7: 14      	        inc     D               ; Round NMSB
29A8: C0      	        ret     NZ              ; Return if ok
29A9: 0C      	        inc     C               ; Round MSB
29AA: C0      	        ret     NZ              ; Return if ok
29AB: 0E80    	        ld      C,$80           ; Set normal value
29AD: 34      	        inc     (HL)            ; Increment exponent
29AE: C0      	        ret     NZ              ; Return if ok
29AF: C33C15  	        jp      OVERR           ; Overflow error
              	
29B2: 7E      	PLUCDE: ld      A,(HL)          ; Get LSB of FPREG
29B3: 83      	        add     A,E             ; Add LSB of BCDE
29B4: 5F      	        ld      E,A             ; Save LSB of BCDE
29B5: 23      	        inc     HL
29B6: 7E      	        ld      A,(HL)          ; Get NMSB of FPREG
29B7: 8A      	        adc     A,D             ; Add NMSB of BCDE
29B8: 57      	        ld      D,A             ; Save NMSB of BCDE
29B9: 23      	        inc     HL
29BA: 7E      	        ld      A,(HL)          ; Get MSB of FPREG
29BB: 89      	        adc     A,C             ; Add MSB of BCDE
29BC: 4F      	        ld      C,A             ; Save MSB of BCDE
29BD: C9      	        ret
              	
29BE: 21CD81  	COMPL:  ld      HL,SGNRES       ; Sign of result
29C1: 7E      	        ld      A,(HL)          ; Get sign of result
29C2: 2F      	        cpl                     ; Negate it
29C3: 77      	        ld      (HL),A          ; Put it back
29C4: AF      	        xor     A
29C5: 6F      	        ld      L,A             ; Set L to zero
29C6: 90      	        sub     B               ; Negate exponent,set carry
29C7: 47      	        ld      B,A             ; Re-save exponent
29C8: 7D      	        ld      A,L             ; Load zero
29C9: 9B      	        sbc     A,E             ; Negate LSB
29CA: 5F      	        ld      E,A             ; Re-save LSB
29CB: 7D      	        ld      A,L             ; Load zero
29CC: 9A      	        sbc     A,D             ; Negate NMSB
29CD: 57      	        ld      D,A             ; Re-save NMSB
29CE: 7D      	        ld      A,L             ; Load zero
29CF: 99      	        sbc     A,C             ; Negate MSB
29D0: 4F      	        ld      C,A             ; Re-save MSB
29D1: C9      	        ret
              	
29D2: 0600    	SCALE:  ld      B,$00           ; Clear underflow
29D4: D608    	SCALLP: sub     $08             ; 8 bits (a whole byte)?
29D6: DAE129  	        jp      C,SHRITE        ; No - Shift right A bits
29D9: 43      	        ld      B,E             ; <- Shift
29DA: 5A      	        ld      E,D             ; <- right
29DB: 51      	        ld      D,C             ; <- eight
29DC: 0E00    	        ld      C,$00           ; <- bits
29DE: C3D429  	        jp      SCALLP          ; More bits to shift
              	
29E1: C609    	SHRITE: add     A,8+1           ; Adjust count
29E3: 6F      	        ld      L,A             ; Save bits to shift
29E4: AF      	SHRLP:  xor     A               ; Flag for all done
29E5: 2D      	        dec     L               ; All shifting done?
29E6: C8      	        ret     Z               ; Yes - Return
29E7: 79      	        ld      A,C             ; Get MSB
29E8: 1F      	SHRT1:  rra                     ; Shift it right
29E9: 4F      	        ld      C,A             ; Re-save
29EA: 7A      	        ld      A,D             ; Get NMSB
29EB: 1F      	        rra                     ; Shift right with last bit
29EC: 57      	        ld      D,A             ; Re-save it
29ED: 7B      	        ld      A,E             ; Get LSB
29EE: 1F      	        rra                     ; Shift right with last bit
29EF: 5F      	        ld      E,A             ; Re-save it
29F0: 78      	        ld      A,B             ; Get underflow
29F1: 1F      	        rra                     ; Shift right with last bit
29F2: 47      	        ld      B,A             ; Re-save underflow
29F3: C3E429  	        jp      SHRLP           ; More bits to do
              	
29F6: 00000081	UNITY:  defb    $00,$00,$00,$81 ; 1.00000
              	
29FA: 03      	LOGTAB: defb    $03             ; Table used by LOG
29FB: AA561980	        defb    $AA,$56,$19,$80 ; 0.59898
29FF: F1227680	        defb    $F1,$22,$76,$80 ; 0.96147
2A03: 45AA3882	        defb    $45,$AA,$38,$82 ; 2.88539
              	
2A07: CDA42B  	LOG:    call    TSTSGN          ; Test sign of value
2A0A: B7      	        or      A
2A0B: EAFD1A  	        jp      PE,FCERR        ; ?FC Error if <= zero
2A0E: 21CC81  	        ld      HL,FPEXP        ; Point to exponent
2A11: 7E      	        ld      A,(HL)          ; Get exponent
2A12: 013580  	        ld      BC,$8035        ; BCDE = SQR(1/2)
2A15: 11F304  	        ld      DE,$04F3
2A18: 90      	        sub     B               ; Scale value to be < 1
2A19: F5      	        push    AF              ; Save scale factor
2A1A: 70      	        ld      (HL),B          ; Save new exponent
2A1B: D5      	        push    DE              ; Save SQR(1/2)
2A1C: C5      	        push    BC
2A1D: CD0D29  	        call    FPADD           ; Add SQR(1/2) to value
2A20: C1      	        pop     BC              ; Restore SQR(1/2)
2A21: D1      	        pop     DE
2A22: 04      	        inc     B               ; Make it SQR(2)
2A23: CDFA2A  	        call    DVBCDE          ; Divide by SQR(2)
2A26: 21F629  	        ld      HL,UNITY        ; Point to 1.
2A29: CD0429  	        call    SUBPHL          ; Subtract FPREG from 1
2A2C: 21FA29  	        ld      HL,LOGTAB       ; Coefficient table
2A2F: CDEC2E  	        call    SUMSER          ; Evaluate sum of series
2A32: 018080  	        ld      BC,$8080        ; BCDE = -0.5
2A35: 110000  	        ld      DE,$0000
2A38: CD0D29  	        call    FPADD           ; Subtract 0.5 from FPREG
2A3B: F1      	        pop     AF              ; Restore scale factor
2A3C: CD1F2D  	        call    RSCALE          ; Re-scale number
2A3F: 013180  	MULLN2: ld      BC,$8031        ; BCDE = Ln(2)
2A42: 111872  	        ld      DE,$7218
2A45: 21      	        defb    $21             ; Skip "pop BC" and "pop DE"
              	
2A46: C1      	MULT:   pop     BC              ; Get number from stack
2A47: D1      	        pop     DE
2A48: CDA42B  	FPMULT: call    TSTSGN          ; Test sign of FPREG
2A4B: C8      	        ret     Z               ; Return zero if zero
2A4C: 2E00    	        ld      L,$00           ; Flag add exponents
2A4E: CD622B  	        call    ADDEXP          ; Add exponents
2A51: 79      	        ld      A,C             ; Get MSB of multiplier
2A52: 323D82  	        ld      (MULVAL),A      ; Save MSB of multiplier
2A55: EB      	        ex      DE,HL
2A56: 223E82  	        ld      (MULVAL+1),HL   ; Save rest of multiplier
2A59: 010000  	        ld      BC,$0000        ; Partial product (BCDE) = zero
2A5C: 50      	        ld      D,B
2A5D: 58      	        ld      E,B
2A5E: 215E29  	        ld      HL,BNORM        ; Address of normalise
2A61: E5      	        push    HL              ; Save for return
2A62: 216A2A  	        ld      HL,MULT8        ; Address of 8 bit multiply
2A65: E5      	        push    HL              ; Save for NMSB,MSB
2A66: E5      	        push    HL              ;
2A67: 21C981  	        ld      HL,FPREG        ; Point to number
2A6A: 7E      	MULT8:  ld      A,(HL)          ; Get LSB of number
2A6B: 23      	        inc     HL              ; Point to NMSB
2A6C: B7      	        or      A               ; Test LSB
2A6D: CA962A  	        jp      Z,BYTSFT        ; Zero - shift to next byte
2A70: E5      	        push    HL              ; Save address of number
2A71: 2E08    	        ld      L,$08           ; 8 bits to multiply by
2A73: 1F      	MUL8LP: rra                     ; Shift LSB right
2A74: 67      	        ld      H,A             ; Save LSB
2A75: 79      	        ld      A,C             ; Get MSB
2A76: D2842A  	        jp      NC,NOMADD       ; Bit was zero - Don't add
2A79: E5      	        push    HL              ; Save LSB and count
2A7A: 2A3E82  	        ld      HL,(MULVAL+1)   ; Get LSB and NMSB
2A7D: 19      	        add     HL,DE           ; Add NMSB and LSB
2A7E: EB      	        ex      DE,HL           ; Leave sum in DE
2A7F: E1      	        pop     HL              ; Restore MSB and count
2A80: 3A3D82  	        ld      A,(MULVAL)      ; Get MSB of multiplier
2A83: 89      	        adc     A,C             ; Add MSB
2A84: 1F      	NOMADD: rra                     ; Shift MSB right
2A85: 4F      	        ld      C,A             ; Re-save MSB
2A86: 7A      	        ld      A,D             ; Get NMSB
2A87: 1F      	        rra                     ; Shift NMSB right
2A88: 57      	        ld      D,A             ; Re-save NMSB
2A89: 7B      	        ld      A,E             ; Get LSB
2A8A: 1F      	        rra                     ; Shift LSB right
2A8B: 5F      	        ld      E,A             ; Re-save LSB
2A8C: 78      	        ld      A,B             ; Get VLSB
2A8D: 1F      	        rra                     ; Shift VLSB right
2A8E: 47      	        ld      B,A             ; Re-save VLSB
2A8F: 2D      	        dec     L               ; Count bits multiplied
2A90: 7C      	        ld      A,H             ; Get LSB of multiplier
2A91: C2732A  	        jp      NZ,MUL8LP       ; More - Do it
2A94: E1      	POPHRT: pop     HL              ; Restore address of number
2A95: C9      	        ret
              	
2A96: 43      	BYTSFT: ld      B,E             ; Shift partial product left
2A97: 5A      	        ld      E,D
2A98: 51      	        ld      D,C
2A99: 4F      	        ld      C,A
2A9A: C9      	        ret
              	
              	
              	; WORKING ––
2A9B: C1      	DINT:   pop     BC              ; Get number from stack
2A9C: D1      	        pop     DE
2A9D: CDFA2A  	        call    DVBCDE          ; get BCDE/FPREG and store result into FPREG
2AA0: C3772C  	        jp      INT             ; return INT(FPREG)
              	
              	
              	; A MODULO B - return remainder of the integer division A/B where:
              	; A is in stack; B is in FPREG
              	; math is:
              	; A=INT(A); B=INT(B); R=A-(B*INT(A/B))
2AA3: CD772C  	MOD:    call    INT             ; B=INT(B)
2AA6: CDF02B  	        call    BCDEFP          ; copy B (from FPREG) into BCDE
2AA9: ED53F381	        ld      (TMPBFR3),DE    ; store B into...
2AAD: ED43F581	        ld      (TMPBFR4),BC    ; ...a temp buffer
2AB1: C1      	        pop     BC              ; recover A...
2AB2: D1      	        pop     DE              ; ...from stack
2AB3: CDE52B  	        call    FPBCDE          ; store A into FPREG
2AB6: CD772C  	        call    INT             ; get integer part: A=INT(A)
2AB9: CDF02B  	        call    BCDEFP          ; copy A (from FPREG) into BCDE
2ABC: ED53EF81	        ld      (TMPBFR1),DE    ; store A into...
2AC0: ED43F181	        ld      (TMPBFR2),BC    ; ...a temp buffer
              	                                ; begin calculation
2AC4: 2AF381  	        ld      HL,(TMPBFR3)    ; move B...
2AC7: 22C981  	        ld      (FPREG),HL      ; ...from...
2ACA: 2AF581  	        ld      HL,(TMPBFR4)    ; ...temp buffer...
2ACD: 22CB81  	        ld      (FPREG+2),HL    ; ...into FPREG
2AD0: CDFA2A  	        call    DVBCDE          ; compute A/B and store into FPREG
2AD3: CD772C  	        call    INT             ; get integer part of result: now FPREG = INT(A/B)
2AD6: ED5BF381	        ld      DE,(TMPBFR3)    ; load B...
2ADA: ED4BF581	        ld      BC,(TMPBFR4)    ; ...into BCDE
2ADE: CD482A  	        call    FPMULT          ; get B*INT(A/B) and store into FPREG
2AE1: ED5BEF81	        ld      DE,(TMPBFR1)    ; retrieve A from...
2AE5: ED4BF181	        ld      BC,(TMPBFR2)    ; ...temp buffer
2AE9: C30A29  	        jp      SUBCDE          ; return result of A-(B*INT(A/B))
              	
              	
2AEC: CDD52B  	DIV10:  call    STAKFP          ; Save FPREG on stack
2AEF: 012084  	        ld      BC,$8420        ; BCDE = 10.
2AF2: 110000  	        ld      DE,$0000
2AF5: CDE52B  	        call    FPBCDE          ; Move 10 to FPREG
              	
2AF8: C1      	DIV:    pop     BC              ; Get number from stack
2AF9: D1      	        pop     DE
2AFA: CDA42B  	DVBCDE: call    TSTSGN          ; Test sign of FPREG
2AFD: CA3015  	        jp      Z,DZERR         ; Error if division by zero
2B00: 2EFF    	        ld      L,-1            ; Flag subtract exponents
2B02: CD622B  	        call    ADDEXP          ; Subtract exponents
2B05: 34      	        inc     (HL)            ; Add 2 to exponent to adjust
2B06: 34      	        inc     (HL)
2B07: 2B      	        dec     HL              ; Point to MSB
2B08: 7E      	        ld      A,(HL)          ; Get MSB of dividend
2B09: 327380  	        ld      (DIV3),A        ; Save for subtraction
2B0C: 2B      	        dec     HL
2B0D: 7E      	        ld      A,(HL)          ; Get NMSB of dividend
2B0E: 326F80  	        ld      (DIV2),A        ; Save for subtraction
2B11: 2B      	        dec     HL
2B12: 7E      	        ld      A,(HL)          ; Get MSB of dividend
2B13: 326B80  	        ld      (DIV1),A        ; Save for subtraction
2B16: 41      	        ld      B,C             ; Get MSB
2B17: EB      	        ex      DE,HL           ; NMSB,LSB to HL
2B18: AF      	        xor     A
2B19: 4F      	        ld      C,A             ; Clear MSB of quotient
2B1A: 57      	        ld      D,A             ; Clear NMSB of quotient
2B1B: 5F      	        ld      E,A             ; Clear LSB of quotient
2B1C: 327680  	        ld      (DIV4),A        ; Clear overflow count
2B1F: E5      	DIVLP:  push    HL              ; Save divisor
2B20: C5      	        push    BC
2B21: 7D      	        ld      A,L             ; Get LSB of number
2B22: CD6A80  	        call    DIVSUP          ; Subt' divisor from dividend
2B25: DE00    	        sbc     A,$00           ; Count for overflows
2B27: 3F      	        ccf
2B28: D2322B  	        jp      NC,RESDIV       ; Restore divisor if borrow
2B2B: 327680  	        ld      (DIV4),A        ; Re-save overflow count
2B2E: F1      	        pop     AF              ; Scrap divisor
2B2F: F1      	        pop     AF
2B30: 37      	        scf                     ; Set carry to
2B31: D2      	        defb    $D2             ; Skip "pop BC" and "pop HL"
              	
2B32: C1      	RESDIV: pop     BC              ; Restore divisor
2B33: E1      	        pop     HL
2B34: 79      	        ld      A,C             ; Get MSB of quotient
2B35: 3C      	        inc     A
2B36: 3D      	        dec     A
2B37: 1F      	        rra                     ; Bit 0 to bit 7
2B38: FA9429  	        jp      M,RONDB         ; Done - Normalise result
2B3B: 17      	        rla                     ; Restore carry
2B3C: 7B      	        ld      A,E             ; Get LSB of quotient
2B3D: 17      	        rla                     ; Double it
2B3E: 5F      	        ld      E,A             ; Put it back
2B3F: 7A      	        ld      A,D             ; Get NMSB of quotient
2B40: 17      	        rla                     ; Double it
2B41: 57      	        ld      D,A             ; Put it back
2B42: 79      	        ld      A,C             ; Get MSB of quotient
2B43: 17      	        rla                     ; Double it
2B44: 4F      	        ld      C,A             ; Put it back
2B45: 29      	        add     HL,HL           ; Double NMSB,LSB of divisor
2B46: 78      	        ld      A,B             ; Get MSB of divisor
2B47: 17      	        rla                     ; Double it
2B48: 47      	        ld      B,A             ; Put it back
2B49: 3A7680  	        ld      A,(DIV4)        ; Get VLSB of quotient
2B4C: 17      	        rla                     ; Double it
2B4D: 327680  	        ld      (DIV4),A        ; Put it back
2B50: 79      	        ld      A,C             ; Get MSB of quotient
2B51: B2      	        or      D               ; Merge NMSB
2B52: B3      	        or      E               ; Merge LSB
2B53: C21F2B  	        jp      NZ,DIVLP        ; Not done - Keep dividing
2B56: E5      	        push    HL              ; Save divisor
2B57: 21CC81  	        ld      HL,FPEXP        ; Point to exponent
2B5A: 35      	        dec     (HL)            ; Divide by 2
2B5B: E1      	        pop     HL              ; Restore divisor
2B5C: C21F2B  	        jp      NZ,DIVLP        ; Ok - Keep going
2B5F: C33C15  	        jp      OVERR           ; Overflow error
              	
              	
2B62: 78      	ADDEXP: ld      A,B             ; Get exponent of dividend
2B63: B7      	        or      A               ; Test it
2B64: CA862B  	        jp      Z,OVTST3        ; Zero - Result zero
2B67: 7D      	        ld      A,L             ; Get add/subtract flag
2B68: 21CC81  	        ld      HL,FPEXP        ; Point to exponent
2B6B: AE      	        xor     (HL)            ; Add or subtract it
2B6C: 80      	        add     A,B             ; Add the other exponent
2B6D: 47      	        ld      B,A             ; Save new exponent
2B6E: 1F      	        rra                     ; Test exponent for overflow
2B6F: A8      	        xor     B
2B70: 78      	        ld      A,B             ; Get exponent
2B71: F2852B  	        jp      P,OVTST2        ; Positive - Test for overflow
2B74: C680    	        add     A,$80           ; Add excess 128
2B76: 77      	        ld      (HL),A          ; Save new exponent
2B77: CA942A  	        jp      Z,POPHRT        ; Zero - Result zero
2B7A: CD0A2C  	        call    SIGNS           ; Set MSBs and sign of result
2B7D: 77      	        ld      (HL),A          ; Save new exponent
2B7E: 2B      	        dec     HL              ; Point to MSB
2B7F: C9      	        ret
              	
2B80: CDA42B  	OVTST1: call    TSTSGN          ; Test sign of FPREG
2B83: 2F      	        cpl                     ; Invert sign
2B84: E1      	        pop     HL              ; Clean up stack
2B85: B7      	OVTST2: or      A               ; Test if new exponent zero
2B86: E1      	OVTST3: pop     HL              ; Clear off return address
2B87: F27329  	        jp      P,RESZER        ; Result zero
2B8A: C33C15  	        jp      OVERR           ; Overflow error
              	
2B8D: CDF02B  	MLSP10: call    BCDEFP          ; Move FPREG to BCDE
2B90: 78      	        ld      A,B             ; Get exponent
2B91: B7      	        or      A               ; Is it zero?
2B92: C8      	        ret     Z               ; Yes - Result is zero
2B93: C602    	        add     A,$02           ; Multiply by 4
2B95: DA3C15  	        jp      C,OVERR         ; Overflow - ?OV Error
2B98: 47      	        ld      B,A             ; Re-save exponent
2B99: CD0D29  	        call    FPADD           ; Add BCDE to FPREG (Times 5)
2B9C: 21CC81  	        ld      HL,FPEXP        ; Point to exponent
2B9F: 34      	        inc     (HL)            ; Double number (Times 10)
2BA0: C0      	        ret     NZ              ; Ok - Return
2BA1: C33C15  	        jp      OVERR           ; Overflow error
              	
2BA4: 3ACC81  	TSTSGN: ld      A,(FPEXP)       ; Get sign of FPREG
2BA7: B7      	        or      A
2BA8: C8      	        ret     Z               ; RETurn if number is zero
2BA9: 3ACB81  	        ld      A,(FPREG+2)     ; Get MSB of FPREG
2BAC: FE      	        defb    0FEH            ; Test sign
2BAD: 2F      	RETREL: cpl                     ; Invert sign
2BAE: 17      	        rla                     ; Sign bit to carry
2BAF: 9F      	FLGDIF: sbc     A,A             ; Carry to all bits of A
2BB0: C0      	        ret     NZ              ; Return -1 if negative
2BB1: 3C      	        inc     A               ; Bump to +1
2BB2: C9      	        ret                     ; Positive - Return +1
              	
2BB3: CDA42B  	SGN:    call    TSTSGN          ; Test sign of FPREG
2BB6: 0688    	FLGREL: ld      B,$80+8         ; 8 bit integer in exponent
2BB8: 110000  	        ld      DE,0            ; Zero NMSB and LSB
2BBB: 21CC81  	RETINT: ld      HL,FPEXP        ; Point to exponent
2BBE: 4F      	        ld      C,A             ; CDE = MSB,NMSB and LSB
2BBF: 70      	        ld      (HL),B          ; Save exponent
2BC0: 0600    	        ld      B,0             ; CDE = integer to normalise
2BC2: 23      	        inc     HL              ; Point to sign of result
2BC3: 3680    	        ld      (HL),$80        ; Set sign of result
2BC5: 17      	        rla                     ; Carry = sign of integer
2BC6: C35B29  	        jp      CONPOS          ; Set sign of result
              	
2BC9: CDA42B  	ABS:    call    TSTSGN          ; Test sign of FPREG
2BCC: F0      	        ret     P               ; Return if positive
2BCD: 21CB81  	INVSGN: ld      HL,FPREG+2      ; Point to MSB
2BD0: 7E      	        ld      A,(HL)          ; Get sign of mantissa
2BD1: EE80    	        xor     $80             ; Invert sign of mantissa
2BD3: 77      	        ld      (HL),A          ; Re-save sign of mantissa
2BD4: C9      	        ret
              	
2BD5: EB      	STAKFP: ex      DE,HL           ; Save code string address
2BD6: 2AC981  	        ld      HL,(FPREG)      ; LSB,NLSB of FPREG
2BD9: E3      	        ex      (SP),HL         ; Stack them,get return
2BDA: E5      	        push    HL              ; Re-save return
2BDB: 2ACB81  	        ld      HL,(FPREG+2)    ; MSB and exponent of FPREG
2BDE: E3      	        ex      (SP),HL         ; Stack them,get return
2BDF: E5      	        push    HL              ; Re-save return
2BE0: EB      	        ex      DE,HL           ; Restore code string address
2BE1: C9      	        ret
              	
              	; store F.P. number from BCDE into FPREG
2BE2: CDF32B  	PHLTFP: call    LOADFP          ; Number at HL to BCDE
2BE5: EB      	FPBCDE: ex      DE,HL           ; Save code string address
2BE6: 22C981  	        ld      (FPREG),HL      ; Save LSB,NLSB of number
2BE9: 60      	        ld      H,B             ; Exponent of number
2BEA: 69      	        ld      L,C             ; MSB of number
2BEB: 22CB81  	        ld      (FPREG+2),HL    ; Save MSB and exponent
2BEE: EB      	        ex      DE,HL           ; Restore code string address
2BEF: C9      	        ret
              	
              	; load F.P. number from FPREG into BCDE
2BF0: 21C981  	BCDEFP: ld      HL,FPREG        ; Point to FPREG
2BF3: 5E      	LOADFP: ld      E,(HL)          ; Get LSB of number
2BF4: 23      	        inc     HL
2BF5: 56      	        ld      D,(HL)          ; Get NMSB of number
2BF6: 23      	        inc     HL
2BF7: 4E      	        ld      C,(HL)          ; Get MSB of number
2BF8: 23      	        inc     HL
2BF9: 46      	        ld      B,(HL)          ; Get exponent of number
2BFA: 23      	INCHL:  inc     HL              ; Used for conditional "inc HL"
2BFB: C9      	        ret
              	
2BFC: 11C981  	FPTHL:  ld      DE,FPREG        ; Point to FPREG
2BFF: 0604    	DETHL4: ld      B,$04           ; 4 bytes to move
2C01: 1A      	DETHLB: ld      A,(DE)          ; Get source
2C02: 77      	        ld      (HL),A          ; Save destination
2C03: 13      	        inc     DE              ; Next source
2C04: 23      	        inc     HL              ; Next destination
2C05: 05      	        dec     B               ; Count bytes
2C06: C2012C  	        jp      NZ,DETHLB       ; Loop if more
2C09: C9      	        ret
              	
2C0A: 21CB81  	SIGNS:  ld      HL,FPREG+2      ; Point to MSB of FPREG
2C0D: 7E      	        ld      A,(HL)          ; Get MSB
2C0E: 07      	        rlca                    ; Old sign to carry
2C0F: 37      	        scf                     ; Set MSBit
2C10: 1F      	        rra                     ; Set MSBit of MSB
2C11: 77      	        ld      (HL),A          ; Save new MSB
2C12: 3F      	        ccf                     ; Complement sign
2C13: 1F      	        rra                     ; Old sign to carry
2C14: 23      	        inc     HL
2C15: 23      	        inc     HL
2C16: 77      	        ld      (HL),A          ; Set sign of result
2C17: 79      	        ld      A,C             ; Get MSB
2C18: 07      	        rlca                    ; Old sign to carry
2C19: 37      	        scf                     ; Set MSBit
2C1A: 1F      	        rra                     ; Set MSBit of MSB
2C1B: 4F      	        ld      C,A             ; Save MSB
2C1C: 1F      	        rra
2C1D: AE      	        xor     (HL)            ; New sign of result
2C1E: C9      	        ret
              	
2C1F: 78      	CMPNUM: ld      A,B             ; Get exponent of number
2C20: B7      	        or      A
2C21: CAA42B  	        jp      Z,TSTSGN        ; Zero - Test sign of FPREG
2C24: 21AD2B  	        ld      HL,RETREL       ; Return relation routine
2C27: E5      	        push    HL              ; Save for return
2C28: CDA42B  	        call    TSTSGN          ; Test sign of FPREG
2C2B: 79      	        ld      A,C             ; Get MSB of number
2C2C: C8      	        ret     Z               ; FPREG zero - Number's MSB
2C2D: 21CB81  	        ld      HL,FPREG+2      ; MSB of FPREG
2C30: AE      	        xor     (HL)            ; Combine signs
2C31: 79      	        ld      A,C             ; Get MSB of number
2C32: F8      	        ret     M               ; Exit if signs different
2C33: CD392C  	        call    CMPFP           ; Compare FP numbers
2C36: 1F      	        rra                     ; Get carry to sign
2C37: A9      	        xor     C               ; Combine with MSB of number
2C38: C9      	        ret
              	
2C39: 23      	CMPFP:  inc     HL              ; Point to exponent
2C3A: 78      	        ld      A,B             ; Get exponent
2C3B: BE      	        cp      (HL)            ; Compare exponents
2C3C: C0      	        ret     NZ              ; Different
2C3D: 2B      	        dec     HL              ; Point to MBS
2C3E: 79      	        ld      A,C             ; Get MSB
2C3F: BE      	        cp      (HL)            ; Compare MSBs
2C40: C0      	        ret     NZ              ; Different
2C41: 2B      	        dec     HL              ; Point to NMSB
2C42: 7A      	        ld      A,D             ; Get NMSB
2C43: BE      	        cp      (HL)            ; Compare NMSBs
2C44: C0      	        ret     NZ              ; Different
2C45: 2B      	        dec     HL              ; Point to LSB
2C46: 7B      	        ld      A,E             ; Get LSB
2C47: 96      	        sub     (HL)            ; Compare LSBs
2C48: C0      	        ret     NZ              ; Different
2C49: E1      	        pop     HL              ; Drop RETurn
2C4A: E1      	        pop     HL              ; Drop another RETurn
2C4B: C9      	        ret
              	
2C4C: 47      	FPINT:  ld      B,A             ; <- Move
2C4D: 4F      	        ld      C,A             ; <- exponent
2C4E: 57      	        ld      D,A             ; <- to all
2C4F: 5F      	        ld      E,A             ; <- bits
2C50: B7      	        or      A               ; Test exponent
2C51: C8      	        ret     Z               ; Zero - Return zero
2C52: E5      	        push    HL              ; Save pointer to number
2C53: CDF02B  	        call    BCDEFP          ; Move FPREG to BCDE
2C56: CD0A2C  	        call    SIGNS           ; Set MSBs & sign of result
2C59: AE      	        xor     (HL)            ; Combine with sign of FPREG
2C5A: 67      	        ld      H,A             ; Save combined signs
2C5B: FC702C  	        call    M,DCBCDE        ; Negative - Decrement BCDE
2C5E: 3E98    	        ld      A,$80+24        ; 24 bits
2C60: 90      	        sub     B               ; Bits to shift
2C61: CDD229  	        call    SCALE           ; Shift BCDE
2C64: 7C      	        ld      A,H             ; Get combined sign
2C65: 17      	        rla                     ; Sign to carry
2C66: DCA529  	        call    C,FPROND        ; Negative - Round number up
2C69: 0600    	        ld      B,$00           ; Zero exponent
2C6B: DCBE29  	        call    C,COMPL         ; If negative make positive
2C6E: E1      	        pop     HL              ; Restore pointer to number
2C6F: C9      	        ret
              	
2C70: 1B      	DCBCDE: dec     DE              ; Decrement BCDE
2C71: 7A      	        ld      A,D             ; Test LSBs
2C72: A3      	        and     E
2C73: 3C      	        inc     A
2C74: C0      	        ret     NZ              ; Exit if LSBs not FFFF
2C75: 0B      	        dec     BC              ; Decrement MSBs
2C76: C9      	        ret
              	
2C77: 21CC81  	INT:    ld      HL,FPEXP        ; Point to exponent
2C7A: 7E      	        ld      A,(HL)          ; Get exponent
2C7B: FE98    	        cp      $80+24          ; Integer accuracy only?
2C7D: 3AC981  	        ld      A,(FPREG)       ; Get LSB
2C80: D0      	        ret     NC              ; Yes - Already integer
2C81: 7E      	        ld      A,(HL)          ; Get exponent
2C82: CD4C2C  	        call    FPINT           ; F.P to integer
2C85: 3698    	        ld      (HL),$80+24     ; Save 24 bit integer
2C87: 7B      	        ld      A,E             ; Get LSB of number
2C88: F5      	        push    AF              ; Save LSB
2C89: 79      	        ld      A,C             ; Get MSB of number
2C8A: 17      	        rla                     ; Sign to carry
2C8B: CD5B29  	        call    CONPOS          ; Set sign of result
2C8E: F1      	        pop     AF              ; Restore LSB of number
2C8F: C9      	        ret
              	
2C90: 210000  	MLDEBC: ld      HL,$0000        ; Clear partial product
2C93: 78      	        ld      A,B             ; Test multiplier
2C94: B1      	        or      C
2C95: C8      	        ret     Z               ; Return zero if zero
2C96: 3E10    	        ld      A,$10           ; 16 bits
2C98: 29      	MLDBLP: add     HL,HL           ; Shift P.P left
2C99: DAC921  	        jp      C,BSERR         ; ?BS Error if overflow
2C9C: EB      	        ex      DE,HL
2C9D: 29      	        add     HL,HL           ; Shift multiplier left
2C9E: EB      	        ex      DE,HL
2C9F: D2A62C  	        jp      NC,NOMLAD       ; Bit was zero - No add
2CA2: 09      	        add     HL,BC           ; Add multiplicand
2CA3: DAC921  	        jp      C,BSERR         ; ?BS Error if overflow
2CA6: 3D      	NOMLAD: dec     A               ; Count bits
2CA7: C2982C  	        jp      NZ,MLDBLP       ; More
2CAA: C9      	        ret
              	
2CAB: FE2D    	ASCTFP: cp      '-'             ; Negative?
2CAD: F5      	        push    AF              ; Save it and flags
2CAE: CAB72C  	        jp      Z,CNVNUM        ; Yes - Convert number
2CB1: FE2B    	        cp      '+'             ; Positive?
2CB3: CAB72C  	        jp      Z,CNVNUM        ; Yes - Convert number
2CB6: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
2CB7: CD7329  	CNVNUM: call    RESZER          ; Set result to zero
2CBA: 47      	        ld      B,A             ; Digits after point counter
2CBB: 57      	        ld      D,A             ; Sign of exponent
2CBC: 5F      	        ld      E,A             ; Exponent of ten
2CBD: 2F      	        cpl
2CBE: 4F      	        ld      C,A             ; Before or after point flag
2CBF: CD321A  	MANLP:  call    GETCHR          ; Get next character
2CC2: DA082D  	        jp      C,ADDIG         ; Digit - Add to number
2CC5: FE2E    	        cp      '.'
2CC7: CAE32C  	        jp      Z,DPOINT        ; '.' - Flag point
2CCA: FE45    	        cp      'E'
2CCC: C2E72C  	        jp      NZ,CONEXP       ; Not 'E' - Scale number
2CCF: CD321A  	        call    GETCHR          ; Get next character
2CD2: CDE51F  	        call    SGNEXP          ; Get sign of exponent
2CD5: CD321A  	EXPLP:  call    GETCHR          ; Get next character
2CD8: DA2A2D  	        jp      C,EDIGIT        ; Digit - Add to exponent
2CDB: 14      	        inc     D               ; Is sign negative?
2CDC: C2E72C  	        jp      NZ,CONEXP       ; No - Scale number
2CDF: AF      	        xor     A
2CE0: 93      	        sub     E               ; Negate exponent
2CE1: 5F      	        ld      E,A             ; And re-save it
2CE2: 0C      	        inc     C               ; Flag end of number
2CE3: 0C      	DPOINT: inc     C               ; Flag point passed
2CE4: CABF2C  	        jp      Z,MANLP         ; Zero - Get another digit
2CE7: E5      	CONEXP: push    HL              ; Save code string address
2CE8: 7B      	        ld      A,E             ; Get exponent
2CE9: 90      	        sub     B               ; Subtract digits after point
2CEA: F4002D  	SCALMI: call    P,SCALPL        ; Positive - Multiply number
2CED: F2F62C  	        jp      P,ENDCON        ; Positive - All done
2CF0: F5      	        push    AF              ; Save number of times to /10
2CF1: CDEC2A  	        call    DIV10           ; Divide by 10
2CF4: F1      	        pop     AF              ; Restore count
2CF5: 3C      	        inc     A               ; Count divides
              	
2CF6: C2EA2C  	ENDCON: jp      NZ,SCALMI       ; More to do
2CF9: D1      	        pop     DE              ; Restore code string address
2CFA: F1      	        pop     AF              ; Restore sign of number
2CFB: CCCD2B  	        call    Z,INVSGN        ; Negative - Negate number
2CFE: EB      	        ex      DE,HL           ; Code string address to HL
2CFF: C9      	        ret
              	
2D00: C8      	SCALPL: ret     Z               ; Exit if no scaling needed
2D01: F5      	MULTEN: push    AF              ; Save count
2D02: CD8D2B  	        call    MLSP10          ; Multiply number by 10
2D05: F1      	        pop     AF              ; Restore count
2D06: 3D      	        dec     A               ; Count multiplies
2D07: C9      	        ret
              	
2D08: D5      	ADDIG:  push    DE              ; Save sign of exponent
2D09: 57      	        ld      D,A             ; Save digit
2D0A: 78      	        ld      A,B             ; Get digits after point
2D0B: 89      	        adc     A,C             ; Add one if after point
2D0C: 47      	        ld      B,A             ; Re-save counter
2D0D: C5      	        push    BC              ; Save point flags
2D0E: E5      	        push    HL              ; Save code string address
2D0F: D5      	        push    DE              ; Save digit
2D10: CD8D2B  	        call    MLSP10          ; Multiply number by 10
2D13: F1      	        pop     AF              ; Restore digit
2D14: D630    	        sub     '0'             ; Make it absolute
2D16: CD1F2D  	        call    RSCALE          ; Re-scale number
2D19: E1      	        pop     HL              ; Restore code string address
2D1A: C1      	        pop     BC              ; Restore point flags
2D1B: D1      	        pop     DE              ; Restore sign of exponent
2D1C: C3BF2C  	        jp      MANLP           ; Get another digit
              	
2D1F: CDD52B  	RSCALE: call    STAKFP          ; Put number on stack
2D22: CDB62B  	        call    FLGREL          ; Digit to add to FPREG
2D25: C1      	PADD:   pop     BC              ; Restore number
2D26: D1      	        pop     DE
2D27: C30D29  	        jp      FPADD           ; Add BCDE to FPREG and return
              	
2D2A: 7B      	EDIGIT: ld      A,E             ; Get digit
2D2B: 07      	        rlca                    ; Times 2
2D2C: 07      	        rlca                    ; Times 4
2D2D: 83      	        add     A,E             ; Times 5
2D2E: 07      	        rlca                    ; Times 10
2D2F: 86      	        add     A,(HL)          ; Add next digit
2D30: D630    	        sub     '0'             ; Make it absolute
2D32: 5F      	        ld      E,A             ; Save new digit
2D33: C3D52C  	        jp      EXPLP           ; Look for another digit
              	
2D36: E5      	LINEIN: push    HL              ; Save code string address
2D37: 21A614  	        ld      HL,INMSG        ; Output " in "
2D3A: CDAA23  	        call    PRS             ; Output string at HL
2D3D: E1      	        pop     HL              ; Restore code string address
2D3E: EB      	PRNTHL: ex      DE,HL           ; Code string address to DE
2D3F: AF      	        xor     A
2D40: 0698    	        ld      B,$80+24        ; 24 bits
2D42: CDBB2B  	        call    RETINT          ; Return the integer
2D45: 21A923  	        ld      HL,PRNUMS       ; Print number string
2D48: E5      	        push    HL              ; Save for return
2D49: 213082  	NUMASC: ld      HL,PBUFF        ; Convert number to ASCII
2D4C: E5      	        push    HL              ; Save for return
2D4D: CDA42B  	        call    TSTSGN          ; Test sign of FPREG
2D50: 3620    	        ld      (HL),SPC        ; Space at start
2D52: F2572D  	        jp      P,SPCFST        ; Positive - Space to start
2D55: 362D    	        ld      (HL),'-'        ; '-' sign at start
2D57: 23      	SPCFST: inc     HL              ; First byte of number
2D58: 3630    	        ld      (HL),'0'        ; '0' if zero
2D5A: CA0D2E  	        jp      Z,JSTZER        ; Return '0' if zero
2D5D: E5      	        push    HL              ; Save buffer address
2D5E: FCCD2B  	        call    M,INVSGN        ; Negate FPREG if negative
2D61: AF      	        xor     A               ; Zero A
2D62: F5      	        push    AF              ; Save it
2D63: CD132E  	        call    RNGTST          ; Test number is in range
2D66: 014391  	SIXDIG: ld      BC,$9143        ; BCDE - 99999.9
2D69: 11F84F  	        ld      DE,$4FF8
2D6C: CD1F2C  	        call    CMPNUM          ; Compare numbers
2D6F: B7      	        or      A
2D70: E2842D  	        jp      PO,INRNG        ; > 99999.9 - Sort it out
2D73: F1      	        pop     AF              ; Restore count
2D74: CD012D  	        call    MULTEN          ; Multiply by ten
2D77: F5      	        push    AF              ; Re-save count
2D78: C3662D  	        jp      SIXDIG          ; Test it again
              	
2D7B: CDEC2A  	GTSIXD: call    DIV10           ; Divide by 10
2D7E: F1      	        pop     AF              ; Get count
2D7F: 3C      	        inc     A               ; Count divides
2D80: F5      	        push    AF              ; Re-save count
2D81: CD132E  	        call    RNGTST          ; Test number is in range
2D84: CDFB28  	INRNG:  call    ROUND           ; Add 0.5 to FPREG
2D87: 3C      	        inc     A
2D88: CD4C2C  	        call    FPINT           ; F.P to integer
2D8B: CDE52B  	        call    FPBCDE          ; Move BCDE to FPREG
2D8E: 010603  	        ld      BC,$0306        ; 1E+06 to 1E-03 range
2D91: F1      	        pop     AF              ; Restore count
2D92: 81      	        add     A,C             ; 6 digits before point
2D93: 3C      	        inc     A               ; Add one
2D94: FAA02D  	        jp      M,MAKNUM        ; Do it in 'E' form if < 1E-02
2D97: FE08    	        cp      6+1+1           ; More than 999999 ?
2D99: D2A02D  	        jp      NC,MAKNUM       ; Yes - Do it in 'E' form
2D9C: 3C      	        inc     A               ; Adjust for exponent
2D9D: 47      	        ld      B,A             ; Exponent of number
2D9E: 3E02    	        ld      A,2             ; Make it zero after
              	
2DA0: 3D      	MAKNUM: dec     A               ; Adjust for digits to do
2DA1: 3D      	        dec     A
2DA2: E1      	        pop     HL              ; Restore buffer address
2DA3: F5      	        push    AF              ; Save count
2DA4: 11262E  	        ld      DE,POWERS       ; Powers of ten
2DA7: 05      	        dec     B               ; Count digits before point
2DA8: C2B12D  	        jp      NZ,DIGTXT       ; Not zero - Do number
2DAB: 362E    	        ld      (HL),'.'        ; Save point
2DAD: 23      	        inc     HL              ; Move on
2DAE: 3630    	        ld      (HL),'0'        ; Save zero
2DB0: 23      	        inc     HL              ; Move on
2DB1: 05      	DIGTXT: dec     B               ; Count digits before point
2DB2: 362E    	        ld      (HL),'.'        ; Save point in case
2DB4: CCFA2B  	        call    Z,INCHL         ; Last digit - move on
2DB7: C5      	        push    BC              ; Save digits before point
2DB8: E5      	        push    HL              ; Save buffer address
2DB9: D5      	        push    DE              ; Save powers of ten
2DBA: CDF02B  	        call    BCDEFP          ; Move FPREG to BCDE
2DBD: E1      	        pop     HL              ; Powers of ten table
2DBE: 062F    	        ld      B,'0'-1         ; ASCII '0' - 1
2DC0: 04      	TRYAGN: inc     B               ; Count subtractions
2DC1: 7B      	        ld      A,E             ; Get LSB
2DC2: 96      	        sub     (HL)            ; Subtract LSB
2DC3: 5F      	        ld      E,A             ; Save LSB
2DC4: 23      	        inc     HL
2DC5: 7A      	        ld      A,D             ; Get NMSB
2DC6: 9E      	        sbc     A,(HL)          ; Subtract NMSB
2DC7: 57      	        ld      D,A             ; Save NMSB
2DC8: 23      	        inc     HL
2DC9: 79      	        ld      A,C             ; Get MSB
2DCA: 9E      	        sbc     A,(HL)          ; Subtract MSB
2DCB: 4F      	        ld      C,A             ; Save MSB
2DCC: 2B      	        dec     HL              ; Point back to start
2DCD: 2B      	        dec     HL
2DCE: D2C02D  	        jp      NC,TRYAGN       ; No overflow - Try again
2DD1: CDB229  	        call    PLUCDE          ; Restore number
2DD4: 23      	        inc     HL              ; Start of next number
2DD5: CDE52B  	        call    FPBCDE          ; Move BCDE to FPREG
2DD8: EB      	        ex      DE,HL           ; Save point in table
2DD9: E1      	        pop     HL              ; Restore buffer address
2DDA: 70      	        ld      (HL),B          ; Save digit in buffer
2DDB: 23      	        inc     HL              ; And move on
2DDC: C1      	        pop     BC              ; Restore digit count
2DDD: 0D      	        dec     C               ; Count digits
2DDE: C2B12D  	        jp      NZ,DIGTXT       ; More - Do them
2DE1: 05      	        dec     B               ; Any decimal part?
2DE2: CAF12D  	        jp      Z,DOEBIT        ; No - Do 'E' bit
2DE5: 2B      	SUPTLZ: dec     HL              ; Move back through buffer
2DE6: 7E      	        ld      A,(HL)          ; Get character
2DE7: FE30    	        cp      '0'             ; '0' character?
2DE9: CAE52D  	        jp      Z,SUPTLZ        ; Yes - Look back for more
2DEC: FE2E    	        cp      '.'             ; A decimal point?
2DEE: C4FA2B  	        call    NZ,INCHL        ; Move back over digit
              	
2DF1: F1      	DOEBIT: pop     AF              ; Get 'E' flag
2DF2: CA102E  	        jp      Z,NOENED        ; No 'E' needed - End buffer
2DF5: 3645    	        ld      (HL),'E'        ; Put 'E' in buffer
2DF7: 23      	        inc     HL              ; And move on
2DF8: 362B    	        ld      (HL),'+'        ; Put '+' in buffer
2DFA: F2012E  	        jp      P,OUTEXP        ; Positive - Output exponent
2DFD: 362D    	        ld      (HL),'-'        ; Put '-' in buffer
2DFF: 2F      	        cpl                     ; Negate exponent
2E00: 3C      	        inc     A
2E01: 062F    	OUTEXP: ld      B,'0'-1         ; ASCII '0' - 1
2E03: 04      	EXPTEN: inc     B               ; Count subtractions
2E04: D60A    	        sub     $0A             ; Tens digit
2E06: D2032E  	        jp      NC,EXPTEN       ; More to do
2E09: C63A    	        add     A,'0'+10        ; Restore and make ASCII
2E0B: 23      	        inc     HL              ; Move on
2E0C: 70      	        ld      (HL),B          ; Save MSB of exponent
2E0D: 23      	JSTZER: inc     HL              ;
2E0E: 77      	        ld      (HL),A          ; Save LSB of exponent
2E0F: 23      	        inc     HL
2E10: 71      	NOENED: ld      (HL),C          ; Mark end of buffer
2E11: E1      	        pop     HL              ; Restore code string address
2E12: C9      	        ret
              	
2E13: 017494  	RNGTST: ld      BC,$9474        ; BCDE = 999999.
2E16: 11F723  	        ld      DE,$23F7
2E19: CD1F2C  	        call    CMPNUM          ; Compare numbers
2E1C: B7      	        or      A
2E1D: E1      	        pop     HL              ; Return address to HL
2E1E: E27B2D  	        jp      PO,GTSIXD       ; Too big - Divide by ten
2E21: E9      	        jp      (HL)            ; Otherwise return to caller
              	
2E22: 00000080	HALF:   defb    $00,$00,$00,$80 ; 0.5
              	
2E26: A08601  	POWERS: defb    $A0,$86,$01  ; 100000
2E29: 102700  	        defb    $10,$27,$00  ;  10000
2E2C: E80300  	        defb    $E8,$03,$00  ;   1000
2E2F: 640000  	        defb    $64,$00,$00  ;    100
2E32: 0A0000  	        defb    $0A,$00,$00  ;     10
2E35: 010000  	        defb    $01,$00,$00  ;      1
              	
2E38: 21CD2B  	NEGAFT: ld      HL,INVSGN       ; Negate result
2E3B: E3      	        ex      (SP),HL         ; To be done after caller
2E3C: E9      	        jp      (HL)            ; Return to caller
              	
2E3D: CDD52B  	SQR:    call    STAKFP          ; Put value on stack
2E40: 21222E  	        ld      HL,HALF         ; Set power to 1/2
2E43: CDE22B  	        call    PHLTFP          ; Move 1/2 to FPREG
              	
2E46: C1      	POWER:  pop     BC              ; Get base
2E47: D1      	        pop     DE
2E48: CDA42B  	        call    TSTSGN          ; Test sign of power
2E4B: 78      	        ld      A,B             ; Get exponent of base
2E4C: CA8B2E  	        jp      Z,EXP           ; Make result 1 if zero
2E4F: F2562E  	        jp      P,POWER1        ; Positive base - Ok
2E52: B7      	        or      A               ; Zero to negative power?
2E53: CA3015  	        jp      Z,DZERR         ; Yes - ?/0 Error
2E56: B7      	POWER1: or      A               ; Base zero?
2E57: CA7429  	        jp      Z,SAVEXP        ; Yes - Return zero
2E5A: D5      	        push    DE              ; Save base
2E5B: C5      	        push    BC
2E5C: 79      	        ld      A,C             ; Get MSB of base
2E5D: F67F    	        or      %01111111       ; Get sign status
2E5F: CDF02B  	        call    BCDEFP          ; Move power to BCDE
2E62: F2732E  	        jp      P,POWER2        ; Positive base - Ok
2E65: D5      	        push    DE              ; Save power
2E66: C5      	        push    BC
2E67: CD772C  	        call    INT             ; Get integer of power
2E6A: C1      	        pop     BC              ; Restore power
2E6B: D1      	        pop     DE
2E6C: F5      	        push    AF              ; MSB of base
2E6D: CD1F2C  	        call    CMPNUM          ; Power an integer?
2E70: E1      	        pop     HL              ; Restore MSB of base
2E71: 7C      	        ld      A,H             ; but don't affect flags
2E72: 1F      	        rra                     ; Exponent odd or even?
2E73: E1      	POWER2: pop     HL              ; Restore MSB and exponent
2E74: 22CB81  	        ld      (FPREG+2),HL    ; Save base in FPREG
2E77: E1      	        pop     HL              ; LSBs of base
2E78: 22C981  	        ld      (FPREG),HL      ; Save in FPREG
2E7B: DC382E  	        call    C,NEGAFT        ; Odd power - Negate result
2E7E: CCCD2B  	        call    Z,INVSGN        ; Negative base - Negate it
2E81: D5      	        push    DE              ; Save power
2E82: C5      	        push    BC
2E83: CD072A  	        call    LOG             ; Get LOG of base
2E86: C1      	        pop     BC              ; Restore power
2E87: D1      	        pop     DE
2E88: CD482A  	        call    FPMULT          ; Multiply LOG by power
              	
2E8B: CDD52B  	EXP:    call    STAKFP          ; Put value on stack
2E8E: 013881  	        ld      BC,$8138        ; BCDE = 1/Ln(2)
2E91: 113BAA  	        ld      DE,$AA3B
2E94: CD482A  	        call    FPMULT          ; Multiply value by 1/LN(2)
2E97: 3ACC81  	        ld      A,(FPEXP)       ; Get exponent
2E9A: FE88    	        cp      $80+8           ; Is it in range?
2E9C: D2802B  	        jp      NC,OVTST1       ; No - Test for overflow
2E9F: CD772C  	        call    INT             ; Get INT of FPREG
2EA2: C680    	        add     A,$80           ; For excess 128
2EA4: C602    	        add     A,$02           ; Exponent > 126?
2EA6: DA802B  	        jp      C,OVTST1        ; Yes - Test for overflow
2EA9: F5      	        push    AF              ; Save scaling factor
2EAA: 21F629  	        ld      HL,UNITY        ; Point to 1.
2EAD: CDFE28  	        call    ADDPHL          ; Add 1 to FPREG
2EB0: CD3F2A  	        call    MULLN2          ; Multiply by LN(2)
2EB3: F1      	        pop     AF              ; Restore scaling factor
2EB4: C1      	        pop     BC              ; Restore exponent
2EB5: D1      	        pop     DE
2EB6: F5      	        push    AF              ; Save scaling factor
2EB7: CD0A29  	        call    SUBCDE          ; Subtract exponent from FPREG
2EBA: CDCD2B  	        call    INVSGN          ; Negate result
2EBD: 21CB2E  	        ld      HL,EXPTAB       ; Coefficient table
2EC0: CDFB2E  	        call    SMSER1          ; Sum the series
2EC3: 110000  	        ld      DE,$0000        ; Zero LSBs
2EC6: C1      	        pop     BC              ; Scaling factor
2EC7: 4A      	        ld      C,D             ; Zero MSB
2EC8: C3482A  	        jp      FPMULT          ; Scale result to correct value
              	
2ECB: 08      	EXPTAB: defb    $08             ; Table used by EXP
2ECC: 402E9474	        defb    $40,$2E,$94,$74 ; -1/7! (-1/5040)
2ED0: 704F2E77	        defb    $70,$4F,$2E,$77 ;  1/6! ( 1/720)
2ED4: 6E02887A	        defb    $6E,$02,$88,$7A ; -1/5! (-1/120)
2ED8: E6A02A7C	        defb    $E6,$A0,$2A,$7C ;  1/4! ( 1/24)
2EDC: 50AAAA7E	        defb    $50,$AA,$AA,$7E ; -1/3! (-1/6)
2EE0: FFFF7F7F	        defb    $FF,$FF,$7F,$7F ;  1/2! ( 1/2)
2EE4: 00008081	        defb    $00,$00,$80,$81 ; -1/1! (-1/1)
2EE8: 00000081	        defb    $00,$00,$00,$81 ;  1/0! ( 1/1)
              	
2EEC: CDD52B  	SUMSER: call    STAKFP          ; Put FPREG on stack
2EEF: 11462A  	        ld      DE,MULT         ; Multiply by "X"
2EF2: D5      	        push    DE              ; To be done after
2EF3: E5      	        push    HL              ; Save address of table
2EF4: CDF02B  	        call    BCDEFP          ; Move FPREG to BCDE
2EF7: CD482A  	        call    FPMULT          ; Square the value
2EFA: E1      	        pop     HL              ; Restore address of table
2EFB: CDD52B  	SMSER1: call    STAKFP          ; Put value on stack
2EFE: 7E      	        ld      A,(HL)          ; Get number of coefficients
2EFF: 23      	        inc     HL              ; Point to start of table
2F00: CDE22B  	        call    PHLTFP          ; Move coefficient to FPREG
2F03: 06      	        defb    06H             ; Skip "pop AF"
2F04: F1      	SUMLP:  pop     AF              ; Restore count
2F05: C1      	        pop     BC              ; Restore number
2F06: D1      	        pop     DE
2F07: 3D      	        dec     A               ; Cont coefficients
2F08: C8      	        ret     Z               ; All done
2F09: D5      	        push    DE              ; Save number
2F0A: C5      	        push    BC
2F0B: F5      	        push    AF              ; Save count
2F0C: E5      	        push    HL              ; Save address in table
2F0D: CD482A  	        call    FPMULT          ; Multiply FPREG by BCDE
2F10: E1      	        pop     HL              ; Restore address in table
2F11: CDF32B  	        call    LOADFP          ; Number at HL to BCDE
2F14: E5      	        push    HL              ; Save address in table
2F15: CD0D29  	        call    FPADD           ; Add coefficient to FPREG
2F18: E1      	        pop     HL              ; Restore address in table
2F19: C3042F  	        jp      SUMLP           ; More coefficients
              	
2F1C: CDA42B  	RND:    call    TSTSGN          ; Test sign of FPREG
2F1F: 217A80  	        ld      HL,SEED+2       ; Random number seed
2F22: FA7D2F  	        jp      M,RESEED        ; Negative - Re-seed
2F25: 219B80  	        ld      HL,LSTRND       ; Last random number
2F28: CDE22B  	        call    PHLTFP          ; Move last RND to FPREG
2F2B: 217A80  	        ld      HL,SEED+2       ; Random number seed
2F2E: C8      	        ret     Z               ; Return if RND(0)
2F2F: 86      	        add     A,(HL)          ; Add (SEED)+2)
2F30: E607    	        and     %00000111       ; 0 to 7
2F32: 0600    	        ld      B,$00
2F34: 77      	        ld      (HL),A          ; Re-save seed
2F35: 23      	        inc     HL              ; Move to coefficient table
2F36: 87      	        add     A,A             ; 4 bytes
2F37: 87      	        add     A,A             ; per entry
2F38: 4F      	        ld      C,A             ; BC = Offset into table
2F39: 09      	        add     HL,BC           ; Point to coefficient
2F3A: CDF32B  	        call    LOADFP          ; Coefficient to BCDE
2F3D: CD482A  	        call    FPMULT  ;       ; Multiply FPREG by coefficient
2F40: 3A7980  	        ld      A,(SEED+1)      ; Get (SEED+1)
2F43: 3C      	        inc     A               ; Add 1
2F44: E603    	        and     %00000011       ; 0 to 3
2F46: 0600    	        ld      B,$00
2F48: FE01    	        cp      $01             ; Is it zero?
2F4A: 88      	        adc     A,B             ; Yes - Make it 1
2F4B: 327980  	        ld      (SEED+1),A      ; Re-save seed
2F4E: 21812F  	        ld      HL,RNDTAB-4     ; Addition table
2F51: 87      	        add     A,A             ; 4 bytes
2F52: 87      	        add     A,A             ; per entry
2F53: 4F      	        ld      C,A             ; BC = Offset into table
2F54: 09      	        add     HL,BC           ; Point to value
2F55: CDFE28  	        call    ADDPHL          ; Add value to FPREG
2F58: CDF02B  	RND1:   call    BCDEFP          ; Move FPREG to BCDE
2F5B: 7B      	        ld      A,E             ; Get LSB
2F5C: 59      	        ld      E,C             ; LSB = MSB
2F5D: EE4F    	        xor     %01001111       ; Fiddle around
2F5F: 4F      	        ld      C,A             ; New MSB
2F60: 3680    	        ld      (HL),$80        ; Set exponent
2F62: 2B      	        dec     HL              ; Point to MSB
2F63: 46      	        ld      B,(HL)          ; Get MSB
2F64: 3680    	        ld      (HL),$80        ; Make value -0.5
2F66: 217880  	        ld      HL,SEED         ; Random number seed
2F69: 34      	        inc     (HL)            ; Count seed
2F6A: 7E      	        ld      A,(HL)          ; Get seed
2F6B: D6AB    	        sub     $AB             ; Do it modulo 171
2F6D: C2742F  	        jp      NZ,RND2         ; Non-zero - Ok
2F70: 77      	        ld      (HL),A          ; Zero seed
2F71: 0C      	        inc     C               ; Fillde about
2F72: 15      	        dec     D               ; with the
2F73: 1C      	        inc     E               ; number
2F74: CD5E29  	RND2:   call    BNORM           ; Normalise number
2F77: 219B80  	        ld      HL,LSTRND       ; Save random number
2F7A: C3FC2B  	        jp      FPTHL           ; Move FPREG to last and return
              	
2F7D: 77      	RESEED: ld      (HL),A          ; Re-seed random numbers
2F7E: 2B      	        dec     HL
2F7F: 77      	        ld      (HL),A
2F80: 2B      	        dec     HL
2F81: 77      	        ld      (HL),A
2F82: C3582F  	        jp      RND1            ; Return RND seed
              	
2F85: 68B14668	RNDTAB: defb    $68,$B1,$46,$68 ; Table used by RND
2F89: 99E99269	        defb    $99,$E9,$92,$69
2F8D: 10D17568	        defb    $10,$D1,$75,$68
              	
2F91: 21DB2F  	COS:    ld      HL,HALFPI       ; Point to PI/2
2F94: CDFE28  	        call    ADDPHL          ; Add it to PPREG
2F97: CDD52B  	SIN:    call    STAKFP          ; Put angle on stack
2F9A: 014983  	        ld      BC,$8349        ; BCDE = 2 PI
2F9D: 11DB0F  	        ld      DE,$0FDB
2FA0: CDE52B  	        call    FPBCDE          ; Move 2 PI to FPREG
2FA3: C1      	        pop     BC              ; Restore angle
2FA4: D1      	        pop     DE
2FA5: CDFA2A  	        call    DVBCDE          ; Divide angle by 2 PI
2FA8: CDD52B  	        call    STAKFP          ; Put it on stack
2FAB: CD772C  	        call    INT             ; Get INT of result
2FAE: C1      	        pop     BC              ; Restore number
2FAF: D1      	        pop     DE
2FB0: CD0A29  	        call    SUBCDE          ; Make it 0 <= value < 1
2FB3: 21DF2F  	        ld      HL,QUARTR       ; Point to 0.25
2FB6: CD0429  	        call    SUBPHL          ; Subtract value from 0.25
2FB9: CDA42B  	        call    TSTSGN          ; Test sign of value
2FBC: 37      	        scf                     ; Flag positive
2FBD: F2C72F  	        jp      P,SIN1          ; Positive - Ok
2FC0: CDFB28  	        call    ROUND           ; Add 0.5 to value
2FC3: CDA42B  	        call    TSTSGN          ; Test sign of value
2FC6: B7      	        or      A               ; Flag negative
2FC7: F5      	SIN1:   push    AF              ; Save sign
2FC8: F4CD2B  	        call    P,INVSGN        ; Negate value if positive
2FCB: 21DF2F  	        ld      HL,QUARTR       ; Point to 0.25
2FCE: CDFE28  	        call    ADDPHL          ; Add 0.25 to value
2FD1: F1      	        pop     AF              ; Restore sign
2FD2: D4CD2B  	        call    NC,INVSGN       ; Negative - Make positive
2FD5: 21E32F  	        ld      HL,SINTAB       ; Coefficient table
2FD8: C3EC2E  	        jp      SUMSER          ; Evaluate sum of series
              	
2FDB: DB0F4981	HALFPI: defb    $DB,$0F,$49,$81 ; 1.5708 (PI/2)
              	
2FDF: 0000007F	QUARTR: defb    $00,$00,$00,$7F ; 0.25
              	
2FE3: 05      	SINTAB: defb    $05             ; Table used by SIN
2FE4: BAD71E86	        defb    $BA,$D7,$1E,$86 ; 39.711
2FE8: 64269987	        defb    $64,$26,$99,$87 ;-76.575
2FEC: 58342387	        defb    $58,$34,$23,$87 ; 81.602
2FF0: E05DA586	        defb    $E0,$5D,$A5,$86 ;-41.342
2FF4: DA0F4983	        defb    $DA,$0F,$49,$83 ;  6.2832
              	
2FF8: CDD52B  	TAN:    call    STAKFP          ; Put angle on stack
2FFB: CD972F  	        call    SIN             ; Get SIN of angle
2FFE: C1      	        pop     BC              ; Restore angle
2FFF: E1      	        pop     HL
3000: CDD52B  	        call    STAKFP          ; Save SIN of angle
3003: EB      	        ex      DE,HL           ; BCDE = Angle
3004: CDE52B  	        call    FPBCDE          ; Angle to FPREG
3007: CD912F  	        call    COS             ; Get COS of angle
300A: C3F82A  	        jp      DIV             ; TAN = SIN / COS
              	
300D: CDA42B  	ATN:    call    TSTSGN          ; Test sign of value
3010: FC382E  	        call    M,NEGAFT        ; Negate result after if -ve
3013: FCCD2B  	        call    M,INVSGN        ; Negate value if -ve
3016: 3ACC81  	        ld      A,(FPEXP)       ; Get exponent
3019: FE81    	        cp      81H             ; Number less than 1?
301B: DA2A30  	        jp      C,ATN1          ; Yes - Get arc tangnt
301E: 010081  	        ld      BC,$8100        ; BCDE = 1
3021: 51      	        ld      D,C
3022: 59      	        ld      E,C
3023: CDFA2A  	        call    DVBCDE          ; Get reciprocal of number
3026: 210429  	        ld      HL,SUBPHL       ; Sub angle from PI/2
3029: E5      	        push    HL              ; Save for angle > 1
302A: 213430  	ATN1:   ld      HL,ATNTAB       ; Coefficient table
302D: CDEC2E  	        call    SUMSER          ; Evaluate sum of series
3030: 21DB2F  	        ld      HL,HALFPI       ; PI/2 - angle in case > 1
3033: C9      	        ret                     ; Number > 1 - Sub from PI/2
              	
3034: 09      	ATNTAB: defb    $09             ; Table used by ATN
3035: 4AD73B78	        defb    $4A,$D7,$3B,$78 ; 1/17
3039: 026E847B	        defb    $02,$6E,$84,$7B ;-1/15
303D: FEC12F7C	        defb    $FE,$C1,$2F,$7C ; 1/13
3041: 74319A7D	        defb    $74,$31,$9A,$7D ;-1/11
3045: 843D5A7D	        defb    $84,$3D,$5A,$7D ; 1/9
3049: C87F917E	        defb    $C8,$7F,$91,$7E ;-1/7
304D: E4BB4C7E	        defb    $E4,$BB,$4C,$7E ; 1/5
3051: 6CAAAA7F	        defb    $6C,$AA,$AA,$7F ;-1/3
3055: 00000081	        defb    $00,$00,$00,$81 ; 1/1
              	
              	
3059: C9      	ARET:   ret                     ; A RETurn instruction
              	
305A: D7      	GETINP: rst     $10             ; input a character
305B: C9      	        ret
              	
305C: E5      	CLS:    push    HL
305D: D5      	        push    DE
305E: 3AE081  	        ld      A,(SCR_MODE)    ; check screen mode
3061: FE02    	        cp      $02             ; G2 mode?
3063: CC5805  	        call    Z,EMPTYVIDBUF   ; yes, reset video buffer
3066: D1      	        pop     DE
3067: E1      	        pop     HL
3068: 3E0C    	        ld      A,CS            ; ASCII Clear screen
306A: CD4D18  	        call    SND2VID         ; send to screen
306D: C3123B  	        jp      MONOUT          ; Output character
              	
3070: CD3226  	WIDTH:  call    GETINT          ; Get integer 0-255
3073: 7B      	        ld      A,E             ; Width to A
3074: 32A280  	        ld      (LWIDTH),A      ; Set width
3077: C9      	        ret
              	
              	
3078: CDE81A  	DEEK:   call    DEINT           ; Get integer -32768 to 32767
307B: D5      	        push    DE              ; Save number
307C: E1      	        pop     HL              ; Number to HL
307D: 46      	RECWRD: ld      B,(HL)          ; Get LSB of contents
307E: 23      	        inc     HL
307F: 7E      	        ld      A,(HL)          ; Get MSB of contents
3080: C38C22  	        jp      ABPASS          ; Return integer AB
              	
3083: CDA71E  	DOKE:   call    GETNUM          ; Get a number
3086: CDE81A  	        call    DEINT           ; Get integer -32768 to 32767
3089: D5      	        push    DE              ; Save address
308A: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
308D: 2C      	        defb    ','
308E: CDA71E  	        call    GETNUM          ; Get a number
3091: CDE81A  	        call    DEINT           ; Get integer -32768 to 32767
3094: E3      	        ex      (SP),HL         ; Save value,get address
3095: 73      	        ld      (HL),E          ; Save LSB of value
3096: 23      	        inc     HL
3097: 72      	        ld      (HL),D          ; Save MSB of value
3098: E1      	        pop     HL              ; Restore code string address
3099: C9      	        ret
              	
              	; stop the execution of code for a certain bit of time. The pause
              	; is between $0000 and $FFFF 100ths of second (0~655.5 secs)
309A: CDA71E  	PAUSE:  call    GETNUM          ; Get a number
309D: CDE81A  	        call    DEINT           ; Get integer -32768 to 32767
30A0: 7A      	        ld      A,D             ; load D into A
30A1: B3      	        or      E               ; are D & E equal to $00?
30A2: C8      	        ret     Z               ; if yes, then return
30A3: C5      	DIR_PAU:push    BC              ; store BC
30A4: 3ACE81  	        ld      A,(TMRCNT)      ; Load current value of system timer
30A7: 47      	        ld      B,A             ; move it into B
30A8: CD5D1A  	RPTPS:  call    TSTBRK          ; Test for break key
30AB: 3ACE81  	        ld      A,(TMRCNT)      ; Load current value of system timer
30AE: B8      	        cp      B               ; is it the same value?
30AF: 28F7    	        jr      Z,RPTPS         ; yes, so read again
30B1: 47      	        ld      B,A             ; no, so store the new value
30B2: 1B      	        dec     DE              ; decrement interval
30B3: 7A      	        ld      A,D             ; load D into A
30B4: B3      	        or      E               ; check if DE is equal to 0 (if D & e are $00 then result is 0)
30B5: 20F1    	        jr      NZ,RPTPS        ; no, repeat
30B7: C1      	        pop     BC              ; yes, recover BC and continue
30B8: C9      	        ret
              	
              	; change the screen mode. Usage: SCREEN X[,Y][,Z]
              	; where X is: 0=text mode (40x24),
              	; 1=graphic mode 1 (32x24 chars); 2=graphic mode 2 (256x192 pixels);
              	; 3=multicolor mode (64x48 pixels); 4=extended graphic mode 2 (32x24 chars mixed between G1 and G2)
              	; Y is: 0=8x8 sprites, 1=16x16 sprites
              	; Z is: 0=no sprite magnification; 1=sprite magnification x2 (8x8=>16x16, and 16x16=32x32)
              	; (the latters are accepted only in graphic modes G1, G2, G3, and G4)
30B9: AF      	SCREEN: xor     A
30BA: 32F181  	        ld      (TMPBFR2),A     ; sprite size & magnif. byte set to 0
30BD: CD3226  	        call    GETINT          ; Get integer 0-255
30C0: FE05    	        cp      $05             ; is it a valid mode (0~4)?
30C2: D2FD1A  	        jp      NC,FCERR        ; No - Illegal function call Error
30C5: 32EF81  	        ld      (TMPBFR1),A     ; store graphic mode
30C8: A7      	        and     A               ; is it 0 (text mode)?
30C9: CAE530  	        jp      Z,SCVDP         ; yes, ignore other arguments and set mode immediately
30CC: CD2431  	SETVDP: call    CHKSCAR         ; no, check if sprite size follows
30CF: DAD730  	        jp      C,CKMAGN        ; no (set to 0 or missing), so jump over
30D2: 3E02    	        ld      A,$02           ; no, so set sprite size
30D4: 32F181  	        ld      (TMPBFR2),A     ; ...to 16x16
30D7: CD2431  	CKMAGN: call    CHKSCAR         ; check if sprite magnification follows
30DA: DAE530  	        jp      C,SCVDP         ; no (set to 0 or missing), so jump over
30DD: 3AF181  	        ld      A,(TMPBFR2)     ; yes, so retrieve sprite attributes...
30E0: F601    	        or      $01             ; ...set sprite magnification to 2x...
30E2: 32F181  	        ld      (TMPBFR2),A     ; ...and save flags again
30E5: F3      	SCVDP:  di                      ; disable INTs
30E6: D5      	        push    DE              ; store DE
30E7: E5      	        push    HL              ; store HL
30E8: 3AEF81  	        ld      A,(TMPBFR1)     ; recover graphic mode
30EB: 5F      	        ld      E,A             ; and store it into E
30EC: 3AF181  	        ld      A,(TMPBFR2)     ; recover sprite flags
30EF: 57      	        ld      D,A             ; and store them into D
30F0: D5      	        push    DE              ; store D & E
30F1: CD7E03  	        call    initVDP         ; initialize VDP with mode pointed by E
30F4: D1      	        pop     DE              ; retrieve D & E
30F5: 7B      	        ld      A,E             ; move graphic mode into A
30F6: 87      	        add     A,A
30F7: 87      	        add     A,A
30F8: 87      	        add     A,A             ; multiply A times 8 to get offset of graphic mode
30F9: 5F      	        ld      E,A             ; and pass it into E
30FA: D5      	        push    DE              ; store sprite flags in E
30FB: 1600    	        ld      D,$00           ; reset D
30FD: 21360A  	        ld      HL,VDPMODESET+1 ; load address of VDP settings for reg#1
3100: 19      	        add     HL,DE           ; load correct reg#1 setting
3101: D1      	        pop     DE              ; retrieve sprite flags from E
3102: 7E      	        ld      A,(HL)          ; load reg#1 setting
3103: E6FC    	        and     %11111100       ; reset size & magn. bits
3105: B2      	        or      D               ; set size & magn. bits
3106: 5F      	        ld      E,A             ; value into E
3107: 3E01    	        ld      A,$01           ; reg #1
3109: CD3406  	        call    WRITE_VREG      ; send setting to reg #1
310C: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line number
310F: 23      	        inc     HL              ; -1 means direct statement
3110: 7C      	        ld      A,H
3111: B5      	        or      L
3112: CC3608  	        call    Z,CURSOR_ON     ; enable cursor if not in program mode
3115: FB      	        ei                      ; re-enable interrupts
3116: E1      	        pop     HL              ; restore HL
3117: D1      	        pop     DE              ; restore DE
3118: 3ADF81  	        ld      A,(SCR_SIZE_H)  ; check the screen mode by looking at the screen height
311B: FE30    	        cp      $30             ; is it 48 chars or 192 pixels (MC and G2 modes)?
311D: D0      	        ret     NC              ; yes, so exit (in graphics 2 and multicolor no print-on-video)
311E: 3E01    	        ld      A,$01           ; no (we are in Text, G1 or ExG2), so activate the...
3120: 32EB81  	        ld      (PRNTVIDEO),A   ; ...video buffer...
3123: C9      	        ret                     ; ...and return to caller
              	
              	; check an additional argument for SCREEN
3124: 2B      	CHKSCAR:dec     HL              ; dec 'cos GETCHR INCs
3125: CD321A  	        call    GETCHR          ; Get next character
3128: 37      	        scf                     ; set carry flag
3129: C8      	        ret     Z               ; return if nothing follows with Carry=1
312A: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
312D: 2C      	        defb    ','
312E: CD3226  	        call    GETINT          ; get value
3131: 1F      	        rra                     ; Carry=bit #0
3132: 3F      	        ccf                     ; invert Carry, so Carry=0 if arg. is 1, and Carry=1 otherwise (arg<>1)
3133: C9      	        ret                     ; return
              	
              	
              	; change the colors of the screen - Syntax is COLOR a,b,c where:
              	; a=foreground color / b=background color / c=border color
              	; a,b,c must be in a range between 1 and 15 (0 is transparent and it's not supported)
3134: CD3226  	COLOR:  call    GETINT          ; get first value
3137: CDDB31  	        call    CHKCLR          ; check if it's in range 1~15
313A: 32EF81  	        ld      (TMPBFR1),A     ; store it
313D: 3AE081  	        ld      A,(SCR_MODE)    ; check screen mode
3140: FE03    	        cp      $03             ; is it multicolor mode?
3142: 200D    	        jr      NZ,CNTCKCL      ; no, continue
3144: 3E0F    	        ld      A,$0F           ; white for...
3146: 32ED81  	        ld      (FRGNDCLR),A    ; ...foreground (even it's not used in MC)
3149: 3AEF81  	        ld      A,(TMPBFR1)     ; yes, so we stop here because in MC mode we just support border color
314C: 32F381  	        ld      (TMPBFR3),A     ; move color into temp buffer 3
314F: 1834    	        jr      CLRMC           ; jump to set color
3151: CD0F18  	CNTCKCL:call    CHKSYN          ; Make sure ',' follows
3154: 2C      	        defb    ','
3155: CD3226  	        call    GETINT          ; get second value
3158: CDDB31  	        call    CHKCLR          ; check if it's in range 1~15
315B: 32F181  	        ld      (TMPBFR2),A     ; store it
315E: 32EE81  	        ld      (BKGNDCLR),A    ; and set as background color
3161: 3AE081  	        ld      A,(SCR_MODE)    ; check screen mode
3164: A7      	        and     A               ; is it text mode?
3165: 281B    	        jr      Z,CLRTXT        ; yes, stop here because in text mode, background and border colors coincide
3167: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
316A: 2C      	        defb    ','
316B: CD3226  	        call    GETINT          ; get third value
316E: CDDB31  	        call    CHKCLR          ; check if it's in range 1~15
3171: 32F381  	        ld      (TMPBFR3),A     ; store it
3174: D5      	        push    DE              ; store DE
3175: 3AE081  	        ld      A,(SCR_MODE)    ; check screen mode
3178: FE01    	        cp      $01             ; is it G1 mode?
317A: 2810    	        jr      Z,CLRG1         ; yes, jump over
317C: FE02    	        cp      $02             ; is it G2 mode?
317E: 2815    	        jr      Z,CLRG2         ; yes, jump over
3180: 181C    	        jr      CLREX2          ; last case can only be ExG2
3182: CDCE31  	CLRTXT: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
3185: 32F381  	CLRMC:  ld      (TMPBFR3),A     ; store color settings (for MC mode, we only set border color)
3188: D5      	        push    DE              ; store DE
3189: F3      	        di                      ; disable INTs
318A: 182E    	        jr      SETBRCL         ; set colors and exit
318C: CDCE31  	CLRG1:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
318F: 1601    	        ld      D,$01           ; repeat 1 time
3191: 0620    	        ld      B,$20           ; 32 bytes of colors
3193: 1810    	        jr      LOADCLR         ; load colors
3195: CDCE31  	CLRG2:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
3198: 1618    	        ld      D,$18           ; 18 pages of...
319A: 0600    	        ld      B,$00           ; ...256 bytes each
319C: 1807    	        jr      LOADCLR         ; load colors
319E: CDCE31  	CLREX2: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
31A1: 1608    	        ld      D,$08           ; 8 pages of...
31A3: 0600    	        ld      B,$00           ; ...256 bytes each
31A5: E5      	LOADCLR:push    HL              ; store HL
31A6: 210020  	        ld      HL,$2000        ; color table start: $2000
31A9: F3      	        di                      ; disable INTs
31AA: CDEA05  	        call    SETVDPADRS
31AD: 0E30    	        ld      C,VDP_DAT       ; VDP data mode
31AF: ED79    	RPTLDCL:out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
31B1: 00      	        nop
31B2: 00      	        nop
31B3: 10FA    	        djnz    RPTLDCL         ; repeat for 256 bytes (1 page)
31B5: 15      	        dec     D               ; did we fill up all the pages?
31B6: 20F7    	        jr      NZ,RPTLDCL      ; no, repeat
31B8: FB      	        ei
31B9: E1      	        pop     HL              ; retrieve HL
31BA: 87      	SETBRCL:add     A,A             ; move high nibble
31BB: 87      	        add     A,A             ; to right to get the
31BC: 87      	        add     A,A             ; foreground color
31BD: 87      	        add     A,A             ; into the low nibble
31BE: 32ED81  	        ld      (FRGNDCLR),A    ; store foreground color
31C1: 3AF381  	        ld      A,(TMPBFR3)     ; recover border color
31C4: 5F      	        ld      E,A             ; move A into E
31C5: 3E07    	        ld      A,$07           ; VDP register 7
31C7: F3      	        di
31C8: CD3406  	        call    WRITE_VREG      ; send value to VDP: set border color
31CB: FB      	        ei                      ; re-enable INTs
31CC: D1      	        pop     DE              ; retrieve DE
31CD: C9      	        ret                     ; return to caller
              	
              	
              	; mix 2 color nibbles in 1 byte
31CE: 3AF181  	MIXCLRS:ld      A,(TMPBFR2)     ; retrieve background color
31D1: 47      	        ld      B,A             ; move it into B
31D2: 3AEF81  	        ld      A,(TMPBFR1)     ; retrieve foreground color
31D5: 87      	        add     A,A             ; move foreground color into the high nibble of A
31D6: 87      	        add     A,A
31D7: 87      	        add     A,A
31D8: 87      	        add     A,A
31D9: B0      	        or      B               ; put background color into the low nibble of A
31DA: C9      	        ret                     ; return to caller
              	
              	
              	; check if the color is not 0 and into the range 1~15
31DB: A7      	CHKCLR: and     A               ; is it 0?
31DC: CA2D15  	        jp      Z,SNERR         ; yes, raise a SN error
31DF: FE10    	        cp      $10             ; is it in range 1~15?
31E1: D22D15  	        jp      NC,SNERR        ; no, raise a SN error
31E4: C9      	        ret                     ; param is OK, can return
              	
              	
              	; check if in graphics 2 mode
31E5: 3AE081  	CHKG2M: ld      A,(SCR_MODE)    ; check screen mode
31E8: FE02    	        cp      $02             ; actually, we can paint only in G2
31EA: C2B936  	        jp      NZ,GMERR        ; no G2, print a No Graphics Mode Error
31ED: C9      	        ret                     ; return to caller
              	
              	
              	; print a text in screen 2
              	; GPRINT text,x,y[,fc[,bc]]
              	; where "text" is an expression that can be converted into a sequence of ASCII chars,
              	; x & y are the coordinates (0<=x<=32, 0<=y<=23), fc & bc are foreground and background
              	; colors (1~15), resp.
              	; (portions of code are from nippur72)
81F3:         	GX      equ     TMPBFR3
81F5:         	GY      equ     TMPBFR4
81EF:         	MIXCOL  equ     TMPBFR1
81F1:         	CHRPNT  equ     TMPBFR2
31EE: CDE531  	GPRINT: call    CHKG2M          ; check if in graphic mode 2
31F1: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
31F2: CD321A  	        call    GETCHR          ; check if something follows
31F5: CA2D15  	        jp      Z,SNERR         ; if anything else, raise a syntax error
31F8: 22F781  	        ld      (VIDEOBUFF),HL  ; save current code string pointer into BC
31FB: CDB91E  	        call    EVAL            ; Evaluate expression
31FE: CDAB1E  	        call    TSTSTR          ; Make sure it's a string
3201: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
3204: 2C      	        defb    ','
3205: CD3226  	        call    GETINT          ; get X coord.
3208: FE20    	        cp      $20             ; is it in rage 0~31?
320A: D2FD1A  	        jp      NC,FCERR        ; Illegal function call error
320D: 32F381  	        ld      (GX),A          ; store into temp. buffer
3210: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
3213: 2C      	        defb    ','
3214: CD3226  	        call    GETINT          ; get Y coord.
3217: FE18    	        cp      $18             ; is it in range 0~23?
3219: D2FD1A  	        jp      NC,FCERR        ; Illegal function call error
321C: 32F581  	        ld      (GY),A          ; store into temp. buffer
321F: 11F181  	        ld      DE,TMPBFR2
3222: 3AEE81  	        ld      A,(BKGNDCLR)    ; load background color
3225: 12      	        ld      (DE),A          ; store into temp buff
3226: 3AED81  	        ld      A,(FRGNDCLR)    ; load foreground color
3229: 1B      	        dec     DE
322A: 1B      	        dec     DE
322B: 12      	        ld      (DE),A          ; store into temp buff
322C: CDC132  	        call    CKCOL           ; check color
322F: CA3732  	        jp      Z,CNTGPT2       ; if anything follows, jump over
3232: 13      	        inc     DE
3233: 13      	        inc     DE
3234: CDC132  	        call    CKCOL           ; check background color
3237: CDCE31  	CNTGPT2:call    MIXCLRS         ; mix foreground & background colors
323A: 32EF81  	        ld      (MIXCOL),A      ; store mixed colors
323D: EB      	        ex      DE,HL           ; save code string address into DE
323E: 2AF781  	        ld      HL,(VIDEOBUFF)  ; retrieve pointer to string
3241: D5      	        push    DE              ; store code string address
3242: CDB91E  	        call    EVAL            ; re-evaluate string
3245: CDED24  	        call    GSTRCU          ; Current string to pool
3248: CDF32B  	        call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
324B: ED43F181	        ld      (CHRPNT),BC
324F: 1C      	        inc     E               ; Length + 1
3250: CD5532  	        call    GPNT            ; print on G2
3253: E1      	        pop     HL              ; recover HL
3254: C9      	        ret                     ; return to caller
3255: D5      	GPNT:   push    DE              ; store string lenght (E)
              	        ; calculate VRAM address of first char
3256: 3AF381  	        LD      A,(GX)          ; load X
3259: 6F      	        ld      L,A             ;
325A: 2600    	        ld      H,0             ; HL = X
325C: 29      	        add     HL,HL           ;
325D: 29      	        add     HL,HL           ;
325E: 29      	        add     HL,HL           ; HL = X*8
325F: 3AF581  	        ld      A,(GY)          ; load Y
3262: 57      	        ld      D,A             ;
3263: 1E00    	        ld      E,0             ; DE = Y * 256
3265: 19      	        add     HL,DE           ; address = X*8 + Y*256
3266: 22F781  	        ld      (VIDEOBUFF),HL  ; store VRAM address of first VRAM cell
3269: D1      	        pop     DE              ; retrieve # of chars to be printed yet (E)
326A: 1D      	RPGPNT: dec     E               ; Count characters
326B: C8      	        ret     Z               ; End of string - return
326C: D5      	        push    DE              ; store chars counter
              	        ; calculate dest address in color vram
326D: 2AF781  	        ld      HL,(VIDEOBUFF)  ; recover VRAM address 
3270: 110020  	        ld      DE,$2000        ; color map address
3273: 19      	        add     HL,DE           ; HL = $2000 + XY address
3274: F3      	        di                      ; disable INTs
              	        ; send color settings
3275: CDEA05  	GPNTCOL:call    SETVDPADRS      ; set VRAM address for color cell
3278: 3AEF81  	        ld      A,(MIXCOL)      ; load color settings
327B: 0608    	        ld      B,$08           ; repeat for 8 rows
327D: 0E30    	        ld      C,VDP_DAT       ; VDP data mode
327F: ED79    	GPNTCO1:out     (C),A           ; send data (VRAM pointer auto-increments)
3281: 00      	        nop                     ; wait...
3282: 00      	        nop                     ; ...a...
3283: 00      	        nop                     ; ...while
3284: 10F9    	        djnz    GPNTCO1         ; repeat for 8 cells
              	        ; calculate source address
3286: 2AF181  	        ld      HL,(CHRPNT)     ; load char pointer
3289: 7E      	        ld      A,(HL)          ; get char
328A: 23      	        inc     HL              ; increment char pointer
328B: 22F181  	        ld      (CHRPNT),HL     ; store char pointer
328E: 6F      	        ld      L,A             ;
328F: 2600    	        ld      H,0             ; char into HL
3291: 29      	        add     HL,HL           ;
3292: 29      	        add     HL,HL           ;
3293: 29      	        add     HL,HL           ; get offset of char into ROM (charcode * 8)
3294: 118343  	        ld      DE,CHRST88      ; DE = start of 8x8 fonts in ROM
3297: 19      	        add     HL,DE           ; HL = start of characters in ROM
3298: EB      	        ex      DE,HL           ; store address into DE
3299: 2AF781  	GPCPCHR:ld      HL,(VIDEOBUFF)  ; load VRAM address
329C: CDEA05  	        call    SETVDPADRS      ; send it to VDP
329F: EB      	        ex      DE,HL           ; restore address into HL
32A0: 0608    	        ld      B,$08           ; repeat for 8 rows
32A2: 0E30    	        ld      C,VDP_DAT       ; VDP data mode
32A4: EDA3    	GPCPCH1:outi                    ; load a byte from ROM and send to VRAM
32A6: 00      	        nop                     ; wait...
32A7: 00      	        nop                     ; ...a...
32A8: 00      	        nop                     ; ...while
32A9: 20F9    	        jr      NZ,GPCPCH1      ; repeat for 8 chars
32AB: FB      	        ei                      ; re-enable INTs
32AC: 110800  	        ld      DE,$0008        ; 8 bytes to go to the next video ell
32AF: 2AF781  	        ld      HL,(VIDEOBUFF)  ; load VRAM address
32B2: 19      	        add     HL,DE           ; get address of next VRAM cell
32B3: 22F781  	        ld      (VIDEOBUFF),HL  ; store new VRAM address
32B6: 110018  	        ld      DE,$1800        ; forbidden address
32B9: CD353B  	        call    CMP16           ; check if the printing has gone out of the screen
32BC: D1      	        pop     DE              ; retrieve number of chars to be printed
32BD: D0      	        ret     NC              ; if HL>=$1800 then leave
32BE: C36A32  	        jp      RPGPNT          ; otherwise, check if more chars to output
              	        
32C1: 2B      	CKCOL:  dec     HL              ; dec 'cos GETCHR INCs
32C2: CD321A  	        call    GETCHR          ; Get next character
32C5: C8      	        ret     Z               ; return if nothing follows
32C6: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
32C9: 2C      	        defb    ','
32CA: D5      	        push    DE              ; store DE
32CB: CD3226  	        call    GETINT          ; get value
32CE: CDDB31  	        call    CHKCLR          ; check if color is in range 1~15
32D1: D1      	        pop     DE              ; retrieve DE
32D2: 12      	        ld      (DE),A          ; store color into temp buffer
32D3: C9      	        ret                     ; return to caller
              	        
              	; POINT(x,y): return if a pixel is set (1) or reset (0)
32D4: CDE531  	POINT:  call    CHKG2M          ; check if in graphic mode 2
32D7: CD0F18  	        call    CHKSYN          ; make sure "(" follows
32DA: 28      	        defb    '('
32DB: CD3226  	        call    GETINT          ; get X coords.
32DE: 32EF81  	        ld      (TMPBFR1),A     ; store it into a temp buffer
32E1: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
32E4: 2C      	        defb    ','
32E5: CD3226  	        call    GETINT          ; get Y coords,
32E8: FEC0    	        cp      $C0             ; check if Y is in range 0~191
32EA: D2FD1A  	        jp      NC,FCERR        ; no, raise an FC error
32ED: 32F181  	        ld      (TMPBFR2),A     ; store into a temp buffer
32F0: CD0F18  	        call    CHKSYN          ; make sure ")" follows
32F3: 29      	        defb    ')'
32F4: E5      	        push    HL              ; store current string address (the point after the ")")...
32F5: FDE1    	        pop     IY              ; ...into IY
32F7: CD6733  	        call    XY2HL           ; find HL address of pixel at X,Y
32FA: 57      	        ld      D,A             ; store pixel index
32FB: F3      	        di                      ; disable INTs
32FC: CD0A06  	        call    READ_VIDEO_LOC  ; read contents of VRAM cell addressed by HL
32FF: FB      	        ei                      ; re-enable INTs
3300: A2      	        and     D               ; is the pixel ON or OFF?
3301: E1      	        pop     HL              ; drop original return point
3302: FDE5    	        push    IY              ; load current string address from IY into stack
3304: 11921F  	        ld      DE,RETNUM       ; Return number from function
3307: D5      	        push    DE              ; Save on stack
3308: 3E00    	        LD      A,$00
330A: 0600    	        LD      B,$00           ; Integer AB = 0
330C: CA8C22  	        jp      Z,ABPASS        ; return AB
330F: 04      	        inc     B               ; otherwise, AB = 1
3310: C38C22  	PNTEND: jp      ABPASS          ; return AB
              	
              	
              	; PLOT X,Y[,color]
              	; plot a pixel in graphic mode 2
3313: CDE531  	PLOT:   call    CHKG2M          ; check if in G2 mode
3316: CD3226  	        call    GETINT          ; get X coords.
3319: 32EF81  	        ld      (TMPBFR1),A     ; store it into a temp buffer
331C: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
331F: 2C      	        defb    ','
3320: CD3226  	        call    GETINT          ; get Y coords,
3323: FEC0    	        cp      $C0             ; check if Y is in range 0~191
3325: D2FD1A  	        jp      NC,FCERR        ; no, raise an FC error
3328: 32F181  	        ld      (TMPBFR2),A     ; store into a temp buffer
332B: CDA036  	        call    CLRPRM          ; check if param "color" has been passed
332E: E5      	CNTPLOT:push    HL              ; store HL
332F: C5      	        push    BC              ; store BC
3330: D5      	        push    DE              ; store DE
3331: CD6733  	        call    XY2HL           ; find VRAM address of byte containing pixel at X,Y & return into HL
3334: D25B33  	        jp      NC,NOGD         ; if carry is reset, there was an error -> so leave
3337: 57      	        ld      D,A             ; move pixel value into D
3338: 3AF381  	        ld      A,(TMPBFR3)     ; retrieve color
333B: 87      	        add     A,A             ; now we move low nibble
333C: 87      	        add     A,A             ; in the high nibble
333D: 87      	        add     A,A             ; by adding A to itself
333E: 87      	        add     A,A             ; 4 times (this is a shift left 4)
333F: 5F      	        ld      E,A             ; move it into E
3340: F3      	        di                      ; disable INTs
3341: CD0A06  	        call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
3344: FB      	        ei
3345: B2      	        or      D               ; plot new pixel preserving original pattern
3346: F3      	        di
3347: CD1F06  	        call    WRITE_VIDEO_LOC ; write new value into VRAM cell
334A: FB      	        ei
334B: CBEC    	        set     5,H             ; set to write into color VRAM (it's like adding $2000 to HL)
334D: F3      	        di
334E: CD0A06  	        call    READ_VIDEO_LOC  ; load original colors of pixel
3351: FB      	        ei
3352: E60F    	        and     %00001111       ; reset high nibble (the foreground color)
3354: B3      	        or      E               ; set new foreground color
3355: F3      	        di
3356: CD1F06  	        call    WRITE_VIDEO_LOC ; write new color settings
3359: FB      	        ei                      ; re-enable INTs
335A: 00      	        nop                     ; wait for INTs to be enabled again
335B: D1      	NOGD:   pop     DE              ; retrieve DE
335C: C1      	        pop     BC              ; retrieve BC
335D: E1      	        pop     HL              ; retrieve HL
335E: C9      	        ret                     ; return to caller
335F: 80402010	PXLSET: defb    $80,$40,$20,$10,$08,$04,$02,$01 ; pixel to be set ON
3363: 08040201	
              	        ; where R(X/8)=> 0=80h, 1=40h, 2=20h, 3=10h, 4=08h, 5=04h, 6=02h, 7=$01
              	
              	
              	; compute the VRAM address of the byte containing the pixel
              	; being pointed by X,Y (TMPBFR1,TMPBFR1)
              	; byte address is returned into HL
              	; pixel is returned into A
3367:         	XY2HL:  ; formula is: ADDRESS=(INT(X/8))*8 + (INT(Y/8))*256 + R(Y/8)
              	        ; where R(Y/8) is the remainder of (Y/8)
              	        ; the pixel to be set is given by R(X/8), and data is taken from the array
3367: 3AF181  	        ld      A,(TMPBFR2)     ; retrieve Y
336A: FEC0    	        cp      $C0             ; Y>=192?
336C: D0      	        ret     NC              ; yes, so leave
336D: 1E08    	        ld      E,$08           ; load E with divisor
336F: 57      	        ld      D,A             ; and store into D (dividend)
3370: CD643B  	        call    DIV_8_8         ; get Y/8, D is quotient=INT(Y/8), and A is remainder
3373: 4F      	        ld      C,A             ; store remainder into C
3374: 42      	        ld      B,D             ; B=(INT(Y/8))*256 (we simply copy quotient into B)
3375: 6069    	        ld      HL,BC           ; copy BC into HL: now HL has the VRAM address of the byte being set
3377: 3AEF81  	        ld      A,(TMPBFR1)     ; retrieve X
337A: 57      	        ld      D,A             ; and move it into D (dividend)
337B: CD643B  	        call    DIV_8_8         ; get X/8, D is quotient=INT(X/8), and A is remainder
337E: 4F      	        ld      C,A             ; store remainder into C
337F: 7A      	        ld      A,D             ; move quotient into A
3380: 87      	        add     A,A
3381: 87      	        add     A,A
3382: 87      	        add     A,A             ; multiply quotient by 8
3383: 5F      	        ld      E,A             ; store result into E
3384: 1600    	        ld      D,$00           ; reset D
3386: 19      	        add     HL,DE           ; add DE to HL, getting the final VRAM address
3387: EB      	        ex      DE,HL           ; move VRAM address into DE
3388: 215F33  	        ld      HL,PXLSET       ; starting address of table for pixel to draw
338B: 0600    	        ld      B,$00           ; reset B
338D: 09      	        add     HL,BC           ; add C (remainder of X/8) to get address of pixel to turn on
338E: 7E      	        ld      A,(HL)          ; load pixel data
338F: EB      	        ex      DE,HL           ; retrieve VRAM pattern address into HL
3390: 37      	        scf                     ; set Carry for normal exit
3391: C9      	        ret                     ; return to caller
              	
              	
              	; DRAW X1,Y1,X2,Y2[,color]
              	; Draw a line using Bresenham's line algorithm from X1,Y1 to X2,Y2
              	; X1,Y1 can be either less than or greater than X2,Y2 (meaning that)
              	; the drawing will be ever done from X1,Y2 to X2,Y2, regardless of
              	; the values. If color is not specified, the foreground color set
              	; with COLOR will be used 
81EF:         	X1      equ     TMPBFR1
81F1:         	Y1      equ     TMPBFR2
81F7:         	X2      equ     VIDEOBUFF
81F9:         	Y2      equ     VIDEOBUFF+$02
81FB:         	ER      equ     VIDEOBUFF+$04
81FD:         	E2      equ     VIDEOBUFF+$06
81FF:         	SX      equ     VIDEOBUFF+$08
8201:         	SY      equ     VIDEOBUFF+$0A
8203:         	DX      equ     VIDEOBUFF+$0C
8205:         	DY      equ     VIDEOBUFF+$0E
3392: CDE531  	DRAW:   call    CHKG2M          ; check if in G2 mode
3395: CD8836  	        call    CLRVDBF         ; clear VIDEOBUFF
3398: CD3226  	        call    GETINT          ; get X1 coords.
339B: 32EF81  	        ld      (X1),A          ; store it into a temp buffer
339E: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
33A1: 2C      	        defb    ','
33A2: CD3226  	        call    GETINT          ; get Y1 coords.
33A5: FEC0    	        cp      $C0             ; check if Y1 is in range 0~191
33A7: D2FD1A  	        jp      NC,FCERR        ; no, raise an FC error
33AA: 32F181  	        ld      (Y1),A          ; store into a temp buffer
33AD: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
33B0: 2C      	        defb    ','
33B1: CD3226  	        call    GETINT          ; get X2 coords.
33B4: 32F781  	        ld      (X2),A          ; store it into a temp buffer
33B7: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
33BA: 2C      	        defb    ','
33BB: CD3226  	        call    GETINT          ; get Y2 coords
33BE: FEC0    	        cp      $C0             ; check if Y2 is in range 0~191
33C0: D2FD1A  	        jp      NC,FCERR        ; no, raise an FC error
33C3: 32F981  	        ld      (Y2),A          ; store it into a temp buffer
33C6: CDA036  	        call    CLRPRM          ; check for arg. "color" and store it into TMPBFR3
33C9: E5      	        push    HL              ; store register we'll use
33CA: D5      	        push    DE              
33CB: C5      	        push    BC
33CC: ED5BEF81	        ld      DE,(X1)         ; load X1 and
33D0: 2AF781  	        ld      HL,(X2)         ; X2
33D3: B7      	        or      A               ; clear CARRY
33D4: ED52    	        sbc     HL,DE           ; DX=X2-X1
33D6: CD5A3B  	        call    absHL           ; DX=ABS(DX)
33D9: 220382  	        ld      (DX),HL         ; store DX
33DC: 01FFFF  	        ld      BC,$FFFF        ; SX=-1
33DF: 2AEF81  	        ld      HL,(X1)
33E2: ED5BF781	        ld      DE,(X2)
33E6: CD353B  	        call    CMP16           ; X1<X2?
33E9: F2EF33  	        jp      P,X1GR          ; no, X1>=X2
33EC: 010100  	        ld      BC,$0001        ; yes, so set SX=1
33EF: ED43FF81	X1GR:   ld      (SX),BC         ; store SX
33F3: ED5BF181	        ld      DE,(Y1)
33F7: 2AF981  	        ld      HL,(Y2)
33FA: B7      	        or      A               ; clear Carry
33FB: ED52    	        sbc     HL,DE           ; DY=Y2-Y1
33FD: CD5A3B  	        call    absHL           ; DY=ABS(DY)
3400: 220582  	        ld      (DY),HL         ; store DY
3403: 01FFFF  	        ld      BC,$FFFF        ; SY=-1
3406: 2AF181  	        ld      HL,(Y1)
3409: ED5BF981	        ld      DE,(Y2)
340D: CD353B  	        call    CMP16           ; is Y1<Y2?
3410: F21634  	        jp      P,Y1GR          ; no, Y1>=Y2
3413: 010100  	        ld      BC,$0001        ; yes, so set SY=1
3416: ED430182	Y1GR:   ld      (SY),BC         ; store SY
341A: 2A0582  	        ld      HL,(DY)         ; ER=DY
341D: CD5D3B  	        call    negHL           ; ER=-DY
3420: 22FB81  	        ld      (ER),HL         ; store ER
3423: 2A0382  	        ld      HL,(DX)
3426: ED5B0582	        ld      DE,(DY)
342A: CD353B  	        call    CMP16           ; DX>DY?
342D: CA3934  	        jp      Z,ER2           ; no, DX=DY
3430: FA3934  	        jp      M,ER2           ; no, DX<DY
3433: 2A0382  	        ld      HL,(DX)         ; reload DX
3436: 22FB81  	        ld      (ER),HL         ; yes: DX>DY, so ER=DX
3439: 2AFB81  	ER2:    ld      HL,(ER)         ; load ER
343C: CB2C    	        sra     H               ; right shift (and preserve sign)...
343E: CB1D    	        rr      L               ; ...of HL, so ER=INT(ER/2)
3440: 22FB81  	STRE2:  ld      (ER),HL         ; store ER
3443: CD2E33  	RPTDRW: call    CNTPLOT         ; plot first pixel
3446: 2AEF81  	        ld      HL,(X1)
3449: ED5BF781	        ld      DE,(X2)
344D: CD353B  	        call    CMP16           ; X1=X2?
3450: 200D    	        jr      NZ,CNTDRW       ; no, continue drawing
3452: 2AF181  	        ld      HL,(Y1)         ; yes, so check
3455: ED5BF981	        ld      DE,(Y2)         ; also Y
3459: CD353B  	        call    CMP16           ; Y1=Y2?
345C: CAB534  	        jp      Z,ENDDRAW       ; yes, finished drawing: exit
345F: ED5BFB81	CNTDRW: ld      DE,(ER)
3463: ED53FD81	        ld      (E2),DE         ; E2=ER
3467: 2A0382  	        ld      HL,(DX)
346A: CD5D3B  	        call    negHL           ; DX=-DX
346D: EB      	        ex      DE,HL           ; invert DE and HL => HL=E2, DE=-DX
346E: CD353B  	        call    CMP16           ; E2>-DX?
3471: CA8F34  	        jp      Z,DXGR          ; no, E2=-DX: jump
3474: FA8F34  	        jp      M,DXGR          ; no, E2<-DX: jump
3477: 2AFB81  	        ld      HL,(ER)         ; yes
347A: ED5B0582	        ld      DE,(DY)
347E: B7      	        or      A               ; clear CARRY
347F: ED52    	        sbc     HL,DE           ; ER=ER-DY
3481: 22FB81  	        ld      (ER),HL
3484: 2AEF81  	        ld      HL,(X1)
3487: ED5BFF81	        ld      DE,(SX)
348B: 19      	        add     HL,DE           ; X1=X1+SX (increment X1)
348C: 22EF81  	        ld      (X1),HL
348F: 2AFD81  	DXGR:   ld      HL,(E2)
3492: ED5B0582	        ld      DE,(DY)
3496: CD353B  	        call    CMP16           ; E2<DY?
3499: F24334  	        jp      P,RPTDRW        ; no, E2>=DY: so jump over
349C: 2AFB81  	        ld      HL,(ER)         ; yes
349F: ED5B0382	        ld      DE,(DX)
34A3: 19      	        add     HL,DE           ; ER=ER+DX
34A4: 22FB81  	        ld      (ER),HL
34A7: 2AF181  	        ld      HL,(Y1)
34AA: ED5B0182	        ld      DE,(SY)
34AE: 19      	        add     HL,DE           ; Y1=Y1+SY (increment Y1)
34AF: 22F181  	        ld      (Y1),HL
34B2: C34334  	        jp      RPTDRW          ; repeat
34B5: C1      	ENDDRAW:pop     BC              ; retrieve BC
34B6: D1      	        pop     DE              ; retrieve DE
34B7: E1      	        pop     HL              ; retrieve HL
34B8: C9      	        ret                     ; return to caller
              	
              	
              	; CIRCLE X,Y,R[,C]
              	; Draw a circle using Bresenham's circle algorithm with center in X,Y
              	; and radius R, with optional color C. If color is not specified, the
              	; foreground color set with COLOR will be used 
81F7:         	XC      equ     VIDEOBUFF
81F9:         	YC      equ     VIDEOBUFF+$02
81FB:         	RADIUS  equ     VIDEOBUFF+$04
81FD:         	XI      equ     VIDEOBUFF+$06
81FF:         	YI      equ     VIDEOBUFF+$08
8201:         	DC      equ     VIDEOBUFF+$0A
34B9: CDE531  	CIRCLE: call    CHKG2M          ; check if in G2 mode
34BC: CD8836  	        call    CLRVDBF         ; clear VIDEOBUFF
34BF: CD3226  	        call    GETINT          ; get X coords.
34C2: 32F781  	        ld      (XC),A          ; store it into a temp buffer
34C5: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
34C8: 2C      	        defb    ','
34C9: CD3226  	        call    GETINT          ; get Y coords,
34CC: 32F981  	        ld      (YC),A          ; store it into a temp buffer
34CF: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
34D2: 2C      	        defb    ','
34D3: CD3226  	        call    GETINT          ; get radius
34D6: 32FB81  	        ld      (RADIUS),A      ; store it into a temp buffer
34D9: CDA036  	        call    CLRPRM          ; check if param "color" has been passed
34DC: C5      	        push    BC              ; store BC
34DD: D5      	        push    DE              ; store DE
34DE: E5      	        push    HL              ; store HL
34DF: AF      	        xor     A               ; clear A,
34E0: 47      	        ld      B,A             ; B,
34E1: 4F      	        ld      C,A             ; C,
34E2: 57      	        ld      D,A             ; D,
34E3: 67      	        ld      H,A             ; and H
34E4: ED43FD81	        ld      (XI),BC         ; clear XI
34E8: 3AFB81  	        ld      A,(RADIUS)      ; load RADIUS into A
34EB: 6F      	        ld      L,A             ; HL now contains R
34EC: 22FF81  	        ld      (YI),HL         ; YI=RADIUS
34EF: 29      	        add     HL,HL           ; R*2
34F0: EB      	        ex      DE,HL           ; put HL into DE
34F1: 210300  	        ld      HL,$0003        ; now HL is 3
34F4: AF      	        xor     A               ; clear Carry
34F5: ED52    	        sbc     HL,DE           ; HL=>D=3-(2*R)
34F7: 220182  	        ld      (DC),HL         ; store D
34FA: CD5935  	        call    DRWCRL          ; draw initial point
34FD: ED5BFD81	RPTCRL: ld      DE,(XI)         ; load XI
3501: 2AFF81  	        ld      HL,(YI)         ; load YI
3504: CD353B  	        call    CMP16           ; is YI<DI?
3507: CA1035  	        jp      Z,RPTCL1        ; no, YI=XI
350A: F21035  	        jp      P,RPTCL1        ; no, YI>XI
350D: C35535  	        jp      ENDCRL          ; yes, so we've finished
3510: 21FD81  	RPTCL1: ld      HL,XI
3513: 34      	        inc     (HL)            ; XI=XI+1
3514: 2A0182  	        ld      HL,(DC)         ; load D
3517: 7C      	        ld      A,H
3518: B5      	        or      L               ; is D=0? Yes, jump over
3519: CA3D35  	        jp      Z,DLSZ
351C: CB7C    	        bit     7,H             ; is D<0?
351E: 201D    	        jr      NZ,DLSZ         ; yes, jump over
3520: ED5BFF81	        ld      DE,(YI)         ; D>0
3524: 1B      	        dec     DE              ; so, YI=YI-1
3525: ED53FF81	        ld      (YI),DE         ; store YI
3529: AF      	        xor     A               ; clear Carry
352A: 2AFD81  	        ld      HL,(XI)
352D: ED52    	        sbc     HL,DE           ; HL=XI-YI
352F: 29      	        add     HL,HL
3530: 29      	        add     HL,HL           ; HL=HL*4
3531: 110A00  	        ld      DE,10
3534: 19      	        add     HL,DE           ; HL=HL+10
3535: ED5B0182	        ld      DE,(DC)         ; load D
3539: EB      	        ex      DE,HL           ; invert DE and HL, so that HL=4*(XI-YI)+10 and DE=D
353A: 19      	        add     HL,DE           ; D=D+4*(XI-YI)+10
353B: 180F    	        jr      PLTCRL          ; plot next pixel
353D: 2AFD81  	DLSZ:   ld      HL,(XI)         ; load XI
3540: 29      	        add     HL,HL
3541: 29      	        add     HL,HL           ; XI=XI*4
3542: 110600  	        ld      DE,$0006
3545: 19      	        add     HL,DE
3546: ED5B0182	        ld      DE,(DC)
354A: EB      	        ex      DE,HL           ; HL=D and DE=4*XI+6
354B: 19      	        add     HL,DE           ; D=D+4*XI+6
354C: 220182  	PLTCRL: ld      (DC),HL         ; store new D
354F: CD5935  	        call    DRWCRL          ; plot pixel
3552: C3FD34  	        jp      RPTCRL          ; repeat
3555: E1      	ENDCRL: pop     HL
3556: D1      	        pop     DE
3557: C1      	        pop     BC
3558: C9      	        ret                     ; return to caller
3559: 2AF781  	DRWCRL: ld      HL,(XC)
355C: ED5BFD81	        ld      DE,(XI)
3560: 19      	        add     HL,DE           ; X=XC+XI
3561: 22EF81  	        ld      (X1),HL         ; store X
3564: CD7836  	        call    VALIDX          ; check if X is valid (0~255)
3567: DA7B35  	        jp      C,CNTCL1        ; if Carry is set, X is not valid
356A: 2AF981  	        ld      HL,(YC)
356D: ED5BFF81	        ld      DE,(YI)
3571: 19      	        add     HL,DE           ; Y=YC+YI
3572: 22F181  	        ld      (Y1),HL         ; store Y
3575: CD7D36  	        call    VALIDY          ; check if Y is valid (0~191)
3578: D42E33  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
357B: AF      	CNTCL1: xor     A               ; clear Carry
357C: 2AF781  	        ld      HL,(XC)
357F: ED5BFD81	        ld      DE,(XI)
3583: ED52    	        sbc     HL,DE           ; X=XC-XI
3585: 22EF81  	        ld      (X1),HL         ; store X
3588: CD7836  	        call    VALIDX          ; check if X is valid (0~255)
358B: DA9F35  	        jp      C,CNTCL2        ; if Carry is set, X is not valid
358E: 2AF981  	        ld      HL,(YC)
3591: ED5BFF81	        ld      DE,(YI)
3595: 19      	        add     HL,DE           ; Y=YC+YI
3596: 22F181  	        ld      (Y1),HL         ; store Y
3599: CD7D36  	        call    VALIDY          ; check if Y is valid (0~191)
359C: D42E33  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
359F: 2AF781  	CNTCL2: ld      HL,(XC)
35A2: ED5BFD81	        ld      DE,(XI)
35A6: 19      	        add     HL,DE           ; X=XC+XI
35A7: 22EF81  	        ld      (X1),HL         ; store X
35AA: CD7836  	        call    VALIDX          ; check if X is valid (0~255)
35AD: DAC335  	        jp      C,CNTCL3        ; if Carry is set, X is not valid
35B0: AF      	        xor     A               ; clear Carry
35B1: 2AF981  	        ld      HL,(YC)
35B4: ED5BFF81	        ld      DE,(YI)
35B8: ED52    	        sbc     HL,DE           ; Y=YC-YI
35BA: 22F181  	        ld      (Y1),HL         ; store Y
35BD: CD7D36  	        call    VALIDY          ; check if Y is valid (0~191)
35C0: D42E33  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
35C3: AF      	CNTCL3: xor     A               ; clear Carry
35C4: 2AF781  	        ld      HL,(XC)
35C7: ED5BFD81	        ld      DE,(XI)
35CB: ED52    	        sbc     HL,DE           ; X=XC-XI
35CD: 22EF81  	        ld      (X1),HL         ; store X
35D0: CD7836  	        call    VALIDX          ; check if X is valid (0~255)
35D3: DAE935  	        jp      C,CNTCL4        ; if Carry is set, X is not valid
35D6: AF      	        xor     A               ; clear Carry
35D7: 2AF981  	        ld      HL,(YC)
35DA: ED5BFF81	        ld      DE,(YI)
35DE: ED52    	        sbc     HL,DE           ; Y=YC-YI
35E0: 22F181  	        ld      (Y1),HL         ; store Y
35E3: CD7D36  	        call    VALIDY          ; check if Y is valid (0~191)
35E6: D42E33  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
35E9: 2AF781  	CNTCL4: ld      HL,(XC)
35EC: ED5BFF81	        ld      DE,(YI)
35F0: 19      	        add     HL,DE           ; X=XC+YI
35F1: 22EF81  	        ld      (X1),HL         ; store X
35F4: CD7836  	        call    VALIDX          ; check if X is valid (0~255)
35F7: DA0B36  	        jp      C,CNTCL5        ; if Carry is set, X is not valid
35FA: 2AF981  	        ld      HL,(YC)
35FD: ED5BFD81	        ld      DE,(XI)
3601: 19      	        add     HL,DE           ; Y=YC+XI
3602: 22F181  	        ld      (Y1),HL         ; store Y
3605: CD7D36  	        call    VALIDY          ; check if Y is valid (0~191)
3608: D42E33  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
360B: AF      	CNTCL5: xor     A               ; clear Carry
360C: 2AF781  	        ld      HL,(XC)
360F: ED5BFF81	        ld      DE,(YI)
3613: ED52    	        sbc     HL,DE           ; X=XC-YI
3615: 22EF81  	        ld      (X1),HL         ; store X
3618: CD7836  	        call    VALIDX          ; check if X is valid (0~255)
361B: DA2F36  	        jp      C,CNTCL6        ; if Carry is set, X is not valid
361E: 2AF981  	        ld      HL,(YC)
3621: ED5BFD81	        ld      DE,(XI)
3625: 19      	        add     HL,DE           ; Y=YC+XI
3626: 22F181  	        ld      (Y1),HL         ; store Y
3629: CD7D36  	        call    VALIDY          ; check if Y is valid (0~191)
362C: D42E33  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
362F: 2AF781  	CNTCL6: ld      HL,(XC)
3632: ED5BFF81	        ld      DE,(YI)
3636: 19      	        add     HL,DE           ; X=XC+YI
3637: 22EF81  	        ld      (X1),HL         ; store X
363A: CD7836  	        call    VALIDX          ; check if X is valid (0~255)
363D: DA5336  	        jp      C,CNTCL7        ; if Carry is set, X is not valid
3640: AF      	        xor     A               ; clear Carry
3641: 2AF981  	        ld      HL,(YC)
3644: ED5BFD81	        ld      DE,(XI)
3648: ED52    	        sbc     HL,DE           ; Y=YC-XI
364A: 22F181  	        ld      (Y1),HL         ; store Y
364D: CD7D36  	        call    VALIDY          ; check if Y is valid (0~191)
3650: D42E33  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
3653: AF      	CNTCL7: xor     A               ; clear Carry
3654: 2AF781  	        ld      HL,(XC)
3657: ED5BFF81	        ld      DE,(YI)
365B: ED52    	        sbc     HL,DE           ; X=XC-YI
365D: 22EF81  	        ld      (X1),HL         ; store X
3660: CD7836  	        call    VALIDX          ; check if X is valid (0~255)
3663: D8      	        ret     C               ; if Carry is set, X is not valid
3664: AF      	        xor     A               ; clear Carry
3665: 2AF981  	        ld      HL,(YC)
3668: ED5BFD81	        ld      DE,(XI)
366C: ED52    	        sbc     HL,DE           ; Y=YC-XI
366E: 22F181  	        ld      (Y1),HL         ; store Y
3671: CD7D36  	        call    VALIDY          ; check if Y is valid (0~191)
3674: D42E33  	        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
3677: C9      	        ret                     ; return to caller
              	
              	; check if X,Y coordinates are valid: 0<=X<=255 and 0<=Y<=191
              	; input: HL (value to check), can be negative
              	; output: CARRY flag: reset => VALID  //  set => NOT VALID
              	; destroys: A
3678: AF      	VALIDX: xor     A               ; reset A
3679: B4      	        or      H               ; check if H is 0 (this means that X is in range 0~255 and not negative)
367A: C8      	        ret     Z               ; yes, we can return (C is clear)
367B: 37      	        scf                     ; set Carry flag to raise error
367C: C9      	        ret                     ; return to caller
              	
367D: AF      	VALIDY: xor     A               ; reset A
367E: B4      	        or      H               ; check if H is 0 (this means that Y is in range 0~255 and not negative)
367F: 2802    	        jr      Z,CNTVALY       ; yes, continue checking
3681: 37      	        scf                     ; no, raise error by setting Carry flag
3682: C9      	        ret                     ; return to caller
3683: 7D      	CNTVALY:ld      A,L
3684: FEC0    	        cp      $C0             ; is Y<192? Carry is set if Y<192
3686: 3F      	        ccf                     ; invert Carry, so Carry=0 means OK, Carry=1 means ERROR
3687: C9      	        ret                     ; return to caller
              	
              	
              	; clear VIDEOBUFF before using it as temp buffer
3688: AF      	CLRVDBF:xor     A               ; clear A
3689: C5      	        push    BC              ; store BC
368A: E5      	        push    HL              ; store HL
368B: 21EF81  	        ld      HL,TMPBFR1      ; address of 1st cell
368E: 0606    	        ld      B,$06           ; 6 cells
3690: 77      	RPTCVB1:ld      (HL),A          ; clear cell
3691: 23      	        inc     HL              ; next cell
3692: 10FC    	        djnz    RPTCVB1         ; repeat
3694: 0628    	        ld      B,$28           ; 40 cells
3696: 21F781  	        ld      HL,VIDEOBUFF    ; address of 1st cell
3699: 77      	RPTCVB2:ld      (HL),A          ; clear cell
369A: 23      	        inc     HL              ; next cell
369B: 10FC    	        djnz    RPTCVB2         ; repeat
369D: E1      	        pop     HL              ; retrieve HL
369E: C1      	        pop     BC              ; retrieve BC
369F: C9      	        ret                     ; return to caller
              	
              	
              	; check if a color is passed as argument with PLOT, DRAW, and CIRCLE
              	; commands. If not present, the default foreground color will be used
36A0: 3AED81  	CLRPRM: ld      A,(FRGNDCLR)    ; load foreground color
36A3: 32F381  	        ld      (TMPBFR3),A     ; store into temp buffer
36A6: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
36A7: CD321A  	        call    GETCHR          ; Get next character
36AA: C8      	        ret     Z               ; return if nothing follows
36AB: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
36AE: 2C      	        defb    ','
36AF: CD3226  	        call    GETINT          ; get value
36B2: CDDB31  	        call    CHKCLR          ; check if color is in range 1~15
36B5: 32F381  	        ld      (TMPBFR3),A     ; store color into temp buffer
36B8: C9      	        ret                     ; return to caller
              	
              	
              	; no graphics mode error: raised when a graphics command is invoked
              	; out of graphic 2 mode.
36B9: 1E2A    	GMERR:  ld      E,GM            ; load Graphics Mode Error flag
36BB: C34115  	        jp      ERROR           ; print error
              	
              	
              	; set a serial port: params are PORT,BPS,DATA,PARITY,STOP
              	; PORT=1/2; BPS=1,200~57,600 (see below), DATA=5/6/7/8
              	; PARITY: 0=no parity; 1=ODD parity; 2=EVEN parity;
              	; STOP=0/1/2/3: 0=0 bit; 1=1 bit; 2=1.5 bits; 3=2 bits
              	; PORT 1 acts as a char device; PORT 2 acts as a block device
              	; DATA,PARITY, and STOP are optional: if nothing follows BPS,
              	; they are assumed to be 8,0,1 resp.
81F7:         	PRTNUM  equ     VIDEOBUFF
81F8:         	BPS     equ     VIDEOBUFF+$01
81FA:         	DATABT  equ     BPS+$02
81FB:         	PARBT   equ     DATABT+$01
81FC:         	STPBT   equ     PARBT+$01
81FD:         	SIOBFR  equ     STPBT+$01
36BE: CD3226  	SERIAL: call    GETINT          ; get port #
36C1: A7      	        and     A               ; is it zero?
36C2: CAFD1A  	        jp      Z,FCERR         ; yes, error
36C5: FE03    	        cp      $03             ; is it 1 or 2?
36C7: D2A838  	        jp      NC,SCERR        ; no, error
36CA: 32F781  	        ld      (PRTNUM),A      ; store port number into a temp buffer
36CD: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
36D0: 2C      	        defb    ','
36D1: CD021B  	        call    ATOH            ; get bps (returned into DE)
36D4: 7A      	        ld      A,D             ; move MSB into A
36D5: B3      	        or      E               ; LSB OR MSB, to check if bps=0
36D6: 203A    	        jr      NZ,CNTSER       ; no, continue checking
              	        ; if baud rate is 0, then close the serial comm.
36D8: 3AF781  	RSTSER1:ld      A,(PRTNUM)      ; yes, so reset the channel. First, load port number
36DB: 3D      	        dec     A               ; subtract 1, so that serial channel is 0=>A and 1=>B
36DC: C622    	        add     SIO_CA          ; find correct channel
36DE: 4F      	        ld      C,A             ; store serial channel
36DF: F3      	        di                      ; disable INTs
36E0: AF      	        xor     A               ; reset A
36E1: 1601    	        ld      D,$01           ; start from WR1
36E3: 0605    	        ld      B,$05           ; 5 registers
36E5: ED51    	RPTRSSR:out     (C),D           ; select register
36E7: ED79    	        out     (C),A           ; reset register
36E9: 14      	        inc     D               ; next register
36EA: 10F9    	        djnz    RPTRSSR         ; repeat
36EC: 3E30    	        ld      A,%00110000     ; write into WR0: error reset, select WR0
36EE: ED79    	        out     (C),A           ; send command to serial channel
36F0: 3E18    	        ld      A,%00011000     ; write into WR0: channel reset
36F2: ED79    	        out     (C),A           ; send command to serial channel
36F4: FB      	        ei                      ; re-enable INTs
36F5: E5      	        push    HL              ; store HL
36F6: 212E82  	        ld      HL,SERIALS_EN   ; serials enabled status byte
36F9: DB01    	        in      A,(PIO_DB)      ; read status LEDs
36FB: CB41    	        bit     0,C             ; check serial port
36FD: 2009    	        jr      NZ,SRPT2        ; if bit is set, jump to port 2
36FF: CBB7    	        res     6,A             ; it's port 1
3701: CBA7    	        res     4,A             ; remove possible error LED
3703: CB86    	        res     0,(HL)          ; disable port 1
3705: C30E37  	        jp      SERLED          ; jump over
3708: CBBF    	SRPT2:  res     7,A             ; it's port 2
370A: CBAF    	        res     5,A             ; remove possible error LED
370C: CB8E    	        res     1,(HL)          ; disable port 2
370E: D301    	SERLED: out     (PIO_DB),A      ; send new configuration
3710: E1      	        pop     HL              ; retrieve HL
3711: C9      	        ret                     ; return to caller
              	        ; check if bps=1, meaning reactivate RX on serial
3712: 7A      	CNTSER: ld      A,D
3713: B2      	        or      D               ; check if bps<>1 by first checking D=0
3714: 203B    	        jr      NZ,CNTSER2      ; if not, jump over
3716: 7B      	        ld      A,E             ; then by checking that
3717: FE01    	        cp      $01             ; E=1
3719: 2036    	        jr      NZ,CNTSER2      ; if not, jump over
371B: 3AF781  	        ld      A,(PRTNUM)      ; load port number
371E: FE01    	        cp      $01             ; is it port 1? (currently do NOT support on port 2)
3720: C2A838  	        jp      NZ,SCERR        ; no, raise error and exit 
3723: 57      	        ld      D,A             ; store port on D
3724: 3A2E82  	        ld      A,(SERIALS_EN)  ; load address of serial status cell
3727: A2      	        and     D               ; check status
3728: CAA838  	        jp      Z,SCERR         ; port not open, raise error
372B: F3      	        di                      ; disable INTs
372C: 7A      	        ld      A,D             ; move port # into A
372D: 5F      	        ld      E,A             ; store original A into E
372E: 87      	        add     A
372F: 87      	        add     A               ; move A to left times 2
3730: 57      	        ld      D,A             ; move value into D
3731: 3A2E82  	        ld      A,(SERIALS_EN)  ; load serial status byte
3734: B2      	        or      D               ; re-enable RX
3735: 322E82  	        ld      (SERIALS_EN),A  ; store new serial status
3738: 7B      	        ld      A,E             ; recover port #
3739: 3D      	        dec     A               ; check port
373A: 200A    	        jr      NZ,CNTRX2       ; port is #2
373C: CD8D01  	        call    SIO_A_EI        ; re-enable RX on port 1
373F: DB01    	        in      A,(PIO_DB)      ; load status LEDs
3741: CBA7    	        res     4,A             ; remove error LED
3743: C34D37  	        jp      RXEND           ; terminate setting
3746: CD8D01  	CNTRX2: call    SIO_A_EI        ; re-enable RX on port 2 -> CURRENTLY only port 1 is supported
3749: DB01    	        in      A,(PIO_DB)      ; load status LEDs
374B: CBAF    	        res     5,A             ; remove error LED
374D: D301    	RXEND:  out     (PIO_DB),A      ; set new status for LEDs
374F: FB      	        ei                      ; re-enable INTs
3750: C9      	        ret                     ; return to caller
              	        ; set serial port comm.
3751: D5      	CNTSER2:push    DE              ; store BPS
3752: 3AF781  	        ld      A,(PRTNUM)      ; load port number
3755: 57      	        ld      D,A             ; move port # into D
3756: 3A2E82  	        ld      A,(SERIALS_EN)  ; check if serial port is already open
3759: A2      	        and     D               ; by ANDing A with D
375A: D1      	        pop     DE              ; retrieve BPS
375B: CA6337  	        jp      Z,CNTSER3       ; not open, continue
375E: 1E2E    	        ld      E,SA            ; already open, so raise a "Serial Port Already Error"
3760: C34115  	        jp      ERROR           ; and leave
3763: E5      	CNTSER3:push    HL              ; store HL   
3764: 2100E1  	        ld      HL,$E100        ; check bps. start with HL=57,600
3767: CD353B  	        call    CMP16           ; is bps<=57,600?
376A: E1      	        pop     HL              ; but first, recover HL
376B: DAA838  	        jp      C,SCERR         ; no (bps>57,600) then error
376E: ED53F881	        ld      (BPS),DE        ; store bps
3772: 2B      	        dec     HL              ; dec 'cos GETCHR INCs
3773: CD321A  	        call    GETCHR          ; Get next character
3776: CAAD37  	        jp      Z,DEFSER        ; defaults if nothing follows
3779: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
377C: 2C      	        defb    ','
377D: CD3226  	        call    GETINT          ; get data bits
3780: FE05    	        cp      $05             ; is it <5?
3782: DAA838  	        jp      C,SCERR         ; yes, error
3785: FE09    	        cp      $09             ; is it >=9?
3787: D2FD1A  	        jp      NC,FCERR        ; no, error
378A: 32FA81  	        ld      (DATABT),A      ; store data bits
378D: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
3790: 2C      	        defb    ','
3791: CD3226  	        call    GETINT          ; get parity bits
3794: FE03    	        cp      A,$03           ; check if parity is in range 0~2
3796: D2A838  	        jp      NC,SCERR        ; no, error
3799: 32FB81  	        ld      (PARBT),A       ; store parity
379C: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
379F: 2C      	        defb    ','
37A0: CD3226  	        call    GETINT          ; get stop bits
37A3: FE03    	        cp      $03             ; is it >=3?
37A5: D2A838  	        jp      NC,SCERR        ; yes, error
37A8: 32FC81  	        ld      (STPBT),A       ; store stop bits
37AB: 180D    	        jr      SETSER          ; jump to set serial
37AD: 3E08    	DEFSER: ld      A,$08           ; 8 bits for data
37AF: 32FA81  	        ld      (DATABT),A
37B2: AF      	        xor     A               ; no parity bit
37B3: 32FB81  	        ld      (PARBT),A
37B6: 3C      	        inc     A               ; 1 bit for stop
37B7: 32FC81  	        ld      (STPBT),A
              	        ; check if bps are legal
37BA: E5      	SETSER: push    HL              ; store HL 
37BB: D5      	        push    DE              ; store DE
37BC: DDE5    	        push    IX              ; store IX
37BE: DD218338	        ld      IX,SUP_BPS      ; allowed BPSs
37C2: 060B    	        ld      B,$0B           ; 11 items
37C4: 0E00    	        ld      C,$00           ; reset pointer
37C6: 2AF881  	CKBPS:  ld      HL,(BPS)        ; load BPS
37C9: DD5E00  	        ld      E,(IX+0)        ; load LSB of item
37CC: DD5601  	        ld      D,(IX+1)        ; load MSB of item
37CF: CD353B  	        call    CMP16           ; is it equal?
37D2: CADF37  	        jp      Z,FNDBPS        ; yes, found correspondance
37D5: DD23    	        inc     IX
37D7: DD23    	        inc     IX              ; no, go to next entry
37D9: 0C      	        inc     C               ; increment pointer
37DA: 10EA    	        djnz    CKBPS           ; repeat for 10 entries
37DC: C3A438  	        jp      SCERR1          ; if nothing found, raise an error
37DF: 3AF781  	FNDBPS: ld      A,(PRTNUM)      ; check serial port
37E2: 3D      	        dec     A               ; is it port 1?
37E3: CAE937  	        jp      Z,SET_P1        ; yes, set port 1
37E6: C3A438  	        jp      SCERR1          ; at the moment, only port 1 can be configured
37E9:         	SET_P1: ;init CTC CH0: CH0 provides RX/TX clock to SIO port A
              	        ; TO0 output frequency=INPUT CLK/time constant. Time constant is set to get 16 times
              	        ; the requested baud rate. I.e., if bps is 19,200 then time constast is set to 6 because
              	        ; 1,843,200/6 = 307,200 Hz (that is 19,200 x 16)
37E9: F3      	        di                      ; disable INTs
37EA: 0600    	        ld      B,$00           ; reset B
37EC: 219938  	        ld      HL,CTC_CFG      ; address of first CTC divider
37EF: 09      	        add     HL,BC           ; adjust for correct CTC divider
37F0: 3E47    	        ld      A,%01000111     ; interrupt off, counter mode, prsc=16 (doesn't matter), ext. start,
              	                                ; start upon loading time constant, time constant follows, sw reset, command word
37F2: D310    	        out     (CTC_CH0),A     ; configure CTC channel 0
37F4: 7E      	        ld      A,(HL)          ; load CTC divider
37F5: D310    	        out     (CTC_CH0),A     ; send divider
              	        ; configure SIO
37F7: 21FA02  	        ld      HL,SIO_A_SETS   ; load default settings for SIO
37FA: 11FD81  	        ld      DE,SIOBFR       ; into a temp buffer
37FD: 010A00  	        ld      BC,$000A        ; 10 items to copy
3800: EDB0    	        ldir                    ; copy SIO settings into TEMP buffer
3802: 3A0282  	        ld      A,(SIOBFR+5)    ; load WR5 setting
3805: 47      	        ld      B,A             ; move it into B
3806: 3AFA81  	        ld      A,(DATABT)      ; load DATA bits
3809: FE05    	        cp      $05             ; is it 5 bits?
380B: 2006    	        jr      NZ,BITS6        ; no, jump over
380D: CBB0    	        res     6,B
380F: CBA8    	        res     5,B             ; set D6 & D5 to 0
3811: 1819    	        jr      SETPAR          ; jump to set parity
3813: FE06    	BITS6:  cp      $06             ; is it 6 bits?
3815: 2006    	        jr      NZ,BITS7        ; no, jump over
3817: CBF0    	        set     6,B
3819: CBA8    	        res     5,B             ; set D6 & D5 to 1,0
381B: 180F    	        jr      SETPAR          ; jump to set parity
381D: FE07    	BITS7:  cp      $07             ; is it 7 bits?
381F: 2007    	        jr      NZ,BITS8        ; no, jump over
3821: CBB0    	        res     6,B
3823: CBE8    	        set     5,B             ; set D6 & D5 to 0,1
3825: C32C38  	        jp      SETPAR          ; jump to set parity
3828: CBF0    	BITS8:  set     6,B
382A: CBE8    	        set     5,B             ; set D6 & D5 to 1,1
382C: 78      	SETPAR: ld      A,B
382D: 320282  	        ld      (SIOBFR+5),A    ; save DATA bits
3830: E660    	        and     %01100000       ; filter only D5&D6 bits
3832: 87      	        add     A,A             ; shift left times 1
3833: 322F82  	        ld      (SERABITS),A    ; store for SIO_A_EI & SIO_A_DI functions
3836: 3AFC81  	        ld      A,(STPBT)       ; load STOP bits
3839: 87      	        add     A,A
383A: 87      	        add     A,A             ; 2 left shifts
383B: 47      	        ld      B,A             ; move forming byte into B
383C: 3AFB81  	        ld      A,(PARBT)       ; load PARITY setting
383F: A7      	        and     A               ; is it 0?
3840: CA4B38  	        jp      Z,STRPAR        ; yes, jump over
3843: CBC0    	        set     0,B             ; set PARITY on
3845: 3D      	        dec     A               ; is parity ODD?
3846: CA4B38  	        jp      Z,STRPAR        ; yes, so jump over
3849: CBC8    	        set     1,B             ; no, it's EVEN so set the corresponding bit
384B: 3A0082  	STRPAR: ld      A,(SIOBFR+3)    ; load WR4 setting
384E: E6F0    	        and     %11110000       ; reset STOP & PARITY bits
3850: B0      	        or      B               ; set new STOP & PARITY bits
3851: 320082  	        ld      (SIOBFR+3),A    ; store new value
              	        ;set up TX and RX:
              	        ; the followings are settings for channel A
3854: 21FD81  	        ld      HL,SIOBFR       ; settings for SIO ch. A
3857: 0606    	        ld      B,$06           ; 6 bytes to send
3859: 0E22    	        ld      C,SIO_CA        ; I/O address of SIO ch.A
385B: EDB3    	        otir                    ; send bytes to SIO
              	        ; the following are settings for channel B (don't need to load HL since settings are contigous)
385D: 0604    	        ld      B,$04           ; other 4 bytes to send
385F: 0E23    	        ld      C,SIO_CB        ; I/O address of SIO ch.B
3861: EDB3    	        otir                    ; send bytes to SIO
              	        ; the following are settings for channel A
3863: 3E01    	        ld      A,$01           ; write into WR0: select WR1
3865: D322    	        out     (SIO_CA),A
3867: 3E18    	        ld      A,%00011000     ; interrupts on every RX char; parity is no special condition;
              	                                ; buffer overrun is special condition
3869: D322    	        out     (SIO_CA),A
386B: CD8D01  	        call    SIO_A_EI        ; enable RX on SIO channel A
386E: 212E82  	EXITSER:ld      HL,SERIALS_EN
3871: CBC6    	        set     0,(HL)          ; set serial port 1 status ON
3873: CBD6    	        set     2,(HL)          ; set serial port 1 RX ON
              	        ; back to normal running
3875: FB      	        ei                      ; re-enable INTs
3876: DB01    	        in      A,(PIO_DB)      ; load status LEDs
3878: CBF7    	        set     6,A             ; set status LED on
387A: CBA7    	        res     4,A             ; set error LED off
387C: D301    	        out     (PIO_DB),A      ; send new configuration
387E: DDE1    	        pop     IX              ; retrieve IX
3880: D1      	        pop     DE              ; retrieve DE
3881: E1      	        pop     HL              ; retrieve HL
3882: C9      	        ret                     ; return to caller
              	
              	; allowed bps (Bauds per second)
3883: 00E10096	SUP_BPS:defw    57600,38400,28800,19200,14400,9600,4800,3600,2400,1200,600
3887: 8070004B	
388B: 40388025	
388F: C012100E	
3893: 6009B004	
3897: 5802    	
              	; corresponding CTC divider
3899: 02030406	CTC_CFG:defb    2,3,4,6,8,12,24,32,48,96,192
389D: 080C1820	
38A1: 3060C0  	
              	
              	; serial configuration error
38A4: DDE1    	SCERR1: pop     IX              ; retrieve IX
38A6: D1      	        pop     DE              ; retrieve DE
38A7: E1      	        pop     HL              ; retrieve HL
38A8: 1E2C    	SCERR:  ld      E,SC            ; Serial Configuration Error
38AA: C34115  	        jp      ERROR           ; print error
              	
              	; check for direct mode
38AD: E5      	DIRMOD: push    HL              ; Save code string address
38AE: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line number
38B1: 23      	        inc     HL              ; -1 means direct statement
38B2: 7C      	        ld      A,H
38B3: B5      	        or      L
38B4: E1      	        pop     HL              ; Restore code string address
38B5: C2CF38  	        jp      NZ,HLPERR       ; raise error if in indirect mode
38B8: C9      	        ret
              	
              	
              	; HELP lists the line program where an error was found
38B9: CDAD38  	HELP:   call    DIRMOD          ; check if in direct mode
38BC: E5      	        push    HL              ; store HL
38BD: 2AB180  	        ld      HL,(HLPLN)      ; load HELP line
38C0: 23      	        inc     HL              ; increment HL
38C1: 7C      	        ld      A,H
38C2: B5      	        or      L               ; check if there is a line into the HELP reg.
38C3: E1      	        pop     HL
38C4: CACF38  	        jp      Z,HLPERR        ; no line found, raise error
38C7: ED5BB180	        ld      DE,(HLPLN)      ; recover line
38CB: C1      	        pop     BC              ; remove BC from stack since it's not needed anymore for LIST
38CC: C39D18  	        jp      LST01H          ; jump to list line
38CF: 1E30    	HLPERR: ld      E,HP            ; HELP call error
38D1: C34115  	        jp      ERROR           ; raise error
              	
              	
              	; KEY command to list/modify function keys
38D4: 2B      	KEY:    dec     HL              ; dec 'cos GETCHR INCs
38D5: CD321A  	        call    GETCHR          ; Get next character
38D8: CA5839  	        jp      Z,LSTKEYS       ; jump if nothing follows
              	                                ; change FN keys
38DB: CD3226  	        call    GETINT          ; get a number
38DE: A7      	        and     A               ; is it 0?
38DF: 2010    	        jr      NZ,KEYCH        ; no, jump over         
38E1: E5      	        push    HL              ; yes - reset FN keys to defaults
38E2: D5      	        push    DE              ; store HL & DE
38E3: 211D14  	        ld      HL,DEFFNKS      ; pointer to default FN keys texts
38E6: 11B380  	        ld      DE,FNKEYS       ; pointer to destination
38E9: 018000  	        ld      BC,$0080        ; 128 chars to be copied
38EC: EDB0    	        ldir                    ; restore default texts
38EE: D1      	        pop     DE              ; retrieve DE
38EF: E1      	        pop     HL              ; retrieve HL
38F0: C9      	        ret                     ; return to caller
38F1: FE09    	KEYCH:  cp      $09             ; is it >= 9?
38F3: D22D15  	        jp      NC,SNERR        ; yes - syntax error
38F6: 3D      	        dec     A               ; FN key in range 0~7
38F7: 87      	        add     A,A             ; multiply A...
38F8: 87      	        add     A,A             ; ... times 4...
38F9: 87      	        add     A,A             ; ... to get the correct...
38FA: 87      	        add     A,A             ; ... offset fo FN key text
38FB: 32EF81  	        ld      (TMPBFR1),A     ; store FN key offset...
38FE: AF      	        xor     A               ; ...in a...
38FF: 32F081  	        ld      (TMPBFR1+1),A   ; ...16-bit register
3902: CD0F18  	        call    CHKSYN          ; Make sure ',' follows
3905: 2C      	        defb    ','
3906: 444D    	        ld      BC,HL           ; copy address into BC
3908: CDB91E  	        call    EVAL            ; Evaluate expression (in E there is the length)
390B: E5      	        push    HL              ; store string pointer
390C: 3A9281  	        ld      A,(TYPE)        ; Get variable type
390F: B7      	        or      A               ; Is it a string variable?
3910: CA2D15  	        jp      Z,SNERR         ; no - syntax error
3913: CDED24  	        call    GSTRCU          ; Current string to pool
3916: CDF32B  	        call    LOADFP          ; Move string block data to (BC=pointer, DE=length)
3919: 7B      	        ld      A,E             ; copy length into A
391A: FE11    	        cp      $11             ; is length > 16?
391C: DA2139  	        jp      C,DECLN1        ; no, jump over
391F: 1E10    	        ld      E,$10           ; yes, so set length to 16
3921: 3E10    	DECLN1: ld      A,$10           ; calculate how many...
3923: 93      	        sub     E               ; ...null chars needed to fill up...
3924: 57      	        ld      D,A             ; ...the FN key text
3925: C5      	        push    BC              ; store address of string 
3926: ED4BEF81	        ld      BC,(TMPBFR1)    ; load FN key offset
392A: 21B380  	        ld      HL,FNKEYS       ; load address of FN keys texts
392D: 09      	        add     HL,BC           ; get corrected address
392E: C1      	        pop     BC              ; retrieve address of string chars
392F: 0A      	CPKEY:  ld      A,(BC)          ; load char from string
3930: FE0D    	        cp      CR              ; return?
3932: CA3F39  	        jp      Z,CPKEY2        ; yes, store char
3935: FE7B    	        cp      $7B             ; if char > "z" ?
3937: D22D15  	        jp      NC,SNERR        ; yes - syntax error
393A: FE20    	        cp      $20             ; is char < space?
393C: DA2D15  	        jp      C,SNERR         ; yes - syntax error
393F: FE61    	CPKEY2: cp      $61             ; is it >= 'a'?
3941: DA4639  	        jp      C,CPKEY3        ; no, continue
3944: E65F    	        and     %01011111       ; set letters to uppercase
3946: 77      	CPKEY3: ld      (HL),A          ; store char
3947: 23      	        inc     HL              ; next string char
3948: 03      	        inc     BC              ; next free cell
3949: 1D      	        dec     E               ; decrement E
394A: 20E3    	        jr      NZ,CPKEY        ; repeat until 0
394C: AF      	        xor     A               ; null char
394D: 14      	        inc     D               ; +1 to decrement below
394E: 15      	CPKEY1: dec     D               ; how many null chars to insert?
394F: CA5639  	        jp      Z,CPKYEND       ; no more nulls, so exit
3952: 77      	        ld      (HL),A          ; store it
3953: 23      	        inc     HL              ; next cell
3954: 18F8    	        jr      CPKEY1          ; repeat
3956: E1      	CPKYEND:pop     HL              ; retrieve pointer to string
3957: C9      	        ret                     ; return to caller
              	                                ; list FN keys
3958: E5      	LSTKEYS:push    HL              ; Save code string address
3959: 2AAF80  	        ld      HL,(LINEAT)     ; Get current line number
395C: 23      	        inc     HL              ; -1 means direct statement
395D: 7C      	        ld      A,H
395E: B5      	        or      L
395F: E1      	        pop     HL              ; Restore code string address
3960: C22D15  	        jp      NZ,SNERR        ; raise error if in indirect mode
3963: E5      	        push    HL              ; store HL
3964: D5      	        push    DE              ; store DE
3965: 21B380  	        ld      HL,FNKEYS       ; load starting address of FN keys text
3968: 0E01    	        ld      C,$01           ; 8 function keys
396A: 0610    	PRTK4:  ld      B,$10           ; 16 chars each
396C: 110B3A  	PRTK2:  ld      DE,CHKEY1       ; message "KEY "
396F: CDFC39  	        call    PRTCKEY         ; print it
3972: 79      	        ld      A,C             ; load FN key
3973: C630    	        add     $30             ; get number in ASCI code
3975: CD1A18  	        call    OUTC            ; print it
3978: 11103A  	        ld      DE,CHKEY2       ; message ": ""
397B: CDFC39  	        call    PRTCKEY         ; print it
397E: 3E01    	        ld      A,$01           ; " opened
3980: 32EF81  	        ld      (TMPBFR1),A
3983: 7E      	LDKEY:  ld      A,(HL)          ; retrieve char
3984: A7      	        and     A               ; is it zero?
3985: CA9839  	        jp      Z,CNTLTK        ; yes, go next char
3988: CDE439  	        call    OPNQT           ; check if quotes are opened
398B: FE22    	        cp      $22             ; check if char is "?
398D: CAAD39  	        jp      Z,PRTCHR        ; yes, print "chr$("
3990: FE0D    	        cp      CR              ; is it a CR?
3992: CAAD39  	        jp      Z,PRTCHR        ; yes, print "chr$("
3995: CD1A18  	PRTK3:  call    OUTC            ; no, just print it
3998: 23      	CNTLTK: inc     HL              ; next char
3999: 10E8    	        djnz    LDKEY           ; continue until finished
399B: CDD239  	        call    CLSQT           ; check if quotes are still open
399E: 3E0D    	        ld      A,CR            ; go next line
39A0: CD1A18  	        call    OUTC            ; print it
39A3: 0C      	        inc     C               ; next FN key
39A4: 79      	        ld      A,C             ; check if...
39A5: FE09    	        cp      $09             ; finished keys?
39A7: DA6A39  	        jp      C,PRTK4         ; no, repeat 1 more time
39AA: D1      	        pop     DE              ; retrieve DE
39AB: E1      	        pop     HL              ; retrieve HL
39AC: C9      	        ret                     ; return to caller
              	
39AD: E5      	PRTCHR: push    HL              ; store HL
39AE: CDD239  	        call    CLSQT           ; check if quotes are closed
39B1: 3E2B    	        ld      A,'+'           ; '+' char
39B3: CD1A18  	        call    OUTC            ; print it
39B6: 11133A  	        ld      DE,CHKEY3       ; address of "CHR$("
39B9: CDFC39  	        call    PRTCKEY         ; print it
39BC: E1      	        pop     HL              ; recover HL
39BD: 23      	        inc     HL              ; next char
39BE: 05      	        dec     B               ; increment char counter
39BF: 11193A  	        ld      DE,CHKEY4       ; load address of RETURN
39C2: 7E      	        ld      A,(HL)          ; load char
39C3: FE0D    	        cp      CR              ; is it a RETURN?
39C5: 2003    	        jr      NZ,PTCHR1       ; no, jump over
39C7: 111C3A  	        ld      DE,CHKEY5       ; yes, load address of "
39CA: CDFC39  	PTCHR1: call    PRTCKEY         ; print it
39CD: 3E29    	        ld      A,')'           ; char )
39CF: C39539  	        jp      PRTK3           ; continue
              	
39D2: F5      	CLSQT:  push    AF              ; store A
39D3: 3AEF81  	        ld      A,(TMPBFR1)     ; quote status
39D6: A7      	        and     A               ; are they closed?
39D7: 2809    	        jr      Z,CLSQT1        ; if yes, return
39D9: 3E22    	        ld      A,$22           ; no, so close them
39DB: CD1A18  	        call    OUTC            ; print "
39DE: AF      	        xor     A               ; set quotes
39DF: 32EF81  	        ld      (TMPBFR1),A     ; as closed
39E2: F1      	CLSQT1: pop     AF              ; retrieve A
39E3: C9      	        ret                     ; return to caller
              	
39E4: F5      	OPNQT:  push    AF              ; store A
39E5: 3AEF81  	        ld      A,(TMPBFR1)     ; quote status
39E8: A7      	        and     A               ; are they open?
39E9: 200F    	        jr      NZ,OPNQT1       ; if yes, return
39EB: 3E2B    	        ld      A,'+'           ; no, so add '+
39ED: CD1A18  	        call    OUTC            ; print it
39F0: 3E22    	        ld      A,$22           ; and then open quotes
39F2: CD1A18  	        call    OUTC            ; print them
39F5: 3E01    	        ld      A,$01           ; set quotes
39F7: 32EF81  	        ld      (TMPBFR1),A     ; as opened
39FA: F1      	OPNQT1: pop     AF              ; retrieve A
39FB: C9      	        ret                     ; return to caller
              	
39FC: F5      	PRTCKEY:push    AF              ; store original char
39FD: 1A      	PRTK1:  ld      A,(DE)          ; load char
39FE: A7      	        and     A               ; is it 0?
39FF: CA093A  	        jp      Z,PRTEND        ; yes, finished printing
3A02: CD1A18  	        call    OUTC            ; no, print char
3A05: 13      	        inc     DE              ; next char
3A06: C3FD39  	        jp      PRTK1           ; repeat
3A09: F1      	PRTEND: pop     AF              ; retrieve AF
3A0A: C9      	        ret                     ; return to caller
              	
3A0B: 4B455920	CHKEY1: defb    "KEY ",0
3A0F: 00      	
3A10: 3A2200  	CHKEY2: defb    ":",34,0
3A13: 63687224	CHKEY3: defb    "chr$(",0
3A17: 2800    	
3A19: 313300  	CHKEY4: defb    "13",0
3A1C: 333400  	CHKEY5: defb    "34",0
              	
              	
              	; HEX$(nn) Convert 16 bit number to Hexadecimal string
3A1F: CDAA1E  	HEX: 	call	TSTNUM          ; Verify it's a number
3A22: CDE81A  	        call	DEINT           ; Get integer -32768 to 32767
3A25: C5      	        push	BC              ; Save contents of BC
3A26: 213082  	        ld      HL,PBUFF        ; load address of PBUFF into HL
3A29: 7A      	        ld      A,D             ; Get MSB into A
3A2A: B7      	        or      A               ; OR with LSB to see if param=0
3A2B: 280C    	        jr      Z,HEX2          ; Skip output if both high digits are zero
3A2D: CD553A  	        call    BYT2ASC         ; Convert D to ASCII
3A30: 78      	        ld      A,B             ; cechk if B
3A31: FE30    	        cp      '0'             ; is 0
3A33: 2802    	        jr      Z,HEX1          ; Don't store high digit if zero
3A35: 70      	        ld      (HL),B          ; Store it to PBUFF
3A36: 23      	        inc     HL              ; Next location
3A37: 71      	HEX1:   ld      (HL),C          ; Store C to PBUFF+1
3A38: 23      	        inc     HL              ; Next location
3A39: 7B      	HEX2:   ld      A,E             ; Get lower byte
3A3A: CD553A  	        call    BYT2ASC         ; Convert E to ASCII
3A3D: 7A      	        ld      A,D
3A3E: B7      	        or      A
3A3F: 2005    	        jr      NZ,HEX3         ; If upper byte was not zero then always print lower byte
3A41: 78      	        ld      A,B
3A42: FE30    	        cp      '0'             ; If high digit of lower byte is zero then don't print
3A44: 2802    	        jr      Z,HEX4
3A46: 70      	HEX3:   ld      (HL),B          ; to PBUFF+2
3A47: 23      	        inc     HL              ; Next location
3A48: 71      	HEX4:   ld      (HL),C          ; to PBUFF+3
3A49: 23      	        inc     HL              ; PBUFF+4 to zero
3A4A: AF      	        xor     A               ; Terminating character
3A4B: 77      	        ld      (HL),A          ; Store zero to terminate
3A4C: 23      	        inc     HL              ; Make sure PBUFF is terminated
3A4D: 77      	        ld      (HL),A          ; Store the double zero there
3A4E: C1      	        pop     BC              ; Get BC back
3A4F: 213082  	        ld      HL,PBUFF        ; Reset to start of PBUFF
3A52: C33A23  	        jp      STR1            ; Convert the PBUFF to a string and return it
3A55: 47      	BYT2ASC	ld      B,A             ; Save original value
3A56: E60F    	        and     $0F             ; Strip off upper nybble
3A58: FE0A    	        cp      $0A             ; 0-9?
3A5A: 3802    	        jr      C,ADD30         ; If A-F, add 7 more
3A5C: C607    	        add     A,$07           ; Bring value up to ASCII A-F
3A5E: C630    	ADD30	add     A,$30           ; And make ASCII
3A60: 4F      	        ld      C,A             ; Save converted char to C
3A61: 78      	        ld      A,B             ; Retrieve original value
3A62: 0F      	        rrca                    ; and Rotate it right
3A63: 0F      	        rrca
3A64: 0F      	        rrca
3A65: 0F      	        rrca
3A66: E60F    	        and     $0F             ; Mask off upper nybble
3A68: FE0A    	        cp      $0A             ; 0-9? < A hex?
3A6A: 3802    	        jr      C,ADD301        ; Skip Add 7
3A6C: C607    	        add     A,$07           ; Bring it up to ASCII A-F
3A6E: C630    	ADD301	add     A,$30           ; And make it full ASCII
3A70: 47      	        ld      B,A             ; Store high order byte
3A71: C9      	        ret
              	
              	; Convert "&Hnnnn" to FPREG
              	; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
              	; Char is in A, NC if char is ;<=>?@ A-z, CY is set if 0-9
3A72: EB      	HEXTFP  ex      DE,HL           ; Move code string pointer to DE
3A73: 210000  	        ld      HL,$0000        ; Zero out the value
3A76: CD8B3A  	        call    GETHEX          ; Check the number for valid hex
3A79: DAAB3A  	        jp      C,HXERR         ; First value wasn't hex, HX error
3A7C: 1805    	        jr      HEXLP1          ; Convert first character
3A7E: CD8B3A  	HEXLP   call    GETHEX          ; Get second and addtional characters
3A81: 381F    	        jr      C,HEXIT         ; Exit if not a hex character
3A83: 29      	HEXLP1  add     HL,HL           ; Rotate 4 bits to the left
3A84: 29      	        add     HL,HL
3A85: 29      	        add     HL,HL
3A86: 29      	        add     HL,HL
3A87: B5      	        or      L               ; Add in D0-D3 into L
3A88: 6F      	        ld      L,A             ; Save new value
3A89: 18F3    	        jr      HEXLP           ; And continue until all hex characters are in
              	
3A8B: 13      	GETHEX  inc     DE              ; Next location
3A8C: 1A      	        ld      A,(DE)          ; Load character at pointer
3A8D: FE20    	        cp      SPC
3A8F: CA8B3A  	        jp      Z,GETHEX        ; Skip spaces
3A92: D630    	        sub     $30             ; Get absolute value
3A94: D8      	        ret     C               ; < "0", error
3A95: FE0A    	        cp      $0A
3A97: 3805    	        jr      C,NOSUB7        ; Is already in the range 0-9
3A99: D607    	        sub     $07             ; Reduce to A-F
3A9B: FE0A    	        cp      $0A             ; Value should be $0A-$0F at this point
3A9D: D8      	        ret     C               ; CY set if was :            ; < = > ? @
3A9E: FE10    	NOSUB7  cp      $10             ; > Greater than "F"?
3AA0: 3F      	        ccf
3AA1: C9      	        ret                     ; CY set if it wasn't valid hex
              	
3AA2: EB      	HEXIT   ex      DE,HL           ; Value into DE, Code string into HL
3AA3: 7A      	        ld      A,D             ; Load DE into AC
3AA4: 4B      	        ld      C,E             ; For prep to
3AA5: E5      	        push    HL
3AA6: CD8B22  	        call    ACPASS          ; ACPASS to set AC as integer into FPREG
3AA9: E1      	        pop     HL
3AAA: C9      	        ret
              	
3AAB: 1E26    	HXERR:  ld      E,HX            ; ?HEX Error
3AAD: C34115  	        jp      ERROR
              	
              	; BIN$(NN) Convert integer to a 1-16 char binary string
3AB0: CDAA1E  	BIN:    call    TSTNUM          ; Verify it's a number
3AB3: CDE81A  	        call    DEINT           ; Get integer -32768 to 32767
3AB6: C5      	BIN2:   push    BC              ; Save contents of BC
3AB7: 213082  	        ld      HL,PBUFF
3ABA: 0611    	        ld      B,$11           ; One higher than max char count (16+1)
3ABC:         	ZEROSUP:                        ; Suppress leading zeros
3ABC: 05      	        dec     B               ; Max 16 chars
3ABD: 78      	        ld      A,B
3ABE: FE01    	        cp      $01
3AC0: 2808    	        jr      Z,BITOUT        ; Always output at least one character
3AC2: CB13    	        rl      E
3AC4: CB12    	        rl      D
3AC6: 30F4    	        jr      NC,ZEROSUP
3AC8: 1804    	        jr      BITOUT2
3ACA: CB13    	BITOUT: rl      E
3ACC: CB12    	        rl      D               ; Top bit now in carry
3ACE: 3E30    	BITOUT2:ld      A,'0'           ; Char for '0'
3AD0: CE00    	        adc     A,$00           ; If carry set then '0' --> '1'
3AD2: 77      	        ld      (HL),A
3AD3: 23      	        inc     HL
3AD4: 05      	        dec     B
3AD5: 20F3    	        jr      NZ,BITOUT
3AD7: AF      	        xor     A               ; Terminating character
3AD8: 77      	        ld      (HL),A          ; Store zero to terminate
3AD9: 23      	        inc     HL              ; Make sure PBUFF is terminated
3ADA: 77      	        ld      (HL),A          ; Store the double zero there
3ADB: C1      	        pop     BC
3ADC: 213082  	        ld      HL,PBUFF
3ADF: C33A23  	        jp      STR1
              	
              	; Convert "&Bnnnn" to FPREG
              	; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
3AE2: EB      	BINTFP: ex      DE,HL           ; Move code string pointer to DE
3AE3: 210000  	        ld      HL,$0000        ; Zero out the value
3AE6: CDFF3A  	        call    CHKBIN          ; Check the number for valid bin
3AE9: DA0D3B  	        jp      C,BINERR        ; First value wasn't bin, HX error
3AEC: D630    	BINIT:  sub     '0'
3AEE: 29      	        add     HL,HL           ; Rotate HL left
3AEF: B5      	        or      L
3AF0: 6F      	        ld      L,A
3AF1: CDFF3A  	        call    CHKBIN          ; Get second and addtional characters
3AF4: 30F6    	        jr      NC,BINIT        ; Process if a bin character
3AF6: EB      	        ex      DE,HL           ; Value into DE, Code string into HL
3AF7: 7A      	        ld      A,D             ; Load DE into AC
3AF8: 4B      	        ld      C,E             ; For prep to
3AF9: E5      	        push    HL
3AFA: CD8B22  	        call    ACPASS          ; ACPASS to set AC as integer into FPREG
3AFD: E1      	        pop     HL
3AFE: C9      	        ret
              	
              	; Char is in A, NC if char is 0 or 1
3AFF: 13      	CHKBIN: inc     DE
3B00: 1A      	        ld      A,(DE)
3B01: FE20    	        cp      SPC
3B03: CAFF3A  	        jp      Z,CHKBIN        ; Skip spaces
3B06: FE30    	        cp      '0'             ; Set C if < '0'
3B08: D8      	        ret     C
3B09: FE32    	        cp      '2'
3B0B: 3F      	        ccf                     ; Set C if > '1'
3B0C: C9      	        ret
              	
3B0D: 1E28    	BINERR: ld      E,BN            ; ?BIN Error
3B0F: C34115  	        jp      ERROR
              	
              	
3B12: C30800  	MONOUT: jp      $0008           ; output a char
              	
              	
3B15: 3A2E82  	RESET:  ld      A,(SERIALS_EN)
3B18: E601    	        and     $01             ; is serial port #1 open?
3B1A: C4D836  	        call    NZ,RSTSER1      ; yes, reset serial 1
3B1D: C30000  	        jp      $0000           ; Restart
              	
              	
3B20: 3E00    	INITST: ld      A,$00           ; Clear break flag
3B22: 32A980  	        ld      (BRKFLG),A
3B25: C3DC0E  	        jp      INIT
              	
              	
3B28: F5      	TSTBIT: push    AF              ; Save bit mask
3B29: A0      	        and     B               ; Get common bits
3B2A: C1      	        pop     BC              ; Restore bit mask
3B2B: B8      	        cp      B               ; Same bit set?
3B2C: 3E00    	        ld      A,$00           ; Return 0 in A
3B2E: C9      	        ret
              	
3B2F: CD1A18  	OUTNCR: call    OUTC            ; Output character in A
3B32: C3EB1C  	        jp      PRNTCRLF        ; Output CRLF
              	; ------------------------------------------------------------------------------
              	; LM80C - UTILITY ROUTINES - R1.1
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. More info at
              	; www DOT leonardomiliani DOT com
              	;
              	; *ALS are routines from "Z80 Assembly Language Subroutines" by Lance
              	; A. Leventhal and Winthrop Saville - Ed. Osborne/McGraw-Hill (1983)
              	;
              	; * WKT are routines from WikiTI:
              	; http://wikiti.brandonw.net/index.php?title=WikiTI_Home
              	;
              	; * LAC are routines from Learn@Cemetch
              	; https://learn.cemetech.net/index.php/Main_Page
              	;
              	; ------------------------------------------------------------------------------
              	; Code Revision:
              	; R1.0 - 20200110 - First release: 16-bit comparision/multiplication/negation
              	; R1.1 - 20200413 - Second release: added ABS(HL) 
              	;
              	; ------------------------------------------------------------------------------
              	
              	; compare two 16-bit registers, HL (minuend) and DE (subtrahend)
              	; values can be both signed or unsigned words
              	; inputs: HL, DE
              	; destroys: A,F,HL
              	; returns: if both registers are 2's complement, use Z and S flags;
              	; otherwise:
              	; if HL=DE: Z,P,NC  - Z=1, S=0; C=0
              	; if HL>DE: NZ,P,NC - Z=0, S=0; C=0
              	; if HL<DE: NZ,M,C  - Z=0, S=1; C=1
              	; Source: ALS
              	
3B35: B7      	CMP16:  or      A           ; clear CARRY
3B36: ED52    	        sbc     HL,DE       ; subtract DE from HL
3B38: E0      	        ret     PO          ; return if no overflow
3B39: 7C      	        ld      A,H         ; overflow - invert SIGN flag
3B3A: 1F      	        rra                 ; save CARRY flag in bit 7
3B3B: EE40    	        xor     %01000000   ; complement bit 6 (SIGN bit)
3B3D: 37      	        scf                 ; ensure a Non-Zero result
3B3E: 8F      	        adc     A,A         ; restore CARRY, complemented SIGN
              	                            ; ZERO flag = 0 for sure
3B3F: C9      	        ret                 ; return
              	
              	; ----------------------------------------------------------------------
              	
              	; multiply 2 signed/unsigned 16-bit words and return a 16-bit
              	; signed/unsigned product
              	; inputs: HL (multiplicand); DE (multiplier)
              	; destroys: A,F
              	; returns: HL (product)
              	; Source: ALS
              	
              	; initialize partial product, bit count
3B40: C5      	MUL16:  push    BC
3B41: 4D      	        ld      C,L         ; BC = multiplier
3B42: 44      	        ld      B,H
3B43: 210000  	        ld      HL,0        ; product = 0
3B46: 3E0F    	        ld      A,$0F       ; count = bit lenght - 1 (16-1)
              	        ; shift-and-add algorithm
              	        ; if MSB of multiplier is 1, add multiplicand to partial product
              	        ; shift partial product, multiplier left 1 bit
3B48: CB23    	MLP:    sla     E           ; shift multiplier left 1 bit
3B4A: CB12    	        rl      D
3B4C: 3001    	        jr      NC,MLP1     ; jump if MSB of multiplier = 0
3B4E: 09      	        add     HL,BC       ; add multiplicand to partial product
3B4F: 29      	MLP1:   add     HL,HL       ; shift partial product left
3B50: 3D      	        dec     A
3B51: 20F5    	        jr      NZ,MLP      ; continue until count = 0
              	        ; add multiplicand one last time if MSB of multiplier is 1
3B53: B2      	        or      D           ; sign flag = MSB of multiplier
3B54: F2583B  	        jp      P,EXMUL16   ; exit if MSB of multiplier is 0
3B57: 09      	        add     HL,BC       ; add multiplicand to product
3B58: C1      	EXMUL16:pop     BC
3B59: C9      	        ret
              	
              	; ----------------------------------------------------------------------
              	; absolute value of HL (same applies to other 16-bit register pairs)
              	; also, invert value of HL (or any other 16-bit register, just adjust the code)
              	;
              	; inputs: HL
              	; destroys: A
              	; operation: ABS(HL)
              	; returns: HL with no sign or negated
              	; Source: WKT
              	
3B5A: CB7C    	absHL:  bit     7,H
3B5C: C8      	        ret     Z
3B5D: AF      	negHL:  xor     A
3B5E: 95      	        sub     L
3B5F: 6F      	        ld      L,A
3B60: 9F      	        sbc     A,A
3B61: 94      	        sub     H
3B62: 67      	        ld      H,A
3B63: C9      	        ret
              	
              	; ------------------------------------------------------------------------------
              	
              	; 8/8 division
              	; INPUT: D (dividend), E (divisor)
              	; OPERATION: D/E
              	; OUTPUT: D (quotient), A (remainder)
3B64: AF      	DIV_8_8:    xor     A
3B65: C5      	            push    BC
3B66: 0608    	            ld      B,08h
3B68: CB22    	DIV_8_8LOOP:sla     D
3B6A: 17      	            rla
3B6B: BB      	            cp      E
3B6C: 3802    	            jr      C,$+4
3B6E: 93      	            sub     E
3B6F: 14      	            inc     D
3B70: 10F6    	            djnz    DIV_8_8LOOP
3B72: C1      	            pop     BC
3B73: C9      	            ret
              	
              	; ----------------------------------------------------------------------
              	; divide a 16-bit number by an 8-bit number
              	; (16/8 division)
              	;
              	; inputs: HL (Dividend), C (divisor)
              	; destroys: A
              	; OPERATION: HL/C
              	; returns: HL (quotient), A (remainder)
              	; source: WKT
              	
3B74: AF      	DIV_16_8:   xor     A
3B75: 0610    	            ld      B,16
3B77: 29      	DIV_16_8LP: add     HL,HL
3B78: 17      	            rla
3B79: 3803    	            jr      C,$+5
3B7B: B9      	            cp      C
3B7C: 3802    	            jr      C,$+4
3B7E: 91      	            sub     C
3B7F: 2C      	            inc     L
3B80: 10F5    	            djnz    DIV_16_8LP
3B82: C9      	            ret; ------------------------------------------------------------------------------
              	; LM80C - 6x8 CHARSET - R1.4
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. More info at
              	; www DOT leonardomiliani DOT com
              	; ------------------------------------------------------------------------------
              	; Code Revision:
              	; R1.0 - 20190511 - First revision: ASCII chars (from 0 to 127)
              	; R1.1 - 20190521 - Expanded to 255 chars
              	; R1.2 - 20191209 - Start adding graphic chars to be coherent with 8x8 fonts
              	; R1.3 - 20191226 - Added extended char codes (128-255)
              	; R1.4 - 20200228 - adopted more usual hexadecimal & binary prefixes
              	; ------------------------------------------------------------------------------
              	;
              	;-------------------------------------------------------------------------------
              	;
              	;               6 x 8    C  H  A  R  S  E  T
              	;
              	;-------------------------------------------------------------------------------
              	;
              	;       6X8 CHARS, DESIGNED FOR TEXT BUT USABLE IN GRAPHICS 1 MODE TOO
              	;       UPDATE: NOW GRAPHICS 1 MODE HAS ITS OWN CHAR SET
              	
3B83:         	CHRST68 equ $
3B83: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
3B87: 00000000	
3B8B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
3B8F: 00000000	
3B93: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
3B97: 00000000	
3B9B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
3B9F: 00000000	
3BA3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
3BA7: 00000000	
3BAB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
3BAF: 00000000	
3BB3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
3BB7: 00000000	
3BBB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
3BBF: 00000000	
3BC3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
3BC7: 00000000	
3BCB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
3BCF: 00000000	
3BD3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
3BD7: 00000000	
3BDB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 
3BDF: 00000000	
3BE3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
3BE7: 00000000	
3BEB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
3BEF: 00000000	
3BF3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
3BF7: 00000000	
3BFB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
3BFF: 00000000	
3C03: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
3C07: 00000000	
3C0B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
3C0F: 00000000	
3C13: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
3C17: 00000000	
3C1B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
3C1F: 00000000	
3C23: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
3C27: 00000000	
3C2B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
3C2F: 00000000	
3C33: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
3C37: 00000000	
3C3B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
3C3F: 00000000	
3C43: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
3C47: 00000000	
3C4B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
3C4F: 00000000	
3C53: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
3C57: 00000000	
3C5B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
3C5F: 00000000	
3C63: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
3C67: 00000000	
3C6B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
3C6F: 00000000	
3C73: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
3C77: 00000000	
3C7B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
3C7F: 00000000	
3C83: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32: space
3C87: 00000000	
3C8B: 20202020	        defb $20,$20,$20,$20,$20,$00,$20,$00 ; char 33: !
3C8F: 20002000	
3C93: 50500000	        defb $50,$50,$00,$00,$00,$00,$00,$00 ; char 34: "
3C97: 00000000	
3C9B: 5050F850	        defb $50,$50,$f8,$50,$f8,$50,$50,$00 ; char 35: #
3C9F: F8505000	
3CA3: 2078A070	        defb $20,$78,$a0,$70,$28,$f0,$20,$00 ; char 36: $
3CA7: 28F02000	
3CAB: C0C81020	        defb $c0,$c8,$10,$20,$40,$98,$18,$00 ; char 37: %
3CAF: 40981800	
3CB3: 6090A040	        defb $60,$90,$a0,$40,$a8,$90,$68,$00 ; char 38: &
3CB7: A8906800	
3CBB: 60204000	        defb $60,$20,$40,$00,$00,$00,$00,$00 ; char 39: '
3CBF: 00000000	
3CC3: 10204040	        defb $10,$20,$40,$40,$40,$20,$10,$00 ; char 40: (
3CC7: 40201000	
3CCB: 40201010	        defb $40,$20,$10,$10,$10,$20,$40,$00 ; char 41: )
3CCF: 10204000	
3CD3: 0020A870	        defb $00,$20,$a8,$70,$a8,$20,$00,$00 ; char 42: *
3CD7: A8200000	
3CDB: 002020F8	        defb $00,$20,$20,$f8,$20,$20,$00,$00 ; char 43: +
3CDF: 20200000	
3CE3: 00000000	        defb $00,$00,$00,$00,$60,$20,$40,$00 ; char 44: ,
3CE7: 60204000	
3CEB: 000000F8	        defb $00,$00,$00,$f8,$00,$00,$00,$00 ; char 45: -
3CEF: 00000000	
3CF3: 00000000	        defb $00,$00,$00,$00,$00,$60,$60,$00 ; char 46: .
3CF7: 00606000	
3CFB: 00081020	        defb $00,$08,$10,$20,$40,$80,$00,$00 ; char 47: /
3CFF: 40800000	
3D03: 708898A8	        defb $70,$88,$98,$a8,$c8,$88,$70,$00 ; char 48: 0
3D07: C8887000	
3D0B: 20602020	        defb $20,$60,$20,$20,$20,$20,$70,$00 ; char 49: 1
3D0F: 20207000	
3D13: 70880810	        defb $70,$88,$08,$10,$20,$40,$f8,$00 ; char 50: 2
3D17: 2040F800	
3D1B: F8102010	        defb $f8,$10,$20,$10,$08,$88,$70,$00 ; char 51: 3
3D1F: 08887000	
3D23: 10305090	        defb $10,$30,$50,$90,$f8,$10,$10,$00 ; char 52: 4
3D27: F8101000	
3D2B: F880F008	        defb $f8,$80,$f0,$08,$08,$88,$70,$00 ; char 53: 5
3D2F: 08887000	
3D33: 304080F8	        defb $30,$40,$80,$f8,$88,$88,$70,$00 ; char 54: 6
3D37: 88887000	
3D3B: F8081020	        defb $f8,$08,$10,$20,$40,$40,$40,$00 ; char 55: 7
3D3F: 40404000	
3D43: 70888870	        defb $70,$88,$88,$70,$88,$88,$70,$00 ; char 56: 8
3D47: 88887000	
3D4B: 70888878	        defb $70,$88,$88,$78,$08,$10,$60,$00 ; char 57: 9
3D4F: 08106000	
3D53: 00303000	        defb $00,$30,$30,$00,$30,$30,$00,$00 ; char 58: :
3D57: 30300000	
3D5B: 00303000	        defb $00,$30,$30,$00,$30,$10,$20,$00 ; char 59: ;
3D5F: 30102000	
3D63: 10204080	        defb $10,$20,$40,$80,$40,$20,$10,$00 ; char 60: <
3D67: 40201000	
3D6B: 0000F800	        defb $00,$00,$f8,$00,$f8,$00,$00,$00 ; char 61: =
3D6F: F8000000	
3D73: 40201008	        defb $40,$20,$10,$08,$10,$20,$40,$00 ; char 62: >
3D77: 10204000	
3D7B: 70880810	        defb $70,$88,$08,$10,$20,$00,$20,$00 ; char 63: ?
3D7F: 20002000	
3D83: 70880868	        defb $70,$88,$08,$68,$a8,$a8,$70,$00 ; char 64: @
3D87: A8A87000	
3D8B: 70888888	        defb $70,$88,$88,$88,$f8,$88,$88,$00 ; char 65: A
3D8F: F8888800	
3D93: F08888F0	        defb $f0,$88,$88,$f0,$88,$88,$f0,$00 ; char 66: B
3D97: 8888F000	
3D9B: 70888080	        defb $70,$88,$80,$80,$80,$88,$70,$00 ; char 67: C
3D9F: 80887000	
3DA3: E0908888	        defb $e0,$90,$88,$88,$88,$90,$e0,$00 ; char 68: D
3DA7: 8890E000	
3DAB: F88080F0	        defb $f8,$80,$80,$f0,$80,$80,$f8,$00 ; char 69: E
3DAF: 8080F800	
3DB3: F88080F0	        defb $f8,$80,$80,$f0,$80,$80,$80,$00 ; char 70: F
3DB7: 80808000	
3DBB: 708880B8	        defb $70,$88,$80,$b8,$88,$88,$78,$00 ; char 71: G
3DBF: 88887800	
3DC3: 888888F8	        defb $88,$88,$88,$f8,$88,$88,$88,$00 ; char 72: H
3DC7: 88888800	
3DCB: 70202020	        defb $70,$20,$20,$20,$20,$20,$70,$00 ; char 73: I
3DCF: 20207000	
3DD3: 38101010	        defb $38,$10,$10,$10,$10,$90,$60,$00 ; char 74: J
3DD7: 10906000	
3DDB: 8890A0C0	        defb $88,$90,$a0,$c0,$a0,$90,$88,$00 ; char 75: K
3DDF: A0908800	
3DE3: 80808080	        defb $80,$80,$80,$80,$80,$80,$f8,$00 ; char 76: L
3DE7: 8080F800	
3DEB: 88D8A8A8	        defb $88,$d8,$a8,$a8,$88,$88,$88,$00 ; char 77: M
3DEF: 88888800	
3DF3: 88C8A898	        defb $88,$c8,$a8,$98,$88,$88,$88,$00 ; char 78: N
3DF7: 88888800	
3DFB: 70888888	        defb $70,$88,$88,$88,$88,$88,$70,$00 ; char 79: O
3DFF: 88887000	
3E03: F08888F0	        defb $f0,$88,$88,$f0,$80,$80,$80,$00 ; char 80: P
3E07: 80808000	
3E0B: 70888888	        defb $70,$88,$88,$88,$a8,$90,$68,$00 ; char 81: Q
3E0F: A8906800	
3E13: F08888F0	        defb $f0,$88,$88,$f0,$a0,$90,$88,$00 ; char 82: R
3E17: A0908800	
3E1B: 78808070	        defb $78,$80,$80,$70,$08,$08,$f0,$00 ; char 83: S
3E1F: 0808F000	
3E23: F8202020	        defb $f8,$20,$20,$20,$20,$20,$20,$00 ; char 84: T
3E27: 20202000	
3E2B: 88888888	        defb $88,$88,$88,$88,$88,$88,$70,$00 ; char 85: U
3E2F: 88887000	
3E33: 88888888	        defb $88,$88,$88,$88,$88,$50,$20,$00 ; char 86: V
3E37: 88502000	
3E3B: 88888888	        defb $88,$88,$88,$88,$a8,$a8,$50,$00 ; char 87: W
3E3F: A8A85000	
3E43: 88885020	        defb $88,$88,$50,$20,$50,$88,$88,$00 ; char 88: X
3E47: 50888800	
3E4B: 88888850	        defb $88,$88,$88,$50,$20,$20,$20,$00 ; char 89: Y
3E4F: 20202000	
3E53: F8081020	        defb $f8,$08,$10,$20,$40,$80,$f8,$00 ; char 90: Z
3E57: 4080F800	
3E5B: 70404040	        defb $70,$40,$40,$40,$40,$40,$70,$00 ; char 91: [
3E5F: 40407000	
3E63: 00804020	        defb $00,$80,$40,$20,$10,$08,$00,$00 ; char 92: \
3E67: 10080000	
3E6B: 70101010	        defb $70,$10,$10,$10,$10,$10,$70,$00 ; char 93: ]
3E6F: 10107000	
3E73: 20508800	        defb $20,$50,$88,$00,$00,$00,$00,$00 ; char 94: ^
3E77: 00000000	
3E7B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$FC ; char 95: _ (underscore)
3E7F: 000000FC	
3E83: 40201000	        defb $40,$20,$10,$00,$00,$00,$00,$00 ; char 96: `
3E87: 00000000	
3E8B: 00007008	        defb $00,$00,$70,$08,$78,$88,$78,$00 ; char 97: a
3E8F: 78887800	
3E93: 808080B0	        defb $80,$80,$80,$b0,$c8,$88,$f0,$00 ; char 98: b
3E97: C888F000	
3E9B: 00007080	        defb $00,$00,$70,$80,$80,$88,$70,$00 ; char 99: c
3E9F: 80887000	
3EA3: 08080868	        defb $08,$08,$08,$68,$98,$88,$78,$00 ; char 100: d
3EA7: 98887800	
3EAB: 00007088	        defb $00,$00,$70,$88,$f8,$80,$70,$00 ; char 101: e
3EAF: F8807000	
3EB3: 304840E0	        defb $30,$48,$40,$e0,$40,$40,$40,$00 ; char 102: f
3EB7: 40404000	
3EBB: 00007888	        defb $00,$00,$78,$88,$78,$08,$70,$00 ; char 103: g
3EBF: 78087000	
3EC3: 8080B0C8	        defb $80,$80,$b0,$c8,$88,$88,$88,$00 ; char 104: h
3EC7: 88888800	
3ECB: 00200020	        defb $00,$20,$00,$20,$20,$20,$20,$00 ; char 105: i
3ECF: 20202000	
3ED3: 00100030	        defb $00,$10,$00,$30,$10,$90,$60,$00 ; char 106: j
3ED7: 10906000	
3EDB: 808090A0	        defb $80,$80,$90,$a0,$c0,$a0,$90,$00 ; char 107: k
3EDF: C0A09000	
3EE3: 60202020	        defb $60,$20,$20,$20,$20,$20,$70,$00 ; char 108: l
3EE7: 20207000	
3EEB: 0000D0A8	        defb $00,$00,$d0,$a8,$a8,$88,$88,$00 ; char 109: m
3EEF: A8888800	
3EF3: 0000B0C8	        defb $00,$00,$b0,$c8,$88,$88,$88,$00 ; char 110: n
3EF7: 88888800	
3EFB: 00007088	        defb $00,$00,$70,$88,$88,$88,$70,$00 ; char 111: o
3EFF: 88887000	
3F03: 0000F088	        defb $00,$00,$f0,$88,$f0,$80,$80,$00 ; char 112: p
3F07: F0808000	
3F0B: 00007888	        defb $00,$00,$78,$88,$78,$08,$08,$00 ; char 113: q
3F0F: 78080800	
3F13: 0000B0C8	        defb $00,$00,$b0,$c8,$80,$80,$80,$00 ; char 114: r
3F17: 80808000	
3F1B: 00007080	        defb $00,$00,$70,$80,$70,$08,$f0,$00 ; char 115: s
3F1F: 7008F000	
3F23: 4040E040	        defb $40,$40,$e0,$40,$40,$48,$30,$00 ; char 116: t
3F27: 40483000	
3F2B: 00008888	        defb $00,$00,$88,$88,$88,$98,$68,$00 ; char 117: u
3F2F: 88986800	
3F33: 00008888	        defb $00,$00,$88,$88,$88,$50,$20,$00 ; char 118: v
3F37: 88502000	
3F3B: 00008888	        defb $00,$00,$88,$88,$a8,$a8,$50,$00 ; char 119: w
3F3F: A8A85000	
3F43: 00008850	        defb $00,$00,$88,$50,$20,$50,$88,$00 ; char 120: x
3F47: 20508800	
3F4B: 00008898	        defb $00,$00,$88,$98,$68,$08,$70,$00 ; char 121: y
3F4F: 68087000	
3F53: 0000F810	        defb $00,$00,$f8,$10,$20,$40,$f8,$00 ; char 122: z
3F57: 2040F800	
3F5B: 10202040	        defb $10,$20,$20,$40,$20,$20,$10,$00 ; char 123: {
3F5F: 20201000	
3F63: 20202020	        defb $20,$20,$20,$20,$20,$20,$20,$00 ; char 124: |
3F67: 20202000	
3F6B: 20101008	        defb $20,$10,$10,$08,$10,$10,$20,$00 ; char 125: }
3F6F: 10102000	
3F73: 00285000	        defb $00,$28,$50,$00,$00,$00,$00,$00 ; char 126: ~
3F77: 00000000	
3F7B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 127: (delete) - here end the standard ASCII (0-127)
3F7F: 00000000	
3F83: 7884CC84	        defb %01111000,%10000100,%11001100,%10000100,%10110100,%10000100,%01111000,%00000000 ; char 128 (open face)
3F87: B4847800	
3F8B: 78FCB4FC	        defb %01111000,%11111100,%10110100,%11111100,%10110100,%11001100,%01111000,%00000000 ; char 129 (full face)
3F8F: B4CC7800	
3F93: 48FCFCFC	        defb %01001000,%11111100,%11111100,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 130 (hearts)
3F97: FC783000	
3F9B: 002070F8	        defb %00000000,%00100000,%01110000,%11111000,%11111000,%01110000,%00100000,%00000000 ; char 131 (diamonds)
3F9F: F8702000	
3FA3: 7020A8F8	        defb %01110000,%00100000,%10101000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 132 (clubs)
3FA7: A8207000	
3FAB: 2070F8F8	        defb %00100000,%01110000,%11111000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 133 (spades)
3FAF: A8207000	
3FB3: 303030FC	        defb %00110000,%00110000,%00110000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 134 
3FB7: FC303030	
3FBB: 0000003C	        defb %00000000,%00000000,%00000000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 135 
3FBF: 3C303030	
3FC3: 000000F0	        defb %00000000,%00000000,%00000000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 136 
3FC7: F0303030	
3FCB: 303030F0	        defb %00110000,%00110000,%00110000,%11110000,%11110000,%00000000,%00000000,%00000000 ; char 137 
3FCF: F0000000	
3FD3: 3030303C	        defb %00110000,%00110000,%00110000,%00111100,%00111100,%00000000,%00000000,%00000000 ; char 138 
3FD7: 3C000000	
3FDB: 303030FC	        defb %00110000,%00110000,%00110000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 139 
3FDF: FC000000	
3FE3: 3030303C	        defb %00110000,%00110000,%00110000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 140 
3FE7: 3C303030	
3FEB: 000000FC	        defb %00000000,%00000000,%00000000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 141 
3FEF: FC303030	
3FF3: 303030F0	        defb %00110000,%00110000,%00110000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 142 
3FF7: F0303030	
3FFB: 000000FC	        defb %00000000,%00000000,%00000000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 143 
3FFF: FC000000	
4003: 30303030	        defb %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000 ; char 144 
4007: 30303030	
400B: 0C1C1838	        defb %00001100,%00011100,%00011000,%00111000,%01110000,%01100000,%11100000,%11000000 ; char 145 
400F: 7060E0C0	
4013: C0E06070	        defb %11000000,%11100000,%01100000,%01110000,%00111000,%00011000,%00011100,%00001100 ; char 146 
4017: 38181C0C	
401B: CCCC7830	        defb %11001100,%11001100,%01111000,%00110000,%00110000,%01111000,%11001100,%11001100 ; char 147 
401F: 3078CCCC	
4023: 202020FC	        defb %00100000,%00100000,%00100000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 148 
4027: 20202020	
402B: 0000003C	        defb %00000000,%00000000,%00000000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 149 
402F: 20202020	
4033: 000000E0	        defb %00000000,%00000000,%00000000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 150 
4037: 20202020	
403B: 202020E0	        defb %00100000,%00100000,%00100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 151 
403F: 00000000	
4043: 2020203C	        defb %00100000,%00100000,%00100000,%00111100,%00000000,%00000000,%00000000,%00000000 ; char 152 
4047: 00000000	
404B: 202020FC	        defb %00100000,%00100000,%00100000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 153 
404F: 00000000	
4053: 2020203C	        defb %00100000,%00100000,%00100000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 154 
4057: 20202020	
405B: 000000FC	        defb %00000000,%00000000,%00000000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 155 
405F: 20202020	
4063: 202020E0	        defb %00100000,%00100000,%00100000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 156 
4067: 20202020	
406B: 000000FC	        defb %00000000,%00000000,%00000000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 157 
406F: 00000000	
4073: 20202020	        defb %00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000 ; char 158 
4077: 20202020	
407B: 04080810	        defb %00000100,%00001000,%00001000,%00010000,%00100000,%01000000,%01000000,%10000000 ; char 159 
407F: 20404080	
4083: 80404020	        defb %10000000,%01000000,%01000000,%00100000,%00010000,%00001000,%00001000,%00000100 ; char 160 
4087: 10080804	
408B: 84484830	        defb %10000100,%01001000,%01001000,%00110000,%00110000,%01001000,%01001000,%10000100 ; char 161 
408F: 30484884	
4093: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 162 
4097: 0000FCFC	
409B: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100 ; char 163 
409F: FCFCFCFC	
40A3: 0000FCFC	        defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 164 
40A7: FCFCFCFC	
40AB: FCFC0000	        defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165 
40AF: 00000000	
40B3: FCFCFCFC	        defb %11111100,%11111100,%11111100,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 166 
40B7: 00000000	
40BB: FCFCFCFC	        defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 167 
40BF: FCFC0000	
40C3: 80808080	        defb %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000 ; char 168 
40C7: 80808080	
40CB: E0E0E0E0	        defb %11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000 ; char 169 
40CF: E0E0E0E0	
40D3: F8F8F8F8	        defb %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000 ; char 170 
40D7: F8F8F8F8	
40DB: 04040404	        defb %00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100 ; char 171 
40DF: 04040404	
40E3: 1C1C1C1C	        defb %00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100 ; char 172 
40E7: 1C1C1C1C	
40EB: 7C7C7C7C	        defb %01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100 ; char 173 
40EF: 7C7C7C7C	
40F3: FC848484	        defb %11111100,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 174 
40F7: 848484FC	
40FB: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%11100000,%11100000,%11100000,%11100000 ; char 175 
40FF: E0E0E0E0	
4103: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00011100,%00011100,%00011100,%00011100 ; char 176 
4107: 1C1C1C1C	
410B: 1C1C1C1C	        defb %00011100,%00011100,%00011100,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 177 
410F: 00000000	
4113: E0E0E0E0	        defb %11100000,%11100000,%11100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 178 
4117: 00000000	
411B: E0E0E0E0	        defb %11100000,%11100000,%11100000,%11100000,%00011100,%00011100,%00011100,%00011100 ; char 179 
411F: 1C1C1C1C	
4123: 1C1C1C1C	        defb %00011100,%00011100,%00011100,%00011100,%11100000,%11100000,%11100000,%11100000 ; char 180 
4127: E0E0E0E0	
412B: 78787878	        defb %01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000 ; char 181 
412F: 78787878	
4133: CCCCCCCC	        defb %11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100 ; char 182 
4137: CCCCCCCC	
413B: FCFC0000	        defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 183 
413F: 0000FCFC	
4143: 0000FCFC	        defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 184 
4147: FCFC0000	
414B: 3030CCCC	        defb %00110000,%00110000,%11001100,%11001100,%00110000,%00110000,%11001100,%11001100 ; char 185 
414F: 3030CCCC	
4153: 54A854A8	        defb %01010100,%10101000,%01010100,%10101000,%01010100,%10101000,%01010100,%10101000 ; char 186 
4157: 54A854A8	
415B: 643098CC	        defb %01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100 ; char 187 
415F: 643098CC	
4163: CC643098	        defb %11001100,%01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000 ; char 188 
4167: CC643098	
416B: 3098CC64	        defb %00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100,%01100100 ; char 189 
416F: 3098CC64	
4173: 64CC9830	        defb %01100100,%11001100,%10011000,%00110000,%01100100,%11001100,%10011000,%00110000 ; char 190 
4177: 64CC9830	
417B: 2020F820	        defb %00100000,%00100000,%11111000,%00100000,%00100000,%00000000,%11111000,%00000000 ; char 191 (±)
417F: 2000F800	
4183: C0300830	        defb %11000000,%00110000,%00001000,%00110000,%11000000,%00000000,%11111000,%00000000 ; char 192 (≥)
4187: C000F800	
418B: 18608060	        defb %00011000,%01100000,%10000000,%01100000,%00011000,%00000000,%11111000,%00000000 ; char 193 (≤)
418F: 1800F800	
4193: 3C202020	        defb %00111100,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
4197: A0602000	
419B: 30484830	        defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (°)
419F: 00000000	
41A3: 60103040	        defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (²)
41A7: 70000000	
41AB: 000054A8	        defb %00000000,%00000000,%01010100,%10101000,%00000000,%11111100,%00000000,%00000000 ; char 197
41AF: 00FC0000	
41B3: 0054A800	        defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (≈)
41B7: 54A80000	
41BB: 0080C0E0	        defb %00000000,%10000000,%11000000,%11100000,%11100000,%11000000,%10000000,%00000000 ; char 199
41BF: E0C08000	
41C3: FC783000	        defb %11111100,%01111000,%00110000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 200
41C7: 00000000	
41CB: 00040C1C	        defb %00000000,%00000100,%00001100,%00011100,%00011100,%00001100,%00000100,%00000000 ; char 201
41CF: 1C0C0400	
41D3: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00110000,%01111000,%11111100 ; char 202 
41D7: 003078FC	
41DB: 2070F820	        defb %00100000,%01110000,%11111000,%00100000,%00100000,%00100000,%00100000,%00000000 ; char 203 (up arrow)
41DF: 20202000	
41E3: 3C1C1C24	        defb %00111100,%00011100,%00011100,%00100100,%01000000,%10000000,%00000000,%00000000 ; char 204 (up right arrow)
41E7: 40800000	
41EB: 001018FC	        defb %00000000,%00010000,%00011000,%11111100,%00011000,%00010000,%00000000,%00000000 ; char 205 (right arrow)
41EF: 18100000	
41F3: 00008040	        defb %00000000,%00000000,%10000000,%01000000,%00100100,%00011100,%00011100,%00111100 ; char 206 (down right arrow)
41F7: 241C1C3C	
41FB: 00202020	        defb %00000000,%00100000,%00100000,%00100000,%00100000,%11111000,%01110000,%00100000 ; char 207 (down arrow)
41FF: 20F87020	
4203: 00000408	        defb %00000000,%00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000 ; char 208 (down left arrow)
4207: 90E0E0F0	
420B: 002060FC	        defb %00000000,%00100000,%01100000,%11111100,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
420F: 60200000	
4213: F0E0E090	        defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
4217: 08040000	
421B: 3844F040	        defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
421F: F0443800	
4223: 000478A8	        defb %00000000,%00000100,%01111000,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
4227: 28282800	
422B: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00011100,%00100000,%00100000,%00100000 ; char 213
422F: 1C202020	
4233: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%11100000,%00010000,%00010000,%00010000 ; char 214
4237: E0101010	
423B: 101010E0	        defb %00010000,%00010000,%00010000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 215
423F: 00000000	
4243: 2020201C	        defb %00100000,%00100000,%00100000,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 216
4247: 00000000	
424B: 0000001C	        defb %00000000,%00000000,%00000000,%00011100,%00111100,%00110000,%00110000,%00110000 ; char 217
424F: 3C303030	
4253: 000000E0	        defb %00000000,%00000000,%00000000,%11100000,%11110000,%00110000,%00110000,%00110000 ; char 218
4257: F0303030	
425B: 303030F0	        defb %00110000,%00110000,%00110000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
425F: E0000000	
4263: 3030303C	        defb %00110000,%00110000,%00110000,%00111100,%00011100,%00000000,%00000000,%00000000 ; char 220
4267: 1C000000	
426B: 00304848	        defb %00000000,%00110000,%01001000,%01001000,%01001000,%00110000,%00000000,%00000000 ; char 221
426F: 48300000	
4273: 00307878	        defb %00000000,%00110000,%01111000,%01111000,%01111000,%00110000,%00000000,%00000000 ; char 222
4277: 78300000	
427B: 003078FC	        defb %00000000,%00110000,%01111000,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 223
427F: FC783000	
4283: FCF8F0E0	        defb %11111100,%11111000,%11110000,%11100000,%11100000,%11000000,%10000000,%10000000 ; char 224
4287: E0C08080	
428B: FC7C3C1C	        defb %11111100,%01111100,%00111100,%00011100,%00011100,%00001100,%00000100,%00000100 ; char 225
428F: 1C0C0404	
4293: 04040C1C	        defb %00000100,%00000100,%00001100,%00011100,%00011100,%00111100,%01111100,%11111100 ; char 226
4297: 1C3C7CFC	
429B: 8080C0E0	        defb %10000000,%10000000,%11000000,%11100000,%11100000,%11110000,%11111000,%11111100 ; char 227
429F: E0F0F8FC	
42A3: 00040CD8	        defb %00000000,%00000100,%00001100,%11011000,%11110000,%11100000,%11000000,%00000000 ; char 228 (checkmark)
42A7: F0E0C000	
42AB: 00CC7830	        defb %00000000,%11001100,%01111000,%00110000,%01111000,%11001100,%00000000,%00000000 ; char 229 (x)
42AF: 78CC0000	
42B3: 70888888	        defb %01110000,%10001000,%10001000,%10001000,%01110000,%00100000,%01110000,%00100000 ; char 230 (female)
42B7: 70207020	
42BB: 001C0C74	        defb %00000000,%00011100,%00001100,%01110100,%10010000,%10010000,%01100000,%00000000 ; char 231 (male)
42BF: 90906000	
42C3: F8848484	        defb %11111000,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 232 (new doc)
42C7: 848484FC	
42CB: 00F0FC84	        defb %00000000,%11110000,%11111100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 233 (folder)
42CF: 848484FC	
42D3: 3078FC48	        defb %00110000,%01111000,%11111100,%01001000,%01001000,%01001000,%01001000,%01111000 ; char 234 (trash bin)
42D7: 48484878	
42DB: FC848484	        defb %11111100,%10000100,%10000100,%10000100,%11111100,%10110100,%10110100,%11111100 ; char 235 (floppy disk)
42DF: FCB4B4FC	
42E3: 0000D4D8	        defb %00000000,%00000000,%11010100,%11011000,%11010100,%11010100,%00000000,%00000000 ; char 236 (OK)
42E7: D4D40000	
42EB: 3078FC78	        defb %00110000,%01111000,%11111100,%01111000,%01111000,%01001000,%01001000,%01001000 ; char 237 (home)
42EF: 78484848	
42F3: 7884A4A4	        defb %01111000,%10000100,%10100100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 238 (clock)
42F7: B4847800	
42FB: 000008F4	        defb %00000000,%00000000,%00001000,%11110100,%10101000,%10000000,%00000000,%00000000 ; char 239 (key)
42FF: A8800000	
4303: 203078B0	        defb %00100000,%00110000,%01111000,%10110000,%10100000,%10001000,%01110000,%00000000 ; char 240 (undo)
4307: A0887000	
430B: 00FCCCB4	        defb %00000000,%11111100,%11001100,%10110100,%10000100,%10000100,%11111100,%00000000 ; char 241 (letter)
430F: 8484FC00	
4313: 609090F0	        defb %01100000,%10010000,%10010000,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 242 (lock)
4317: F0F0F000	
431B: 081414F0	        defb %00001000,%00010100,%00010100,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 243 (unlock)
431F: F0F0F000	
4323: FCFC84B4	        defb %11111100,%11111100,%10000100,%10110100,%10010100,%10010100,%10000100,%11111100 ; char 244 (calendar)
4327: 949484FC	
432B: 00043858	        defb %00000000,%00000100,%00111000,%01011000,%01101000,%01110000,%10000000,%00000000 ; char 245 (diameter)
432F: 68708000	
4333: 78848484	        defb %01111000,%10000100,%10000100,%10000100,%01101100,%00011000,%00001000,%00000000 ; char 246 (baloon)
4337: 6C180800	
433B: 30282828	        defb %00110000,%00101000,%00101000,%00101000,%00100000,%01100000,%11100000,%01000000 ; char 247 (note)
433F: 2060E040	
4343: 2068E4E4	        defb %00100000,%01101000,%11100100,%11100100,%11100100,%01101000,%00100000,%00000000 ; char 248 (audio on)
4347: E4682000	
434B: 2060E0E0	        defb %00100000,%01100000,%11100000,%11100000,%11100000,%01100000,%00100000,%00000000 ; char 249 (audio off)
434F: E0602000	
4353: 80C0E0F0	        defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11110000,%10010000 ; char 250 (pointer)
4357: F8FCF090	
435B: 7884B4A4	        defb %01111000,%10000100,%10110100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 251 (©)
435F: B4847800	
4363: 30484040	        defb %00110000,%01001000,%01000000,%01000000,%11100000,%01000000,%01000100,%10111000 ; char 252 (£)
4367: E04044B8	
436B: 7884F048	        defb %01111000,%10000100,%11110000,%01001000,%01001000,%00111100,%10000100,%01111000 ; char 253 (§)
436F: 483C8478	
4373: 00002000	        defb %00000000,%00000000,%00100000,%00000000,%11111000,%00000000,%00100000,%00000000 ; char 254 (÷)
4377: F8002000	
437B: FCFCFCFC	        defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 255 (cursor)
437F: FCFCFCFC	
              	        ; here ends the ASCII table
              	; ------------------------------------------------------------------------------
              	; LM80C - 8x8 CHARSET - R1.7
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. More info at
              	; www DOT leonardomiliani DOT com
              	; ------------------------------------------------------------------------------
              	; Code Revision:
              	; R1.0 - 20190615 - First revision: ASCII chars (from 0 to 255) - actually, they are 6x8 pixels
              	; R1.1 - 20190616 - Converted to 8x8 pixels
              	; R1.2 - 20191013 - Added new graphic chars and reorganized previous ones
              	; R1.3 - 20191015 - More graphic chars
              	; R1.4 - 20191202 - Fixed char 11/12, added new special chars
              	; R1.5 - 20191210 - Changed several graphic chars
              	; R1.6 - 20200125 - Removed double chars, changed with new ones
              	; R1.7 - 20200228 - adopted more usual hexadecimal & binary prefixes
              	; ------------------------------------------------------------------------------
              	;
              	;-------------------------------------------------------------------------------
              	;
              	;               8 x 8    C  H  A  R  S  E  T
              	;
              	;-------------------------------------------------------------------------------
              	;
              	;       8X8 CHARS, DESIGNED FOR GRAPHICS 1 MODE
              	
4383:         	CHRST88 equ $
4383: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
4387: 00000000	
438B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
438F: 00000000	
4393: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
4397: 00000000	
439B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
439F: 00000000	
43A3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
43A7: 00000000	
43AB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
43AF: 00000000	
43B3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
43B7: 00000000	
43BB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
43BF: 00000000	
43C3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
43C7: 00000000	
43CB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
43CF: 00000000	
43D3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
43D7: 00000000	
43DB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 
43DF: 00000000	
43E3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
43E7: 00000000	
43EB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
43EF: 00000000	
43F3: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
43F7: 00000000	
43FB: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
43FF: 00000000	
4403: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
4407: 00000000	
440B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
440F: 00000000	
4413: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
4417: 00000000	
441B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
441F: 00000000	
4423: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
4427: 00000000	
442B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
442F: 00000000	
4433: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
4437: 00000000	
443B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
443F: 00000000	
4443: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
4447: 00000000	
444B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
444F: 00000000	
4453: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
4457: 00000000	
445B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
445F: 00000000	
4463: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
4467: 00000000	
446B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
446F: 00000000	
4473: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
4477: 00000000	
447B: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
447F: 00000000	
4483: 00000000	        defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32 - space
4487: 00000000	
448B: 10101010	        defb %00010000,%00010000,%00010000,%00010000,%00010000,%00000000,%00010000,%00000000 ; char 33 - !
448F: 10001000	
4493: 28282800	        defb %00101000,%00101000,%00101000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 34 - "
4497: 00000000	
449B: 2828FE28	        defb %00101000,%00101000,%11111110,%00101000,%11111110,%00101000,%00101000,%00000000 ; char 35 - #
449F: FE282800	
44A3: 103C5038	        defb %00010000,%00111100,%01010000,%00111000,%00010100,%01111000,%00010000,%00000000 ; char 36 - $
44A7: 14781000	
44AB: 00626408	        defb %00000000,%01100010,%01100100,%00001000,%00010000,%00100110,%01000110,%00000000 ; char 37 - %
44AF: 10264600	
44B3: 00304830	        defb %00000000,%00110000,%01001000,%00110000,%01001010,%01000100,%00111010,%00000000 ; char 38 - &
44B7: 4A443A00	
44BB: 08102000	        defb %00001000,%00010000,%00100000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 39 - '
44BF: 00000000	
44C3: 08102020	        defb %00001000,%00010000,%00100000,%00100000,%00100000,%00010000,%00001000,%00000000 ; char 40 - (
44C7: 20100800	
44CB: 20100808	        defb %00100000,%00010000,%00001000,%00001000,%00001000,%00010000,%00100000,%00000000 ; char 41 - )
44CF: 08102000	
44D3: 00105438	        defb %00000000,%00010000,%01010100,%00111000,%00111000,%01010100,%00010000,%00000000 ; char 42 - *
44D7: 38541000	
44DB: 0010107C	        defb %00000000,%00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%00000000 ; char 43 - +
44DF: 10100000	
44E3: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00001000,%00010000 ; char 44 - ,
44E7: 00180810	
44EB: 0000007C	        defb %00000000,%00000000,%00000000,%01111100,%00000000,%00000000,%00000000,%00000000 ; char 45 - -
44EF: 00000000	
44F3: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00011000,%00000000 ; char 46 - .
44F7: 00181800	
44FB: 00020408	        defb %00000000,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%00000000 ; char 47 - /
44FF: 10204000	
4503: 38444C54	        defb %00111000,%01000100,%01001100,%01010100,%01100100,%01000100,%00111000,%00000000 ; char 48 - 0
4507: 64443800	
450B: 10305010	        defb %00010000,%00110000,%01010000,%00010000,%00010000,%00010000,%01111100,%00000000 ; char 49 - 1
450F: 10107C00	
4513: 38440408	        defb %00111000,%01000100,%00000100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 50 - 2
4517: 10207C00	
451B: 7C081008	        defb %01111100,%00001000,%00010000,%00001000,%00000100,%01000100,%00111000,%00000000 ; char 51 - 3
451F: 04443800	
4523: 08182848	        defb %00001000,%00011000,%00101000,%01001000,%01111100,%00001000,%00001000,%00000000 ; char 52 - 4
4527: 7C080800	
452B: 7C407804	        defb %01111100,%01000000,%01111000,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 53 - 5
452F: 04443800	
4533: 38444078	        defb %00111000,%01000100,%01000000,%01111000,%01000100,%01000100,%00111000,%00000000 ; char 54 - 6
4537: 44443800	
453B: 7C040810	        defb %01111100,%00000100,%00001000,%00010000,%00100000,%00100000,%00100000,%00000000 ; char 55 - 7
453F: 20202000	
4543: 38444438	        defb %00111000,%01000100,%01000100,%00111000,%01000100,%01000100,%00111000,%00000000 ; char 56 - 8
4547: 44443800	
454B: 3844443C	        defb %00111000,%01000100,%01000100,%00111100,%00000100,%01000100,%00111000,%00000000 ; char 57 - 9
454F: 04443800	
4553: 00181800	        defb %00000000,%00011000,%00011000,%00000000,%00011000,%00011000,%00000000,%00000000 ; char 58 - :
4557: 18180000	
455B: 00181800	        defb %00000000,%00011000,%00011000,%00000000,%00011000,%00001000,%00010000,%00000000 ; char 59 - ;
455F: 18081000	
4563: 04081020	        defb %00000100,%00001000,%00010000,%00100000,%00010000,%00001000,%00000100,%00000000 ; char 60 - <
4567: 10080400	
456B: 00007E00	        defb %00000000,%00000000,%01111110,%00000000,%01111110,%00000000,%00000000,%00000000 ; char 61 - =
456F: 7E000000	
4573: 20100804	        defb %00100000,%00010000,%00001000,%00000100,%00001000,%00010000,%00100000,%00000000 ; char 62 - >
4577: 08102000	
457B: 38440408	        defb %00111000,%01000100,%00000100,%00001000,%00010000,%00000000,%00010000,%00000000 ; char 63 - ?
457F: 10001000	
4583: 7884BCAC	        defb %01111000,%10000100,%10111100,%10101100,%10111000,%10000000,%10000100,%01111000 ; char 64 - @
4587: B8808478	
458B: 38444444	        defb %00111000,%01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%00000000 ; char 65 - A
458F: 7C444400	
4593: 78444478	        defb %01111000,%01000100,%01000100,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 66 - B
4597: 44447800	
459B: 38444040	        defb %00111000,%01000100,%01000000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 67 - C
459F: 40443800	
45A3: 78444444	        defb %01111000,%01000100,%01000100,%01000100,%01000100,%01000100,%01111000,%00000000 ; char 68 - D
45A7: 44447800	
45AB: 7C404070	        defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01111100,%00000000 ; char 69 - E
45AF: 40407C00	
45B3: 7C404070	        defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01000000,%00000000 ; char 70 - F
45B7: 40404000	
45BB: 38444040	        defb %00111000,%01000100,%01000000,%01000000,%01011100,%01000100,%00111000,%00000000 ; char 71 - G
45BF: 5C443800	
45C3: 4444447C	        defb %01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%01000100,%00000000 ; char 72 - H
45C7: 44444400	
45CB: 38101010	        defb %00111000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 73 - I
45CF: 10103800	
45D3: 3C040404	        defb %00111100,%00000100,%00000100,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 74 - J
45D7: 04443800	
45DB: 44444870	        defb %01000100,%01000100,%01001000,%01110000,%01001000,%01000100,%01000100,%00000000 ; char 75 - K
45DF: 48444400	
45E3: 40404040	        defb %01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01111100,%00000000 ; char 76 - L
45E7: 40407C00	
45EB: 42665A42	        defb %01000010,%01100110,%01011010,%01000010,%01000010,%01000010,%01000010,%00000000 ; char 77 - M
45EF: 42424200	
45F3: 4464544C	        defb %01000100,%01100100,%01010100,%01001100,%01000100,%01000100,%01000100,%00000000 ; char 78 - N
45F7: 44444400	
45FB: 38444444	        defb %00111000,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 79 - O
45FF: 44443800	
4603: 78444444	        defb %01111000,%01000100,%01000100,%01000100,%01111000,%01000000,%01000000,%00000000 ; char 80 - P
4607: 78404000	
460B: 38444444	        defb %00111000,%01000100,%01000100,%01000100,%01010100,%01001000,%00110100,%00000000 ; char 81 - Q
460F: 54483400	
4613: 78444444	        defb %01111000,%01000100,%01000100,%01000100,%01111000,%01001000,%01000100,%00000000 ; char 82 - R
4617: 78484400	
461B: 3C404038	        defb %00111100,%01000000,%01000000,%00111000,%00000100,%00000100,%01111000,%00000000 ; char 83 - S
461F: 04047800	
4623: 7C101010	        defb %01111100,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 84 - T
4627: 10101000	
462B: 44444444	        defb %01000100,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 85 - U
462F: 44443800	
4633: 44444444	        defb %01000100,%01000100,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 86 - V
4637: 44281000	
463B: 42424242	        defb %01000010,%01000010,%01000010,%01000010,%01011010,%01011010,%00100100,%00000000 ; char 87 - W
463F: 5A5A2400	
4643: 44442810	        defb %01000100,%01000100,%00101000,%00010000,%00101000,%01000100,%01000100,%00000000 ; char 88 - X
4647: 28444400	
464B: 44444428	        defb %01000100,%01000100,%01000100,%00101000,%00010000,%00010000,%00010000,%00000000 ; char 89 - Y
464F: 10101000	
4653: 7C040810	        defb %01111100,%00000100,%00001000,%00010000,%00100000,%01000000,%01111100,%00000000 ; char 90 - Z
4657: 20407C00	
465B: 38202020	        defb %00111000,%00100000,%00100000,%00100000,%00100000,%00100000,%00111000,%00000000 ; char 91 - [
465F: 20203800	
4663: 00402010	        defb %00000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000000 ; char 92 - \
4667: 08040200	
466B: 38080808	        defb %00111000,%00001000,%00001000,%00001000,%00001000,%00001000,%00111000,%00000000 ; char 93 - ]
466F: 08083800	
4673: 10284400	        defb %00010000,%00101000,%01000100,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 94 - ^
4677: 00000000	
467B: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%01111110,%00000000 ; char 95 _ (underscore)
467F: 00007E00	
4683: 20100800	        defb %00100000,%00010000,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 96 - `
4687: 00000000	
468B: 00003804	        defb %00000000,%00000000,%00111000,%00000100,%00111100,%01000100,%00111100,%00000000 ; char 97 - a
468F: 3C443C00	
4693: 40404078	        defb %01000000,%01000000,%01000000,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 98 - b
4697: 44447800	
469B: 00003840	        defb %00000000,%00000000,%00111000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 99 - c
469F: 40443800	
46A3: 0404043C	        defb %00000100,%00000100,%00000100,%00111100,%01000100,%01000100,%00111100,%00000000 ; char 100 - d
46A7: 44443C00	
46AB: 00003844	        defb %00000000,%00000000,%00111000,%01000100,%01111100,%01000000,%00111000,%00000000 ; char 101 - e
46AF: 7C403800	
46B3: 18242070	        defb %00011000,%00100100,%00100000,%01110000,%00100000,%00100000,%00100000,%00000000 ; char 102 - f
46B7: 20202000	
46BB: 00003C44	        defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00111000 ; char 103 - g
46BF: 443C0438	
46C3: 40405864	        defb %01000000,%01000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 104 - h
46C7: 44444400	
46CB: 00100010	        defb %00000000,%00010000,%00000000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 105 - i
46CF: 10101000	
46D3: 08001808	        defb %00001000,%00000000,%00011000,%00001000,%00001000,%00001000,%01001000,%00110000 ; char 106 - j
46D7: 08084830	
46DB: 40404850	        defb %01000000,%01000000,%01001000,%01010000,%01100000,%01010000,%01001000,%00000000 ; char 107 - k
46DF: 60504800	
46E3: 30101010	        defb %00110000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 108 - l
46E7: 10103800	
46EB: 0000546A	        defb %00000000,%00000000,%01010100,%01101010,%01001010,%01000010,%01000010,%00000000 ; char 109 - m
46EF: 4A424200	
46F3: 00005864	        defb %00000000,%00000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 110 - n
46F7: 44444400	
46FB: 00003844	        defb %00000000,%00000000,%00111000,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 111: o
46FF: 44443800	
4703: 00007844	        defb %00000000,%00000000,%01111000,%01000100,%01000100,%01111000,%01000000,%01000000 ; char 112: p
4707: 44784040	
470B: 00003C44	        defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00000100 ; char 113: q
470F: 443C0404	
4713: 00005864	        defb %00000000,%00000000,%01011000,%01100100,%01000000,%01000000,%01000000,%00000000 ; char 114: r
4717: 40404000	
471B: 00003840	        defb %00000000,%00000000,%00111000,%01000000,%00111000,%00000100,%01111000,%00000000 ; char 115: s
471F: 38047800	
4723: 20207020	        defb %00100000,%00100000,%01110000,%00100000,%00100000,%00100100,%00011000,%00000000 ; char 116: t
4727: 20241800	
472B: 00004444	        defb %00000000,%00000000,%01000100,%01000100,%01000100,%01001100,%00110100,%00000000 ; char 117: u
472F: 444C3400	
4733: 00004444	        defb %00000000,%00000000,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 118: v
4737: 44281000	
473B: 00004444	        defb %00000000,%00000000,%01000100,%01000100,%01010100,%01010100,%00101000,%00000000 ; char 119: w
473F: 54542800	
4743: 00004428	        defb %00000000,%00000000,%01000100,%00101000,%00010000,%00101000,%01000100,%00000000 ; char 120: x
4747: 10284400	
474B: 00004444	        defb %00000000,%00000000,%01000100,%01000100,%01001100,%00110100,%00000100,%00111000 ; char 121: y
474F: 4C340438	
4753: 00007C08	        defb %00000000,%00000000,%01111100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 122: z
4757: 10207C00	
475B: 18202040	        defb %00011000,%00100000,%00100000,%01000000,%00100000,%00100000,%00011000,%00000000 ; char 123: {
475F: 20201800	
4763: 10101010	        defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 124: |
4767: 10101000	
476B: 30080804	        defb %00110000,%00001000,%00001000,%00000100,%00001000,%00001000,%00110000,%00000000 ; char 125: }
476F: 08083000	
4773: 20540800	        defb %00100000,%01010100,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 126: ~
4777: 00000000	
477B: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 127 (delete) - end the standard ASCII (0-127)
477F: 00000000	
4783: 3C42A581	        defb %00111100,%01000010,%10100101,%10000001,%10100101,%10011001,%01000010,%00111100 ; char 128 (open face)
4787: A599423C	
478B: 3C7EDBFF	        defb %00111100,%01111110,%11011011,%11111111,%11011011,%11100111,%01111110,%00111100 ; char 129 (full face)
478F: DBE77E3C	
4793: 6CFEFEFE	        defb %01101100,%11111110,%11111110,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 130 (hearts)
4797: 7C381000	
479B: 10387CFE	        defb %00010000,%00111000,%01111100,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 131 (diamonds)
479F: 7C381000	
47A3: 103854FE	        defb %00010000,%00111000,%01010100,%11111110,%01010100,%00010000,%01111100,%00000000 ; char 132 (clus)
47A7: 54107C00	
47AB: 10387CFE	        defb %00010000,%00111000,%01111100,%11111110,%11010110,%00010000,%01111100,%00000000 ; char 133 (spades)
47AF: D6107C00	
47B3: 181818FF	        defb %00011000,%00011000,%00011000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 134
47B7: FF181818	
47BB: 0000001F	        defb %00000000,%00000000,%00000000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 135
47BF: 1F181818	
47C3: 000000F8	        defb %00000000,%00000000,%00000000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 136
47C7: F8181818	
47CB: 181818F8	        defb %00011000,%00011000,%00011000,%11111000,%11111000,%00000000,%00000000,%00000000 ; char 137
47CF: F8000000	
47D3: 1818181F	        defb %00011000,%00011000,%00011000,%00011111,%00011111,%00000000,%00000000,%00000000 ; char 138
47D7: 1F000000	
47DB: 181818FF	        defb %00011000,%00011000,%00011000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 139
47DF: FF000000	
47E3: 1818181F	        defb %00011000,%00011000,%00011000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 140
47E7: 1F181818	
47EB: 000000FF	        defb %00000000,%00000000,%00000000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 141
47EF: FF181818	
47F3: 181818F8	        defb %00011000,%00011000,%00011000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 142
47F7: F8181818	
47FB: 000000FF	        defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 143
47FF: FF000000	
4803: 18181818	        defb %00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000 ; char 144
4807: 18181818	
480B: 03070E1C	        defb %00000011,%00000111,%00001110,%00011100,%00111000,%01110000,%11100000,%11000000 ; char 145
480F: 3870E0C0	
4813: C0E07038	        defb %11000000,%11100000,%01110000,%00111000,%00011100,%00001110,%00000111,%00000011 ; char 146
4817: 1C0E0703	
481B: C3E77E3C	        defb %11000011,%11100111,%01111110,%00111100,%00111100,%01111110,%11100111,%11000011 ; char 147
481F: 3C7EE7C3	
4823: 101010FF	        defb %00010000,%00010000,%00010000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 148
4827: 10101010	
482B: 0000001F	        defb %00000000,%00000000,%00000000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 149
482F: 10101010	
4833: 000000F0	        defb %00000000,%00000000,%00000000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 150
4837: 10101010	
483B: 101010F0	        defb %00010000,%00010000,%00010000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 151
483F: 00000000	
4843: 1010101F	        defb %00010000,%00010000,%00010000,%00011111,%00000000,%00000000,%00000000,%00000000 ; char 152
4847: 00000000	
484B: 101010FF	        defb %00010000,%00010000,%00010000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 153
484F: 00000000	
4853: 1010101F	        defb %00010000,%00010000,%00010000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 154
4857: 10101010	
485B: 000000FF	        defb %00000000,%00000000,%00000000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 155
485F: 10101010	
4863: 101010F0	        defb %00010000,%00010000,%00010000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 156
4867: 10101010	
486B: 000000FF	        defb %00000000,%00000000,%00000000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 157
486F: 00000000	
4873: 10101010	        defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000 ; char 158
4877: 10101010	
487B: 01020408	        defb %00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000 ; char 159
487F: 10204080	
4883: 80402010	        defb %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001 ; char 160
4887: 08040201	
488B: 81422418	        defb %10000001,%01000010,%00100100,%00011000,%00011000,%00100100,%01000010,%10000001 ; char 161
488F: 18244281	
4893: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 162
4897: 0000FFFF	
489B: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; char 163
489F: FFFFFFFF	
48A3: 0000FFFF	        defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 164
48A7: FFFFFFFF	
48AB: FFFF0000	        defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
48AF: 00000000	
48B3: FFFFFFFF	        defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 166
48B7: 00000000	
48BB: FFFFFFFF	        defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 167
48BF: FFFF0000	
48C3: C0C0C0C0	        defb %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000 ; char 168
48C7: C0C0C0C0	
48CB: F0F0F0F0	        defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; char 169
48CF: F0F0F0F0	
48D3: FCFCFCFC	        defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 170
48D7: FCFCFCFC	
48DB: 03030303	        defb %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011 ; char 171
48DF: 03030303	
48E3: 0F0F0F0F	        defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; char 172
48E7: 0F0F0F0F	
48EB: 3F3F3F3F	        defb %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111 ; char 173
48EF: 3F3F3F3F	
48F3: FF818181	        defb %11111111,%10000001,%10000001,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 174
48F7: 818181FF	
48FB: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; char 175
48FF: F0F0F0F0	
4903: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; char 176
4907: 0F0F0F0F	
490B: 0F0F0F0F	        defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; char 177
490F: 00000000	
4913: F0F0F0F0	        defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 178
4917: 00000000	
491B: F0F0F0F0	        defb %11110000,%11110000,%11110000,%11110000,%00001111,%00001111,%00001111,%00001111 ; char 179
491F: 0F0F0F0F	
4923: 0F0F0F0F	        defb %00001111,%00001111,%00001111,%00001111,%11110000,%11110000,%11110000,%11110000 ; char 180
4927: F0F0F0F0	
492B: 3C3C3C3C	        defb %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100 ; char 181
492F: 3C3C3C3C	
4933: C3C3C3C3	        defb %11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011 ; char 182
4937: C3C3C3C3	
493B: FFFF0000	        defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 183
493F: 0000FFFF	
4943: 0000FFFF	        defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 184
4947: FFFF0000	
494B: 3333CCCC	        defb %00110011,%00110011,%11001100,%11001100,%00110011,%00110011,%11001100,%11001100 ; char 185
494F: 3333CCCC	
4953: 55AA55AA	        defb %01010101,%10101010,%01010101,%10101010,%01010101,%10101010,%01010101,%10101010 ; char 186
4957: 55AA55AA	
495B: 663399CC	        defb %01100110,%00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100 ; char 187
495F: 663399CC	
4963: CC993366	        defb %11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011,%01100110 ; char 188
4967: CC993366	
496B: 3399CC66	        defb %00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100,%01100110 ; char 189
496F: 3399CC66	
4973: 66CC9933	        defb %01100110,%11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011 ; char 190
4977: 66CC9933	
497B: 10107C10	        defb %00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%01111100,%00000000 ; char 191 (±)
497F: 10007C00	
4983: 60180618	        defb %01100000,%00011000,%00000110,%00011000,%01100000,%00000000,%01111110,%00000000 ; char 192 (≥)
4987: 60007E00	
498B: 06186018	        defb %00000110,%00011000,%01100000,%00011000,%00000110,%00000000,%01111110,%00000000 ; char 193 (≤)
498F: 06007E00	
4993: 3E202020	        defb %00111110,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
4997: A0602000	
499B: 30484830	        defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (°)
499F: 00000000	
49A3: 60103040	        defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (²)
49A7: 70000000	
49AB: 00002A54	        defb %00000000,%00000000,%00101010,%01010100,%00000000,%01111110,%00000000,%00000000 ; char 197 
49AF: 007E0000	
49B3: 0054A800	        defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (≈)
49B7: 54A80000	
49BB: 80C0E0F0	        defb %10000000,%11000000,%11100000,%11110000,%11100000,%11000000,%10000000,%00000000 ; char 199
49BF: E0C08000	
49C3: FE7C3810	        defb %11111110,%01111100,%00111000,%00010000,%00000000,%00000000,%00000000,%00000000 ; char 200
49C7: 00000000	
49CB: 0103070F	        defb %00000001,%00000011,%00000111,%00001111,%00000111,%00000011,%00000001,%00000000 ; char 201
49CF: 07030100	
49D3: 00000000	        defb %00000000,%00000000,%00000000,%00000000,%00010000,%00111000,%01111100,%11111110 ; char 202
49D7: 10387CFE	
49DB: 10387C10	        defb %00010000,%00111000,%01111100,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 203 (up arrow)
49DF: 10101000	
49E3: 1E0E0E12	        defb %00011110,%00001110,%00001110,%00010010,%00100000,%01000000,%00000000,%00000000 ; char 204 (up right arrow)
49E7: 20400000	
49EB: 00080CFE	        defb %00000000,%00001000,%00001100,%11111110,%00001100,%00001000,%00000000,%00000000 ; char 205 (right arrow)
49EF: 0C080000	
49F3: 00402012	        defb %00000000,%01000000,%00100000,%00010010,%00001110,%00001110,%00011110,%00000000 ; char 206 (down right arrow)
49F7: 0E0E1E00	
49FB: 10101010	        defb %00010000,%00010000,%00010000,%00010000,%01111100,%00111000,%00010000,%00000000 ; char 207 (down arrow)
49FF: 7C381000	
4A03: 00040890	        defb %00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000,%00000000 ; char 208 (down left arrow)
4A07: E0E0F000	
4A0B: 002060FE	        defb %00000000,%00100000,%01100000,%11111110,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
4A0F: 60200000	
4A13: F0E0E090	        defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
4A17: 08040000	
4A1B: 3844F040	        defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
4A1F: F0443800	
4A23: 00027CA8	        defb %00000000,%00000010,%01111100,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
4A27: 28282800	
4A2B: 00000007	        defb %00000000,%00000000,%00000000,%00000111,%00001000,%00010000,%00010000,%00010000 ; char 213
4A2F: 08101010	
4A33: 000000C0	        defb %00000000,%00000000,%00000000,%11000000,%00100000,%00010000,%00010000,%00010000 ; char 214
4A37: 20101010	
4A3B: 101020C0	        defb %00010000,%00010000,%00100000,%11000000,%00000000,%00000000,%00000000,%00000000 ; char 215
4A3F: 00000000	
4A43: 10100807	        defb %00010000,%00010000,%00001000,%00000111,%00000000,%00000000,%00000000,%00000000 ; char 216
4A47: 00000000	
4A4B: 00000007	        defb %00000000,%00000000,%00000000,%00000111,%00001111,%00011100,%00011000,%00011000 ; char 217
4A4F: 0F1C1818	
4A53: 000000E0	        defb %00000000,%00000000,%00000000,%11100000,%11110000,%00111000,%00011000,%00011000 ; char 218
4A57: F0381818	
4A5B: 181838F0	        defb %00011000,%00011000,%00111000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
4A5F: E0000000	
4A63: 18181C0F	        defb %00011000,%00011000,%00011100,%00001111,%00000111,%00000000,%00000000,%00000000 ; char 220
4A67: 07000000	
4A6B: 003C4242	        defb %00000000,%00111100,%01000010,%01000010,%01000010,%01000010,%00111100,%00000000 ; char 221
4A6F: 42423C00	
4A73: 003C7E7E	        defb %00000000,%00111100,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000 ; char 222
4A77: 7E7E3C00	
4A7B: 00183C7E	        defb %00000000,%00011000,%00111100,%01111110,%01111110,%00111100,%00011000,%00000000 ; char 223
4A7F: 7E3C1800	
4A83: FFFEFCF8	        defb %11111111,%11111110,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000 ; char 224
4A87: F0E0C080	
4A8B: FF7F3F1F	        defb %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001 ; char 225
4A8F: 0F070301	
4A93: 0103070F	        defb %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%01111111,%11111111 ; char 226
4A97: 1F3F7FFF	
4A9B: 80C0E0F0	        defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110,%11111111 ; char 227
4A9F: F8FCFEFF	
4AA3: 0002066C	        defb %00000000,%00000010,%00000110,%01101100,%01111000,%01110000,%01100000,%00000000 ; char 228 (checkmark)
4AA7: 78706000	
4AAB: 00663C18	        defb %00000000,%01100110,%00111100,%00011000,%00111100,%01100110,%00000000,%00000000 ; char 229 (x)
4AAF: 3C660000	
4AB3: 38444444	        defb %00111000,%01000100,%01000100,%01000100,%00111000,%00010000,%00111000,%00010000 ; char 230 (female)
4AB7: 38103810	
4ABB: 07033D44	        defb %00000111,%00000011,%00111101,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 231 (male)
4ABF: 44443800	
4AC3: 78444242	        defb %01111000,%01000100,%01000010,%01000010,%01000010,%01000010,%01000010,%01111110 ; char 232 (new doc)
4AC7: 4242427E	
4ACB: 00F8FF81	        defb %00000000,%11111000,%11111111,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 233 (folder)
4ACF: 818181FF	
4AD3: 107CFE54	        defb %00010000,%01111100,%11111110,%01010100,%01010100,%01010100,%01010100,%01111100 ; char 234 (trash bin)
4AD7: 5454547C	
4ADB: FF818181	        defb %11111111,%10000001,%10000001,%10000001,%10111101,%10101101,%10101101,%11111111 ; char 235 (floppy disk)
4ADF: BDADADFF	
4AE3: 00EAAAAC	        defb %00000000,%11101010,%10101010,%10101100,%10101100,%10101010,%11101010,%00000000 ; char 236 (OK)
4AE7: ACAAEA00	
4AEB: 187EFF7E	        defb %00011000,%01111110,%11111111,%01111110,%01111110,%01100110,%01100110,%01100110 ; char 237 (home)
4AEF: 7E666666	
4AF3: 3C429191	        defb %00111100,%01000010,%10010001,%10010001,%10011101,%10000001,%01000010,%00111100 ; char 238 (clock)
4AF7: 9D81423C	
4AFB: 000205FD	        defb %00000000,%00000010,%00000101,%11111101,%10100101,%10100010,%00000000,%00000000 ; char 239 (key)
4AFF: A5A20000	
4B03: 080C3E4C	        defb %00001000,%00001100,%00111110,%01001100,%01001000,%01000010,%01000010,%00111100 ; char 240 (undo)
4B07: 4842423C	
4B0B: 00FFC3A5	        defb %00000000,%11111111,%11000011,%10100101,%10011001,%10000001,%11111111,%00000000 ; char 241 (letter)
4B0F: 9981FF00	
4B13: 3844447C	        defb %00111000,%01000100,%01000100,%01111100,%01111100,%01111100,%01111100,%00000000 ; char 242 (lock)
4B17: 7C7C7C00	
4B1B: 060909F8	        defb %00000110,%00001001,%00001001,%11111000,%11111000,%11111000,%11111000,%00000000 ; char 243 (unlock)
4B1F: F8F8F800	
4B23: FFFF81AD	        defb %11111111,%11111111,%10000001,%10101101,%10100101,%10100101,%10000001,%11111111 ; char 244 (calendar)
4B27: A5A581FF	
4B2B: 011A244A	        defb %00000001,%00011010,%00100100,%01001010,%01010010,%00100100,%01011000,%10000000 ; char 245 (diameter)
4B2F: 52245880	
4B33: 7E818181	        defb %01111110,%10000001,%10000001,%10000001,%10000001,%01110110,%00001100,%00000100 ; char 246 (baloon)
4B37: 81760C04	
4B3B: 0C0A0A0A	        defb %00001100,%00001010,%00001010,%00001010,%00001000,%00011000,%00111000,%00010000 ; char 247 (note)
4B3F: 08183810	
4B43: 1231F5F5	        defb %00010010,%00110001,%11110101,%11110101,%11110101,%11110101,%00110001,%00010010 ; char 248 (audio on)
4B47: F5F53112	
4B4B: 1030F0F0	        defb %00010000,%00110000,%11110000,%11110000,%11110000,%11110000,%00110000,%00010000 ; char 249 (audio off)
4B4F: F0F03010	
4B53: 40607078	        defb %01000000,%01100000,%01110000,%01111000,%01111100,%01111110,%01111000,%01001000 ; char 250 (pointer)
4B57: 7C7E7848	
4B5B: 3C4299A1	        defb %00111100,%01000010,%10011001,%10100001,%10100001,%10011001,%01000010,%00111100 ; char 251 (©)
4B5F: A199423C	
4B63: 30484040	        defb %00110000,%01001000,%01000000,%01000000,%11110000,%01000000,%01000010,%10111100 ; char 252 (£)
4B67: F04042BC	
4B6B: 3C427824	        defb %00111100,%01000010,%01111000,%00100100,%00100100,%00011110,%01000010,%00111100 ; char 253 (§)
4B6F: 241E423C	
4B73: 00001000	        defb %00000000,%00000000,%00010000,%00000000,%01111100,%00000000,%00010000,%00000000 ; char 254 (÷)
4B77: 7C001000	
4B7B: FFFFFFFF	        defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 255 (cursor)
4B7F: FFFFFFFF	
              	
              	; ------------------------------------------------------------------------------
              	; LM80C - LOGO CHARSET - R1.1
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. More info at
              	; www DOT leonardomiliani DOT com
              	; ------------------------------------------------------------------------------
              	; Code Revision:
              	; R1.0 - 20200124 - First revision: logo chars
              	; R1.1 - 20200229 - Adopted usual hexadecimal & binary prefixes
              	; ------------------------------------------------------------------------------
              	
4B83:         	LOGOFONT:   equ $
4B83: 00000000	            defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; 0
4B87: 00000000	
4B8B: FFFFFFFF	            defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; 1
4B8F: FFFFFFFF	
4B93: FFFFFFFF	            defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; 2
4B97: 00000000	
4B9B: 0F0F0F0F	            defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; 3
4B9F: 0F0F0F0F	
4BA3: 00000000	            defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; 4
4BA7: FFFFFFFF	
4BAB: F0F0F0F0	            defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; 5
4BAF: F0F0F0F0	
4BB3: 00000000	            defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; 6
4BB7: 0F0F0F0F	
4BBB: 00000000	            defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; 7
4BBF: F0F0F0F0	
4BC3: F0F0F0F0	            defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; 8
4BC7: 00000000	
4BCB: 0F0F0F0F	            defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; 9
4BCF: 00000000	
4BD3: 000000FC	            defb %00000000,%00000000,%00000000,%11111100,%11111111,%00000111,%00000011,%00000000 ; 10
4BD7: FF070300	
4BDB: 0000003F	            defb %00000000,%00000000,%00000000,%00111111,%11111111,%11100000,%11000000,%00000000 ; 11
4BDF: FFE0C000	
4BE3: 18181F19	            defb %00011000,%00011000,%00011111,%00011001,%00011001,%00011111,%00011000,%00011000 ; 12
4BE7: 191F1818	
4BEB: 1818F898	            defb %00011000,%00011000,%11111000,%10011000,%10011000,%11111000,%00011000,%00011000 ; 13
4BEF: 98F81818	
4BF3: 18181C1F	            defb %00011000,%00011000,%00011100,%00011111,%00001111,%00000000,%00000000,%00000000 ; 14
4BF7: 0F000000	
4BFB: 0000000F	            defb %00000000,%00000000,%00000000,%00001111,%00011111,%00011100,%00011000,%00011000 ; 15
4BFF: 1F1C1818	
4C03: 000000F0	            defb %00000000,%00000000,%00000000,%11110000,%11111000,%00111000,%00011000,%00011000 ; 16
4C07: F8381818	
4C0B: 181838F8	            defb %00011000,%00011000,%00111000,%11111000,%11110000,%00000000,%00000000,%00000000 ; 17
4C0F: F0000000	
4C13: 000000FF	            defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; 18
4C17: FF000000	
4C1B: 0F0F0F0F	            defb %00001111,%00001111,%00001111,%00001111,%11111111,%11111111,%11111111,%11111111 ; 19
4C1F: FFFFFFFF	
4C23: F0F0F0F0	            defb %11110000,%11110000,%11110000,%11110000,%11111111,%11111111,%11111111,%11111111 ; 20
4C27: FFFFFFFF	
4C2B: FFFFFFFF	            defb %11111111,%11111111,%11111111,%11111111,%11110000,%11110000,%11110000,%11110000 ; 21
4C2F: F0F0F0F0	
4C33: FFFFFFFF	            defb %11111111,%11111111,%11111111,%11111111,%00001111,%00001111,%00001111,%00001111 ; 22
4C37: 0F0F0F0F	
4C3B: 00307878	            defb %00000000,%00110000,%01111000,%01111000,%00110000,%00000000,%00000000,%00000000 ; 23
4C3F: 30000000	
              	            ; ------------------------------------------------------------------------------
              	; LM80C - FIRMWARE - R3.12
              	; ------------------------------------------------------------------------------
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. More info at
              	; www DOT leonardomiliani DOT com
              	; ------------------------------------------------------------------------------
              	; Coding/Editing/Compiling:
              	; Original init code for MC68B05 by Grant Searle
              	; Original SIO/CTC/PIO init code by Mario Blunk
              	; NASCOM BASIC originally modified by Gran Searle
              	; Code modified and adapted for LM80C by Leonardo Miliani
              	;
              	; Edited with Atom Editor
              	;
              	; Compiled with ZASM assembler 4.2.4
              	; https://k1.spdns.de/Develop/Projects/zasm-4.0/Distributions/
              	; ------------------------------------------------------------------------------
              	; Copyright notes:
              	; Parts of the code (c) Grant Searle - free for non commercial use
              	; Please include this advice and the note to the attribution of the original
              	; version to Grant Searle if you intend to redistribuite it
              	; http://searle.hostei.com/grant/index.html
              	; eMail: home.micros01@btinternet.com
              	;
              	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
              	; Parts of the code (c) Mario Blunk
              	; http://www.train­z.de
              	;
              	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
              	; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
              	; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
              	; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
              	; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
              	; the original ROM code (checksum A934H). PA
              	;
              	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
              	; The following code is intended to be used with LM80C Z80-based computer
              	; designed by Leonardo Miliani. Code and computer schematics are released under
              	; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
              	; kind of warranty: you can use them at your own risk.
              	; You are free to use them for any non-commercial use: you are only asked to
              	; maintain the copyright notices, include this advice and the note to the 
              	; attribution of the original version to Leonardo Miliani, if you intend to
              	; redistribuite them.
              	; https://www.leonardomiliani.com
              	; 
              	; Please support me by visiting the following links:
              	; Main project page: https://www.leonardomiliani.com
              	; Schematics and code: https://github.com/leomil72/LM80C
              	; Videos about the computer: https://www.youtube.com/user/leomil72/videos
              	; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
              	; ------------------------------------------------------------------------------
              	
              	
              	; ------------------------------------------------------------------------------
              	; this line instructs the assembler to prepare a file for a ROM target
              	; meaning that blank cells will be filled up with $FF
              	#target rom
              	
              	; this line instructs the assembler to compile taking account that code
              	; starts at $0000 (the address reached by Z80 upon reset)
0000:         	#code BOOT, $0000
              	
              	
              	; END OF ASSEMBLY SOURCE
              	#end
              	
              	;-------------------------------------------------------------------------------


; +++ segments +++

#CODE          = $0000 =     0,  size = $4C43 = 19523
#CODE BOOT     = $0000 =     0,  size = $0000 =     0

; +++ global symbols +++

ABPASS           = $228C =  8844          rom.asm:4638
ABS              = $2BC9 = 11209          rom.asm:6093
ACCSUM           = $1AC7 =  6855          rom.asm:3508 (unused)
ACPASS           = $228B =  8843          rom.asm:4637
ADD30            = $3A5E = 14942          rom.asm:8141
ADD301           = $3A6E = 14958          rom.asm:8152
ADDEXP           = $2B62 = 11106          rom.asm:6028
ADDIG            = $2D08 = 11528          rom.asm:6318
ADDNEWLINE       = $096C =  2412          rom.asm:1410
ADDPHL           = $28FE = 10494          rom.asm:5636
ALLFOL           = $255A =  9562          rom.asm:5086
ANTVLU           = $1DCC =  7628          rom.asm:3918
ARET             = $3059 = 12377          rom.asm:6758 (unused)
ARLDSV           = $2196 =  8598          rom.asm:4477
ARREND           = $81BF = 33215          rom.asm:2031
ARRLP            = $2425 =  9253          rom.asm:4877
ASC              = $252B =  9515          rom.asm:5056
ASCTFP           = $2CAB = 11435          rom.asm:6264
ASPCS            = $1D2D =  7469          rom.asm:3840
ATHOME           = $0600 =  1536          rom.asm:900
ATN              = $300D = 12301          rom.asm:6729
ATN1             = $302A = 12330          rom.asm:6741
ATNTAB           = $3034 = 12340          rom.asm:6746
ATOH             = $1B02 =  6914          rom.asm:3541
A_RTS_OFF        = $0165 =   357          rom.asm:198
A_RTS_ON         = $0173 =   371          rom.asm:209
BACKSPACE        = $0769 =  1897          rom.asm:1121
BADINP           = $1D50 =  7504          rom.asm:3852
BAKSTK           = $14B6 =  5302          rom.asm:2613
BAKTMP           = $250B =  9483          rom.asm:5034
BASTXT           = $8133 = 33075          rom.asm:2007
BCDEFP           = $2BF0 = 11248          rom.asm:6122
BEEPOFF          = $052A =  1322          rom.asm:767
BFREE            = $0F72 =  3954          rom.asm:2200
BIN              = $3AB0 = 15024          rom.asm:8201
BIN2             = $3AB6 = 15030          rom.asm:8203 (unused)
BINERR           = $3B0D = 15117          rom.asm:8262
BINIT            = $3AEC = 15084          rom.asm:8237
BINTFP           = $3AE2 = 15074          rom.asm:8233
BITOUT           = $3ACA = 15050          rom.asm:8215
BITOUT2          = $3ACE = 15054          rom.asm:8217
BITS6            = $3813 = 14355          rom.asm:7823
BITS7            = $381D = 14365          rom.asm:7828
BITS8            = $3828 = 14376          rom.asm:7833
BKGNDCLR         = $81EE = 33262          rom.asm:2058
BKSP             = $0008 =     8          rom.asm:1956
BN               = $0028 =    40          rom.asm:2109
BNMSG            = $1342 =  4930          rom.asm:2521
BNORM            = $295E = 10590          rom.asm:5695
BNPTR            = $13BE =  5054          rom.asm:2548 (unused)
BNRMLP           = $2961 = 10593          rom.asm:5698
BOOT             = $0000 =     0  BOOT    rom.asm:9089 (unused)
BOOT_end         = $0000 =     0  BOOT    rom.asm:9089 (unused)
BOOT_size        = $0000 =     0  BOOT    rom.asm:9089 (unused)
BPS              = $81F8 = 33272          rom.asm:7644
BRK              = $1A75 =  6773          rom.asm:3465
BRKFLG           = $80A9 = 32937          rom.asm:2001
BRKLIN           = $81B3 = 33203          rom.asm:2025
BRKMSG           = $14B0 =  5296          rom.asm:2611
BRKRET           = $0F69 =  3945          rom.asm:2196
BS               = $0010 =    16          rom.asm:2097
BSERR            = $21C9 =  8649          rom.asm:4508
BSMSG            = $1271 =  4721          rom.asm:2509
BSPTR            = $13A6 =  5030          rom.asm:2536 (unused)
BUFFER           = $8136 = 33078          rom.asm:2008
BYT2ASC          = $3A55 = 14933          rom.asm:8136
BYTSFT           = $2A96 = 10902          rom.asm:5906
CFEVAL           = $212C =  8492          rom.asm:4408
CH3_TIMER        = $0237 =   567          rom.asm:349
CHABFREMPTY      = $01C8 =   456          rom.asm:263
CHAR2VID         = $06AC =  1708          rom.asm:1019
CHARINTOBFR      = $0136 =   310          rom.asm:167
CHARTY           = $20DA =  8410          rom.asm:4364
CHASNDDTN        = $8223 = 33315          rom.asm:2069
CHBSNDDTN        = $8225 = 33317          rom.asm:2070
CHCKYPOS         = $078F =  1935          rom.asm:1140
CHCKYPOS2        = $07FA =  2042          rom.asm:1200
CHCSNDDTN        = $8227 = 33319          rom.asm:2071
CHECKALT         = $0C80 =  3200          rom.asm:1718
CHECKCTRL        = $0C8E =  3214          rom.asm:1724
CHECKKBD         = $0C9C =  3228          rom.asm:1730
CHECKWARM        = $02BB =   699          rom.asm:417
CHEKFN           = $2323 =  8995          rom.asm:4730
CHKALT           = $0D14 =  3348          rom.asm:1790
CHKBIN           = $3AFF = 15103          rom.asm:8252
CHKBKSP          = $06D6 =  1750          rom.asm:1039
CHKCLR           = $31DB = 12763          rom.asm:6994
CHKCR            = $06CD =  1741          rom.asm:1035
CHKCRSDWN        = $06FA =  1786          rom.asm:1055
CHKCRSLFT        = $06DF =  1759          rom.asm:1043
CHKCRSR          = $0246 =   582          rom.asm:359
CHKCRSRGT        = $06F1 =  1777          rom.asm:1051
CHKCRSUP         = $06E8 =  1768          rom.asm:1047
CHKCS            = $06C4 =  1732          rom.asm:1031
CHKCTRL          = $0D0B =  3339          rom.asm:1786
CHKEY1           = $3A0B = 14859          rom.asm:8094
CHKEY2           = $3A10 = 14864          rom.asm:8095
CHKEY3           = $3A13 = 14867          rom.asm:8096
CHKEY4           = $3A19 = 14873          rom.asm:8097
CHKEY5           = $3A1C = 14876          rom.asm:8098
CHKFNK           = $0D47 =  3399          rom.asm:1815
CHKG2M           = $31E5 = 12773          rom.asm:7002
CHKINK           = $28DD = 10461          rom.asm:5615
CHKLF            = $0703 =  1795          rom.asm:1059
CHKLN            = $0CF7 =  3319          rom.asm:1777
CHKLTR           = $1AD4 =  6868          rom.asm:3517
CHKSCAR          = $3124 = 12580          rom.asm:6890
CHKSNDCH         = $0C09 =  3081          rom.asm:1646
CHKSTK           = $14EA =  5354          rom.asm:2650
CHKSUM           = $80A6 = 32934          rom.asm:1999
CHKSYN           = $180F =  6159          rom.asm:3120
CHKTYP           = $1EAC =  7852          rom.asm:4033
CHKYPOS          = $07B6 =  1974          rom.asm:1161
CHR              = $253C =  9532          rom.asm:5068
CHR4VID          = $81EC = 33260          rom.asm:2056
CHRPNT           = $81F1 = 33265          rom.asm:7017
CHRST68          = $3B83 = 15235          rom.asm:8449
CHRST88          = $4383 = 17283          rom.asm:8733
CIRCLE           = $34B9 = 13497          rom.asm:7394
CKBPS            = $37C6 = 14278          rom.asm:7783
CKCOL            = $32C1 = 12993          rom.asm:7128
CKINCHAR         = $0224 =   548          rom.asm:330
CKMAGN           = $30D7 = 12503          rom.asm:6843
CLEAR            = $1B27 =  6951          rom.asm:3565
CLEARVIDBUF      = $05F3 =  1523          rom.asm:893
CLOTST           = $185B =  6235          rom.asm:3167
CLREG            = $1679 =  5753          rom.asm:2893
CLREX2           = $319E = 12702          rom.asm:6950
CLRG1            = $318C = 12684          rom.asm:6942
CLRG2            = $3195 = 12693          rom.asm:6946
CLRG2PTNTBL      = $0593 =  1427          rom.asm:831
CLRMC            = $3185 = 12677          rom.asm:6938
CLRPRM           = $36A0 = 13984          rom.asm:7617
CLRPSGREGS       = $0BA7 =  2983          rom.asm:1591
CLRPTR           = $1654 =  5716          rom.asm:2873
CLRTABLE         = $0553 =  1363          rom.asm:798
CLRTXT           = $3182 = 12674          rom.asm:6937
CLRVDBF          = $3688 = 13960          rom.asm:7597
CLR_RAM_REG      = $09ED =  2541          rom.asm:1447
CLS              = $305C = 12380          rom.asm:6763
CLSQT            = $39D2 = 14802          rom.asm:8060
CLSQT1           = $39E2 = 14818          rom.asm:8068
CMP16            = $3B35 = 15157          rom.asm:8323
CMPFP            = $2C39 = 11321          rom.asm:6180
CMPLG1           = $2040 =  8256          rom.asm:4270
CMPLOG           = $203E =  8254          rom.asm:4269
CMPNUM           = $2C1F = 11295          rom.asm:6163
CMPRES           = $2082 =  8322          rom.asm:4318
CMPSTR           = $206A =  8298          rom.asm:4298
CMP_A            = $28C4 = 10436          rom.asm:5602
CN               = $0020 =    32          rom.asm:2105
CNMSG            = $1302 =  4866          rom.asm:2517
CNPTR            = $13B6 =  5046          rom.asm:2544 (unused)
CNTCHKSND        = $0C40 =  3136          rom.asm:1679
CNTCKCL          = $3151 = 12625          rom.asm:6916
CNTCL1           = $357B = 13691          rom.asm:7481
CNTCL2           = $359F = 13727          rom.asm:7494
CNTCL3           = $35C3 = 13763          rom.asm:7507
CNTCL4           = $35E9 = 13801          rom.asm:7521
CNTCL5           = $360B = 13835          rom.asm:7533
CNTCL6           = $362F = 13871          rom.asm:7546
CNTCL7           = $3653 = 13907          rom.asm:7559
CNTDRW           = $345F = 13407          rom.asm:7348
CNTEND           = $1CF5 =  7413          rom.asm:3810
CNTFNK           = $0DA2 =  3490          rom.asm:1865
CNTGPT2          = $3237 = 12855          rom.asm:7049
CNTKBCK          = $0D41 =  3393          rom.asm:1813
CNTLGC           = $1FFF =  8191          rom.asm:4224
CNTLTK           = $3998 = 14744          rom.asm:8029
CNTNULL          = $08FC =  2300          rom.asm:1353
CNTNULL2         = $0926 =  2342          rom.asm:1375
CNTPLOT          = $332E = 13102          rom.asm:7185
CNTRX2           = $3746 = 14150          rom.asm:7724
CNTRXCHA         = $0120 =   288          rom.asm:151
CNTSER           = $3712 = 14098          rom.asm:7695
CNTSER2          = $3751 = 14161          rom.asm:7731
CNTSER3          = $3763 = 14179          rom.asm:7740
CNTTXA           = $0201 =   513          rom.asm:302
CNTVALY          = $3683 = 13955          rom.asm:7590
CNTWTSP          = $1972 =  6514          rom.asm:3301
CNVNUM           = $2CB7 = 11447          rom.asm:6270
COLD             = $0EC8 =  3784          rom.asm:2115
COLDSTART        = $02B3 =   691          rom.asm:414
COLOR            = $3134 = 12596          rom.asm:6905
COMMAN           = $80A3 = 32931          rom.asm:1996
COMPL            = $29BE = 10686          rom.asm:5769
CONCAT           = $24A0 =  9376          rom.asm:4967
CONEXP           = $2CE7 = 11495          rom.asm:6294
CONPOS           = $295B = 10587          rom.asm:5693
CONT             = $1AAE =  6830          rom.asm:3495
CONTAD           = $81B9 = 33209          rom.asm:2028
CONTCRSLFT       = $07A0 =  1952          rom.asm:1148
CONTCRSRGT       = $080D =  2061          rom.asm:1210
CONTROLKEYS      = $822D = 33325          rom.asm:2076
CONT_POS_CURS    = $068C =  1676          rom.asm:996
CONVAR           = $1F97 =  8087          rom.asm:4157
CORW             = $02A7 =   679          rom.asm:409
COS              = $2F91 = 12177          rom.asm:6677
COUNTER          = $02EF =   751          rom.asm:447
CPDEHL           = $1809 =  6153          rom.asm:3113
CPKEY            = $392F = 14639          rom.asm:7974
CPKEY1           = $394E = 14670          rom.asm:7991
CPKEY2           = $393F = 14655          rom.asm:7981
CPKEY3           = $3946 = 14662          rom.asm:7984
CPKYEND          = $3956 = 14678          rom.asm:7996
CPYLIT           = $174E =  5966          rom.asm:3012
CR               = $000D =    13          rom.asm:1959
CRARLP           = $21E9 =  8681          rom.asm:4528
CREARY           = $21CE =  8654          rom.asm:4511
CRESTR           = $1C2E =  7214          rom.asm:3708
CRGRETURN        = $08CE =  2254          rom.asm:1329
CRNCLP           = $16AF =  5807          rom.asm:2920
CRSDN            = $001F =    31          rom.asm:1973
CRSLFT           = $001C =    28          rom.asm:1970
CRSRGT           = $001D =    29          rom.asm:1971
CRSR_STATE       = $81E9 = 33257          rom.asm:2053
CRSUP            = $001E =    30          rom.asm:1972
CRTMST           = $235C =  9052          rom.asm:4763
CRTST            = $2368 =  9064          rom.asm:4774
CRTSTE           = $237E =  9086          rom.asm:4788
CRUNCH           = $16A6 =  5798          rom.asm:2916
CS               = $000C =    12          rom.asm:1958
CSTART           = $0ED5 =  3797          rom.asm:2121
CTC0IV           = $81D2 = 33234          rom.asm:2039
CTC1IV           = $81D5 = 33237          rom.asm:2040
CTC2IV           = $81D8 = 33240          rom.asm:2041
CTC3IV           = $81DB = 33243          rom.asm:2042
CTCCONF          = $032E =   814          rom.asm:505
CTC_CFG          = $3899 = 14489          rom.asm:7889
CTC_CH0          = $0010 =    16          rom.asm:36
CTC_CH1          = $0011 =    17          rom.asm:37
CTC_CH2          = $0012 =    18          rom.asm:38
CTC_CH3          = $0013 =    19          rom.asm:39
CTLOFG           = $80A5 = 32933          rom.asm:1998
CTRLC            = $0003 =     3          rom.asm:1954
CTRLG            = $0007 =     7          rom.asm:1955
CTRLO            = $000F =    15          rom.asm:1960
CTRLQ            = $0011 =    17          rom.asm:1961
CTRLR            = $0012 =    18          rom.asm:1962
CTRLS            = $0013 =    19          rom.asm:1963
CTRLU            = $0015 =    21          rom.asm:1964
CTSNDC           = $279B = 10139          rom.asm:5439
CUROPR           = $81AA = 33194          rom.asm:2019
CURPOS           = $8190 = 33168          rom.asm:2010
CURSORDOWN       = $0816 =  2070          rom.asm:1218
CURSORLEFT       = $077C =  1916          rom.asm:1131
CURSORRIGHT      = $07E1 =  2017          rom.asm:1187
CURSORUP         = $07C8 =  1992          rom.asm:1172
CURSOR_OFF       = $084C =  2124          rom.asm:1251
CURSOR_ON        = $0836 =  2102          rom.asm:1238
CUR_POS          = $81EF = 33263          rom.asm:1326
DATA             = $1BD5 =  7125          rom.asm:3660
DATABT           = $81FA = 33274          rom.asm:7645
DATFLG           = $8193 = 33171          rom.asm:2013
DATLIN           = $81AE = 33198          rom.asm:2021
DATSNR           = $1527 =  5415          rom.asm:2692
DC               = $8201 = 33281          rom.asm:7393
DCBCDE           = $2C70 = 11376          rom.asm:6223
DD               = $0012 =    18          rom.asm:2098
DDERR            = $1536 =  5430          rom.asm:2700
DDMSG            = $127F =  4735          rom.asm:2510
DDPTR            = $13A8 =  5032          rom.asm:2537 (unused)
DECLN1           = $3921 = 14625          rom.asm:7966
DEC_D            = $04EA =  1258          rom.asm:726
DEC_E            = $02ED =   749          rom.asm:446
DEEK             = $3078 = 12408          rom.asm:6780
DEF              = $22A0 =  8864          rom.asm:4651
DEFFNKS          = $141D =  5149          rom.asm:2594
DEFSER           = $37AD = 14253          rom.asm:7770
DEFSIZ           = $21F1 =  8689          rom.asm:4532
DEINT            = $1AE8 =  6888          rom.asm:3528
DEL              = $007F =   127          rom.asm:1968
DELCHR           = $177E =  6014          rom.asm:3042
DEPINT           = $1AE2 =  6882          rom.asm:3526
DETHL4           = $2BFF = 11263          rom.asm:6134
DETHLB           = $2C01 = 11265          rom.asm:6135
DIGTXT           = $2DB1 = 11697          rom.asm:6416
DIM              = $20AC =  8364          rom.asm:4344
DIMRET           = $20A3 =  8355          rom.asm:4339
DINPOS           = $183E =  6206          rom.asm:3147
DINT             = $2A9B = 10907          rom.asm:5914
DIRMOD           = $38AD = 14509          rom.asm:7899
DIR_PAU          = $30A3 = 12451          rom.asm:6809 (unused)
DIV              = $2AF8 = 11000          rom.asm:5955
DIV1             = $806B = 32875          rom.asm:1987
DIV10            = $2AEC = 10988          rom.asm:5950
DIV2             = $806F = 32879          rom.asm:1988
DIV3             = $8073 = 32883          rom.asm:1989
DIV4             = $8076 = 32886          rom.asm:1990
DIVLP            = $2B1F = 11039          rom.asm:5979
DIVSUP           = $806A = 32874          rom.asm:1986
DIV_16_8         = $3B74 = 15220          rom.asm:8415
DIV_16_8LP       = $3B77 = 15223          rom.asm:8417
DIV_8_8          = $3B64 = 15204          rom.asm:8392
DIV_8_8LOOP      = $3B68 = 15208          rom.asm:8395
DLSZ             = $353D = 13629          rom.asm:7454
DOAGN            = $1692 =  5778          rom.asm:2906
DOCOM            = $1CFA =  7418          rom.asm:3814
DODEL            = $175E =  5982          rom.asm:3026
DOEBIT           = $2DF1 = 11761          rom.asm:6459
DOFN             = $22CD =  8909          rom.asm:4679
DOKE             = $3083 = 12419          rom.asm:6788
DOSPC            = $1D28 =  7464          rom.asm:3837
DOTAB            = $1D13 =  7443          rom.asm:3826
DPOINT           = $2CE3 = 11491          rom.asm:6292
DRAW             = $3392 = 13202          rom.asm:7275
DRWCRL           = $3559 = 13657          rom.asm:7469
DTSTR            = $236C =  9068          rom.asm:4777
DVBCDE           = $2AFA = 11002          rom.asm:5957
DX               = $8203 = 33283          rom.asm:7273
DXGR             = $348F = 13455          rom.asm:7365
DY               = $8205 = 33285          rom.asm:7274
DZ               = $0014 =    20          rom.asm:2099
DZERR            = $1530 =  5424          rom.asm:2696
DZMSG            = $1294 =  4756          rom.asm:2511
DZPTR            = $13AA =  5034          rom.asm:2538 (unused)
E2               = $81FD = 33277          rom.asm:7270
ECHDEL           = $1772 =  6002          rom.asm:3035
ECHO_CHAR        = $02C5 =   709          rom.asm:423
EDIGIT           = $2D2A = 11562          rom.asm:6341
EMPTSNDBFR       = $0BA3 =  2979          rom.asm:1588
EMPTVRM          = $09E4 =  2532          rom.asm:1439
EMPTYCHABFR      = $01BA =   442          rom.asm:256
EMPTYG2          = $0581 =  1409          rom.asm:823
EMPTYMC          = $05B2 =  1458          rom.asm:849
EMPTYVIDBUF      = $0558 =  1368          rom.asm:802
EMPTY_VRAM       = $09D9 =  2521          rom.asm:1432
ENDBUF           = $1755 =  5973          rom.asm:3018
ENDCON           = $2CF6 = 11510          rom.asm:6304
ENDCRL           = $3555 = 13653          rom.asm:7465
ENDCTRLCK        = $0CE2 =  3298          rom.asm:1766
ENDDIM           = $2250 =  8784          rom.asm:4601
ENDDRAW          = $34B5 = 13493          rom.asm:7378
ENDINK           = $28EF = 10479          rom.asm:5626
ENDINK2          = $28F8 = 10488          rom.asm:5633 (unused)
ENDINP           = $1CE1 =  7393          rom.asm:3801
ENDNAM           = $20CE =  8398          rom.asm:4360
ENDPRG           = $1A84 =  6788          rom.asm:3475
ENDTMR           = $2265 =  8805          rom.asm:4614
ENDTXT           = $81F3 = 33267          rom.asm:1328
ENDVDPSET        = $0487 =  1159          rom.asm:671
ENFMEM           = $14F3 =  5363          rom.asm:2656
ER               = $81FB = 33275          rom.asm:7269
ER2              = $3439 = 13369          rom.asm:7335
ERASECLRTBL      = $0506 =  1286          rom.asm:743
ERRIN            = $1565 =  5477          rom.asm:2724
ERRINT           = $1AA8 =  6824          rom.asm:3491
ERRLIN           = $81B7 = 33207          rom.asm:2027
ERRMSG           = $149F =  5279          rom.asm:2607
ERROR            = $1541 =  5441          rom.asm:2708
ERRORS           = $11FC =  4604          rom.asm:2500 (unused)
ERRTBL           = $1396 =  5014          rom.asm:2527
ESC              = $001B =    27          rom.asm:1966
EVAL             = $1EB9 =  7865          rom.asm:4041
EVAL1            = $1EBC =  7868          rom.asm:4043
EVAL2            = $1EC5 =  7877          rom.asm:4047
EVAL3            = $1EC8 =  7880          rom.asm:4048
EVLPAR           = $1F7E =  8062          rom.asm:4143
EVNOT            = $208C =  8332          rom.asm:4326
EXCUTE           = $1A12 =  6674          rom.asm:3395
EXG2MD           = $0449 =  1097          rom.asm:639
EXITCHAR2VID     = $0737 =  1847          rom.asm:1085
EXITCURSORDOWN   = $0833 =  2099          rom.asm:1232
EXITCURSORLEFT   = $07A3 =  1955          rom.asm:1149
EXITCURSORRGHT   = $0813 =  2067          rom.asm:1212
EXITCURSORUP     = $07DF =  2015          rom.asm:1182
EXITCURSOR_ON    = $084A =  2122          rom.asm:1247
EXITGM           = $1507 =  5383          rom.asm:2672
EXITSER          = $386E = 14446          rom.asm:7872 (unused)
EXMUL16          = $3B58 = 15192          rom.asm:8363
EXP              = $2E8B = 11915          rom.asm:6546
EXPLP            = $2CD5 = 11477          rom.asm:6284
EXPTAB           = $2ECB = 11979          rom.asm:6574
EXPTEN           = $2E03 = 11779          rom.asm:6469
EXTIG            = $1E28 =  7720          rom.asm:3966
EXTXA            = $0215 =   533          rom.asm:313
FANDT            = $1E51 =  7761          rom.asm:3984
FC               = $0008 =     8          rom.asm:2093
FCERR            = $1AFD =  6909          rom.asm:3538
FCMSG            = $1235 =  4661          rom.asm:2505
FCPTR            = $139E =  5022          rom.asm:2532 (unused)
FDTLP            = $1E38 =  7736          rom.asm:3968
FINDEL           = $222C =  8748          rom.asm:4573
FINDKEY          = $0CF5 =  3317          rom.asm:1776
FLASHCURSOR      = $0745 =  1861          rom.asm:1098
FLGDIF           = $2BAF = 11183          rom.asm:6076
FLGREL           = $2BB6 = 11190          rom.asm:6082
FNARG            = $81C5 = 33221          rom.asm:2034
FNCTAB           = $0FBB =  4027          rom.asm:2217
FNDARY           = $219C =  8604          rom.asm:4481
FNDBPS           = $37DF = 14303          rom.asm:7793
FNDELP           = $2231 =  8753          rom.asm:4578
FNDEND           = $1627 =  5671          rom.asm:2836
FNDNUM           = $262F =  9775          rom.asm:5218
FNDTOK           = $1934 =  6452          rom.asm:3266
FNDVAR           = $2113 =  8467          rom.asm:4392
FNDWRD           = $16D9 =  5849          rom.asm:2940
FNKEYS           = $80B3 = 32947          rom.asm:2006
FNKEYSORD        = $0DC0 =  3520          rom.asm:1882
FNOFST           = $1FA8 =  8104          rom.asm:4167
FNRGNM           = $81C3 = 33219          rom.asm:2033
FNTHR            = $2121 =  8481          rom.asm:4400
FNVAL            = $1FD4 =  8148          rom.asm:4191
FOPRND           = $1EF1 =  7921          rom.asm:4069
FOR              = $1979 =  6521          rom.asm:3306
FORFLG           = $81B0 = 33200          rom.asm:2022
FORFND           = $19A9 =  6569          rom.asm:3334
FORSLP           = $198D =  6541          rom.asm:3315
FPADD            = $290D = 10509          rom.asm:5644
FPBCDE           = $2BE5 = 11237          rom.asm:6113
FPEXP            = $81CC = 33228          rom.asm:2036
FPINT            = $2C4C = 11340          rom.asm:6200
FPMULT           = $2A48 = 10824          rom.asm:5855
FPREG            = $81C9 = 33225          rom.asm:2035
FPROND           = $29A5 = 10661          rom.asm:5745
FPSINT           = $1ADC =  6876          rom.asm:3524
FPTHL            = $2BFC = 11260          rom.asm:6133
FRE              = $226A =  8810          rom.asm:4620
FRENUM           = $2286 =  8838          rom.asm:4632
FRGNDCLR         = $81ED = 33261          rom.asm:2057
FRMEVL           = $1F9A =  8090          rom.asm:4158
FWVER            = $00E0 =   224          rom.asm:134 (unused)
G1MD             = $03C8 =   968          rom.asm:578
G2MD             = $0404 =  1028          rom.asm:609
GARBGE           = $23ED =  9197          rom.asm:4850
GARBLP           = $23F0 =  9200          rom.asm:4851
GETCHR           = $1A32 =  6706          rom.asm:3418
GETCMD           = $1594 =  5524          rom.asm:2748
GETHEX           = $3A8B = 14987          rom.asm:8174
GETINP           = $305A = 12378          rom.asm:6760
GETINT           = $2632 =  9778          rom.asm:5219
GETLEN           = $2520 =  9504          rom.asm:5048
GETLIN           = $178F =  6031          rom.asm:3050
GETLN            = $1B03 =  6915          rom.asm:3542
GETNUM           = $1EA7 =  7847          rom.asm:4030
GETNXT           = $16F4 =  5876          rom.asm:2955
GETSTR           = $24EA =  9450          rom.asm:5014
GETVAR           = $20B1 =  8369          rom.asm:4347
GM               = $002A =    42          rom.asm:2110
GMERR            = $36B9 = 14009          rom.asm:7632
GMMSG            = $134D =  4941          rom.asm:2522
GMNCR            = $17E6 =  6118          rom.asm:3092
GMPRT            = $13C0 =  5056          rom.asm:2549 (unused)
GNXARY           = $2424 =  9252          rom.asm:4876
GOFUNC           = $1FDC =  8156          rom.asm:4195
GOSUB            = $1B81 =  7041          rom.asm:3611
GOTO             = $1B92 =  7058          rom.asm:3623
GPCPCH1          = $32A4 = 12964          rom.asm:7112
GPCPCHR          = $3299 = 12953          rom.asm:7107 (unused)
GPNT             = $3255 = 12885          rom.asm:7062
GPNTCO1          = $327F = 12927          rom.asm:7089
GPNTCOL          = $3275 = 12917          rom.asm:7085 (unused)
GPRINT           = $31EE = 12782          rom.asm:7018
GRBARY           = $2444 =  9284          rom.asm:4895
GRBDON           = $23C5 =  9157          rom.asm:4825
GRBLP            = $23FE =  9214          rom.asm:4857
GSTRCU           = $24ED =  9453          rom.asm:5015
GSTRDE           = $24F1 =  9457          rom.asm:5017
GSTRHL           = $24F0 =  9456          rom.asm:5016
GTFLNM           = $252F =  9519          rom.asm:5058 (unused)
GTFNAM           = $20B6 =  8374          rom.asm:4350
GTLNLP           = $1B06 =  6918          rom.asm:3543
GTSIXD           = $2D7B = 11643          rom.asm:6385
GTVLUS           = $1DA4 =  7588          rom.asm:3896
GX               = $81F3 = 33267          rom.asm:7014
GY               = $81F5 = 33269          rom.asm:7015
HALF             = $2E22 = 11810          rom.asm:6490
HALFPI           = $2FDB = 12251          rom.asm:6708
HELLOWRLD        = $02DF =   735          rom.asm:438
HELP             = $38B9 = 14521          rom.asm:7910
HEX              = $3A1F = 14879          rom.asm:8102
HEX1             = $3A37 = 14903          rom.asm:8115
HEX2             = $3A39 = 14905          rom.asm:8117
HEX3             = $3A46 = 14918          rom.asm:8125
HEX4             = $3A48 = 14920          rom.asm:8127
HEXIT            = $3AA2 = 15010          rom.asm:8189
HEXLP            = $3A7E = 14974          rom.asm:8164
HEXLP1           = $3A83 = 14979          rom.asm:8166
HEXTFP           = $3A72 = 14962          rom.asm:8159
HL2XY            = $069B =  1691          rom.asm:1007
HLPERR           = $38CF = 14543          rom.asm:7921
HLPLN            = $80B1 = 32945          rom.asm:2005
HOME             = $0019 =    25          rom.asm:1965
HP               = $0030 =    48          rom.asm:2113
HPMSG            = $138C =  5004          rom.asm:2525
HPPTR            = $13C6 =  5062          rom.asm:2552 (unused)
HX               = $0026 =    38          rom.asm:2108
HXERR            = $3AAB = 15019          rom.asm:8197
HXMSG            = $1337 =  4919          rom.asm:2520
HXPTR            = $13BC =  5052          rom.asm:2547 (unused)
ID               = $0016 =    22          rom.asm:2100
IDMSG            = $12A5 =  4773          rom.asm:2512
IDPTR            = $13AC =  5036          rom.asm:2539 (unused)
IDTEST           = $2315 =  8981          rom.asm:4720
IF               = $1C64 =  7268          rom.asm:3741
IFGO             = $1C72 =  7282          rom.asm:3748
IFJMP            = $1A19 =  6681          rom.asm:3398
INCHL            = $2BFA = 11258          rom.asm:6130
INCLEN           = $183A =  6202          rom.asm:3145
INCTMR3          = $0240 =   576          rom.asm:355
INDFND           = $14D0 =  5328          rom.asm:2632
INEWLN           = $15EF =  5615          rom.asm:2796
INIT             = $0EDC =  3804          rom.asm:2125
INITAB           = $13C8 =  5064          rom.asm:2556
INITBE           = $149F =  5279          rom.asm:2603
INITST           = $3B20 = 15136          rom.asm:8275
INIT_HW          = $025A =   602          rom.asm:376
INKEY            = $28B9 = 10425          rom.asm:5597
INKEY2           = $28D3 = 10451          rom.asm:5610
INMSG            = $14A6 =  5286          rom.asm:2608
INP              = $25EF =  9711          rom.asm:5187
INPBIN           = $1DF6 =  7670          rom.asm:3940
INPBRK           = $1A81 =  6785          rom.asm:3473
INPORT           = $80A0 = 32928          rom.asm:1994
INPSUB           = $809F = 32927          rom.asm:1993
INPUT            = $1D61 =  7521          rom.asm:3860
INRNG            = $2D84 = 11652          rom.asm:6390
INT              = $2C77 = 11383          rom.asm:6231
INTVAR           = $1663 =  5731          rom.asm:2884
INVSGN           = $2BCD = 11213          rom.asm:6095
ITMSEP           = $1DE7 =  7655          rom.asm:3931
JSTZER           = $2E0D = 11789          rom.asm:6475
KBDNPT           = $8229 = 33321          rom.asm:2072
KBMAP            = $0DC8 =  3528          rom.asm:1885
KBMAP_ALT        = $0E48 =  3656          rom.asm:1905
KBMAP_CTRL       = $0E88 =  3720          rom.asm:1915
KBMAP_SFT        = $0E08 =  3592          rom.asm:1895
KBTMP            = $822A = 33322          rom.asm:2073
KEY              = $38D4 = 14548          rom.asm:7926
KEYBOARD         = $0C60 =  3168          rom.asm:1702
KEYCH            = $38F1 = 14577          rom.asm:7942
KILFOR           = $1E97 =  7831          rom.asm:4021
KILIN            = $1789 =  6025          rom.asm:3047
LASTKEYPRSD      = $822C = 33324          rom.asm:2075
LCRFLG           = $8191 = 33169          rom.asm:2011
LDCLRTBEX2       = $047E =  1150          rom.asm:664
LDCLRTBMD1       = $03FB =  1019          rom.asm:602
LDCOLSTOEMPTY    = $0572 =  1394          rom.asm:813
LDFNKEYCHR       = $0D8E =  3470          rom.asm:1855
LDG1             = $1514 =  5396          rom.asm:2678
LDG1ND           = $1525 =  5413          rom.asm:2688
LDKEY            = $3983 = 14723          rom.asm:8020
LDREGVLS         = $0A0A =  2570          rom.asm:1466
LEDLIGHT         = $02E9 =   745          rom.asm:444
LEFT             = $254C =  9548          rom.asm:5076
LEN              = $251C =  9500          rom.asm:5046
LET              = $1BEC =  7148          rom.asm:3676
LETNUM           = $1C3F =  7231          rom.asm:3718
LETSTR           = $1C07 =  7175          rom.asm:3689
LF               = $000A =    10          rom.asm:1957
LFRGNM           = $25E5 =  9701          rom.asm:5178
LINEAT           = $80AF = 32943          rom.asm:2004
LINEIN           = $2D36 = 11574          rom.asm:6351
LINFND           = $15D8 =  5592          rom.asm:2782
LIST             = $186E =  6254          rom.asm:3179
LISTLP           = $18F1 =  6385          rom.asm:3228
LM80CLOGO        = $0A5D =  2653          rom.asm:1551
LOADCHARSET      = $0A14 =  2580          rom.asm:1475
LOADCLR          = $31A5 = 12709          rom.asm:6953
LOADFP           = $2BF3 = 11251          rom.asm:6123
LOADLOGOCHRS     = $0532 =  1330          rom.asm:773
LOADMAP          = $0D1B =  3355          rom.asm:1793
LOADNEXTCOL      = $087E =  2174          rom.asm:1278
LOAD_CRSR_POS    = $0677 =  1655          rom.asm:985
LOCATE           = $2705 =  9989          rom.asm:5353
LOG              = $2A07 = 10759          rom.asm:5823
LOGOFONT         = $4B83 = 19331          rom.asm:9003
LOGTAB           = $29FA = 10746          rom.asm:5818
LOKFOR           = $14BA =  5306          rom.asm:2615
LOOPST           = $81AC = 33196          rom.asm:2020
LS               = $001C =    28          rom.asm:2103
LSMSG            = $12D7 =  4823          rom.asm:2515
LSPTR            = $13B2 =  5042          rom.asm:2542 (unused)
LST01            = $189A =  6298          rom.asm:3196
LST01H           = $189D =  6301          rom.asm:3197
LST03            = $18D7 =  6359          rom.asm:3217
LST04            = $18B4 =  6324          rom.asm:3205 (unused)
LST05            = $18E5 =  6373          rom.asm:3224
LST06            = $18BB =  6331          rom.asm:3207
LST07            = $1916 =  6422          rom.asm:3248
LST08            = $1913 =  6419          rom.asm:3247
LSTALL           = $18BF =  6335          rom.asm:3209
LSTBIN           = $81B1 = 33201          rom.asm:2023
LSTCSRSTA        = $81EA = 33258          rom.asm:2054
LSTKEYS          = $3958 = 14680          rom.asm:7999
LSTLP2           = $1922 =  6434          rom.asm:3257
LSTLP3           = $1925 =  6437          rom.asm:3258
LSTRAM           = $8194 = 33172          rom.asm:2014
LSTRND           = $809B = 32923          rom.asm:1992
LTSTND           = $1E01 =  7681          rom.asm:3945
LVKBRDCHK        = $0D75 =  3445          rom.asm:1836
LVKBRDCHK2       = $0D71 =  3441          rom.asm:1834
LVRXCHA          = $0131 =   305          rom.asm:159
LWIDTH           = $80A2 = 32930          rom.asm:1995
MAKINT           = $2635 =  9781          rom.asm:5220
MAKNUM           = $2DA0 = 11680          rom.asm:6405
MANLP            = $2CBF = 11455          rom.asm:6276
MATCH            = $1726 =  5926          rom.asm:2987
MCMD             = $0426 =  1062          rom.asm:624
MEMMSG           = $0FB0 =  4016          rom.asm:2206
MID              = $2586 =  9606          rom.asm:5116
MID1             = $2552 =  9554          rom.asm:5080
MIDNUM           = $25EA =  9706          rom.asm:5181
MINCDE           = $294D = 10573          rom.asm:5679
MINUS            = $1F86 =  8070          rom.asm:4148
MIXCLRS          = $31CE = 12750          rom.asm:6982
MIXCOL           = $81EF = 33263          rom.asm:7016
MKTMST           = $2359 =  9049          rom.asm:4762
MLDBLP           = $2C98 = 11416          rom.asm:6252
MLDEBC           = $2C90 = 11408          rom.asm:6247
MLOOP            = $0F0A =  3850          rom.asm:2143
MLP              = $3B48 = 15176          rom.asm:8352
MLP1             = $3B4F = 15183          rom.asm:8356
MLSP10           = $2B8D = 11149          rom.asm:6056
MNGSNDS          = $0BFF =  3071          rom.asm:1642
MNOASK           = $0F07 =  3847          rom.asm:2142
MO               = $0024 =    36          rom.asm:2107
MOD              = $2AA3 = 10915          rom.asm:5924
MOMSG            = $1327 =  4903          rom.asm:2519
MONOUT           = $3B12 = 15122          rom.asm:8266
MOPTR            = $13BA =  5050          rom.asm:2546 (unused)
MORDT            = $1E0D =  7693          rom.asm:3950
MORINP           = $1798 =  6040          rom.asm:3055
MOVBUF           = $160E =  5646          rom.asm:2817
MOVCRS           = $0650 =  1616          rom.asm:963
MOVDIR           = $172E =  5934          rom.asm:2995
MOVLP            = $14DF =  5343          rom.asm:2642
MOVSTR           = $14DC =  5340          rom.asm:2639
MOVUP            = $14D9 =  5337          rom.asm:2638
MRPRNT           = $1C84 =  7300          rom.asm:3755
MSGTXT1          = $033A =   826          rom.asm:510
MSGTXT2          = $0364 =   868          rom.asm:512
MSIZE            = $0EF7 =  3831          rom.asm:2136
MUL16            = $3B40 = 15168          rom.asm:8344
MUL8LP           = $2A73 = 10867          rom.asm:5878
MULLN2           = $2A3F = 10815          rom.asm:5849
MULT             = $2A46 = 10822          rom.asm:5853
MULT8            = $2A6A = 10858          rom.asm:5872
MULTEN           = $2D01 = 11521          rom.asm:6312
MULVAL           = $823D = 33341          rom.asm:2082
MVCRS2LFT        = $07A5 =  1957          rom.asm:1153
MVSTPT           = $1C36 =  7222          rom.asm:3712
NEDMOR           = $1DA0 =  7584          rom.asm:3894
NEGAFT           = $2E38 = 11832          rom.asm:6499
NEW              = $1653 =  5715          rom.asm:2872
NEWCRSRCOORD     = $0659 =  1625          rom.asm:969
NEXITM           = $1D37 =  7479          rom.asm:3846
NEXT             = $1E5C =  7772          rom.asm:3989
NEXT1            = $1E5F =  7775          rom.asm:3990
NF               = $0000 =     0          rom.asm:2089
NFERR            = $1533 =  5427          rom.asm:2698
NFMSG            = $11FC =  4604          rom.asm:2501
NFPTR            = $1396 =  5014          rom.asm:2528 (unused)
NLLCR            = $0000 =     0          rom.asm:1953
NM1              = $265E =  9822          rom.asm:5244
NMI              = $2643 =  9795          rom.asm:5231
NMI2             = $266F =  9839          rom.asm:5252
NMIDINT          = $267A =  9850          rom.asm:5261
NMIEINT          = $2673 =  9843          rom.asm:5257
NMIFLG           = $80A8 = 32936          rom.asm:2000
NMIINT           = $267D =  9853          rom.asm:5262
NMIUSR           = $8061 = 32865          rom.asm:1982
NMIVR1           = $2689 =  9865          rom.asm:5273
NOBEEP           = $0BD1 =  3025          rom.asm:1611
NOBPDAT          = $0BED =  3053          rom.asm:1625
NOCHNG           = $171E =  5918          rom.asm:2982
NOENED           = $2E10 = 11792          rom.asm:6478
NOGD             = $335B = 13147          rom.asm:7214
NOISUP           = $2820 = 10272          rom.asm:5507
NOKEYPRSD        = $0CE6 =  3302          rom.asm:1768
NOLIN            = $1A97 =  6807          rom.asm:3484
NOMADD           = $2A84 = 10884          rom.asm:5889
NOMLAD           = $2CA6 = 11430          rom.asm:6260
NOPMPT           = $1D7B =  7547          rom.asm:3872
NORMAL           = $2978 = 10616          rom.asm:5714
NOS1             = $284A = 10314          rom.asm:5525
NOS2             = $285C = 10332          rom.asm:5537
NOS3             = $2874 = 10356          rom.asm:5555
NOSPC            = $1715 =  5909          rom.asm:2977
NOSUB7           = $3A9E = 15006          rom.asm:8185
NOSWAP           = $2927 = 10535          rom.asm:5660
NOSYSPR          = $26BB =  9915          rom.asm:5302
NOTAMP           = $1F5B =  8027          rom.asm:4129
NOTFULL          = $0141 =   321          rom.asm:173
NOTRDWRAP        = $01E2 =   482          rom.asm:281
NOTSTR           = $20E9 =  8425          rom.asm:4372
NOTWRAP          = $014D =   333          rom.asm:179
NOXOR            = $2615 =  9749          rom.asm:5204
NSCFOR           = $20F9 =  8441          rom.asm:4380
NULFLG           = $80A4 = 32932          rom.asm:1997
NUMASC           = $2D49 = 11593          rom.asm:6361
NXTARY           = $21B0 =  8624          rom.asm:4493
NXTBYT           = $1704 =  5892          rom.asm:2967
NXTCHAR          = $0A27 =  2599          rom.asm:1486
NXTCHR           = $1745 =  5957          rom.asm:3007
NXTDAT           = $81C1 = 33217          rom.asm:2032
NXTDTA           = $1BD4 =  7124          rom.asm:3658
NXTITM           = $1D98 =  7576          rom.asm:3889
NXTLN            = $194C =  6476          rom.asm:3279
NXTOPR           = $81B5 = 33205          rom.asm:2026
NXTSTL           = $1BDB =  7131          rom.asm:3663
NXTSTT           = $1BDE =  7134          rom.asm:3666
OD               = $0006 =     6          rom.asm:2092
ODMSG            = $1229 =  4649          rom.asm:2504
ODPTR            = $139C =  5020          rom.asm:2531 (unused)
OKMSG            = $14AB =  5291          rom.asm:2610
OM               = $000C =    12          rom.asm:2095
OMERR            = $1502 =  5378          rom.asm:2667
OMMSG            = $1254 =  4692          rom.asm:2507
OMPTR            = $13A2 =  5026          rom.asm:2534 (unused)
ON               = $1C46 =  7238          rom.asm:3724
ONGO             = $1C55 =  7253          rom.asm:3732
ONGOLP           = $1C56 =  7254          rom.asm:3733
ONJMP            = $1A1A =  6682          rom.asm:3400
OPNPAR           = $1EB5 =  7861          rom.asm:4039
OPNQT            = $39E4 = 14820          rom.asm:8071
OPNQT1           = $39FA = 14842          rom.asm:8081
OPRND            = $1F30 =  7984          rom.asm:4112
OS               = $001A =    26          rom.asm:2102
OSMSG            = $12C3 =  4803          rom.asm:2514
OSPTR            = $13B0 =  5040          rom.asm:2541 (unused)
OTKLN            = $1786 =  6022          rom.asm:3046
OTPORT           = $8068 = 32872          rom.asm:1985
OUTC             = $181A =  6170          rom.asm:3128
OUTEXP           = $2E01 = 11777          rom.asm:6468
OUTIT            = $1800 =  6144          rom.asm:3106
OUTNBS           = $1803 =  6147          rom.asm:3108
OUTNCR           = $3B2F = 15151          rom.asm:8287
OUTSUB           = $8067 = 32871          rom.asm:1984
OUTWRD           = $193E =  6462          rom.asm:3272
OV               = $000A =    10          rom.asm:2094
OVERR            = $153C =  5436          rom.asm:2704
OVMSG            = $124B =  4683          rom.asm:2506
OVPTR            = $13A0 =  5024          rom.asm:2533 (unused)
OVTST1           = $2B80 = 11136          rom.asm:6048
OVTST2           = $2B85 = 11141          rom.asm:6051
OVTST3           = $2B86 = 11142          rom.asm:6052
PADD             = $2D25 = 11557          rom.asm:6337
PAND             = $1FF5 =  8181          rom.asm:4217
PAND1            = $201A =  8218          rom.asm:4240 (unused)
PARBT            = $81FB = 33275          rom.asm:7646
PASSA            = $229B =  8859          rom.asm:4647
PAUSE            = $309A = 12442          rom.asm:6804
PBUFF            = $8230 = 33328          rom.asm:2081
PEEK             = $26CB =  9931          rom.asm:5314
PEND             = $1A7C =  6780          rom.asm:3470
PHLTFP           = $2BE2 = 11234          rom.asm:6112
PIO_CA           = $0002 =     2          rom.asm:32 (unused)
PIO_CB           = $0003 =     3          rom.asm:33
PIO_DA           = $0000 =     0          rom.asm:30 (unused)
PIO_DB           = $0001 =     1          rom.asm:31
PKEPRMS          = $26DF =  9951          rom.asm:5329
PLOT             = $3313 = 13075          rom.asm:7175
PLTCRL           = $354C = 13644          rom.asm:7462
PLUCDE           = $29B2 = 10674          rom.asm:5756
PNORM            = $2980 = 10624          rom.asm:5722
PNT2VD           = $0D6E =  3438          rom.asm:1833
PNTEND           = $3310 = 13072          rom.asm:7170 (unused)
POINT            = $32D4 = 13012          rom.asm:7141
POKE             = $26F5 =  9973          rom.asm:5339
POPAF            = $23DF =  9183          rom.asm:4840
POPHL            = $2509 =  9481          rom.asm:5031
POPHRT           = $2A94 = 10900          rom.asm:5903
POPNOK           = $1586 =  5510          rom.asm:2740
POR              = $1FF8 =  8184          rom.asm:4219
POR1             = $201F =  8223          rom.asm:4245
POS              = $2298 =  8856          rom.asm:4646
POSINT           = $1ADF =  6879          rom.asm:3525
POS_CURSOR       = $0646 =  1606          rom.asm:957
POS_TB_CRS_32    = $0979 =  2425          rom.asm:1422
POS_TB_CRS_40    = $09A9 =  2473          rom.asm:1426
POUT             = $25FB =  9723          rom.asm:5192
POWER            = $2E46 = 11846          rom.asm:6507
POWER1           = $2E56 = 11862          rom.asm:6515
POWER2           = $2E73 = 11891          rom.asm:6533
POWERS           = $2E26 = 11814          rom.asm:6492
PRINT            = $1C88 =  7304          rom.asm:3757
PRITAB           = $11DE =  4574          rom.asm:2468
PRNTCRLF         = $1CEB =  7403          rom.asm:3806
PRNTFNK          = $0DB3 =  3507          rom.asm:1873
PRNTFNKEY        = $0D76 =  3446          rom.asm:1838
PRNTHL           = $2D3E = 11582          rom.asm:6355
PRNTLP           = $1C8B =  7307          rom.asm:3758
PRNTNB           = $1CCE =  7374          rom.asm:3790
PRNTOK           = $1587 =  5511          rom.asm:2743
PRNTRETURN       = $0958 =  2392          rom.asm:1399
PRNTST           = $1CD2 =  7378          rom.asm:3792
PRNTVIDEO        = $81EB = 33259          rom.asm:2055
PRNUMS           = $23A9 =  9129          rom.asm:4809
PROCES           = $17B1 =  6065          rom.asm:3066
PROGND           = $81BB = 33211          rom.asm:2029
PROGST           = $8240 = 33344          rom.asm:2083
PROMPT           = $1696 =  5782          rom.asm:2909
PRS              = $23AA =  9130          rom.asm:4810
PRS1             = $23AD =  9133          rom.asm:4811
PRSLP            = $23B4 =  9140          rom.asm:4814
PRTCHR           = $39AD = 14765          rom.asm:8042
PRTCKEY          = $39FC = 14844          rom.asm:8084
PRTEND           = $3A09 = 14857          rom.asm:8091
PRTK1            = $39FD = 14845          rom.asm:8085
PRTK2            = $396C = 14700          rom.asm:8011 (unused)
PRTK3            = $3995 = 14741          rom.asm:8028
PRTK4            = $396A = 14698          rom.asm:8010
PRTNUM           = $81F7 = 33271          rom.asm:7643
PSG_DAT          = $0041 =    65          rom.asm:53
PSG_REG          = $0040 =    64          rom.asm:52
PSUB             = $2908 = 10504          rom.asm:5641
PTCHR1           = $39CA = 14794          rom.asm:8056
PTLN             = $1582 =  5506          rom.asm:2737
PTRLP            = $161B =  5659          rom.asm:2826
PUTBUF           = $17EC =  6124          rom.asm:3095
PUTCHRBUF        = $0D61 =  3425          rom.asm:1828
PUTCHRBUF1       = $0DA8 =  3496          rom.asm:1868
PUTCRSCHR        = $0765 =  1893          rom.asm:1116
PUTCTL           = $17F1 =  6129          rom.asm:3097
PUTFID           = $19EE =  6638          rom.asm:3372
PXLSET           = $335F = 13151          rom.asm:7218
PXOR             = $1FFD =  8189          rom.asm:4222
PXOR1            = $2027 =  8231          rom.asm:4251
QTSTLP           = $236F =  9071          rom.asm:4779
QTSTR            = $2369 =  9065          rom.asm:4775
QUARTR           = $2FDF = 12255          rom.asm:6710
RADIUS           = $81FB = 33275          rom.asm:7390
RAWPRINT         = $0229 =   553          rom.asm:336
READ             = $1D93 =  7571          rom.asm:3886
READFG           = $81B2 = 33202          rom.asm:2024
READKBLN         = $0C4B =  3147          rom.asm:1688
READ_VIDEO_LOC   = $060A =  1546          rom.asm:907
READ_VSTAT       = $063F =  1599          rom.asm:950
RECWRD           = $307D = 12413          rom.asm:6783 (unused)
REDO             = $1D3E =  7486          rom.asm:3850
REM              = $1BD7 =  7127          rom.asm:3661
RESDIV           = $2B32 = 11058          rom.asm:5992
RESEED           = $2F7D = 12157          rom.asm:6666
RESET            = $3B15 = 15125          rom.asm:8269
RESTMR           = $0329 =   809          rom.asm:500
RESTNL           = $1A57 =  6743          rom.asm:3441
RESTOR           = $1A42 =  6722          rom.asm:3430
RESZER           = $2973 = 10611          rom.asm:5710
RETADR           = $2160 =  8544          rom.asm:4440
RETINT           = $2BBB = 11195          rom.asm:6084
RETLIN           = $1BCF =  7119          rom.asm:3655
RETNAD           = $172A =  5930          rom.asm:2991
RETNUL           = $2163 =  8547          rom.asm:4444
RETNUM           = $1F92 =  8082          rom.asm:4153
RETREL           = $2BAD = 11181          rom.asm:6074
RETURN           = $1BB0 =  7088          rom.asm:3639
RG               = $0004 =     4          rom.asm:2091
RGMSG            = $1214 =  4628          rom.asm:2503
RGPTR            = $139A =  5018          rom.asm:2530 (unused)
RIGHT            = $257C =  9596          rom.asm:5109
RIGHT1           = $2550 =  9552          rom.asm:5078
RINPUT           = $80AA = 32938          rom.asm:2002
RLTLP            = $1ED5 =  7893          rom.asm:4055
RND              = $2F1C = 12060          rom.asm:6613
RND1             = $2F58 = 12120          rom.asm:6644
RND2             = $2F74 = 12148          rom.asm:6662
RNDTAB           = $2F85 = 12165          rom.asm:6673
RNGTST           = $2E13 = 11795          rom.asm:6482
RONDB            = $2994 = 10644          rom.asm:5734
RONDUP           = $2993 = 10643          rom.asm:5733
ROUND            = $28FB = 10491          rom.asm:5635
RPGPNT           = $326A = 12906          rom.asm:7076
RPT100           = $0514 =  1300          rom.asm:750
RPT101           = $04BB =  1211          rom.asm:698
RPT102           = $04BE =  1214          rom.asm:700
RPT103           = $04D4 =  1236          rom.asm:713
RPT104           = $04DC =  1244          rom.asm:717
RPTCL1           = $3510 = 13584          rom.asm:7432
RPTCRL           = $34FD = 13565          rom.asm:7426
RPTCVB1          = $3690 = 13968          rom.asm:7602
RPTCVB2          = $3699 = 13977          rom.asm:7607
RPTDRW           = $3443 = 13379          rom.asm:7339
RPTEMPTYBUF      = $0578 =  1400          rom.asm:817
RPTEMPTYROW      = $08C2 =  2242          rom.asm:1314
RPTFLL1          = $05E0 =  1504          rom.asm:877
RPTKBDRD         = $0CA0 =  3232          rom.asm:1732
RPTLDCL          = $31AF = 12719          rom.asm:6958
RPTNLLSRC        = $08EC =  2284          rom.asm:1343
RPTNLLSRC2       = $0917 =  2327          rom.asm:1367
RPTPS            = $30A8 = 12456          rom.asm:6812
RPTRSSR          = $36E5 = 14053          rom.asm:7670
RPTWLCMBP        = $0BD7 =  3031          rom.asm:1614
RPVOLCG          = $2778 = 10104          rom.asm:5414
RSCALE           = $2D1F = 11551          rom.asm:6335
RST00            = $0000 =     0          rom.asm:75 (unused)
RST08            = $0008 =     8          rom.asm:81 (unused)
RST10            = $0010 =    16          rom.asm:96 (unused)
RST18            = $0018 =    24          rom.asm:102 (unused)
RSTCHRCRS        = $066E =  1646          rom.asm:979
RSTPSG           = $0BAE =  2990          rom.asm:1594
RSTSER1          = $36D8 = 14040          rom.asm:7662
RSTSTR           = $259F =  9631          rom.asm:5129
RSTVDPRAMREG     = $09F3 =  2547          rom.asm:1450
RUN              = $1B6D =  7021          rom.asm:3602
RUNCNT           = $19F2 =  6642          rom.asm:3376
RUNFST           = $165F =  5727          rom.asm:2881
RUNLIN           = $1B91 =  7057          rom.asm:3622
RXA              = $01CD =   461          rom.asm:270
RXA_EXIT         = $01F3 =   499          rom.asm:288
RXEND            = $374D = 14157          rom.asm:7727
RX_CHA_AVAIL     = $0100 =   256          rom.asm:138
SA               = $002E =    46          rom.asm:2112
SAMSG            = $1373 =  4979          rom.asm:2524
SAPTR            = $13C4 =  5060          rom.asm:2551 (unused)
SAVEXP           = $2974 = 10612          rom.asm:5711
SAVSTP           = $19E5 =  6629          rom.asm:3365
SAVSTR           = $2344 =  9028          rom.asm:4746
SBSCPT           = $216E =  8558          rom.asm:4450
SC               = $002C =    44          rom.asm:2111
SCALE            = $29D2 = 10706          rom.asm:5788
SCALLP           = $29D4 = 10708          rom.asm:5789
SCALMI           = $2CEA = 11498          rom.asm:6297
SCALPL           = $2D00 = 11520          rom.asm:6311
SCERR            = $38A8 = 14504          rom.asm:7895
SCERR1           = $38A4 = 14500          rom.asm:7892
SCMSG            = $135E =  4958          rom.asm:2523
SCNEND           = $247B =  9339          rom.asm:4936
SCPTLP           = $2174 =  8564          rom.asm:4454
SCPTR            = $13C2 =  5058          rom.asm:2550 (unused)
SCREEN           = $30B9 = 12473          rom.asm:6831
SCROLLNXTRW      = $086C =  2156          rom.asm:1270
SCROLLUP         = $0853 =  2131          rom.asm:1258
SCR_CURS_X       = $81E4 = 33252          rom.asm:2048
SCR_CURS_Y       = $81E5 = 33253          rom.asm:2049
SCR_CUR_NX       = $81E6 = 33254          rom.asm:2050
SCR_CUR_NY       = $81E7 = 33255          rom.asm:2051
SCR_MODE         = $81E0 = 33248          rom.asm:2046
SCR_NAM_TB       = $81E2 = 33250          rom.asm:2047
SCR_ORG_CHR      = $81E8 = 33256          rom.asm:2052
SCR_SIZE_H       = $81DF = 33247          rom.asm:2045
SCR_SIZE_W       = $81DE = 33246          rom.asm:2044
SCVDP            = $30E5 = 12517          rom.asm:6848
SEARCH           = $16F2 =  5874          rom.asm:2953
SEED             = $8078 = 32888          rom.asm:1991
SENDCHRPTRNS     = $0A2B =  2603          rom.asm:1488
SENDSND          = $0BD4 =  3028          rom.asm:1612
SERABITS         = $822F = 33327          rom.asm:2080
SERBUF_START     = $8000 = 32768          rom.asm:63
SERIAL           = $36BE = 14014          rom.asm:7649
SERIALS_EN       = $822E = 33326          rom.asm:2079
SERLED           = $370E = 14094          rom.asm:7691
SER_BUFSIZE      = $0058 =    88          rom.asm:59
SER_EMPTYSIZE    = $0005 =     5          rom.asm:61
SER_FULLSIZE     = $0050 =    80          rom.asm:60
SETBEEP          = $051E =  1310          rom.asm:759
SETBRCL          = $31BA = 12730          rom.asm:6966
SETCRSRY         = $072C =  1836          rom.asm:1080
SETCSRCOORDS     = $072D =  1837          rom.asm:1081
SETIO            = $261F =  9759          rom.asm:5211
SETLIT           = $173C =  5948          rom.asm:3003
SETNAMETABLE     = $05D7 =  1495          rom.asm:872
SETPAR           = $382C = 14380          rom.asm:7835
SETPTR           = $1616 =  5654          rom.asm:2823
SETSER           = $37BA = 14266          rom.asm:7777
SETSNDREG        = $0BF5 =  3061          rom.asm:1629
SETTOP           = $0F2E =  3886          rom.asm:2168
SETVDP           = $30CC = 12492          rom.asm:6839 (unused)
SETVDPADRS       = $05EA =  1514          rom.asm:886
SET_GFX_MODE     = $09F8 =  2552          rom.asm:1457
SET_GFX_MODE2    = $0A00 =  2560          rom.asm:1461
SET_P1           = $37E9 = 14313          rom.asm:7797
SFTPRG           = $15E0 =  5600          rom.asm:2786
SGN              = $2BB3 = 11187          rom.asm:6081
SGNEXP           = $1FE5 =  8165          rom.asm:4203
SGNRES           = $81CD = 33229          rom.asm:2037
SHOW_LOGO        = $0492 =  1170          rom.asm:679
SHRITE           = $29E1 = 10721          rom.asm:5797
SHRLP            = $29E4 = 10724          rom.asm:5799
SHRT1            = $29E8 = 10728          rom.asm:5803
SIGNON           = $0F7F =  3967          rom.asm:2202
SIGNS            = $2C0A = 11274          rom.asm:6143
SIN              = $2F97 = 12183          rom.asm:6679
SIN1             = $2FC7 = 12231          rom.asm:6699
SINTAB           = $2FE3 = 12259          rom.asm:6712
SIOBFR           = $81FD = 33277          rom.asm:7648
SIO_A_DI         = $0181 =   385          rom.asm:219
SIO_A_EI         = $018D =   397          rom.asm:228
SIO_A_SETS       = $02FA =   762          rom.asm:457
SIO_B_SETS       = $0300 =   768          rom.asm:463 (unused)
SIO_CA           = $0022 =    34          rom.asm:42
SIO_CB           = $0023 =    35          rom.asm:43
SIO_DA           = $0020 =    32          rom.asm:44
SIO_DB           = $0021 =    33          rom.asm:45 (unused)
SIXDIG           = $2D66 = 11622          rom.asm:6375
SMPVAR           = $240F =  9231          rom.asm:4864
SMSER1           = $2EFB = 12027          rom.asm:6591
SN               = $0002 =     2          rom.asm:2090
SND1             = $27E4 = 10212          rom.asm:5473
SND2VID          = $184D =  6221          rom.asm:3158
SNDCHRTOBFR      = $0939 =  2361          rom.asm:1383
SNDCLRSET        = $05CD =  1485          rom.asm:863
SNDKEYTOBFR      = $0D4F =  3407          rom.asm:1820
SNDLOGPT         = $0549 =  1353          rom.asm:789
SNDOVR           = $2819 = 10265          rom.asm:5503
SNDREGCFG        = $0BBB =  3003          rom.asm:1603
SNERR            = $152D =  5421          rom.asm:2694
SNMSG            = $120D =  4621          rom.asm:2502
SNPTR            = $1398 =  5016          rom.asm:2529 (unused)
SOUND            = $278F = 10127          rom.asm:5432
SPC              = $0020 =    32          rom.asm:1967
SPCFST           = $2D57 = 11607          rom.asm:6367
SPCLP            = $1D2F =  7471          rom.asm:3842
SPEC_RX_CONDITON = $019B =   411          rom.asm:241
SQR              = $2E3D = 11837          rom.asm:6503
SRCHLIN          = $195A =  6490          rom.asm:3285
SRCHLN           = $1633 =  5683          rom.asm:2845
SRCHLP           = $1636 =  5686          rom.asm:2846
SREG             = $2737 = 10039          rom.asm:5381
SRPT2            = $3708 = 14088          rom.asm:7688
SRTTXT           = $81F1 = 33265          rom.asm:1327
SSTAT            = $28A7 = 10407          rom.asm:5586
SSTSA            = $24D7 =  9431          rom.asm:4996
ST               = $001E =    30          rom.asm:2104
STACK            = $813B = 33083          rom.asm:2009
STAKFP           = $2BD5 = 11221          rom.asm:6101
STALL            = $1A6B =  6763          rom.asm:3458
STARTB           = $0ECE =  3790          rom.asm:2118
STARTEMPTY       = $05C9 =  1481          rom.asm:861
STKTHS           = $1F19 =  7961          rom.asm:4096
STLOOK           = $82A4 = 33444          rom.asm:2084
STMSG            = $12E7 =  4839          rom.asm:2516
STOP             = $1A7A =  6778          rom.asm:3468
STORED           = $1B4A =  6986          rom.asm:3582
STPBT            = $81FC = 33276          rom.asm:7647
STPOOL           = $2452 =  9298          rom.asm:4901
STPTR            = $13B4 =  5044          rom.asm:2543 (unused)
STR              = $2334 =  9012          rom.asm:4739
STR1             = $233A =  9018          rom.asm:4741
STRADD           = $2455 =  9301          rom.asm:4903
STRBOT           = $81A8 = 33192          rom.asm:2018
STRE2            = $3440 = 13376          rom.asm:7338 (unused)
STRENT           = $1DEA =  7658          rom.asm:3933
STRPAR           = $384B = 14411          rom.asm:7851
STRSPC           = $80AD = 32941          rom.asm:2003
STTLIN           = $1CD9 =  7385          rom.asm:3796
SUBCDE           = $290A = 10506          rom.asm:5643
SUBPHL           = $2904 = 10500          rom.asm:5639
SUMLP            = $2F04 = 12036          rom.asm:6596
SUMSER           = $2EEC = 12012          rom.asm:6584
SUPTLZ           = $2DE5 = 11749          rom.asm:6452
SUP_BPS          = $3883 = 14467          rom.asm:7887
SVNAM2           = $20CD =  8397          rom.asm:4359
SVSTAD           = $2362 =  9058          rom.asm:4767
SX               = $81FF = 33279          rom.asm:7271
SY               = $8201 = 33281          rom.asm:7272
SYS              = $269D =  9885          rom.asm:5290
SYSRET           = $26C9 =  9929          rom.asm:5309
TAN              = $2FF8 = 12280          rom.asm:6719
TEMPSTACK        = $818D = 33165          rom.asm:69
TESTALT          = $0CCF =  3279          rom.asm:1757
TESTCTRL         = $0CDC =  3292          rom.asm:1763
TESTOS           = $23E1 =  9185          rom.asm:4843
TESTR            = $23C3 =  9155          rom.asm:4823
TM               = $0018 =    24          rom.asm:2101
TMERR            = $153F =  5439          rom.asm:2706
TMMSG            = $12B4 =  4788          rom.asm:2513
TMPBFR1          = $81EF = 33263          rom.asm:2059
TMPBFR2          = $81F1 = 33265          rom.asm:2060
TMPBFR3          = $81F3 = 33267          rom.asm:2061
TMPBFR4          = $81F5 = 33269          rom.asm:2062
TMPKEYBFR        = $822B = 33323          rom.asm:2074
TMPSTR           = $81A4 = 33188          rom.asm:2017
TMPTR            = $13AE =  5038          rom.asm:2540 (unused)
TMR              = $2254 =  8788          rom.asm:4607
TMRCNT           = $81CE = 33230          rom.asm:2038
TMSTPL           = $8198 = 33176          rom.asm:2016
TMSTPT           = $8196 = 33174          rom.asm:2015
TOPOOL           = $2548 =  9544          rom.asm:5073
TOSTRA           = $24E0 =  9440          rom.asm:5005
TRYAGN           = $2DC0 = 11712          rom.asm:6425
TSALP            = $24E1 =  9441          rom.asm:5006
TSTBIT           = $3B28 = 15144          rom.asm:8280 (unused)
TSTBRK           = $1A5D =  6749          rom.asm:3447
TSTMEM           = $0F1C =  3868          rom.asm:2156
TSTNUM           = $1EAA =  7850          rom.asm:4031
TSTOPL           = $238A =  9098          rom.asm:4795
TSTRED           = $202C =  8236          rom.asm:4257
TSTREM           = $173F =  5951          rom.asm:3004
TSTSGN           = $2BA4 = 11172          rom.asm:6069
TSTSPC           = $1960 =  6496          rom.asm:3292
TSTSTR           = $1EAB =  7851          rom.asm:4032
TTYLIN           = $178F =  6031          rom.asm:3051
TXA              = $01F7 =   503          rom.asm:296
TXA_EXIT         = $0210 =   528          rom.asm:310
TXTMD            = $03A3 =   931          rom.asm:559 (unused)
TX_EMP           = $0218 =   536          rom.asm:319
TYPE             = $8192 = 33170          rom.asm:2012
UF               = $0022 =    34          rom.asm:2106
UFERR            = $1539 =  5433          rom.asm:2702
UFMSG            = $1311 =  4881          rom.asm:2518
UFPTR            = $13B8 =  5048          rom.asm:2545 (unused)
UL               = $000E =    14          rom.asm:2096
ULERR            = $1BAB =  7083          rom.asm:3636
ULMSG            = $1262 =  4706          rom.asm:2508
ULPTR            = $13A4 =  5028          rom.asm:2535 (unused)
UNITY            = $29F6 = 10742          rom.asm:5816
UPDATA           = $1A58 =  6744          rom.asm:3442
USR              = $8064 = 32868          rom.asm:1983
VAL              = $25B6 =  9654          rom.asm:5148
VAL1             = $25D4 =  9684          rom.asm:5168
VAL2             = $25DE =  9694          rom.asm:5172
VAL3             = $25E1 =  9697          rom.asm:5173
VALIDX           = $3678 = 13944          rom.asm:7579
VALIDY           = $367D = 13949          rom.asm:7585
VAREND           = $81BD = 33213          rom.asm:2030
VDPMODESET       = $0A35 =  2613          rom.asm:1502
VDPMODESET1      = $0A3D =  2621          rom.asm:1511 (unused)
VDPMODESET2      = $0A45 =  2629          rom.asm:1521 (unused)
VDPMODESETEX2    = $0A55 =  2645          rom.asm:1541 (unused)
VDPMODESETMC     = $0A4D =  2637          rom.asm:1531 (unused)
VDP_DAT          = $0030 =    48          rom.asm:48
VDP_SET          = $0032 =    50          rom.asm:49
VIDEOBUFF        = $81F7 = 33271          rom.asm:2063
VIDTMP1          = $821F = 33311          rom.asm:2064
VIDTMP2          = $8221 = 33313          rom.asm:2065
VOLCH            = $2784 = 10116          rom.asm:5421
VOLUME           = $2756 = 10070          rom.asm:5399
VPEEK            = $26D2 =  9938          rom.asm:5319
VPOKE            = $26FA =  9978          rom.asm:5344
VREG             = $2880 = 10368          rom.asm:5564
VSTAT            = $289C = 10396          rom.asm:5579
WAIT             = $2601 =  9729          rom.asm:5195
WAITLP           = $2616 =  9750          rom.asm:5205
WARM             = $0ECB =  3787          rom.asm:2116
WARMST           = $0F66 =  3942          rom.asm:2195
WIDTH            = $3070 = 12400          rom.asm:6774
WLCBPDAT         = $0BE5 =  3045          rom.asm:1624
WLCMBEEP         = $0BCB =  3019          rom.asm:1609
WORDS            = $0FFD =  4093          rom.asm:2255
WORDTB           = $1178 =  4472          rom.asm:2368
WRITEBUF         = $08A7 =  2215          rom.asm:1299
WRITE_VIDEO_LOC  = $061F =  1567          rom.asm:924
WRITE_VREG       = $0634 =  1588          rom.asm:941
WRKSPC           = $805E = 32862          rom.asm:1981
WRTSND           = $286B = 10347          rom.asm:5546
WRTSNDREG        = $0BFA =  3066          rom.asm:1634
WTSPC            = $1966 =  6502          rom.asm:3295
X1               = $81EF = 33263          rom.asm:7265
X1GR             = $33EF = 13295          rom.asm:7311
X2               = $81F7 = 33271          rom.asm:7267
XC               = $81F7 = 33271          rom.asm:7388
XI               = $81FD = 33277          rom.asm:7391
XY2HL            = $3367 = 13159          rom.asm:7226
Y1               = $81F1 = 33265          rom.asm:7266
Y1GR             = $3416 = 13334          rom.asm:7324
Y2               = $81F9 = 33273          rom.asm:7268
YC               = $81F9 = 33273          rom.asm:7389
YI               = $81FF = 33279          rom.asm:7392
ZDATA            = $0083 =   131          rom.asm:2433
ZDINT            = $00BF =   191          rom.asm:2453 (unused)
ZDIV             = $00BD =   189          rom.asm:2451 (unused)
ZEND             = $0080 =   128          rom.asm:2431
ZEQUAL           = $00C5 =   197          rom.asm:2456
ZERARY           = $220F =  8719          rom.asm:4553
ZERBYT           = $14AA =  5290          rom.asm:2609
ZEROLP           = $2152 =  8530          rom.asm:4431
ZEROSUP          = $3ABC = 15036          rom.asm:8206
ZFN              = $00B5 =   181          rom.asm:2442
ZFOR             = $0081 =   129          rom.asm:2432
ZGOSUB           = $008C =   140          rom.asm:2435
ZGOTO            = $0088 =   136          rom.asm:2434
ZGTR             = $00C4 =   196          rom.asm:2455
ZLEFT            = $00E5 =   229          rom.asm:2462
ZLTH             = $00C6 =   198          rom.asm:2457
ZMINUS           = $00BB =   187          rom.asm:2449
ZMOD             = $00BE =   190          rom.asm:2452 (unused)
ZNEW             = $00B2 =   178          rom.asm:2438
ZNOT             = $00B8 =   184          rom.asm:2445
ZONELP           = $1D08 =  7432          rom.asm:3820
ZOR              = $00C3 =   195          rom.asm:2454
ZPLUS            = $00BA =   186          rom.asm:2448
ZPOINT           = $00DD =   221          rom.asm:2460
ZPRINT           = $00AC =   172          rom.asm:2437
ZREM             = $008E =   142          rom.asm:2436
ZSGN             = $00C7 =   199          rom.asm:2459
ZSPC             = $00B6 =   182          rom.asm:2443
ZSTEP            = $00B9 =   185          rom.asm:2446
ZTAB             = $00B3 =   179          rom.asm:2440
ZTHEN            = $00B7 =   183          rom.asm:2444
ZTIMES           = $00BC =   188          rom.asm:2450 (unused)
ZTO              = $00B4 =   180          rom.asm:2441
_end             = $4C43 = 19523          rom.asm:73 (unused)
_size            = $4C43 = 19523          rom.asm:73 (unused)
absHL            = $3B5A = 15194          rom.asm:8376
basicStarted     = $805D = 32861          rom.asm:67
bufWrap          = $0058 =    88          rom.asm:68
initCTC          = $0304 =   772          rom.asm:472
initPSG          = $0B9D =  2973          rom.asm:1585
initVDP          = $037E =   894          rom.asm:539
negHL            = $3B5D = 15197          rom.asm:8378
serBufUsed       = $805C = 32860          rom.asm:66
serInPtr         = $8058 = 32856          rom.asm:64
serRdPtr         = $805A = 32858          rom.asm:65


total time: 0.1380 sec.
no errors
